
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800768c  0800768c  0000868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007988  08007988  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007988  08007988  00008988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007990  08007990  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007994  08007994  00008994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007998  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          000006bc  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000724  20000724  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115ad  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fb  00000000  00000000  0001a645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0001cf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4e  00000000  00000000  0001ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223f6  00000000  00000000  0001e91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001415b  00000000  00000000  00040d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4cf  00000000  00000000  00054e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012133e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004734  00000000  00000000  00121384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00125ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007674 	.word	0x08007674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007674 	.word	0x08007674

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <moveMotor>:
#include "motors.h"

void moveMotor(struct Motors* motor){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

	if (motor->STEPS > 0){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	dd43      	ble.n	8000348 <moveMotor+0x98>
		if(!motor->moving){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80002c6:	f083 0301 	eor.w	r3, r3, #1
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d00c      	beq.n	80002ea <moveMotor+0x3a>
			HAL_GPIO_WritePin(motor->EN_PORT, motor->EN_PIN, GPIO_PIN_RESET); // Set EN high to enable the driver
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69d8      	ldr	r0, [r3, #28]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2200      	movs	r2, #0
 80002dc:	4619      	mov	r1, r3
 80002de:	f001 fe8f 	bl	8002000 <HAL_GPIO_WritePin>
			motor->moving = true;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2201      	movs	r2, #1
 80002e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET); // Set DIR high for one direction
        } else {
            HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET); // Set DIR low for another direction
        }
*/
	  motor->TIMER-> CCR1 = clamp(motor->SPEED,1,200);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	22c8      	movs	r2, #200	@ 0xc8
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f82c 	bl	8000350 <clamp>
 80002f8:	4602      	mov	r2, r0
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	635a      	str	r2, [r3, #52]	@ 0x34

	  // Wait for the specified duration
	  HAL_Delay(MOVE_DURATION);
 8000300:	200a      	movs	r0, #10
 8000302:	f001 fb47 	bl	8001994 <HAL_Delay>

	  // Stop the motor
	  motor->TIMER-> CCR1 = 0;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	2200      	movs	r2, #0
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34

	  // Wait for a moment
	  HAL_Delay(MOVE_DURATION);
 800030e:	200a      	movs	r0, #10
 8000310:	f001 fb40 	bl	8001994 <HAL_Delay>


      motor->STEPS -= (motor->STEPS > 0) ? 1 : -1;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	691a      	ldr	r2, [r3, #16]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	dd01      	ble.n	8000324 <moveMotor+0x74>
 8000320:	2301      	movs	r3, #1
 8000322:	e001      	b.n	8000328 <moveMotor+0x78>
 8000324:	f04f 33ff 	mov.w	r3, #4294967295
 8000328:	1ad2      	subs	r2, r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	611a      	str	r2, [r3, #16]

      if(motor->STEPS == 0){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d108      	bne.n	8000348 <moveMotor+0x98>
          HAL_GPIO_WritePin(motor->EN_PORT, motor->EN_PIN, GPIO_PIN_SET);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	69d8      	ldr	r0, [r3, #28]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	b29b      	uxth	r3, r3
 8000340:	2201      	movs	r2, #1
 8000342:	4619      	mov	r1, r3
 8000344:	f001 fe5c 	bl	8002000 <HAL_GPIO_WritePin>
      }
	}
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <clamp>:

// Function to clamp values for the duty cycle/ speed
int clamp(int value, int min, int max) {
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	da01      	bge.n	8000368 <clamp+0x18>
        return min;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	e006      	b.n	8000376 <clamp+0x26>
    } else if (value > max) {
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	dd01      	ble.n	8000374 <clamp+0x24>
        return max;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	e000      	b.n	8000376 <clamp+0x26>
    } else {
        return value;
 8000374:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08a      	sub	sp, #40	@ 0x28
 8000388:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039a:	4b44      	ldr	r3, [pc, #272]	@ (80004ac <MX_GPIO_Init+0x128>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a43      	ldr	r2, [pc, #268]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b41      	ldr	r3, [pc, #260]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003ae:	613b      	str	r3, [r7, #16]
 80003b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b2:	4b3e      	ldr	r3, [pc, #248]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a3d      	ldr	r2, [pc, #244]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b3b      	ldr	r3, [pc, #236]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a37      	ldr	r2, [pc, #220]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a31      	ldr	r2, [pc, #196]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_GPIO_Init+0x128>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2106      	movs	r1, #6
 80003fe:	482c      	ldr	r0, [pc, #176]	@ (80004b0 <MX_GPIO_Init+0x12c>)
 8000400:	f001 fdfe 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 8000404:	2200      	movs	r2, #0
 8000406:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 800040a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040e:	f001 fdf7 	bl	8002000 <HAL_GPIO_WritePin>
                          |MOTOR4_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f24d 0140 	movw	r1, #53312	@ 0xd040
 8000418:	4826      	ldr	r0, [pc, #152]	@ (80004b4 <MX_GPIO_Init+0x130>)
 800041a:	f001 fdf1 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000424:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4619      	mov	r1, r3
 8000434:	481e      	ldr	r0, [pc, #120]	@ (80004b0 <MX_GPIO_Init+0x12c>)
 8000436:	f001 fc59 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 800043a:	2306      	movs	r3, #6
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	4817      	ldr	r0, [pc, #92]	@ (80004b0 <MX_GPIO_Init+0x12c>)
 8000452:	f001 fc4b 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 8000456:	f241 03b2 	movw	r3, #4274	@ 0x10b2
 800045a:	617b      	str	r3, [r7, #20]
                          |MOTOR4_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f001 fc3b 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin;
 8000476:	f24d 0340 	movw	r3, #53312	@ 0xd040
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4619      	mov	r1, r3
 800048e:	4809      	ldr	r0, [pc, #36]	@ (80004b4 <MX_GPIO_Init+0x130>)
 8000490:	f001 fc2c 	bl	8001cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	2028      	movs	r0, #40	@ 0x28
 800049a:	f001 fb7a 	bl	8001b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800049e:	2028      	movs	r0, #40	@ 0x28
 80004a0:	f001 fb93 	bl	8001bca <HAL_NVIC_EnableIRQ>

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48000400 	.word	0x48000400

080004b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d103      	bne.n	80004d2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5); // GPIOA is right
 80004ca:	2120      	movs	r1, #32
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004ce:	f001 fdaf 	bl	8002030 <HAL_GPIO_TogglePin>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40000400 	.word	0x40000400
 80004e0:	48000c00 	.word	0x48000c00

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f9ee 	bl	80018c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f902 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f7ff ff48 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f4:	f001 f90a 	bl	800170c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004f8:	f001 f8d8 	bl	80016ac <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80004fc:	f000 fe24 	bl	8001148 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000500:	f000 fd38 	bl	8000f74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000504:	f000 fdc6 	bl	8001094 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000508:	f000 fe78 	bl	80011fc <MX_TIM4_Init>
  MX_TIM8_Init();
 800050c:	f000 fed0 	bl	80012b0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4865      	ldr	r0, [pc, #404]	@ (80006ac <main+0x1c8>)
 8000518:	f001 fd72 	bl	8002000 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800051c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000520:	f000 fb54 	bl	8000bcc <HAL_GPIO_EXTI_Callback>

  HAL_TIM_Base_Start_IT(&htim3);
 8000524:	4862      	ldr	r0, [pc, #392]	@ (80006b0 <main+0x1cc>)
 8000526:	f003 fa5d 	bl	80039e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 800052a:	2100      	movs	r1, #0
 800052c:	4861      	ldr	r0, [pc, #388]	@ (80006b4 <main+0x1d0>)
 800052e:	f003 fb21 	bl	8003b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start timer
 8000532:	2100      	movs	r1, #0
 8000534:	4860      	ldr	r0, [pc, #384]	@ (80006b8 <main+0x1d4>)
 8000536:	f003 fb1d 	bl	8003b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Start timer
 800053a:	2100      	movs	r1, #0
 800053c:	485c      	ldr	r0, [pc, #368]	@ (80006b0 <main+0x1cc>)
 800053e:	f003 fb19 	bl	8003b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start timer
 8000542:	2100      	movs	r1, #0
 8000544:	485d      	ldr	r0, [pc, #372]	@ (80006bc <main+0x1d8>)
 8000546:	f003 fb15 	bl	8003b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //Start timer
 800054a:	2100      	movs	r1, #0
 800054c:	485c      	ldr	r0, [pc, #368]	@ (80006c0 <main+0x1dc>)
 800054e:	f003 fb11 	bl	8003b74 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 8000552:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000556:	495b      	ldr	r1, [pc, #364]	@ (80006c4 <main+0x1e0>)
 8000558:	485b      	ldr	r0, [pc, #364]	@ (80006c8 <main+0x1e4>)
 800055a:	f004 fc44 	bl	8004de6 <HAL_UART_Receive_IT>


  // Motor 1 initialization
  motor1.DIR_PIN = MOTOR1_DIR_Pin;
 800055e:	4b5b      	ldr	r3, [pc, #364]	@ (80006cc <main+0x1e8>)
 8000560:	2202      	movs	r2, #2
 8000562:	601a      	str	r2, [r3, #0]
  motor1.STEP_PIN = MOTOR1_PUL_Pin;
 8000564:	4b59      	ldr	r3, [pc, #356]	@ (80006cc <main+0x1e8>)
 8000566:	2201      	movs	r2, #1
 8000568:	605a      	str	r2, [r3, #4]
  motor1.EN_PIN = MOTOR1_EN_Pin;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <main+0x1e8>)
 800056c:	2204      	movs	r2, #4
 800056e:	609a      	str	r2, [r3, #8]
  motor1.SPEED = 100;
 8000570:	4b56      	ldr	r3, [pc, #344]	@ (80006cc <main+0x1e8>)
 8000572:	2264      	movs	r2, #100	@ 0x64
 8000574:	60da      	str	r2, [r3, #12]
  motor1.STEPS = 200;
 8000576:	4b55      	ldr	r3, [pc, #340]	@ (80006cc <main+0x1e8>)
 8000578:	22c8      	movs	r2, #200	@ 0xc8
 800057a:	611a      	str	r2, [r3, #16]
  motor1.TIMER = TIM1;
 800057c:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <main+0x1e8>)
 800057e:	4a54      	ldr	r2, [pc, #336]	@ (80006d0 <main+0x1ec>)
 8000580:	615a      	str	r2, [r3, #20]
  motor1.EN_PORT = MOTOR1_EN_GPIO_Port;
 8000582:	4b52      	ldr	r3, [pc, #328]	@ (80006cc <main+0x1e8>)
 8000584:	4a49      	ldr	r2, [pc, #292]	@ (80006ac <main+0x1c8>)
 8000586:	61da      	str	r2, [r3, #28]
  motor1.DIR_PORT = MOTOR1_DIR_GPIO_Port;
 8000588:	4b50      	ldr	r3, [pc, #320]	@ (80006cc <main+0x1e8>)
 800058a:	4a48      	ldr	r2, [pc, #288]	@ (80006ac <main+0x1c8>)
 800058c:	621a      	str	r2, [r3, #32]
  motor1.moving = false;
 800058e:	4b4f      	ldr	r3, [pc, #316]	@ (80006cc <main+0x1e8>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24


  // Motor 2 initialization
  motor2.DIR_PIN = MOTOR2_DIR_Pin;
 8000596:	4b4f      	ldr	r3, [pc, #316]	@ (80006d4 <main+0x1f0>)
 8000598:	2210      	movs	r2, #16
 800059a:	601a      	str	r2, [r3, #0]
  motor2.STEP_PIN = MOTOR2_PUL_Pin;
 800059c:	4b4d      	ldr	r3, [pc, #308]	@ (80006d4 <main+0x1f0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	605a      	str	r2, [r3, #4]
  motor2.EN_PIN = MOTOR2_EN_Pin;
 80005a2:	4b4c      	ldr	r3, [pc, #304]	@ (80006d4 <main+0x1f0>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	609a      	str	r2, [r3, #8]
  motor2.SPEED = 100;
 80005a8:	4b4a      	ldr	r3, [pc, #296]	@ (80006d4 <main+0x1f0>)
 80005aa:	2264      	movs	r2, #100	@ 0x64
 80005ac:	60da      	str	r2, [r3, #12]
  motor2.STEPS = 200;
 80005ae:	4b49      	ldr	r3, [pc, #292]	@ (80006d4 <main+0x1f0>)
 80005b0:	22c8      	movs	r2, #200	@ 0xc8
 80005b2:	611a      	str	r2, [r3, #16]
  motor2.TIMER = TIM2;
 80005b4:	4b47      	ldr	r3, [pc, #284]	@ (80006d4 <main+0x1f0>)
 80005b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ba:	615a      	str	r2, [r3, #20]
  motor2.EN_PORT = MOTOR2_EN_GPIO_Port;
 80005bc:	4b45      	ldr	r3, [pc, #276]	@ (80006d4 <main+0x1f0>)
 80005be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c2:	61da      	str	r2, [r3, #28]
  motor2.DIR_PORT = MOTOR2_DIR_GPIO_Port;
 80005c4:	4b43      	ldr	r3, [pc, #268]	@ (80006d4 <main+0x1f0>)
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005ca:	621a      	str	r2, [r3, #32]
  motor2.moving = false;
 80005cc:	4b41      	ldr	r3, [pc, #260]	@ (80006d4 <main+0x1f0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24



  // Motor 3 initialization
  motor3.DIR_PIN = MOTOR3_DIR_Pin;
 80005d4:	4b40      	ldr	r3, [pc, #256]	@ (80006d8 <main+0x1f4>)
 80005d6:	2240      	movs	r2, #64	@ 0x40
 80005d8:	601a      	str	r2, [r3, #0]
  motor3.STEP_PIN = MOTOR3_PUL_Pin;
 80005da:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <main+0x1f4>)
 80005dc:	2240      	movs	r2, #64	@ 0x40
 80005de:	605a      	str	r2, [r3, #4]
  motor3.EN_PIN = MOTOR3_EN_Pin;
 80005e0:	4b3d      	ldr	r3, [pc, #244]	@ (80006d8 <main+0x1f4>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	609a      	str	r2, [r3, #8]
  motor3.SPEED = 100;
 80005e6:	4b3c      	ldr	r3, [pc, #240]	@ (80006d8 <main+0x1f4>)
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	60da      	str	r2, [r3, #12]
  motor3.STEPS = 200;
 80005ec:	4b3a      	ldr	r3, [pc, #232]	@ (80006d8 <main+0x1f4>)
 80005ee:	22c8      	movs	r2, #200	@ 0xc8
 80005f0:	611a      	str	r2, [r3, #16]
  motor3.TIMER = TIM3;
 80005f2:	4b39      	ldr	r3, [pc, #228]	@ (80006d8 <main+0x1f4>)
 80005f4:	4a39      	ldr	r2, [pc, #228]	@ (80006dc <main+0x1f8>)
 80005f6:	615a      	str	r2, [r3, #20]
  motor3.EN_PORT = MOTOR3_EN_GPIO_Port;
 80005f8:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <main+0x1f4>)
 80005fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005fe:	61da      	str	r2, [r3, #28]
  motor3.DIR_PORT = MOTOR3_DIR_GPIO_Port;
 8000600:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <main+0x1f4>)
 8000602:	4a37      	ldr	r2, [pc, #220]	@ (80006e0 <main+0x1fc>)
 8000604:	621a      	str	r2, [r3, #32]

  motor3.moving = false;
 8000606:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <main+0x1f4>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24


  // Motor 4 initialization
  motor4.DIR_PIN = MOTOR4_DIR_Pin;
 800060e:	4b35      	ldr	r3, [pc, #212]	@ (80006e4 <main+0x200>)
 8000610:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000614:	601a      	str	r2, [r3, #0]
  motor4.STEP_PIN = MOTOR4_PUL_Pin;
 8000616:	4b33      	ldr	r3, [pc, #204]	@ (80006e4 <main+0x200>)
 8000618:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800061c:	605a      	str	r2, [r3, #4]
  motor4.EN_PIN = MOTOR4_EN_Pin;
 800061e:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <main+0x200>)
 8000620:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000624:	609a      	str	r2, [r3, #8]
  motor4.SPEED = 100;
 8000626:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <main+0x200>)
 8000628:	2264      	movs	r2, #100	@ 0x64
 800062a:	60da      	str	r2, [r3, #12]
  motor4.STEPS = 200;
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <main+0x200>)
 800062e:	22c8      	movs	r2, #200	@ 0xc8
 8000630:	611a      	str	r2, [r3, #16]
  motor4.TIMER = TIM4;
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <main+0x200>)
 8000634:	4a2c      	ldr	r2, [pc, #176]	@ (80006e8 <main+0x204>)
 8000636:	615a      	str	r2, [r3, #20]
  motor4.EN_PORT = MOTOR4_EN_GPIO_Port;
 8000638:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <main+0x200>)
 800063a:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <main+0x1fc>)
 800063c:	61da      	str	r2, [r3, #28]
  motor4.DIR_PORT = MOTOR4_DIR_GPIO_Port;
 800063e:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <main+0x200>)
 8000640:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000644:	621a      	str	r2, [r3, #32]
  motor4.moving = false;
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <main+0x200>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24




  // Motor 5 initialization
  motor5.DIR_PIN = MOTOR5_DIR_Pin;
 800064e:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <main+0x208>)
 8000650:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000654:	601a      	str	r2, [r3, #0]
  motor5.STEP_PIN = MOTOR5_PUL_Pin;
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <main+0x208>)
 8000658:	2240      	movs	r2, #64	@ 0x40
 800065a:	605a      	str	r2, [r3, #4]
  motor5.EN_PIN = MOTOR5_EN_Pin;
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <main+0x208>)
 800065e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000662:	609a      	str	r2, [r3, #8]
  motor5.SPEED = 100;
 8000664:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <main+0x208>)
 8000666:	2264      	movs	r2, #100	@ 0x64
 8000668:	60da      	str	r2, [r3, #12]
  motor5.STEPS = 200;
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <main+0x208>)
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	611a      	str	r2, [r3, #16]
  motor5.TIMER = TIM8;
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <main+0x208>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <main+0x20c>)
 8000674:	615a      	str	r2, [r3, #20]
  motor5.EN_PORT = MOTOR5_EN_GPIO_Port;
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <main+0x208>)
 8000678:	4a19      	ldr	r2, [pc, #100]	@ (80006e0 <main+0x1fc>)
 800067a:	61da      	str	r2, [r3, #28]
  motor5.DIR_PORT = MOTOR5_DIR_GPIO_Port;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <main+0x208>)
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <main+0x1fc>)
 8000680:	621a      	str	r2, [r3, #32]
  motor5.moving = false;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <main+0x208>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  moveMotor(&motor1);
 800068a:	4810      	ldr	r0, [pc, #64]	@ (80006cc <main+0x1e8>)
 800068c:	f7ff fe10 	bl	80002b0 <moveMotor>
	  moveMotor(&motor2);
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <main+0x1f0>)
 8000692:	f7ff fe0d 	bl	80002b0 <moveMotor>
	  moveMotor(&motor3);
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <main+0x1f4>)
 8000698:	f7ff fe0a 	bl	80002b0 <moveMotor>
	  moveMotor(&motor4);
 800069c:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <main+0x200>)
 800069e:	f7ff fe07 	bl	80002b0 <moveMotor>
	  moveMotor(&motor5);
 80006a2:	4812      	ldr	r0, [pc, #72]	@ (80006ec <main+0x208>)
 80006a4:	f7ff fe04 	bl	80002b0 <moveMotor>
	  moveMotor(&motor1);
 80006a8:	bf00      	nop
 80006aa:	e7ee      	b.n	800068a <main+0x1a6>
 80006ac:	48000800 	.word	0x48000800
 80006b0:	200003e0 	.word	0x200003e0
 80006b4:	20000348 	.word	0x20000348
 80006b8:	20000394 	.word	0x20000394
 80006bc:	2000042c 	.word	0x2000042c
 80006c0:	20000478 	.word	0x20000478
 80006c4:	20000084 	.word	0x20000084
 80006c8:	2000054c 	.word	0x2000054c
 80006cc:	20000278 	.word	0x20000278
 80006d0:	40012c00 	.word	0x40012c00
 80006d4:	200002a0 	.word	0x200002a0
 80006d8:	200002c8 	.word	0x200002c8
 80006dc:	40000400 	.word	0x40000400
 80006e0:	48000400 	.word	0x48000400
 80006e4:	200002f0 	.word	0x200002f0
 80006e8:	40000800 	.word	0x40000800
 80006ec:	20000318 	.word	0x20000318
 80006f0:	40013400 	.word	0x40013400

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a6      	sub	sp, #152	@ 0x98
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006fe:	2228      	movs	r2, #40	@ 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 ff09 	bl	800651a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2258      	movs	r2, #88	@ 0x58
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fefb 	bl	800651a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800073c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000740:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fc9e 	bl	8002094 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800075e:	f000 fa75 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000772:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fcdc 	bl	800313c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078a:	f000 fa5f 	bl	8000c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <SystemClock_Config+0xd0>)
 8000790:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fefb 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007b8:	f000 fa48 	bl	8000c4c <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3798      	adds	r7, #152	@ 0x98
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	00303003 	.word	0x00303003

080007c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007d4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80007d8:	6018      	str	r0, [r3, #0]
    if (huart == &huart2)
 80007da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007de:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4ab1      	ldr	r2, [pc, #708]	@ (8000aac <HAL_UART_RxCpltCallback+0x2e4>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	f040 81de 	bne.w	8000ba8 <HAL_UART_RxCpltCallback+0x3e0>
    {
        if (UART2_rxBuffer[0] != '\0')
 80007ec:	4bb0      	ldr	r3, [pc, #704]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x2e8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f000 81cd 	beq.w	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
        {
            char *token = strtok((char *)UART2_rxBuffer, "_");
 80007f6:	49af      	ldr	r1, [pc, #700]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 80007f8:	48ad      	ldr	r0, [pc, #692]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x2e8>)
 80007fa:	f005 fe97 	bl	800652c <strtok>
 80007fe:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224

            // Check the command for motor 1
            if (strcmp(token, MOTOR1_COMMAND) == 0)
 8000802:	49ad      	ldr	r1, [pc, #692]	@ (8000ab8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000804:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000808:	f7ff fcea 	bl	80001e0 <strcmp>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14c      	bne.n	80008ac <HAL_UART_RxCpltCallback+0xe4>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000812:	49a8      	ldr	r1, [pc, #672]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000814:	2000      	movs	r0, #0
 8000816:	f005 fe89 	bl	800652c <strtok>
 800081a:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 800081e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <HAL_UART_RxCpltCallback+0x72>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000826:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800082a:	f005 fcc9 	bl	80061c0 <atoi>
 800082e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
                    motor1.SPEED = speed;
 8000832:	4aa2      	ldr	r2, [pc, #648]	@ (8000abc <HAL_UART_RxCpltCallback+0x2f4>)
 8000834:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000838:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 800083a:	499e      	ldr	r1, [pc, #632]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 800083c:	2000      	movs	r0, #0
 800083e:	f005 fe75 	bl	800652c <strtok>
 8000842:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000846:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800084a:	2b00      	cmp	r3, #0
 800084c:	d009      	beq.n	8000862 <HAL_UART_RxCpltCallback+0x9a>
                {
                    int steps = atoi(token); // Convert steps string to integer
 800084e:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000852:	f005 fcb5 	bl	80061c0 <atoi>
 8000856:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
                    motor1.STEPS = steps;
 800085a:	4a98      	ldr	r2, [pc, #608]	@ (8000abc <HAL_UART_RxCpltCallback+0x2f4>)
 800085c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000860:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000862:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000866:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	3304      	adds	r3, #4
 8000870:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fe4f 	bl	800651a <memset>
                sprintf(uartTxBuffer, "Motor1 Settings: Speed=%d, Steps=%d\r\n", motor1.SPEED, motor1.STEPS);
 800087c:	4b8f      	ldr	r3, [pc, #572]	@ (8000abc <HAL_UART_RxCpltCallback+0x2f4>)
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	4b8e      	ldr	r3, [pc, #568]	@ (8000abc <HAL_UART_RxCpltCallback+0x2f4>)
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	f107 0008 	add.w	r0, r7, #8
 8000888:	498d      	ldr	r1, [pc, #564]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x2f8>)
 800088a:	f005 fde3 	bl	8006454 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fcae 	bl	80001f4 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	f107 0108 	add.w	r1, r7, #8
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	4881      	ldr	r0, [pc, #516]	@ (8000aac <HAL_UART_RxCpltCallback+0x2e4>)
 80008a6:	f004 fa15 	bl	8004cd4 <HAL_UART_Transmit>
 80008aa:	e171      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
            }

            // Check the command for motor 2
            else if (strcmp(token, MOTOR2_COMMAND) == 0)
 80008ac:	4985      	ldr	r1, [pc, #532]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x2fc>)
 80008ae:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 80008b2:	f7ff fc95 	bl	80001e0 <strcmp>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14c      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x18e>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 80008bc:	497d      	ldr	r1, [pc, #500]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 80008be:	2000      	movs	r0, #0
 80008c0:	f005 fe34 	bl	800652c <strtok>
 80008c4:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 80008c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d009      	beq.n	80008e4 <HAL_UART_RxCpltCallback+0x11c>
                {
                    int speed = atoi(token); // Convert speed string to integer
 80008d0:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 80008d4:	f005 fc74 	bl	80061c0 <atoi>
 80008d8:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
                    motor2.SPEED = speed;
 80008dc:	4a7a      	ldr	r2, [pc, #488]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x300>)
 80008de:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80008e2:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 80008e4:	4973      	ldr	r1, [pc, #460]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f005 fe20 	bl	800652c <strtok>
 80008ec:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 80008f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d009      	beq.n	800090c <HAL_UART_RxCpltCallback+0x144>
                {
                    int steps = atoi(token); // Convert steps string to integer
 80008f8:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 80008fc:	f005 fc60 	bl	80061c0 <atoi>
 8000900:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
                    motor2.STEPS = steps;
 8000904:	4a70      	ldr	r2, [pc, #448]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x300>)
 8000906:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800090a:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 800090c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000910:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	3304      	adds	r3, #4
 800091a:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f005 fdfa 	bl	800651a <memset>
                sprintf(uartTxBuffer, "Motor2 Settings: Speed=%d, Steps=%d\r\n", motor2.SPEED, motor2.STEPS);
 8000926:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x300>)
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	4b67      	ldr	r3, [pc, #412]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x300>)
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	f107 0008 	add.w	r0, r7, #8
 8000932:	4966      	ldr	r1, [pc, #408]	@ (8000acc <HAL_UART_RxCpltCallback+0x304>)
 8000934:	f005 fd8e 	bl	8006454 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc59 	bl	80001f4 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0108 	add.w	r1, r7, #8
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4857      	ldr	r0, [pc, #348]	@ (8000aac <HAL_UART_RxCpltCallback+0x2e4>)
 8000950:	f004 f9c0 	bl	8004cd4 <HAL_UART_Transmit>
 8000954:	e11c      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
            }

            // Check the command for motor 3
            else if (strcmp(token, MOTOR3_COMMAND) == 0)
 8000956:	495e      	ldr	r1, [pc, #376]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x308>)
 8000958:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800095c:	f7ff fc40 	bl	80001e0 <strcmp>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d14c      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x238>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000966:	4953      	ldr	r1, [pc, #332]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000968:	2000      	movs	r0, #0
 800096a:	f005 fddf 	bl	800652c <strtok>
 800096e:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000972:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000976:	2b00      	cmp	r3, #0
 8000978:	d009      	beq.n	800098e <HAL_UART_RxCpltCallback+0x1c6>
                {
                    int speed = atoi(token); // Convert speed string to integer
 800097a:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800097e:	f005 fc1f 	bl	80061c0 <atoi>
 8000982:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
                    motor3.SPEED = speed;
 8000986:	4a53      	ldr	r2, [pc, #332]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x30c>)
 8000988:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800098c:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 800098e:	4949      	ldr	r1, [pc, #292]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000990:	2000      	movs	r0, #0
 8000992:	f005 fdcb 	bl	800652c <strtok>
 8000996:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 800099a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d009      	beq.n	80009b6 <HAL_UART_RxCpltCallback+0x1ee>
                {
                    int steps = atoi(token); // Convert steps string to integer
 80009a2:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 80009a6:	f005 fc0b 	bl	80061c0 <atoi>
 80009aa:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
                    motor3.STEPS = steps;
 80009ae:	4a49      	ldr	r2, [pc, #292]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x30c>)
 80009b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80009b4:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 80009b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80009ba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	3304      	adds	r3, #4
 80009c4:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fda5 	bl	800651a <memset>
                sprintf(uartTxBuffer, "Motor3 Settings: Speed=%d, Steps=%d\r\n", motor3.SPEED, motor3.STEPS);
 80009d0:	4b40      	ldr	r3, [pc, #256]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x30c>)
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x30c>)
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	f107 0008 	add.w	r0, r7, #8
 80009dc:	493e      	ldr	r1, [pc, #248]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x310>)
 80009de:	f005 fd39 	bl	8006454 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc04 	bl	80001f4 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f107 0108 	add.w	r1, r7, #8
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	482c      	ldr	r0, [pc, #176]	@ (8000aac <HAL_UART_RxCpltCallback+0x2e4>)
 80009fa:	f004 f96b 	bl	8004cd4 <HAL_UART_Transmit>
 80009fe:	e0c7      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
            }

            // Check the command for motor 4
            else if (strcmp(token, MOTOR4_COMMAND) == 0)
 8000a00:	4936      	ldr	r1, [pc, #216]	@ (8000adc <HAL_UART_RxCpltCallback+0x314>)
 8000a02:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000a06:	f7ff fbeb 	bl	80001e0 <strcmp>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d16b      	bne.n	8000ae8 <HAL_UART_RxCpltCallback+0x320>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000a10:	4928      	ldr	r1, [pc, #160]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000a12:	2000      	movs	r0, #0
 8000a14:	f005 fd8a 	bl	800652c <strtok>
 8000a18:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000a1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d009      	beq.n	8000a38 <HAL_UART_RxCpltCallback+0x270>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000a24:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000a28:	f005 fbca 	bl	80061c0 <atoi>
 8000a2c:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
                    motor4.SPEED = speed;
 8000a30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x318>)
 8000a32:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000a36:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 8000a38:	491e      	ldr	r1, [pc, #120]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f005 fd76 	bl	800652c <strtok>
 8000a40:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000a44:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <HAL_UART_RxCpltCallback+0x298>
                {
                    int steps = atoi(token); // Convert steps string to integer
 8000a4c:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000a50:	f005 fbb6 	bl	80061c0 <atoi>
 8000a54:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
                    motor4.STEPS = steps;
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x318>)
 8000a5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a5e:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000a60:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000a64:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 fd50 	bl	800651a <memset>
                sprintf(uartTxBuffer, "Motor4 Settings: Speed=%d, Steps=%d\r\n", motor4.SPEED, motor4.STEPS);
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x318>)
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x318>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	f107 0008 	add.w	r0, r7, #8
 8000a86:	4917      	ldr	r1, [pc, #92]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x31c>)
 8000a88:	f005 fce4 	bl	8006454 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbaf 	bl	80001f4 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4802      	ldr	r0, [pc, #8]	@ (8000aac <HAL_UART_RxCpltCallback+0x2e4>)
 8000aa4:	f004 f916 	bl	8004cd4 <HAL_UART_Transmit>
 8000aa8:	e072      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
 8000aaa:	bf00      	nop
 8000aac:	2000054c 	.word	0x2000054c
 8000ab0:	20000084 	.word	0x20000084
 8000ab4:	0800768c 	.word	0x0800768c
 8000ab8:	08007690 	.word	0x08007690
 8000abc:	20000278 	.word	0x20000278
 8000ac0:	08007694 	.word	0x08007694
 8000ac4:	080076bc 	.word	0x080076bc
 8000ac8:	200002a0 	.word	0x200002a0
 8000acc:	080076c0 	.word	0x080076c0
 8000ad0:	080076e8 	.word	0x080076e8
 8000ad4:	200002c8 	.word	0x200002c8
 8000ad8:	080076ec 	.word	0x080076ec
 8000adc:	08007714 	.word	0x08007714
 8000ae0:	200002f0 	.word	0x200002f0
 8000ae4:	08007718 	.word	0x08007718
            }

            // Check the command for motor 5
            else if (strcmp(token, MOTOR5_COMMAND) == 0)
 8000ae8:	4932      	ldr	r1, [pc, #200]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x3ec>)
 8000aea:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000aee:	f7ff fb77 	bl	80001e0 <strcmp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14b      	bne.n	8000b90 <HAL_UART_RxCpltCallback+0x3c8>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000af8:	492f      	ldr	r1, [pc, #188]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x3f0>)
 8000afa:	2000      	movs	r0, #0
 8000afc:	f005 fd16 	bl	800652c <strtok>
 8000b00:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000b04:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <HAL_UART_RxCpltCallback+0x358>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000b0c:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000b10:	f005 fb56 	bl	80061c0 <atoi>
 8000b14:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
                    motor5.SPEED = speed;
 8000b18:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <HAL_UART_RxCpltCallback+0x3f4>)
 8000b1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000b1e:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 8000b20:	4925      	ldr	r1, [pc, #148]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x3f0>)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f005 fd02 	bl	800652c <strtok>
 8000b28:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
                if (token != NULL)
 8000b2c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d009      	beq.n	8000b48 <HAL_UART_RxCpltCallback+0x380>
                {
                    int steps = atoi(token); // Convert steps string to integer
 8000b34:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 8000b38:	f005 fb42 	bl	80061c0 <atoi>
 8000b3c:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
                    motor5.STEPS = steps;
 8000b40:	4a1e      	ldr	r2, [pc, #120]	@ (8000bbc <HAL_UART_RxCpltCallback+0x3f4>)
 8000b42:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000b46:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000b48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000b4c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	3304      	adds	r3, #4
 8000b56:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 fcdc 	bl	800651a <memset>
                sprintf(uartTxBuffer, "Motor5 Settings: Speed=%d, Steps=%d\r\n", motor5.SPEED, motor5.STEPS);
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_UART_RxCpltCallback+0x3f4>)
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_UART_RxCpltCallback+0x3f4>)
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	f107 0008 	add.w	r0, r7, #8
 8000b6e:	4914      	ldr	r1, [pc, #80]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x3f8>)
 8000b70:	f005 fc70 	bl	8006454 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb3b 	bl	80001f4 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f107 0108 	add.w	r1, r7, #8
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x3fc>)
 8000b8c:	f004 f8a2 	bl	8004cd4 <HAL_UART_Transmit>
            }
        }

        // Clear the receive buffer
        memset(UART2_rxBuffer, 0, sizeof(UART2_rxBuffer));
 8000b90:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b94:	2100      	movs	r1, #0
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x400>)
 8000b98:	f005 fcbf 	bl	800651a <memset>

        // Restart UART receive interrupt
        HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 8000b9c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ba0:	4909      	ldr	r1, [pc, #36]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x400>)
 8000ba2:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x3fc>)
 8000ba4:	f004 f91f 	bl	8004de6 <HAL_UART_Receive_IT>
    }
}
 8000ba8:	bf00      	nop
 8000baa:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08007740 	.word	0x08007740
 8000bb8:	0800768c 	.word	0x0800768c
 8000bbc:	20000318 	.word	0x20000318
 8000bc0:	08007744 	.word	0x08007744
 8000bc4:	2000054c 	.word	0x2000054c
 8000bc8:	20000084 	.word	0x20000084

08000bcc <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bdc:	d12b      	bne.n	8000c36 <HAL_GPIO_EXTI_Callback+0x6a>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bde:	2120      	movs	r1, #32
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f001 fa24 	bl	8002030 <HAL_GPIO_TogglePin>
	    motor1.STEPS = 200;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bea:	22c8      	movs	r2, #200	@ 0xc8
 8000bec:	611a      	str	r2, [r3, #16]
	    motor1.SPEED = 50;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bf0:	2232      	movs	r2, #50	@ 0x32
 8000bf2:	60da      	str	r2, [r3, #12]
	    motor2.STEPS = 200;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x78>)
 8000bf6:	22c8      	movs	r2, #200	@ 0xc8
 8000bf8:	611a      	str	r2, [r3, #16]
	    motor2.SPEED = 50;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x78>)
 8000bfc:	2232      	movs	r2, #50	@ 0x32
 8000bfe:	60da      	str	r2, [r3, #12]
	    counter++;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c08:	6013      	str	r3, [r2, #0]
	    if (counter > 2){
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	dd11      	ble.n	8000c36 <HAL_GPIO_EXTI_Callback+0x6a>
	    	HAL_GPIO_TogglePin(motor1.DIR_PORT, motor1.DIR_PIN); // Toggle the direction pin
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	b292      	uxth	r2, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fa06 	bl	8002030 <HAL_GPIO_TogglePin>
	    	HAL_GPIO_TogglePin(motor2.DIR_PORT, motor2.DIR_PIN); // Toggle the direction pin
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 f9fd 	bl	8002030 <HAL_GPIO_TogglePin>

	    }
  }
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000278 	.word	0x20000278
 8000c44:	200002a0 	.word	0x200002a0
 8000c48:	20000340 	.word	0x20000340

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f000 ff74 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 fe2d 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000d06:	f003 f841 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000348 	.word	0x20000348

08000d14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d1a:	f003 f837 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000348 	.word	0x20000348

08000d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM2_IRQHandler+0x10>)
 8000d2e:	f003 f82d 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000394 	.word	0x20000394

08000d3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM3_IRQHandler+0x10>)
 8000d42:	f003 f823 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200003e0 	.word	0x200003e0

08000d50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM4_IRQHandler+0x10>)
 8000d56:	f003 f819 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000042c 	.word	0x2000042c

08000d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <USART1_IRQHandler+0x10>)
 8000d6a:	f004 f881 	bl	8004e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200004c4 	.word	0x200004c4

08000d78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <USART2_IRQHandler+0x10>)
 8000d7e:	f004 f877 	bl	8004e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000054c 	.word	0x2000054c

08000d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d94:	f001 f966 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <TIM8_BRK_IRQHandler+0x10>)
 8000da2:	f002 fff3 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000478 	.word	0x20000478

08000db0 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <TIM8_UP_IRQHandler+0x10>)
 8000db6:	f002 ffe9 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000478 	.word	0x20000478

08000dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return 1;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_kill>:

int _kill(int pid, int sig)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dde:	f005 fc47 	bl	8006670 <__errno>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2216      	movs	r2, #22
 8000de6:	601a      	str	r2, [r3, #0]
  return -1;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_exit>:

void _exit (int status)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffe7 	bl	8000dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e06:	bf00      	nop
 8000e08:	e7fd      	b.n	8000e06 <_exit+0x12>

08000e0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e00a      	b.n	8000e32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e1c:	f3af 8000 	nop.w
 8000e20:	4601      	mov	r1, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	60ba      	str	r2, [r7, #8]
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <_read+0x12>
  }

  return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e009      	b.n	8000e6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dbf1      	blt.n	8000e56 <_write+0x12>
  }
  return len;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_close>:

int _close(int file)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_isatty>:

int _isatty(int file)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f005 fbac 	bl	8006670 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20010000 	.word	0x20010000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000344 	.word	0x20000344
 8000f4c:	20000728 	.word	0x20000728

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	@ 0x58
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	222c      	movs	r2, #44	@ 0x2c
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 faba 	bl	800651a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa6:	4b39      	ldr	r3, [pc, #228]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fa8:	4a39      	ldr	r2, [pc, #228]	@ (8001090 <MX_TIM1_Init+0x11c>)
 8000faa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fae:	f240 12df 	movw	r2, #479	@ 0x1df
 8000fb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fbc:	2263      	movs	r2, #99	@ 0x63
 8000fbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd2:	482e      	ldr	r0, [pc, #184]	@ (800108c <MX_TIM1_Init+0x118>)
 8000fd4:	f002 fd76 	bl	8003ac4 <HAL_TIM_PWM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f7ff fe35 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4825      	ldr	r0, [pc, #148]	@ (800108c <MX_TIM1_Init+0x118>)
 8000ff6:	f003 fcef 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001000:	f7ff fe24 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4818      	ldr	r0, [pc, #96]	@ (800108c <MX_TIM1_Init+0x118>)
 800102a:	f002 ffcf 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001034:	f7ff fe0a 	bl	8000c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001050:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	@ (800108c <MX_TIM1_Init+0x118>)
 800106e:	f003 fd3f 	bl	8004af0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001078:	f7ff fde8 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <MX_TIM1_Init+0x118>)
 800107e:	f000 fa4b 	bl	8001518 <HAL_TIM_MspPostInit>

}
 8001082:	bf00      	nop
 8001084:	3758      	adds	r7, #88	@ 0x58
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000348 	.word	0x20000348
 8001090:	40012c00 	.word	0x40012c00

08001094 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010c2:	f240 12df 	movw	r2, #479	@ 0x1df
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010d0:	2263      	movs	r2, #99	@ 0x63
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e0:	4818      	ldr	r0, [pc, #96]	@ (8001144 <MX_TIM2_Init+0xb0>)
 80010e2:	f002 fcef 	bl	8003ac4 <HAL_TIM_PWM_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010ec:	f7ff fdae 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	@ (8001144 <MX_TIM2_Init+0xb0>)
 8001100:	f003 fc6a 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800110a:	f7ff fd9f 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	@ 0x60
 8001110:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <MX_TIM2_Init+0xb0>)
 8001126:	f002 ff51 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001130:	f7ff fd8c 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <MX_TIM2_Init+0xb0>)
 8001136:	f000 f9ef 	bl	8001518 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	@ 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000394 	.word	0x20000394

08001148 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_TIM3_Init+0xac>)
 800116e:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <MX_TIM3_Init+0xb0>)
 8001170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <MX_TIM3_Init+0xac>)
 8001174:	f240 12df 	movw	r2, #479	@ 0x1df
 8001178:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM3_Init+0xac>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM3_Init+0xac>)
 8001182:	2263      	movs	r2, #99	@ 0x63
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_TIM3_Init+0xac>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_TIM3_Init+0xac>)
 800118e:	2280      	movs	r2, #128	@ 0x80
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <MX_TIM3_Init+0xac>)
 8001194:	f002 fc96 	bl	8003ac4 <HAL_TIM_PWM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800119e:	f7ff fd55 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <MX_TIM3_Init+0xac>)
 80011b2:	f003 fc11 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80011bc:	f7ff fd46 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c0:	2360      	movs	r3, #96	@ 0x60
 80011c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM3_Init+0xac>)
 80011d8:	f002 fef8 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80011e2:	f7ff fd33 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e6:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM3_Init+0xac>)
 80011e8:	f000 f996 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	@ 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200003e0 	.word	0x200003e0
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001222:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <MX_TIM4_Init+0xb0>)
 8001224:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001228:	f240 12df 	movw	r2, #479	@ 0x1df
 800122c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001236:	2263      	movs	r2, #99	@ 0x63
 8001238:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_TIM4_Init+0xac>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001246:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001248:	f002 fc3c 	bl	8003ac4 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001252:	f7ff fcfb 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4810      	ldr	r0, [pc, #64]	@ (80012a8 <MX_TIM4_Init+0xac>)
 8001266:	f003 fbb7 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001270:	f7ff fcec 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <MX_TIM4_Init+0xac>)
 800128c:	f002 fe9e 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001296:	f7ff fcd9 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800129a:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <MX_TIM4_Init+0xac>)
 800129c:	f000 f93c 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000042c 	.word	0x2000042c
 80012ac:	40000800 	.word	0x40000800

080012b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b096      	sub	sp, #88	@ 0x58
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	222c      	movs	r2, #44	@ 0x2c
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 f91c 	bl	800651a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012e2:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80012e4:	4a39      	ldr	r2, [pc, #228]	@ (80013cc <MX_TIM8_Init+0x11c>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 480-1;
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80012ea:	f240 12df 	movw	r2, #479	@ 0x1df
 80012ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80012f6:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80012f8:	2263      	movs	r2, #99	@ 0x63
 80012fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <MX_TIM8_Init+0x118>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <MX_TIM8_Init+0x118>)
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800130e:	482e      	ldr	r0, [pc, #184]	@ (80013c8 <MX_TIM8_Init+0x118>)
 8001310:	f002 fbd8 	bl	8003ac4 <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800131a:	f7ff fc97 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800132a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <MX_TIM8_Init+0x118>)
 8001332:	f003 fb51 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800133c:	f7ff fc86 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	@ 0x60
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <MX_TIM8_Init+0x118>)
 8001366:	f002 fe31 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001370:	f7ff fc6c 	bl	8000c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80013aa:	f003 fba1 	bl	8004af0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80013b4:	f7ff fc4a 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM8_Init+0x118>)
 80013ba:	f000 f8ad 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3758      	adds	r7, #88	@ 0x58
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000478 	.word	0x20000478
 80013cc:	40013400 	.word	0x40013400

080013d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <HAL_TIM_PWM_MspInit+0x134>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11c      	bne.n	800141c <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a48      	ldr	r2, [pc, #288]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80013e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2018      	movs	r0, #24
 8001400:	f000 fbc7 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001404:	2018      	movs	r0, #24
 8001406:	f000 fbe0 	bl	8001bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2019      	movs	r0, #25
 8001410:	f000 fbbf 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001414:	2019      	movs	r0, #25
 8001416:	f000 fbd8 	bl	8001bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800141a:	e06e      	b.n	80014fa <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001424:	d114      	bne.n	8001450 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a37      	ldr	r2, [pc, #220]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201c      	movs	r0, #28
 8001444:	f000 fba5 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001448:	201c      	movs	r0, #28
 800144a:	f000 fbbe 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 800144e:	e054      	b.n	80014fa <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2d      	ldr	r2, [pc, #180]	@ (800150c <HAL_TIM_PWM_MspInit+0x13c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d114      	bne.n	8001484 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145a:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201d      	movs	r0, #29
 8001478:	f000 fb8b 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800147c:	201d      	movs	r0, #29
 800147e:	f000 fba4 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 8001482:	e03a      	b.n	80014fa <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM4)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <HAL_TIM_PWM_MspInit+0x140>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d114      	bne.n	80014b8 <HAL_TIM_PWM_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201e      	movs	r0, #30
 80014ac:	f000 fb71 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014b0:	201e      	movs	r0, #30
 80014b2:	f000 fb8a 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 80014b6:	e020      	b.n	80014fa <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM8)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <HAL_TIM_PWM_MspInit+0x144>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11b      	bne.n	80014fa <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80014c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_TIM_PWM_MspInit+0x138>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	202b      	movs	r0, #43	@ 0x2b
 80014e0:	f000 fb57 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 80014e4:	202b      	movs	r0, #43	@ 0x2b
 80014e6:	f000 fb70 	bl	8001bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	202c      	movs	r0, #44	@ 0x2c
 80014f0:	f000 fb4f 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80014f4:	202c      	movs	r0, #44	@ 0x2c
 80014f6:	f000 fb68 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40000400 	.word	0x40000400
 8001510:	40000800 	.word	0x40000800
 8001514:	40013400 	.word	0x40013400

08001518 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_TIM_MspPostInit+0x17c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d11c      	bne.n	8001574 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a56      	ldr	r2, [pc, #344]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b54      	ldr	r3, [pc, #336]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001562:	2302      	movs	r3, #2
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	484b      	ldr	r0, [pc, #300]	@ (800169c <HAL_TIM_MspPostInit+0x184>)
 800156e:	f000 fbbd 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001572:	e08a      	b.n	800168a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800157c:	d11d      	bne.n	80015ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b46      	ldr	r3, [pc, #280]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a45      	ldr	r2, [pc, #276]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b43      	ldr	r3, [pc, #268]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR2_PUL_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR2_PUL_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f000 fb9a 	bl	8001cec <HAL_GPIO_Init>
}
 80015b8:	e067      	b.n	800168a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_TIM_MspPostInit+0x188>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d11d      	bne.n	8001600 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a33      	ldr	r2, [pc, #204]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ce:	6153      	str	r3, [r2, #20]
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR3_PUL_Pin;
 80015dc:	2340      	movs	r3, #64	@ 0x40
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR3_PUL_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fa:	f000 fb77 	bl	8001cec <HAL_GPIO_Init>
}
 80015fe:	e044      	b.n	800168a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM4)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a27      	ldr	r2, [pc, #156]	@ (80016a4 <HAL_TIM_MspPostInit+0x18c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11e      	bne.n	8001648 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_PUL_Pin;
 8001622:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001634:	230a      	movs	r3, #10
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR4_PUL_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f000 fb53 	bl	8001cec <HAL_GPIO_Init>
}
 8001646:	e020      	b.n	800168a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM8)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_TIM_MspPostInit+0x190>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11b      	bne.n	800168a <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001658:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_TIM_MspPostInit+0x180>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR5_PUL_Pin;
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800167a:	2304      	movs	r3, #4
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR5_PUL_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	@ (800169c <HAL_TIM_MspPostInit+0x184>)
 8001686:	f000 fb31 	bl	8001cec <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	@ 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	48000800 	.word	0x48000800
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40013400 	.word	0x40013400

080016ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <MX_USART1_UART_Init+0x5c>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_USART1_UART_Init+0x58>)
 80016f0:	f003 faa2 	bl	8004c38 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016fa:	f7ff faa7 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200004c4 	.word	0x200004c4
 8001708:	40013800 	.word	0x40013800

0800170c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001712:	4a15      	ldr	r2, [pc, #84]	@ (8001768 <MX_USART2_UART_Init+0x5c>)
 8001714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART2_UART_Init+0x58>)
 8001750:	f003 fa72 	bl	8004c38 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800175a:	f7ff fa77 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000054c 	.word	0x2000054c
 8001768:	40004400 	.word	0x40004400

0800176c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a36      	ldr	r2, [pc, #216]	@ (8001864 <HAL_UART_MspInit+0xf8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d130      	bne.n	80017f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a35      	ldr	r2, [pc, #212]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 80017ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017be:	2330      	movs	r3, #48	@ 0x30
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ce:	2307      	movs	r3, #7
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4824      	ldr	r0, [pc, #144]	@ (800186c <HAL_UART_MspInit+0x100>)
 80017da:	f000 fa87 	bl	8001cec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2025      	movs	r0, #37	@ 0x25
 80017e4:	f000 f9d5 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017e8:	2025      	movs	r0, #37	@ 0x25
 80017ea:	f000 f9ee 	bl	8001bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017ee:	e035      	b.n	800185c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001870 <HAL_UART_MspInit+0x104>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d130      	bne.n	800185c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	6153      	str	r3, [r2, #20]
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_UART_MspInit+0xfc>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182a:	230c      	movs	r3, #12
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183a:	2307      	movs	r3, #7
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001848:	f000 fa50 	bl	8001cec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2026      	movs	r0, #38	@ 0x26
 8001852:	f000 f99e 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001856:	2026      	movs	r0, #38	@ 0x26
 8001858:	f000 f9b7 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	@ 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013800 	.word	0x40013800
 8001868:	40021000 	.word	0x40021000
 800186c:	48000800 	.word	0x48000800
 8001870:	40004400 	.word	0x40004400

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff fb6a 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	@ (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f004 feeb 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7fe fe1d 	bl	80004e4 <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b8:	08007998 	.word	0x08007998
  ldr r2, =_sbss
 80018bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018c0:	20000724 	.word	0x20000724

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_Init+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_Init+0x28>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 f94f 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff f9b8 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f967 	bl	8001be6 <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 f92f 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000008 	.word	0x20000008
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	200005d4 	.word	0x200005d4

0800197c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200005d4 	.word	0x200005d4

08001994 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
  {
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	@ (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff8e 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff29 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff3e 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff8e 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5d 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff31 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d008      	beq.n	8001c22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e020      	b.n	8001c64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 020e 	bic.w	r2, r2, #14
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d005      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e027      	b.n	8001ce2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 020e 	bic.w	r2, r2, #14
 8001ca0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    } 
  }
  return status;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e160      	b.n	8001fbe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8152 	beq.w	8001fb8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d005      	beq.n	8001d2c <HAL_GPIO_Init+0x40>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d130      	bne.n	8001d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d62:	2201      	movs	r2, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 0201 	and.w	r2, r3, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d017      	beq.n	8001dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d123      	bne.n	8001e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	6939      	ldr	r1, [r7, #16]
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0203 	and.w	r2, r3, #3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80ac 	beq.w	8001fb8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b5e      	ldr	r3, [pc, #376]	@ (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a5d      	ldr	r2, [pc, #372]	@ (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e78:	4a59      	ldr	r2, [pc, #356]	@ (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ea2:	d025      	beq.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8001fe4 <HAL_GPIO_Init+0x2f8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01f      	beq.n	8001eec <HAL_GPIO_Init+0x200>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4e      	ldr	r2, [pc, #312]	@ (8001fe8 <HAL_GPIO_Init+0x2fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d019      	beq.n	8001ee8 <HAL_GPIO_Init+0x1fc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8001fec <HAL_GPIO_Init+0x300>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff0 <HAL_GPIO_Init+0x304>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_GPIO_Init+0x1f4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <HAL_GPIO_Init+0x308>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x1f0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_GPIO_Init+0x1ec>
 8001ed4:	2306      	movs	r3, #6
 8001ed6:	e00c      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ed8:	2307      	movs	r3, #7
 8001eda:	e00a      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001edc:	2305      	movs	r3, #5
 8001ede:	e008      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e006      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f02:	4937      	ldr	r1, [pc, #220]	@ (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f34:	4a31      	ldr	r2, [pc, #196]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f5e:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f88:	4a1c      	ldr	r2, [pc, #112]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <HAL_GPIO_Init+0x310>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f ae97 	bne.w	8001cfc <HAL_GPIO_Init+0x10>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48000c00 	.word	0x48000c00
 8001ff0:	48001000 	.word	0x48001000
 8001ff4:	48001400 	.word	0x48001400
 8001ff8:	48001800 	.word	0x48001800
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201c:	e002      	b.n	8002024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43d9      	mvns	r1, r3
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	400b      	ands	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fda2 	bl	8000bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800209a:	af00      	add	r7, sp, #0
 800209c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f001 b83a 	b.w	800312e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 816f 	beq.w	80023ae <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020d0:	4bb5      	ldr	r3, [pc, #724]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4bb2      	ldr	r3, [pc, #712]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d15c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x10e>
 80020e8:	4baf      	ldr	r3, [pc, #700]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f4:	d155      	bne.n	80021a2 <HAL_RCC_OscConfig+0x10e>
 80020f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020fa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800210a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x94>
 8002122:	4ba1      	ldr	r3, [pc, #644]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0xc0>
 8002128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800212c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800213c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002140:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002144:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002150:	4b95      	ldr	r3, [pc, #596]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002158:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800215c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002160:	fa92 f2a2 	rbit	r2, r2
 8002164:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002168:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f002 021f 	and.w	r2, r2, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8111 	beq.w	80023ac <HAL_RCC_OscConfig+0x318>
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8108 	bne.w	80023ac <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f000 bfc6 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12e>
 80021b4:	4b7c      	ldr	r3, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a7b      	ldr	r2, [pc, #492]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e036      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 80021c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x158>
 80021d2:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a74      	ldr	r2, [pc, #464]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b72      	ldr	r3, [pc, #456]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a71      	ldr	r2, [pc, #452]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e021      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 80021ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x184>
 80021fe:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a69      	ldr	r2, [pc, #420]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b67      	ldr	r3, [pc, #412]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a66      	ldr	r2, [pc, #408]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 8002218:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a62      	ldr	r2, [pc, #392]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b60      	ldr	r3, [pc, #384]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5f      	ldr	r2, [pc, #380]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d059      	beq.n	80022f4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb9c 	bl	800197c <HAL_GetTick>
 8002244:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224a:	f7ff fb97 	bl	800197c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d902      	bls.n	8002260 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	f000 bf67 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002260:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002264:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002274:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <HAL_RCC_OscConfig+0x1fe>
 800228c:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x22a>
 8002292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002296:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80022a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022aa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80022ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80022c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80022ca:	fa92 f2a2 	rbit	r2, r2
 80022ce:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80022d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0220 	orr.w	r2, r2, #32
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ab      	beq.n	800224a <HAL_RCC_OscConfig+0x1b6>
 80022f2:	e05c      	b.n	80023ae <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb42 	bl	800197c <HAL_GetTick>
 80022f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fe:	f7ff fb3d 	bl	800197c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d902      	bls.n	8002314 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	f000 bf0d 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002314:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002318:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002328:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <HAL_RCC_OscConfig+0x2b2>
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x2de>
 8002346:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800234a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800235a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002362:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_OscConfig+0x314>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002376:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800237a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002386:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ab      	bne.n	80022fe <HAL_RCC_OscConfig+0x26a>
 80023a6:	e002      	b.n	80023ae <HAL_RCC_OscConfig+0x31a>
 80023a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 817f 	beq.w	80026c2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d0:	4ba4      	ldr	r3, [pc, #656]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d173      	bne.n	80024c4 <HAL_RCC_OscConfig+0x430>
 80023dc:	4ba1      	ldr	r3, [pc, #644]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e8:	d16c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x430>
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80023fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_RCC_OscConfig+0x386>
 8002414:	4b93      	ldr	r3, [pc, #588]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e013      	b.n	8002442 <HAL_RCC_OscConfig+0x3ae>
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002432:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800243e:	4b89      	ldr	r3, [pc, #548]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	2202      	movs	r2, #2
 8002444:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002448:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002454:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCC_OscConfig+0x3f6>
 8002474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002478:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f000 be52 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b76      	ldr	r3, [pc, #472]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	21f8      	movs	r1, #248	@ 0xf8
 80024a0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80024a8:	fa91 f1a1 	rbit	r1, r1
 80024ac:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80024b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80024b4:	fab1 f181 	clz	r1, r1
 80024b8:	b2c9      	uxtb	r1, r1
 80024ba:	408b      	lsls	r3, r1
 80024bc:	4969      	ldr	r1, [pc, #420]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e0fe      	b.n	80026c2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8088 	beq.w	80025e6 <HAL_RCC_OscConfig+0x552>
 80024d6:	2301      	movs	r3, #1
 80024d8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80024e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2301      	movs	r3, #1
 8002500:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff fa3b 	bl	800197c <HAL_GetTick>
 8002506:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff fa36 	bl	800197c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f000 be06 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002534:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x4be>
 800254c:	4b45      	ldr	r3, [pc, #276]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0x4e6>
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800256a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002576:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	2202      	movs	r2, #2
 800257c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002580:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002584:	fa92 f2a2 	rbit	r2, r2
 8002588:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800258c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0af      	beq.n	800250c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	21f8      	movs	r1, #248	@ 0xf8
 80025c2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80025ca:	fa91 f1a1 	rbit	r1, r1
 80025ce:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80025d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80025d6:	fab1 f181 	clz	r1, r1
 80025da:	b2c9      	uxtb	r1, r1
 80025dc:	408b      	lsls	r3, r1
 80025de:	4921      	ldr	r1, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e06d      	b.n	80026c2 <HAL_RCC_OscConfig+0x62e>
 80025e6:	2301      	movs	r3, #1
 80025e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80025f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002606:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff f9b3 	bl	800197c <HAL_GetTick>
 8002616:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff f9ae 	bl	800197c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d902      	bls.n	8002632 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	f000 bd7e 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002644:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x5d4>
 800265c:	4b01      	ldr	r3, [pc, #4]	@ (8002664 <HAL_RCC_OscConfig+0x5d0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e016      	b.n	8002690 <HAL_RCC_OscConfig+0x5fc>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	2302      	movs	r3, #2
 800266a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002680:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800268c:	4bbf      	ldr	r3, [pc, #764]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002696:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800269a:	fa92 f2a2 	rbit	r2, r2
 800269e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80026a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ac      	bne.n	800261c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8113 	beq.w	80028fe <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d07c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x74e>
 80026e8:	2301      	movs	r3, #1
 80026ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80026fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4ba2      	ldr	r3, [pc, #648]	@ (8002990 <HAL_RCC_OscConfig+0x8fc>)
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	2301      	movs	r3, #1
 8002710:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7ff f933 	bl	800197c <HAL_GetTick>
 8002716:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271c:	f7ff f92e 	bl	800197c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d902      	bls.n	8002732 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	f000 bcfe 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002744:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002772:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002790:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b7e      	ldr	r3, [pc, #504]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 8002794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800279e:	2102      	movs	r1, #2
 80027a0:	6019      	str	r1, [r3, #0]
 80027a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f1a3 	rbit	r1, r3
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027b8:	6019      	str	r1, [r3, #0]
  return result;
 80027ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d09d      	beq.n	800271c <HAL_RCC_OscConfig+0x688>
 80027e0:	e08d      	b.n	80028fe <HAL_RCC_OscConfig+0x86a>
 80027e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002800:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002804:	601a      	str	r2, [r3, #0]
  return result;
 8002806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800280e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_RCC_OscConfig+0x8fc>)
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	461a      	mov	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7ff f8aa 	bl	800197c <HAL_GetTick>
 8002828:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7ff f8a5 	bl	800197c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	f000 bc75 	b.w	800312e <HAL_RCC_OscConfig+0x109a>
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002854:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002862:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002878:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002890:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002894:	2202      	movs	r2, #2
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b36      	ldr	r3, [pc, #216]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028bc:	2102      	movs	r1, #2
 80028be:	6019      	str	r1, [r3, #0]
 80028c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f1a3 	rbit	r1, r3
 80028ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80028d6:	6019      	str	r1, [r3, #0]
  return result;
 80028d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d197      	bne.n	800282e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 81a5 	beq.w	8002c5e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a18      	ldr	r2, [pc, #96]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_RCC_OscConfig+0x8f8>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800293a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002948:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_RCC_OscConfig+0x900>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCC_OscConfig+0x900>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_RCC_OscConfig+0x900>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296c:	f7ff f806 	bl	800197c <HAL_GetTick>
 8002970:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e010      	b.n	8002998 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f801 	bl	800197c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d908      	bls.n	8002998 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e3d1      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	10908120 	.word	0x10908120
 8002994:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd0 <HAL_RCC_OscConfig+0xb3c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0e8      	beq.n	8002976 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x92e>
 80029b4:	4b87      	ldr	r3, [pc, #540]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a86      	ldr	r2, [pc, #536]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e035      	b.n	8002a2e <HAL_RCC_OscConfig+0x99a>
 80029c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x958>
 80029d2:	4b80      	ldr	r3, [pc, #512]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	e020      	b.n	8002a2e <HAL_RCC_OscConfig+0x99a>
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x982>
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a74      	ldr	r2, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	4b72      	ldr	r3, [pc, #456]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a71      	ldr	r2, [pc, #452]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x99a>
 8002a16:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a6b      	ldr	r2, [pc, #428]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8081 	beq.w	8002b42 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe ff9c 	bl	800197c <HAL_GetTick>
 8002a44:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00b      	b.n	8002a62 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe ff97 	bl	800197c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e365      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a80:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a8e:	2202      	movs	r2, #2
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002aa8:	601a      	str	r2, [r3, #0]
  return result;
 8002aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aae:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ab2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d102      	bne.n	8002ace <HAL_RCC_OscConfig+0xa3a>
 8002ac8:	4b42      	ldr	r3, [pc, #264]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	e013      	b.n	8002af6 <HAL_RCC_OscConfig+0xa62>
 8002ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ade:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aec:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002afa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002afe:	2102      	movs	r1, #2
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b06:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fa92 f1a2 	rbit	r1, r2
 8002b10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b14:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002b18:	6011      	str	r1, [r2, #0]
  return result;
 8002b1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b1e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d084      	beq.n	8002a4a <HAL_RCC_OscConfig+0x9b6>
 8002b40:	e083      	b.n	8002c4a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe ff1b 	bl	800197c <HAL_GetTick>
 8002b46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe ff16 	bl	800197c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e2e4      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b74:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002baa:	601a      	str	r2, [r3, #0]
  return result;
 8002bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002bb4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xb44>
 8002bca:	4b02      	ldr	r3, [pc, #8]	@ (8002bd4 <HAL_RCC_OscConfig+0xb40>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	e017      	b.n	8002c00 <HAL_RCC_OscConfig+0xb6c>
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bdc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4bb3      	ldr	r3, [pc, #716]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c04:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c08:	2102      	movs	r1, #2
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c10:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	fa92 f1a2 	rbit	r1, r2
 8002c1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c1e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002c22:	6011      	str	r1, [r2, #0]
  return result;
 8002c24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c28:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d180      	bne.n	8002b4c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c4a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b9e      	ldr	r3, [pc, #632]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a9d      	ldr	r2, [pc, #628]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 825e 	beq.w	800312c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c70:	4b96      	ldr	r3, [pc, #600]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	f000 821f 	beq.w	80030bc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	f040 8170 	bne.w	8002f70 <HAL_RCC_OscConfig+0xedc>
 8002c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c94:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002cbe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fe51 	bl	800197c <HAL_GetTick>
 8002cda:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	e009      	b.n	8002cf4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fe4c 	bl	800197c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e21c      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 8002cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d06:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d18:	601a      	str	r2, [r3, #0]
  return result;
 8002d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_OscConfig+0xcaa>
 8002d38:	4b64      	ldr	r3, [pc, #400]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	e027      	b.n	8002d8e <HAL_RCC_OscConfig+0xcfa>
 8002d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d76:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d84:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	4b50      	ldr	r3, [pc, #320]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d92:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d96:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d9a:	6011      	str	r1, [r2, #0]
 8002d9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002da0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	fa92 f1a2 	rbit	r1, r2
 8002daa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dae:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002db2:	6011      	str	r1, [r2, #0]
  return result;
 8002db4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002db8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f042 0220 	orr.w	r2, r2, #32
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f002 021f 	and.w	r2, r2, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d182      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	4937      	ldr	r1, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002df4:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a19      	ldr	r1, [r3, #32]
 8002e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	492d      	ldr	r1, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e40:	601a      	str	r2, [r3, #0]
  return result;
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e4a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2301      	movs	r3, #1
 8002e60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fd8b 	bl	800197c <HAL_GetTick>
 8002e66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6a:	e009      	b.n	8002e80 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fd86 	bl	800197c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e156      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 8002e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e84:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e92:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ea4:	601a      	str	r2, [r3, #0]
  return result;
 8002ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eaa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002eae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xe3c>
 8002ec4:	4b01      	ldr	r3, [pc, #4]	@ (8002ecc <HAL_RCC_OscConfig+0xe38>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	e02a      	b.n	8002f20 <HAL_RCC_OscConfig+0xe8c>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002efe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f08:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	4b86      	ldr	r3, [pc, #536]	@ (8003138 <HAL_RCC_OscConfig+0x10a4>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f2c:	6011      	str	r1, [r2, #0]
 8002f2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	fa92 f1a2 	rbit	r1, r2
 8002f3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f40:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002f44:	6011      	str	r1, [r2, #0]
  return result;
 8002f46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f4a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f002 021f 	and.w	r2, r2, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f43f af7f 	beq.w	8002e6c <HAL_RCC_OscConfig+0xdd8>
 8002f6e:	e0dd      	b.n	800312c <HAL_RCC_OscConfig+0x1098>
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f82:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f90:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f94:	601a      	str	r2, [r3, #0]
  return result;
 8002f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f9e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002faa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fce1 	bl	800197c <HAL_GetTick>
 8002fba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbe:	e009      	b.n	8002fd4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fcdc 	bl	800197c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0ac      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ff8:	601a      	str	r2, [r3, #0]
  return result;
 8002ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003002:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0xf8a>
 8003018:	4b47      	ldr	r3, [pc, #284]	@ (8003138 <HAL_RCC_OscConfig+0x10a4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e027      	b.n	800306e <HAL_RCC_OscConfig+0xfda>
 800301e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003022:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003026:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800302a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003030:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800304c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003056:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fa93 f2a3 	rbit	r2, r3
 8003060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003064:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4b33      	ldr	r3, [pc, #204]	@ (8003138 <HAL_RCC_OscConfig+0x10a4>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003072:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003076:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800307a:	6011      	str	r1, [r2, #0]
 800307c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003080:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	fa92 f1a2 	rbit	r1, r2
 800308a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800308e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003092:	6011      	str	r1, [r2, #0]
  return result;
 8003094:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003098:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	fab2 f282 	clz	r2, r2
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f002 021f 	and.w	r2, r2, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d182      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xf2c>
 80030ba:	e037      	b.n	800312c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e02e      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_RCC_OscConfig+0x10a4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80030d8:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <HAL_RCC_OscConfig+0x10a4>)
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030e4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d117      	bne.n	8003128 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030fc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800310c:	429a      	cmp	r2, r3
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b09e      	sub	sp, #120	@ 0x78
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e162      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b90      	ldr	r3, [pc, #576]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d910      	bls.n	8003184 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b8d      	ldr	r3, [pc, #564]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	498b      	ldr	r1, [pc, #556]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b89      	ldr	r3, [pc, #548]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e14a      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	497f      	ldr	r1, [pc, #508]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80dc 	beq.w	8003368 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d13c      	bne.n	8003232 <HAL_RCC_ClockConfig+0xf6>
 80031b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xa6>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	e00f      	b.n	8003202 <HAL_RCC_ClockConfig+0xc6>
 80031e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80031f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031fe:	4b67      	ldr	r3, [pc, #412]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003206:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003208:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800320a:	fa92 f2a2 	rbit	r2, r2
 800320e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003210:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d17b      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0f3      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d13c      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x178>
 800323a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_RCC_ClockConfig+0x128>
 800325e:	4b4f      	ldr	r3, [pc, #316]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	e00f      	b.n	8003284 <HAL_RCC_ClockConfig+0x148>
 8003264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003268:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	647b      	str	r3, [r7, #68]	@ 0x44
 8003272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003280:	4b46      	ldr	r3, [pc, #280]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003288:	63ba      	str	r2, [r7, #56]	@ 0x38
 800328a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d13a      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b2      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
 80032b4:	2302      	movs	r3, #2
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_ClockConfig+0x1a0>
 80032d6:	4b31      	ldr	r3, [pc, #196]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e00d      	b.n	80032f8 <HAL_RCC_ClockConfig+0x1bc>
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	2202      	movs	r2, #2
 80032fa:	61ba      	str	r2, [r7, #24]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	617a      	str	r2, [r7, #20]
  return result;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e079      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	491a      	ldr	r1, [pc, #104]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fb20 	bl	800197c <HAL_GetTick>
 800333c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fb1c 	bl	800197c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e061      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_ClockConfig+0x260>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d214      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4906      	ldr	r1, [pc, #24]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e040      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	491a      	ldr	r1, [pc, #104]	@ (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4912      	ldr	r1, [pc, #72]	@ (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033de:	f000 f829 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033e2:	4601      	mov	r1, r0
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ec:	22f0      	movs	r2, #240	@ 0xf0
 80033ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	60fa      	str	r2, [r7, #12]
  return result;
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	fab2 f282 	clz	r2, r2
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	40d3      	lsrs	r3, r2
 8003402:	4a09      	ldr	r2, [pc, #36]	@ (8003428 <HAL_RCC_ClockConfig+0x2ec>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	fa21 f303 	lsr.w	r3, r1, r3
 800340a:	4a08      	ldr	r2, [pc, #32]	@ (800342c <HAL_RCC_ClockConfig+0x2f0>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <HAL_RCC_ClockConfig+0x2f4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fa6e 	bl	80018f4 <HAL_InitTick>
  
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3778      	adds	r7, #120	@ 0x78
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	0800776c 	.word	0x0800776c
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b08b      	sub	sp, #44	@ 0x2c
 8003438:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800344e:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d002      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x30>
 800345e:	2b08      	cmp	r3, #8
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x36>
 8003462:	e03f      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003466:	623b      	str	r3, [r7, #32]
      break;
 8003468:	e03f      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003470:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003474:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	607a      	str	r2, [r7, #4]
  return result;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	40d3      	lsrs	r3, r2
 8003488:	4a1d      	ldr	r2, [pc, #116]	@ (8003500 <HAL_RCC_GetSysClockFreq+0xcc>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800348e:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	220f      	movs	r2, #15
 8003498:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	60fa      	str	r2, [r7, #12]
  return result;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a15      	ldr	r2, [pc, #84]	@ (8003504 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034bc:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80034cc:	e007      	b.n	80034de <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ce:	4a0b      	ldr	r2, [pc, #44]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	623b      	str	r3, [r7, #32]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	372c      	adds	r7, #44	@ 0x2c
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40021000 	.word	0x40021000
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	08007784 	.word	0x08007784
 8003504:	08007794 	.word	0x08007794

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003526:	f7ff ffef 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800352a:	4601      	mov	r1, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003534:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003538:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	603a      	str	r2, [r7, #0]
  return result;
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	40d3      	lsrs	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <HAL_RCC_GetPCLK1Freq+0x40>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	0800777c 	.word	0x0800777c

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800356a:	f7ff ffcd 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800356e:	4601      	mov	r1, r0
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003578:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800357c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	603a      	str	r2, [r7, #0]
  return result;
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	40d3      	lsrs	r3, r2
 8003590:	4a04      	ldr	r2, [pc, #16]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	0800777c 	.word	0x0800777c

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b092      	sub	sp, #72	@ 0x48
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80d4 	beq.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	4b48      	ldr	r3, [pc, #288]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b45      	ldr	r3, [pc, #276]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b42      	ldr	r3, [pc, #264]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a41      	ldr	r2, [pc, #260]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe f9b5 	bl	800197c <HAL_GetTick>
 8003612:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe f9b1 	bl	800197c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	@ 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1d6      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b38      	ldr	r3, [pc, #224]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003634:	4b34      	ldr	r3, [pc, #208]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8084 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003650:	429a      	cmp	r2, r3
 8003652:	d07c      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003654:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800365e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4b26      	ldr	r3, [pc, #152]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2301      	movs	r3, #1
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	461a      	mov	r2, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a6:	4a18      	ldr	r2, [pc, #96]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04b      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe f961 	bl	800197c <HAL_GetTick>
 80036ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f95d 	bl	800197c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e180      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	2302      	movs	r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
  return result;
 80036ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d108      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003702:	4b01      	ldr	r3, [pc, #4]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	e00d      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	10908100 	.word	0x10908100
 8003714:	2302      	movs	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	4b9a      	ldr	r3, [pc, #616]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	2202      	movs	r2, #2
 8003726:	613a      	str	r2, [r7, #16]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	60fa      	str	r2, [r7, #12]
  return result;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0b7      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800374e:	4b8f      	ldr	r3, [pc, #572]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	498c      	ldr	r1, [pc, #560]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003760:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b88      	ldr	r3, [pc, #544]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a87      	ldr	r2, [pc, #540]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003780:	4b82      	ldr	r3, [pc, #520]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	f023 0203 	bic.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	497f      	ldr	r1, [pc, #508]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379e:	4b7b      	ldr	r3, [pc, #492]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4978      	ldr	r1, [pc, #480]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037bc:	4b73      	ldr	r3, [pc, #460]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4970      	ldr	r1, [pc, #448]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037da:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f023 0210 	bic.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4969      	ldr	r1, [pc, #420]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037f8:	4b64      	ldr	r3, [pc, #400]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	4961      	ldr	r1, [pc, #388]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003816:	4b5d      	ldr	r3, [pc, #372]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f023 0220 	bic.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	495a      	ldr	r1, [pc, #360]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003834:	4b55      	ldr	r3, [pc, #340]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	4952      	ldr	r1, [pc, #328]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003852:	4b4e      	ldr	r3, [pc, #312]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	494b      	ldr	r1, [pc, #300]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003870:	4b46      	ldr	r3, [pc, #280]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	4943      	ldr	r1, [pc, #268]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800388e:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	493c      	ldr	r1, [pc, #240]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ac:	4b37      	ldr	r3, [pc, #220]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	4934      	ldr	r1, [pc, #208]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038ca:	4b30      	ldr	r3, [pc, #192]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	492d      	ldr	r1, [pc, #180]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038e8:	4b28      	ldr	r3, [pc, #160]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f4:	4925      	ldr	r1, [pc, #148]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003906:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	491e      	ldr	r1, [pc, #120]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	4916      	ldr	r1, [pc, #88]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003942:	4b12      	ldr	r3, [pc, #72]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	490f      	ldr	r1, [pc, #60]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800397e:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003992:	4913      	ldr	r1, [pc, #76]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003994:	4313      	orrs	r3, r2
 8003996:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039a4:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b0:	490b      	ldr	r1, [pc, #44]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039c2:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	4904      	ldr	r1, [pc, #16]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3748      	adds	r7, #72	@ 0x48
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e04f      	b.n	8003a9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a23      	ldr	r2, [pc, #140]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a26:	d018      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_TIM_Base_Start_IT+0xc8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x76>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d115      	bne.n	8003a86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d015      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0xb4>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a72:	d011      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	e008      	b.n	8003a98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e000      	b.n	8003a9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40015000 	.word	0x40015000
 8003ac0:	00010007 	.word	0x00010007

08003ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e049      	b.n	8003b6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fc70 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 fb9e 	bl	8004244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start+0x24>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e03c      	b.n	8003c12 <HAL_TIM_PWM_Start+0x9e>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d109      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x3e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	bf14      	ite	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	2300      	moveq	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e02f      	b.n	8003c12 <HAL_TIM_PWM_Start+0x9e>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start+0x58>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e022      	b.n	8003c12 <HAL_TIM_PWM_Start+0x9e>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d109      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x72>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e015      	b.n	8003c12 <HAL_TIM_PWM_Start+0x9e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start+0x8c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e008      	b.n	8003c12 <HAL_TIM_PWM_Start+0x9e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0a1      	b.n	8003d5e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xb6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c28:	e023      	b.n	8003c72 <HAL_TIM_PWM_Start+0xfe>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xc6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	e01b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xfe>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xd6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c48:	e013      	b.n	8003c72 <HAL_TIM_PWM_Start+0xfe>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xe6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c58:	e00b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xfe>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xf6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c68:	e003      	b.n	8003c72 <HAL_TIM_PWM_Start+0xfe>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe86 	bl	800498c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <HAL_TIM_PWM_Start+0x1f4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x148>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a37      	ldr	r2, [pc, #220]	@ (8003d6c <HAL_TIM_PWM_Start+0x1f8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x148>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a35      	ldr	r2, [pc, #212]	@ (8003d70 <HAL_TIM_PWM_Start+0x1fc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x148>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a34      	ldr	r2, [pc, #208]	@ (8003d74 <HAL_TIM_PWM_Start+0x200>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x148>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a32      	ldr	r2, [pc, #200]	@ (8003d78 <HAL_TIM_PWM_Start+0x204>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_PWM_Start+0x148>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a31      	ldr	r2, [pc, #196]	@ (8003d7c <HAL_TIM_PWM_Start+0x208>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0x14c>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_TIM_PWM_Start+0x14e>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_TIM_PWM_Start+0x1f4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d01d      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a24      	ldr	r2, [pc, #144]	@ (8003d80 <HAL_TIM_PWM_Start+0x20c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	@ (8003d84 <HAL_TIM_PWM_Start+0x210>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <HAL_TIM_PWM_Start+0x1f8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <HAL_TIM_PWM_Start+0x1fc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x1a8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a19      	ldr	r2, [pc, #100]	@ (8003d7c <HAL_TIM_PWM_Start+0x208>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d115      	bne.n	8003d48 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_TIM_PWM_Start+0x214>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d015      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x1e6>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d34:	d011      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	e008      	b.n	8003d5a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40013400 	.word	0x40013400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800
 8003d7c:	40015000 	.word	0x40015000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	00010007 	.word	0x00010007

08003d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0202 	mvn.w	r2, #2
 8003db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa1a 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa0c 	bl	80041f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa1d 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d122      	bne.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11b      	bne.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0204 	mvn.w	r2, #4
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9f0 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9e2 	bl	80041f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f9f3 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0208 	mvn.w	r2, #8
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2204      	movs	r2, #4
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9c6 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9b8 	bl	80041f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f9c9 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0210 	mvn.w	r2, #16
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f99c 	bl	8004208 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f98e 	bl	80041f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f99f 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0201 	mvn.w	r2, #1
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc fad4 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b80      	cmp	r3, #128	@ 0x80
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f28:	2b80      	cmp	r3, #128	@ 0x80
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fe6a 	bl	8004c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f56:	2b80      	cmp	r3, #128	@ 0x80
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fe5d 	bl	8004c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d10e      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f94d 	bl	8004230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0220 	mvn.w	r2, #32
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fe1d 	bl	8004bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0ff      	b.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b14      	cmp	r3, #20
 8003ff6:	f200 80f0 	bhi.w	80041da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004055 	.word	0x08004055
 8004004:	080041db 	.word	0x080041db
 8004008:	080041db 	.word	0x080041db
 800400c:	080041db 	.word	0x080041db
 8004010:	08004095 	.word	0x08004095
 8004014:	080041db 	.word	0x080041db
 8004018:	080041db 	.word	0x080041db
 800401c:	080041db 	.word	0x080041db
 8004020:	080040d7 	.word	0x080040d7
 8004024:	080041db 	.word	0x080041db
 8004028:	080041db 	.word	0x080041db
 800402c:	080041db 	.word	0x080041db
 8004030:	08004117 	.word	0x08004117
 8004034:	080041db 	.word	0x080041db
 8004038:	080041db 	.word	0x080041db
 800403c:	080041db 	.word	0x080041db
 8004040:	08004159 	.word	0x08004159
 8004044:	080041db 	.word	0x080041db
 8004048:	080041db 	.word	0x080041db
 800404c:	080041db 	.word	0x080041db
 8004050:	08004199 	.word	0x08004199
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f990 	bl	8004380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0204 	bic.w	r2, r2, #4
 800407e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
      break;
 8004092:	e0a5      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fa0a 	bl	80044b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6999      	ldr	r1, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	619a      	str	r2, [r3, #24]
      break;
 80040d4:	e084      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fa7d 	bl	80045dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0208 	orr.w	r2, r2, #8
 80040f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0204 	bic.w	r2, r2, #4
 8004100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69d9      	ldr	r1, [r3, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	61da      	str	r2, [r3, #28]
      break;
 8004114:	e064      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 faef 	bl	8004700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69d9      	ldr	r1, [r3, #28]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	021a      	lsls	r2, r3, #8
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	61da      	str	r2, [r3, #28]
      break;
 8004156:	e043      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fb3e 	bl	80047e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004196:	e023      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb88 	bl	80048b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041d8:	e002      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
      break;
 80041de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop

080041f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a42      	ldr	r2, [pc, #264]	@ (8004360 <TIM_Base_SetConfig+0x11c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3f      	ldr	r2, [pc, #252]	@ (8004364 <TIM_Base_SetConfig+0x120>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3e      	ldr	r2, [pc, #248]	@ (8004368 <TIM_Base_SetConfig+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3d      	ldr	r2, [pc, #244]	@ (800436c <TIM_Base_SetConfig+0x128>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3c      	ldr	r2, [pc, #240]	@ (8004370 <TIM_Base_SetConfig+0x12c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a31      	ldr	r2, [pc, #196]	@ (8004360 <TIM_Base_SetConfig+0x11c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a4:	d01b      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004364 <TIM_Base_SetConfig+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d017      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004368 <TIM_Base_SetConfig+0x124>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2c      	ldr	r2, [pc, #176]	@ (800436c <TIM_Base_SetConfig+0x128>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00f      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <TIM_Base_SetConfig+0x130>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <TIM_Base_SetConfig+0x134>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2a      	ldr	r2, [pc, #168]	@ (800437c <TIM_Base_SetConfig+0x138>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_Base_SetConfig+0x9a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <TIM_Base_SetConfig+0x12c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d108      	bne.n	80042f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <TIM_Base_SetConfig+0x11c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <TIM_Base_SetConfig+0x100>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a13      	ldr	r2, [pc, #76]	@ (800436c <TIM_Base_SetConfig+0x128>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00f      	beq.n	8004344 <TIM_Base_SetConfig+0x100>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a13      	ldr	r2, [pc, #76]	@ (8004374 <TIM_Base_SetConfig+0x130>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_Base_SetConfig+0x100>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <TIM_Base_SetConfig+0x134>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_Base_SetConfig+0x100>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a11      	ldr	r2, [pc, #68]	@ (800437c <TIM_Base_SetConfig+0x138>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_Base_SetConfig+0x100>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <TIM_Base_SetConfig+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40013400 	.word	0x40013400
 8004370:	40015000 	.word	0x40015000
 8004374:	40014000 	.word	0x40014000
 8004378:	40014400 	.word	0x40014400
 800437c:	40014800 	.word	0x40014800

08004380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0302 	bic.w	r3, r3, #2
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a30      	ldr	r2, [pc, #192]	@ (800449c <TIM_OC1_SetConfig+0x11c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <TIM_OC1_SetConfig+0x88>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <TIM_OC1_SetConfig+0x120>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00f      	beq.n	8004408 <TIM_OC1_SetConfig+0x88>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <TIM_OC1_SetConfig+0x124>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00b      	beq.n	8004408 <TIM_OC1_SetConfig+0x88>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <TIM_OC1_SetConfig+0x128>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d007      	beq.n	8004408 <TIM_OC1_SetConfig+0x88>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <TIM_OC1_SetConfig+0x12c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC1_SetConfig+0x88>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2b      	ldr	r2, [pc, #172]	@ (80044b0 <TIM_OC1_SetConfig+0x130>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10c      	bne.n	8004422 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0308 	bic.w	r3, r3, #8
 800440e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <TIM_OC1_SetConfig+0x11c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <TIM_OC1_SetConfig+0xd2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1c      	ldr	r2, [pc, #112]	@ (80044a0 <TIM_OC1_SetConfig+0x120>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00f      	beq.n	8004452 <TIM_OC1_SetConfig+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1b      	ldr	r2, [pc, #108]	@ (80044a4 <TIM_OC1_SetConfig+0x124>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00b      	beq.n	8004452 <TIM_OC1_SetConfig+0xd2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1a      	ldr	r2, [pc, #104]	@ (80044a8 <TIM_OC1_SetConfig+0x128>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <TIM_OC1_SetConfig+0xd2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <TIM_OC1_SetConfig+0x12c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC1_SetConfig+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <TIM_OC1_SetConfig+0x130>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d111      	bne.n	8004476 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40013400 	.word	0x40013400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	40015000 	.word	0x40015000

080044b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0210 	bic.w	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0320 	bic.w	r3, r3, #32
 8004502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2c      	ldr	r2, [pc, #176]	@ (80045c4 <TIM_OC2_SetConfig+0x110>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC2_SetConfig+0x74>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <TIM_OC2_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC2_SetConfig+0x74>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <TIM_OC2_SetConfig+0x118>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <TIM_OC2_SetConfig+0x110>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <TIM_OC2_SetConfig+0xc0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <TIM_OC2_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00f      	beq.n	8004574 <TIM_OC2_SetConfig+0xc0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <TIM_OC2_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_OC2_SetConfig+0xc0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <TIM_OC2_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC2_SetConfig+0xc0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <TIM_OC2_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC2_SetConfig+0xc0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	@ (80045cc <TIM_OC2_SetConfig+0x118>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d113      	bne.n	800459c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800457a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004582:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40015000 	.word	0x40015000
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2b      	ldr	r2, [pc, #172]	@ (80046e8 <TIM_OC3_SetConfig+0x10c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC3_SetConfig+0x72>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <TIM_OC3_SetConfig+0x110>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0x72>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <TIM_OC3_SetConfig+0x114>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10d      	bne.n	800466a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004668:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1e      	ldr	r2, [pc, #120]	@ (80046e8 <TIM_OC3_SetConfig+0x10c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_OC3_SetConfig+0xbe>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <TIM_OC3_SetConfig+0x110>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_OC3_SetConfig+0xbe>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <TIM_OC3_SetConfig+0x118>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_OC3_SetConfig+0xbe>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <TIM_OC3_SetConfig+0x11c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_OC3_SetConfig+0xbe>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <TIM_OC3_SetConfig+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_OC3_SetConfig+0xbe>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <TIM_OC3_SetConfig+0x114>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d113      	bne.n	80046c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40013400 	.word	0x40013400
 80046f0:	40015000 	.word	0x40015000
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1a      	ldr	r2, [pc, #104]	@ (80047c8 <TIM_OC4_SetConfig+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <TIM_OC4_SetConfig+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <TIM_OC4_SetConfig+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00f      	beq.n	800478c <TIM_OC4_SetConfig+0x8c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <TIM_OC4_SetConfig+0xd0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00b      	beq.n	800478c <TIM_OC4_SetConfig+0x8c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a17      	ldr	r2, [pc, #92]	@ (80047d4 <TIM_OC4_SetConfig+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <TIM_OC4_SetConfig+0x8c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a16      	ldr	r2, [pc, #88]	@ (80047d8 <TIM_OC4_SetConfig+0xd8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_OC4_SetConfig+0x8c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <TIM_OC4_SetConfig+0xdc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d109      	bne.n	80047a0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800
 80047dc:	40015000 	.word	0x40015000

080047e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004824:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a19      	ldr	r2, [pc, #100]	@ (800489c <TIM_OC5_SetConfig+0xbc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <TIM_OC5_SetConfig+0x82>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <TIM_OC5_SetConfig+0xc0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_OC5_SetConfig+0x82>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <TIM_OC5_SetConfig+0xc4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_OC5_SetConfig+0x82>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <TIM_OC5_SetConfig+0xc8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_OC5_SetConfig+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <TIM_OC5_SetConfig+0xcc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC5_SetConfig+0x82>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <TIM_OC5_SetConfig+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d109      	bne.n	8004876 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40015000 	.word	0x40015000

080048b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	051b      	lsls	r3, r3, #20
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1a      	ldr	r2, [pc, #104]	@ (8004974 <TIM_OC6_SetConfig+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_OC6_SetConfig+0x84>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <TIM_OC6_SetConfig+0xc4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_OC6_SetConfig+0x84>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a18      	ldr	r2, [pc, #96]	@ (800497c <TIM_OC6_SetConfig+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC6_SetConfig+0x84>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	@ (8004980 <TIM_OC6_SetConfig+0xcc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC6_SetConfig+0x84>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a16      	ldr	r2, [pc, #88]	@ (8004984 <TIM_OC6_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC6_SetConfig+0x84>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a15      	ldr	r2, [pc, #84]	@ (8004988 <TIM_OC6_SetConfig+0xd4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d109      	bne.n	800494c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800
 8004988:	40015000 	.word	0x40015000

0800498c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e06d      	b.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a30      	ldr	r2, [pc, #192]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40015000 	.word	0x40015000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40014000 	.word	0x40014000

08004af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e06a      	b.n	8004be2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d115      	bne.n	8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	051b      	lsls	r3, r3, #20
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40015000 	.word	0x40015000

08004bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e040      	b.n	8004ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fd86 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	@ 0x24
 8004c64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc00 	bl	800547c <UART_SetConfig>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fdc8 	bl	8005824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fe4f 	bl	8005968 <UART_CheckIdleState>
 8004cca:	4603      	mov	r3, r0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	@ 0x28
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d177      	bne.n	8004ddc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Transmit+0x24>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e070      	b.n	8004dde <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2221      	movs	r2, #33	@ 0x21
 8004d08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc fe37 	bl	800197c <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x68>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d44:	e02f      	b.n	8004da6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 feb1 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e03b      	b.n	8004dde <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	3302      	adds	r3, #2
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e007      	b.n	8004d94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1c9      	bne.n	8004d46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2140      	movs	r1, #64	@ 0x40
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fe7b 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e005      	b.n	8004dde <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b08a      	sub	sp, #40	@ 0x28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d132      	bne.n	8004e64 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_Receive_IT+0x24>
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e02b      	b.n	8004e66 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69f9      	ldr	r1, [r7, #28]
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fe94 	bl	8005b88 <UART_Start_Receive_IT>
 8004e60:	4603      	mov	r3, r0
 8004e62:	e000      	b.n	8004e66 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3728      	adds	r7, #40	@ 0x28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b0ba      	sub	sp, #232	@ 0xe8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00f      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 82ab 	beq.w	8005424 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
      }
      return;
 8004ed6:	e2a5      	b.n	8005424 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8117 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ef2:	4b85      	ldr	r3, [pc, #532]	@ (8005108 <HAL_UART_IRQHandler+0x298>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 810a 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
 8004f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d011      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
 8004f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f82:	f043 0202 	orr.w	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8211 	beq.w	8005428 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005034:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b40      	cmp	r3, #64	@ 0x40
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04f      	beq.n	80050f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fe5e 	bl	8005d14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	d141      	bne.n	80050ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800507c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800509e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1d9      	bne.n	8005066 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	4a13      	ldr	r2, [pc, #76]	@ (800510c <HAL_UART_IRQHandler+0x29c>)
 80050c0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fdd2 	bl	8001c70 <HAL_DMA_Abort_IT>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050dc:	4610      	mov	r0, r2
 80050de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00f      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9b4 	bl	8005450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e00b      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9b0 	bl	8005450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e007      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ac 	bl	8005450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005100:	e192      	b.n	8005428 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005102:	bf00      	nop
    return;
 8005104:	e190      	b.n	8005428 <HAL_UART_IRQHandler+0x5b8>
 8005106:	bf00      	nop
 8005108:	04000120 	.word	0x04000120
 800510c:	08005ddd 	.word	0x08005ddd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 814b 	bne.w	80053b0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8144 	beq.w	80053b0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 813d 	beq.w	80053b0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	f040 80b5 	bne.w	80052b8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800515a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8164 	beq.w	800542c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800516a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800516e:	429a      	cmp	r2, r3
 8005170:	f080 815c 	bcs.w	800542c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b20      	cmp	r3, #32
 8005186:	f000 8086 	beq.w	8005296 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800519e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051b8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1da      	bne.n	800518a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005200:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800520a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e1      	bne.n	80051d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005234:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800523a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e3      	bne.n	8005210 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005278:	65bb      	str	r3, [r7, #88]	@ 0x58
 800527a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800527e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e4      	bne.n	8005256 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005290:	4618      	mov	r0, r3
 8005292:	f7fc fcb4 	bl	8001bfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8d7 	bl	8005464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b6:	e0b9      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80ab 	beq.w	8005430 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80052da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80a6 	beq.w	8005430 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005306:	647b      	str	r3, [r7, #68]	@ 0x44
 8005308:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800530c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e4      	bne.n	80052e4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	623b      	str	r3, [r7, #32]
   return(result);
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800533e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60fb      	str	r3, [r7, #12]
   return(result);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e4      	bne.n	8005366 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f85b 	bl	8005464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ae:	e03f      	b.n	8005430 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <HAL_UART_IRQHandler+0x56a>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 feea 	bl	80061ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d8:	e02d      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00e      	beq.n	8005404 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01c      	beq.n	8005434 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
    }
    return;
 8005402:	e017      	b.n	8005434 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d012      	beq.n	8005436 <HAL_UART_IRQHandler+0x5c6>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fcf3 	bl	8005e08 <UART_EndTransmit_IT>
    return;
 8005422:	e008      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005424:	bf00      	nop
 8005426:	e006      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005428:	bf00      	nop
 800542a:	e004      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 800542c:	bf00      	nop
 800542e:	e002      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005434:	bf00      	nop
  }

}
 8005436:	37e8      	adds	r7, #232	@ 0xe8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b92      	ldr	r3, [pc, #584]	@ (80056f0 <UART_SetConfig+0x274>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a80      	ldr	r2, [pc, #512]	@ (80056f4 <UART_SetConfig+0x278>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d120      	bne.n	800553a <UART_SetConfig+0xbe>
 80054f8:	4b7f      	ldr	r3, [pc, #508]	@ (80056f8 <UART_SetConfig+0x27c>)
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b03      	cmp	r3, #3
 8005502:	d817      	bhi.n	8005534 <UART_SetConfig+0xb8>
 8005504:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x90>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	0800551d 	.word	0x0800551d
 8005510:	08005529 	.word	0x08005529
 8005514:	0800552f 	.word	0x0800552f
 8005518:	08005523 	.word	0x08005523
 800551c:	2301      	movs	r3, #1
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e0b5      	b.n	800568e <UART_SetConfig+0x212>
 8005522:	2302      	movs	r3, #2
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	e0b2      	b.n	800568e <UART_SetConfig+0x212>
 8005528:	2304      	movs	r3, #4
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e0af      	b.n	800568e <UART_SetConfig+0x212>
 800552e:	2308      	movs	r3, #8
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e0ac      	b.n	800568e <UART_SetConfig+0x212>
 8005534:	2310      	movs	r3, #16
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e0a9      	b.n	800568e <UART_SetConfig+0x212>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6f      	ldr	r2, [pc, #444]	@ (80056fc <UART_SetConfig+0x280>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d124      	bne.n	800558e <UART_SetConfig+0x112>
 8005544:	4b6c      	ldr	r3, [pc, #432]	@ (80056f8 <UART_SetConfig+0x27c>)
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800554c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005550:	d011      	beq.n	8005576 <UART_SetConfig+0xfa>
 8005552:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005556:	d817      	bhi.n	8005588 <UART_SetConfig+0x10c>
 8005558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800555c:	d011      	beq.n	8005582 <UART_SetConfig+0x106>
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005562:	d811      	bhi.n	8005588 <UART_SetConfig+0x10c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <UART_SetConfig+0xf4>
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556c:	d006      	beq.n	800557c <UART_SetConfig+0x100>
 800556e:	e00b      	b.n	8005588 <UART_SetConfig+0x10c>
 8005570:	2300      	movs	r3, #0
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e08b      	b.n	800568e <UART_SetConfig+0x212>
 8005576:	2302      	movs	r3, #2
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e088      	b.n	800568e <UART_SetConfig+0x212>
 800557c:	2304      	movs	r3, #4
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e085      	b.n	800568e <UART_SetConfig+0x212>
 8005582:	2308      	movs	r3, #8
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e082      	b.n	800568e <UART_SetConfig+0x212>
 8005588:	2310      	movs	r3, #16
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e07f      	b.n	800568e <UART_SetConfig+0x212>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5b      	ldr	r2, [pc, #364]	@ (8005700 <UART_SetConfig+0x284>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d124      	bne.n	80055e2 <UART_SetConfig+0x166>
 8005598:	4b57      	ldr	r3, [pc, #348]	@ (80056f8 <UART_SetConfig+0x27c>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80055a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80055a4:	d011      	beq.n	80055ca <UART_SetConfig+0x14e>
 80055a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80055aa:	d817      	bhi.n	80055dc <UART_SetConfig+0x160>
 80055ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055b0:	d011      	beq.n	80055d6 <UART_SetConfig+0x15a>
 80055b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055b6:	d811      	bhi.n	80055dc <UART_SetConfig+0x160>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <UART_SetConfig+0x148>
 80055bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055c0:	d006      	beq.n	80055d0 <UART_SetConfig+0x154>
 80055c2:	e00b      	b.n	80055dc <UART_SetConfig+0x160>
 80055c4:	2300      	movs	r3, #0
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e061      	b.n	800568e <UART_SetConfig+0x212>
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e05e      	b.n	800568e <UART_SetConfig+0x212>
 80055d0:	2304      	movs	r3, #4
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e05b      	b.n	800568e <UART_SetConfig+0x212>
 80055d6:	2308      	movs	r3, #8
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e058      	b.n	800568e <UART_SetConfig+0x212>
 80055dc:	2310      	movs	r3, #16
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e055      	b.n	800568e <UART_SetConfig+0x212>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a47      	ldr	r2, [pc, #284]	@ (8005704 <UART_SetConfig+0x288>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d124      	bne.n	8005636 <UART_SetConfig+0x1ba>
 80055ec:	4b42      	ldr	r3, [pc, #264]	@ (80056f8 <UART_SetConfig+0x27c>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80055f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f8:	d011      	beq.n	800561e <UART_SetConfig+0x1a2>
 80055fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055fe:	d817      	bhi.n	8005630 <UART_SetConfig+0x1b4>
 8005600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005604:	d011      	beq.n	800562a <UART_SetConfig+0x1ae>
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560a:	d811      	bhi.n	8005630 <UART_SetConfig+0x1b4>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <UART_SetConfig+0x19c>
 8005610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005614:	d006      	beq.n	8005624 <UART_SetConfig+0x1a8>
 8005616:	e00b      	b.n	8005630 <UART_SetConfig+0x1b4>
 8005618:	2300      	movs	r3, #0
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e037      	b.n	800568e <UART_SetConfig+0x212>
 800561e:	2302      	movs	r3, #2
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e034      	b.n	800568e <UART_SetConfig+0x212>
 8005624:	2304      	movs	r3, #4
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e031      	b.n	800568e <UART_SetConfig+0x212>
 800562a:	2308      	movs	r3, #8
 800562c:	77fb      	strb	r3, [r7, #31]
 800562e:	e02e      	b.n	800568e <UART_SetConfig+0x212>
 8005630:	2310      	movs	r3, #16
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e02b      	b.n	800568e <UART_SetConfig+0x212>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a33      	ldr	r2, [pc, #204]	@ (8005708 <UART_SetConfig+0x28c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d124      	bne.n	800568a <UART_SetConfig+0x20e>
 8005640:	4b2d      	ldr	r3, [pc, #180]	@ (80056f8 <UART_SetConfig+0x27c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005648:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800564c:	d011      	beq.n	8005672 <UART_SetConfig+0x1f6>
 800564e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005652:	d817      	bhi.n	8005684 <UART_SetConfig+0x208>
 8005654:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005658:	d011      	beq.n	800567e <UART_SetConfig+0x202>
 800565a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800565e:	d811      	bhi.n	8005684 <UART_SetConfig+0x208>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <UART_SetConfig+0x1f0>
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005668:	d006      	beq.n	8005678 <UART_SetConfig+0x1fc>
 800566a:	e00b      	b.n	8005684 <UART_SetConfig+0x208>
 800566c:	2300      	movs	r3, #0
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e00d      	b.n	800568e <UART_SetConfig+0x212>
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e00a      	b.n	800568e <UART_SetConfig+0x212>
 8005678:	2304      	movs	r3, #4
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e007      	b.n	800568e <UART_SetConfig+0x212>
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e004      	b.n	800568e <UART_SetConfig+0x212>
 8005684:	2310      	movs	r3, #16
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e001      	b.n	800568e <UART_SetConfig+0x212>
 800568a:	2310      	movs	r3, #16
 800568c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005696:	d16b      	bne.n	8005770 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d838      	bhi.n	8005710 <UART_SetConfig+0x294>
 800569e:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <UART_SetConfig+0x228>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	08005711 	.word	0x08005711
 80056b4:	080056df 	.word	0x080056df
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005711 	.word	0x08005711
 80056c0:	08005711 	.word	0x08005711
 80056c4:	080056e7 	.word	0x080056e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c8:	f7fd ff2a 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 80056cc:	61b8      	str	r0, [r7, #24]
        break;
 80056ce:	e024      	b.n	800571a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d0:	f7fd ff48 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 80056d4:	61b8      	str	r0, [r7, #24]
        break;
 80056d6:	e020      	b.n	800571a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <UART_SetConfig+0x290>)
 80056da:	61bb      	str	r3, [r7, #24]
        break;
 80056dc:	e01d      	b.n	800571a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056de:	f7fd fea9 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80056e2:	61b8      	str	r0, [r7, #24]
        break;
 80056e4:	e019      	b.n	800571a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ea:	61bb      	str	r3, [r7, #24]
        break;
 80056ec:	e015      	b.n	800571a <UART_SetConfig+0x29e>
 80056ee:	bf00      	nop
 80056f0:	efff69f3 	.word	0xefff69f3
 80056f4:	40013800 	.word	0x40013800
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40004400 	.word	0x40004400
 8005700:	40004800 	.word	0x40004800
 8005704:	40004c00 	.word	0x40004c00
 8005708:	40005000 	.word	0x40005000
 800570c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	77bb      	strb	r3, [r7, #30]
        break;
 8005718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d073      	beq.n	8005808 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	005a      	lsls	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	441a      	add	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d916      	bls.n	800576a <UART_SetConfig+0x2ee>
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005742:	d212      	bcs.n	800576a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f023 030f 	bic.w	r3, r3, #15
 800574c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b29a      	uxth	r2, r3
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	4313      	orrs	r3, r2
 800575e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	89fa      	ldrh	r2, [r7, #14]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e04e      	b.n	8005808 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	77bb      	strb	r3, [r7, #30]
 800576e:	e04b      	b.n	8005808 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005770:	7ffb      	ldrb	r3, [r7, #31]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d827      	bhi.n	80057c6 <UART_SetConfig+0x34a>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0x300>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	080057c7 	.word	0x080057c7
 800578c:	080057b7 	.word	0x080057b7
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057c7 	.word	0x080057c7
 8005798:	080057c7 	.word	0x080057c7
 800579c:	080057bf 	.word	0x080057bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fd febe 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 80057a4:	61b8      	str	r0, [r7, #24]
        break;
 80057a6:	e013      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7fd fedc 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 80057ac:	61b8      	str	r0, [r7, #24]
        break;
 80057ae:	e00f      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <UART_SetConfig+0x3a4>)
 80057b2:	61bb      	str	r3, [r7, #24]
        break;
 80057b4:	e00c      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b6:	f7fd fe3d 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80057ba:	61b8      	str	r0, [r7, #24]
        break;
 80057bc:	e008      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c2:	61bb      	str	r3, [r7, #24]
        break;
 80057c4:	e004      	b.n	80057d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	77bb      	strb	r3, [r7, #30]
        break;
 80057ce:	bf00      	nop
    }

    if (pclk != 0U)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085a      	lsrs	r2, r3, #1
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	441a      	add	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b0f      	cmp	r3, #15
 80057ee:	d909      	bls.n	8005804 <UART_SetConfig+0x388>
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f6:	d205      	bcs.n	8005804 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	e001      	b.n	8005808 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005814:	7fbb      	ldrb	r3, [r7, #30]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	007a1200 	.word	0x007a1200

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005922:	d10a      	bne.n	800593a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	@ 0x60
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fc f800 	bl	800197c <HAL_GetTick>
 800597c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d12e      	bne.n	80059ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f88c 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d021      	beq.n	80059ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e062      	b.n	8005ab0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d149      	bne.n	8005a8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f856 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03c      	beq.n	8005a8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e6      	bne.n	8005a12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a64:	61fa      	str	r2, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	617b      	str	r3, [r7, #20]
   return(result);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e5      	bne.n	8005a44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e011      	b.n	8005ab0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3758      	adds	r7, #88	@ 0x58
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	e049      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d045      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fb ff53 	bl	800197c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e048      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d031      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d110      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f8ff 	bl	8005d14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e029      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b38:	d111      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f8e5 	bl	8005d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e00f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d0a6      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b097      	sub	sp, #92	@ 0x5c
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d10e      	bne.n	8005bda <UART_Start_Receive_IT+0x52>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <UART_Start_Receive_IT+0x48>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bce:	e02d      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bd8:	e028      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <UART_Start_Receive_IT+0x76>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <UART_Start_Receive_IT+0x6c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	22ff      	movs	r2, #255	@ 0xff
 8005bee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bf2:	e01b      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	227f      	movs	r2, #127	@ 0x7f
 8005bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bfc:	e016      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c06:	d10d      	bne.n	8005c24 <UART_Start_Receive_IT+0x9c>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <UART_Start_Receive_IT+0x92>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	227f      	movs	r2, #127	@ 0x7f
 8005c14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c18:	e008      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	223f      	movs	r2, #63	@ 0x3f
 8005c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c22:	e003      	b.n	8005c2c <UART_Start_Receive_IT+0xa4>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2222      	movs	r2, #34	@ 0x22
 8005c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c78:	d107      	bne.n	8005c8a <UART_Start_Receive_IT+0x102>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <UART_Start_Receive_IT+0x184>)
 8005c86:	669a      	str	r2, [r3, #104]	@ 0x68
 8005c88:	e002      	b.n	8005c90 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	@ (8005d10 <UART_Start_Receive_IT+0x188>)
 8005c8e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d019      	beq.n	8005ccc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e6      	bne.n	8005c98 <UART_Start_Receive_IT+0x110>
 8005cca:	e018      	b.n	8005cfe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	69f9      	ldr	r1, [r7, #28]
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	375c      	adds	r7, #92	@ 0x5c
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	08006005 	.word	0x08006005
 8005d10:	08005e5d 	.word	0x08005e5d

08005d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b095      	sub	sp, #84	@ 0x54
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e6      	bne.n	8005d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e5      	bne.n	8005d4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d118      	bne.n	8005dbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	613b      	str	r3, [r7, #16]
   return(result);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dd0:	bf00      	nop
 8005dd2:	3754      	adds	r7, #84	@ 0x54
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fb28 	bl	8005450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff faf4 	bl	800543c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e54:	bf00      	nop
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b09c      	sub	sp, #112	@ 0x70
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e74:	2b22      	cmp	r3, #34	@ 0x22
 8005e76:	f040 80b9 	bne.w	8005fec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e88:	b2d9      	uxtb	r1, r3
 8005e8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e94:	400a      	ands	r2, r1
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f040 809c 	bne.w	8005ffc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e6      	bne.n	8005ec4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e6      	bne.n	8005f4c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d12e      	bne.n	8005fe4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0310 	bic.w	r3, r3, #16
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e6      	bne.n	8005f8c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d103      	bne.n	8005fd4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fa41 	bl	8005464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe2:	e00b      	b.n	8005ffc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fa fbef 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8005fea:	e007      	b.n	8005ffc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	619a      	str	r2, [r3, #24]
}
 8005ffc:	bf00      	nop
 8005ffe:	3770      	adds	r7, #112	@ 0x70
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b09c      	sub	sp, #112	@ 0x70
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006012:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800601c:	2b22      	cmp	r3, #34	@ 0x22
 800601e:	f040 80b9 	bne.w	8006194 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006028:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006030:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006032:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006036:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800603a:	4013      	ands	r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006040:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 809c 	bne.w	80061a4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800607a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006080:	667b      	str	r3, [r7, #100]	@ 0x64
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608a:	657b      	str	r3, [r7, #84]	@ 0x54
 800608c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006090:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060be:	643a      	str	r2, [r7, #64]	@ 0x40
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	61fb      	str	r3, [r7, #28]
   return(result);
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006114:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612a:	2b01      	cmp	r3, #1
 800612c:	d12e      	bne.n	800618c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	60bb      	str	r3, [r7, #8]
   return(result);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e6      	bne.n	8006134 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b10      	cmp	r3, #16
 8006172:	d103      	bne.n	800617c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f96d 	bl	8005464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800618a:	e00b      	b.n	80061a4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fa fb1b 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8006192:	e007      	b.n	80061a4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	619a      	str	r2, [r3, #24]
}
 80061a4:	bf00      	nop
 80061a6:	3770      	adds	r7, #112	@ 0x70
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <atoi>:
 80061c0:	220a      	movs	r2, #10
 80061c2:	2100      	movs	r1, #0
 80061c4:	f000 b87a 	b.w	80062bc <strtol>

080061c8 <_strtol_l.constprop.0>:
 80061c8:	2b24      	cmp	r3, #36	@ 0x24
 80061ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ce:	4686      	mov	lr, r0
 80061d0:	4690      	mov	r8, r2
 80061d2:	d801      	bhi.n	80061d8 <_strtol_l.constprop.0+0x10>
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d106      	bne.n	80061e6 <_strtol_l.constprop.0+0x1e>
 80061d8:	f000 fa4a 	bl	8006670 <__errno>
 80061dc:	2316      	movs	r3, #22
 80061de:	6003      	str	r3, [r0, #0]
 80061e0:	2000      	movs	r0, #0
 80061e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e6:	4834      	ldr	r0, [pc, #208]	@ (80062b8 <_strtol_l.constprop.0+0xf0>)
 80061e8:	460d      	mov	r5, r1
 80061ea:	462a      	mov	r2, r5
 80061ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061f0:	5d06      	ldrb	r6, [r0, r4]
 80061f2:	f016 0608 	ands.w	r6, r6, #8
 80061f6:	d1f8      	bne.n	80061ea <_strtol_l.constprop.0+0x22>
 80061f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80061fa:	d12d      	bne.n	8006258 <_strtol_l.constprop.0+0x90>
 80061fc:	782c      	ldrb	r4, [r5, #0]
 80061fe:	2601      	movs	r6, #1
 8006200:	1c95      	adds	r5, r2, #2
 8006202:	f033 0210 	bics.w	r2, r3, #16
 8006206:	d109      	bne.n	800621c <_strtol_l.constprop.0+0x54>
 8006208:	2c30      	cmp	r4, #48	@ 0x30
 800620a:	d12a      	bne.n	8006262 <_strtol_l.constprop.0+0x9a>
 800620c:	782a      	ldrb	r2, [r5, #0]
 800620e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006212:	2a58      	cmp	r2, #88	@ 0x58
 8006214:	d125      	bne.n	8006262 <_strtol_l.constprop.0+0x9a>
 8006216:	786c      	ldrb	r4, [r5, #1]
 8006218:	2310      	movs	r3, #16
 800621a:	3502      	adds	r5, #2
 800621c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006220:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006224:	2200      	movs	r2, #0
 8006226:	fbbc f9f3 	udiv	r9, ip, r3
 800622a:	4610      	mov	r0, r2
 800622c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006230:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006234:	2f09      	cmp	r7, #9
 8006236:	d81b      	bhi.n	8006270 <_strtol_l.constprop.0+0xa8>
 8006238:	463c      	mov	r4, r7
 800623a:	42a3      	cmp	r3, r4
 800623c:	dd27      	ble.n	800628e <_strtol_l.constprop.0+0xc6>
 800623e:	1c57      	adds	r7, r2, #1
 8006240:	d007      	beq.n	8006252 <_strtol_l.constprop.0+0x8a>
 8006242:	4581      	cmp	r9, r0
 8006244:	d320      	bcc.n	8006288 <_strtol_l.constprop.0+0xc0>
 8006246:	d101      	bne.n	800624c <_strtol_l.constprop.0+0x84>
 8006248:	45a2      	cmp	sl, r4
 800624a:	db1d      	blt.n	8006288 <_strtol_l.constprop.0+0xc0>
 800624c:	fb00 4003 	mla	r0, r0, r3, r4
 8006250:	2201      	movs	r2, #1
 8006252:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006256:	e7eb      	b.n	8006230 <_strtol_l.constprop.0+0x68>
 8006258:	2c2b      	cmp	r4, #43	@ 0x2b
 800625a:	bf04      	itt	eq
 800625c:	782c      	ldrbeq	r4, [r5, #0]
 800625e:	1c95      	addeq	r5, r2, #2
 8006260:	e7cf      	b.n	8006202 <_strtol_l.constprop.0+0x3a>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1da      	bne.n	800621c <_strtol_l.constprop.0+0x54>
 8006266:	2c30      	cmp	r4, #48	@ 0x30
 8006268:	bf0c      	ite	eq
 800626a:	2308      	moveq	r3, #8
 800626c:	230a      	movne	r3, #10
 800626e:	e7d5      	b.n	800621c <_strtol_l.constprop.0+0x54>
 8006270:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006274:	2f19      	cmp	r7, #25
 8006276:	d801      	bhi.n	800627c <_strtol_l.constprop.0+0xb4>
 8006278:	3c37      	subs	r4, #55	@ 0x37
 800627a:	e7de      	b.n	800623a <_strtol_l.constprop.0+0x72>
 800627c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006280:	2f19      	cmp	r7, #25
 8006282:	d804      	bhi.n	800628e <_strtol_l.constprop.0+0xc6>
 8006284:	3c57      	subs	r4, #87	@ 0x57
 8006286:	e7d8      	b.n	800623a <_strtol_l.constprop.0+0x72>
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	e7e1      	b.n	8006252 <_strtol_l.constprop.0+0x8a>
 800628e:	1c53      	adds	r3, r2, #1
 8006290:	d108      	bne.n	80062a4 <_strtol_l.constprop.0+0xdc>
 8006292:	2322      	movs	r3, #34	@ 0x22
 8006294:	f8ce 3000 	str.w	r3, [lr]
 8006298:	4660      	mov	r0, ip
 800629a:	f1b8 0f00 	cmp.w	r8, #0
 800629e:	d0a0      	beq.n	80061e2 <_strtol_l.constprop.0+0x1a>
 80062a0:	1e69      	subs	r1, r5, #1
 80062a2:	e006      	b.n	80062b2 <_strtol_l.constprop.0+0xea>
 80062a4:	b106      	cbz	r6, 80062a8 <_strtol_l.constprop.0+0xe0>
 80062a6:	4240      	negs	r0, r0
 80062a8:	f1b8 0f00 	cmp.w	r8, #0
 80062ac:	d099      	beq.n	80061e2 <_strtol_l.constprop.0+0x1a>
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1f6      	bne.n	80062a0 <_strtol_l.constprop.0+0xd8>
 80062b2:	f8c8 1000 	str.w	r1, [r8]
 80062b6:	e794      	b.n	80061e2 <_strtol_l.constprop.0+0x1a>
 80062b8:	080077a5 	.word	0x080077a5

080062bc <strtol>:
 80062bc:	4613      	mov	r3, r2
 80062be:	460a      	mov	r2, r1
 80062c0:	4601      	mov	r1, r0
 80062c2:	4802      	ldr	r0, [pc, #8]	@ (80062cc <strtol+0x10>)
 80062c4:	6800      	ldr	r0, [r0, #0]
 80062c6:	f7ff bf7f 	b.w	80061c8 <_strtol_l.constprop.0>
 80062ca:	bf00      	nop
 80062cc:	20000018 	.word	0x20000018

080062d0 <std>:
 80062d0:	2300      	movs	r3, #0
 80062d2:	b510      	push	{r4, lr}
 80062d4:	4604      	mov	r4, r0
 80062d6:	e9c0 3300 	strd	r3, r3, [r0]
 80062da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062de:	6083      	str	r3, [r0, #8]
 80062e0:	8181      	strh	r1, [r0, #12]
 80062e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80062e4:	81c2      	strh	r2, [r0, #14]
 80062e6:	6183      	str	r3, [r0, #24]
 80062e8:	4619      	mov	r1, r3
 80062ea:	2208      	movs	r2, #8
 80062ec:	305c      	adds	r0, #92	@ 0x5c
 80062ee:	f000 f914 	bl	800651a <memset>
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <std+0x58>)
 80062f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <std+0x5c>)
 80062f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <std+0x60>)
 80062fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <std+0x64>)
 8006300:	6323      	str	r3, [r4, #48]	@ 0x30
 8006302:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <std+0x68>)
 8006304:	6224      	str	r4, [r4, #32]
 8006306:	429c      	cmp	r4, r3
 8006308:	d006      	beq.n	8006318 <std+0x48>
 800630a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800630e:	4294      	cmp	r4, r2
 8006310:	d002      	beq.n	8006318 <std+0x48>
 8006312:	33d0      	adds	r3, #208	@ 0xd0
 8006314:	429c      	cmp	r4, r3
 8006316:	d105      	bne.n	8006324 <std+0x54>
 8006318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800631c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006320:	f000 b9d0 	b.w	80066c4 <__retarget_lock_init_recursive>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	bf00      	nop
 8006328:	08006495 	.word	0x08006495
 800632c:	080064b7 	.word	0x080064b7
 8006330:	080064ef 	.word	0x080064ef
 8006334:	08006513 	.word	0x08006513
 8006338:	200005d8 	.word	0x200005d8

0800633c <stdio_exit_handler>:
 800633c:	4a02      	ldr	r2, [pc, #8]	@ (8006348 <stdio_exit_handler+0xc>)
 800633e:	4903      	ldr	r1, [pc, #12]	@ (800634c <stdio_exit_handler+0x10>)
 8006340:	4803      	ldr	r0, [pc, #12]	@ (8006350 <stdio_exit_handler+0x14>)
 8006342:	f000 b869 	b.w	8006418 <_fwalk_sglue>
 8006346:	bf00      	nop
 8006348:	2000000c 	.word	0x2000000c
 800634c:	08006fdd 	.word	0x08006fdd
 8006350:	2000001c 	.word	0x2000001c

08006354 <cleanup_stdio>:
 8006354:	6841      	ldr	r1, [r0, #4]
 8006356:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <cleanup_stdio+0x34>)
 8006358:	4299      	cmp	r1, r3
 800635a:	b510      	push	{r4, lr}
 800635c:	4604      	mov	r4, r0
 800635e:	d001      	beq.n	8006364 <cleanup_stdio+0x10>
 8006360:	f000 fe3c 	bl	8006fdc <_fflush_r>
 8006364:	68a1      	ldr	r1, [r4, #8]
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <cleanup_stdio+0x38>)
 8006368:	4299      	cmp	r1, r3
 800636a:	d002      	beq.n	8006372 <cleanup_stdio+0x1e>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 fe35 	bl	8006fdc <_fflush_r>
 8006372:	68e1      	ldr	r1, [r4, #12]
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <cleanup_stdio+0x3c>)
 8006376:	4299      	cmp	r1, r3
 8006378:	d004      	beq.n	8006384 <cleanup_stdio+0x30>
 800637a:	4620      	mov	r0, r4
 800637c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006380:	f000 be2c 	b.w	8006fdc <_fflush_r>
 8006384:	bd10      	pop	{r4, pc}
 8006386:	bf00      	nop
 8006388:	200005d8 	.word	0x200005d8
 800638c:	20000640 	.word	0x20000640
 8006390:	200006a8 	.word	0x200006a8

08006394 <global_stdio_init.part.0>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <global_stdio_init.part.0+0x30>)
 8006398:	4c0b      	ldr	r4, [pc, #44]	@ (80063c8 <global_stdio_init.part.0+0x34>)
 800639a:	4a0c      	ldr	r2, [pc, #48]	@ (80063cc <global_stdio_init.part.0+0x38>)
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	4620      	mov	r0, r4
 80063a0:	2200      	movs	r2, #0
 80063a2:	2104      	movs	r1, #4
 80063a4:	f7ff ff94 	bl	80062d0 <std>
 80063a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063ac:	2201      	movs	r2, #1
 80063ae:	2109      	movs	r1, #9
 80063b0:	f7ff ff8e 	bl	80062d0 <std>
 80063b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063b8:	2202      	movs	r2, #2
 80063ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063be:	2112      	movs	r1, #18
 80063c0:	f7ff bf86 	b.w	80062d0 <std>
 80063c4:	20000710 	.word	0x20000710
 80063c8:	200005d8 	.word	0x200005d8
 80063cc:	0800633d 	.word	0x0800633d

080063d0 <__sfp_lock_acquire>:
 80063d0:	4801      	ldr	r0, [pc, #4]	@ (80063d8 <__sfp_lock_acquire+0x8>)
 80063d2:	f000 b978 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 80063d6:	bf00      	nop
 80063d8:	20000719 	.word	0x20000719

080063dc <__sfp_lock_release>:
 80063dc:	4801      	ldr	r0, [pc, #4]	@ (80063e4 <__sfp_lock_release+0x8>)
 80063de:	f000 b973 	b.w	80066c8 <__retarget_lock_release_recursive>
 80063e2:	bf00      	nop
 80063e4:	20000719 	.word	0x20000719

080063e8 <__sinit>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4604      	mov	r4, r0
 80063ec:	f7ff fff0 	bl	80063d0 <__sfp_lock_acquire>
 80063f0:	6a23      	ldr	r3, [r4, #32]
 80063f2:	b11b      	cbz	r3, 80063fc <__sinit+0x14>
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	f7ff bff0 	b.w	80063dc <__sfp_lock_release>
 80063fc:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <__sinit+0x28>)
 80063fe:	6223      	str	r3, [r4, #32]
 8006400:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <__sinit+0x2c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f5      	bne.n	80063f4 <__sinit+0xc>
 8006408:	f7ff ffc4 	bl	8006394 <global_stdio_init.part.0>
 800640c:	e7f2      	b.n	80063f4 <__sinit+0xc>
 800640e:	bf00      	nop
 8006410:	08006355 	.word	0x08006355
 8006414:	20000710 	.word	0x20000710

08006418 <_fwalk_sglue>:
 8006418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800641c:	4607      	mov	r7, r0
 800641e:	4688      	mov	r8, r1
 8006420:	4614      	mov	r4, r2
 8006422:	2600      	movs	r6, #0
 8006424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006428:	f1b9 0901 	subs.w	r9, r9, #1
 800642c:	d505      	bpl.n	800643a <_fwalk_sglue+0x22>
 800642e:	6824      	ldr	r4, [r4, #0]
 8006430:	2c00      	cmp	r4, #0
 8006432:	d1f7      	bne.n	8006424 <_fwalk_sglue+0xc>
 8006434:	4630      	mov	r0, r6
 8006436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643a:	89ab      	ldrh	r3, [r5, #12]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d907      	bls.n	8006450 <_fwalk_sglue+0x38>
 8006440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006444:	3301      	adds	r3, #1
 8006446:	d003      	beq.n	8006450 <_fwalk_sglue+0x38>
 8006448:	4629      	mov	r1, r5
 800644a:	4638      	mov	r0, r7
 800644c:	47c0      	blx	r8
 800644e:	4306      	orrs	r6, r0
 8006450:	3568      	adds	r5, #104	@ 0x68
 8006452:	e7e9      	b.n	8006428 <_fwalk_sglue+0x10>

08006454 <siprintf>:
 8006454:	b40e      	push	{r1, r2, r3}
 8006456:	b500      	push	{lr}
 8006458:	b09c      	sub	sp, #112	@ 0x70
 800645a:	ab1d      	add	r3, sp, #116	@ 0x74
 800645c:	9002      	str	r0, [sp, #8]
 800645e:	9006      	str	r0, [sp, #24]
 8006460:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006464:	4809      	ldr	r0, [pc, #36]	@ (800648c <siprintf+0x38>)
 8006466:	9107      	str	r1, [sp, #28]
 8006468:	9104      	str	r1, [sp, #16]
 800646a:	4909      	ldr	r1, [pc, #36]	@ (8006490 <siprintf+0x3c>)
 800646c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006470:	9105      	str	r1, [sp, #20]
 8006472:	6800      	ldr	r0, [r0, #0]
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	a902      	add	r1, sp, #8
 8006478:	f000 faa2 	bl	80069c0 <_svfiprintf_r>
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	b01c      	add	sp, #112	@ 0x70
 8006484:	f85d eb04 	ldr.w	lr, [sp], #4
 8006488:	b003      	add	sp, #12
 800648a:	4770      	bx	lr
 800648c:	20000018 	.word	0x20000018
 8006490:	ffff0208 	.word	0xffff0208

08006494 <__sread>:
 8006494:	b510      	push	{r4, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649c:	f000 f8c4 	bl	8006628 <_read_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bfab      	itete	ge
 80064a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064a6:	89a3      	ldrhlt	r3, [r4, #12]
 80064a8:	181b      	addge	r3, r3, r0
 80064aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ae:	bfac      	ite	ge
 80064b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064b2:	81a3      	strhlt	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__swrite>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	461f      	mov	r7, r3
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	05db      	lsls	r3, r3, #23
 80064c0:	4605      	mov	r5, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d505      	bpl.n	80064d4 <__swrite+0x1e>
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	2302      	movs	r3, #2
 80064ce:	2200      	movs	r2, #0
 80064d0:	f000 f898 	bl	8006604 <_lseek_r>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f000 b8af 	b.w	800664c <_write_r>

080064ee <__sseek>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 f885 	bl	8006604 <_lseek_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	bf15      	itete	ne
 8006500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800650a:	81a3      	strheq	r3, [r4, #12]
 800650c:	bf18      	it	ne
 800650e:	81a3      	strhne	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__sclose>:
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 b865 	b.w	80065e4 <_close_r>

0800651a <memset>:
 800651a:	4402      	add	r2, r0
 800651c:	4603      	mov	r3, r0
 800651e:	4293      	cmp	r3, r2
 8006520:	d100      	bne.n	8006524 <memset+0xa>
 8006522:	4770      	bx	lr
 8006524:	f803 1b01 	strb.w	r1, [r3], #1
 8006528:	e7f9      	b.n	800651e <memset+0x4>
	...

0800652c <strtok>:
 800652c:	4b16      	ldr	r3, [pc, #88]	@ (8006588 <strtok+0x5c>)
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	681f      	ldr	r7, [r3, #0]
 8006534:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006536:	4605      	mov	r5, r0
 8006538:	460e      	mov	r6, r1
 800653a:	b9ec      	cbnz	r4, 8006578 <strtok+0x4c>
 800653c:	2050      	movs	r0, #80	@ 0x50
 800653e:	f000 f92d 	bl	800679c <malloc>
 8006542:	4602      	mov	r2, r0
 8006544:	6478      	str	r0, [r7, #68]	@ 0x44
 8006546:	b920      	cbnz	r0, 8006552 <strtok+0x26>
 8006548:	4b10      	ldr	r3, [pc, #64]	@ (800658c <strtok+0x60>)
 800654a:	4811      	ldr	r0, [pc, #68]	@ (8006590 <strtok+0x64>)
 800654c:	215b      	movs	r1, #91	@ 0x5b
 800654e:	f000 f8bd 	bl	80066cc <__assert_func>
 8006552:	e9c0 4400 	strd	r4, r4, [r0]
 8006556:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800655a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800655e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006562:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006566:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800656a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800656e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006572:	6184      	str	r4, [r0, #24]
 8006574:	7704      	strb	r4, [r0, #28]
 8006576:	6244      	str	r4, [r0, #36]	@ 0x24
 8006578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	2301      	movs	r3, #1
 8006580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006584:	f000 b806 	b.w	8006594 <__strtok_r>
 8006588:	20000018 	.word	0x20000018
 800658c:	080078a5 	.word	0x080078a5
 8006590:	080078bc 	.word	0x080078bc

08006594 <__strtok_r>:
 8006594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	b908      	cbnz	r0, 800659e <__strtok_r+0xa>
 800659a:	6814      	ldr	r4, [r2, #0]
 800659c:	b144      	cbz	r4, 80065b0 <__strtok_r+0x1c>
 800659e:	4620      	mov	r0, r4
 80065a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80065a4:	460f      	mov	r7, r1
 80065a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065aa:	b91e      	cbnz	r6, 80065b4 <__strtok_r+0x20>
 80065ac:	b965      	cbnz	r5, 80065c8 <__strtok_r+0x34>
 80065ae:	6015      	str	r5, [r2, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e005      	b.n	80065c0 <__strtok_r+0x2c>
 80065b4:	42b5      	cmp	r5, r6
 80065b6:	d1f6      	bne.n	80065a6 <__strtok_r+0x12>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f0      	bne.n	800659e <__strtok_r+0xa>
 80065bc:	6014      	str	r4, [r2, #0]
 80065be:	7003      	strb	r3, [r0, #0]
 80065c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c2:	461c      	mov	r4, r3
 80065c4:	e00c      	b.n	80065e0 <__strtok_r+0x4c>
 80065c6:	b915      	cbnz	r5, 80065ce <__strtok_r+0x3a>
 80065c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065cc:	460e      	mov	r6, r1
 80065ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	d1f7      	bne.n	80065c6 <__strtok_r+0x32>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f3      	beq.n	80065c2 <__strtok_r+0x2e>
 80065da:	2300      	movs	r3, #0
 80065dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80065e0:	6014      	str	r4, [r2, #0]
 80065e2:	e7ed      	b.n	80065c0 <__strtok_r+0x2c>

080065e4 <_close_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d06      	ldr	r5, [pc, #24]	@ (8006600 <_close_r+0x1c>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fa fc44 	bl	8000e7c <_close>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_close_r+0x1a>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_close_r+0x1a>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20000714 	.word	0x20000714

08006604 <_lseek_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d07      	ldr	r5, [pc, #28]	@ (8006624 <_lseek_r+0x20>)
 8006608:	4604      	mov	r4, r0
 800660a:	4608      	mov	r0, r1
 800660c:	4611      	mov	r1, r2
 800660e:	2200      	movs	r2, #0
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fa fc59 	bl	8000eca <_lseek>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_lseek_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_lseek_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000714 	.word	0x20000714

08006628 <_read_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	@ (8006648 <_read_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fa fbe7 	bl	8000e0a <_read>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_read_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_read_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000714 	.word	0x20000714

0800664c <_write_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	@ (800666c <_write_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fbf2 	bl	8000e44 <_write>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_write_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_write_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	20000714 	.word	0x20000714

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	@ (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000018 	.word	0x20000018

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	@ (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	@ (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	@ (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	@ (80066c0 <__libc_init_array+0x44>)
 8006690:	f000 fff0 	bl	8007674 <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08007990 	.word	0x08007990
 80066b8:	08007990 	.word	0x08007990
 80066bc:	08007990 	.word	0x08007990
 80066c0:	08007994 	.word	0x08007994

080066c4 <__retarget_lock_init_recursive>:
 80066c4:	4770      	bx	lr

080066c6 <__retarget_lock_acquire_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <__retarget_lock_release_recursive>:
 80066c8:	4770      	bx	lr
	...

080066cc <__assert_func>:
 80066cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066ce:	4614      	mov	r4, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <__assert_func+0x2c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4605      	mov	r5, r0
 80066d8:	68d8      	ldr	r0, [r3, #12]
 80066da:	b954      	cbnz	r4, 80066f2 <__assert_func+0x26>
 80066dc:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <__assert_func+0x30>)
 80066de:	461c      	mov	r4, r3
 80066e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066e4:	9100      	str	r1, [sp, #0]
 80066e6:	462b      	mov	r3, r5
 80066e8:	4905      	ldr	r1, [pc, #20]	@ (8006700 <__assert_func+0x34>)
 80066ea:	f000 fc9f 	bl	800702c <fiprintf>
 80066ee:	f000 fce7 	bl	80070c0 <abort>
 80066f2:	4b04      	ldr	r3, [pc, #16]	@ (8006704 <__assert_func+0x38>)
 80066f4:	e7f4      	b.n	80066e0 <__assert_func+0x14>
 80066f6:	bf00      	nop
 80066f8:	20000018 	.word	0x20000018
 80066fc:	08007951 	.word	0x08007951
 8006700:	08007923 	.word	0x08007923
 8006704:	08007916 	.word	0x08007916

08006708 <_free_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4605      	mov	r5, r0
 800670c:	2900      	cmp	r1, #0
 800670e:	d041      	beq.n	8006794 <_free_r+0x8c>
 8006710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006714:	1f0c      	subs	r4, r1, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfb8      	it	lt
 800671a:	18e4      	addlt	r4, r4, r3
 800671c:	f000 f8e8 	bl	80068f0 <__malloc_lock>
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <_free_r+0x90>)
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	b933      	cbnz	r3, 8006734 <_free_r+0x2c>
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	6014      	str	r4, [r2, #0]
 800672a:	4628      	mov	r0, r5
 800672c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006730:	f000 b8e4 	b.w	80068fc <__malloc_unlock>
 8006734:	42a3      	cmp	r3, r4
 8006736:	d908      	bls.n	800674a <_free_r+0x42>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	bf01      	itttt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	1809      	addeq	r1, r1, r0
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	e7ed      	b.n	8006726 <_free_r+0x1e>
 800674a:	461a      	mov	r2, r3
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b10b      	cbz	r3, 8006754 <_free_r+0x4c>
 8006750:	42a3      	cmp	r3, r4
 8006752:	d9fa      	bls.n	800674a <_free_r+0x42>
 8006754:	6811      	ldr	r1, [r2, #0]
 8006756:	1850      	adds	r0, r2, r1
 8006758:	42a0      	cmp	r0, r4
 800675a:	d10b      	bne.n	8006774 <_free_r+0x6c>
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	4401      	add	r1, r0
 8006760:	1850      	adds	r0, r2, r1
 8006762:	4283      	cmp	r3, r0
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	d1e0      	bne.n	800672a <_free_r+0x22>
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	6053      	str	r3, [r2, #4]
 800676e:	4408      	add	r0, r1
 8006770:	6010      	str	r0, [r2, #0]
 8006772:	e7da      	b.n	800672a <_free_r+0x22>
 8006774:	d902      	bls.n	800677c <_free_r+0x74>
 8006776:	230c      	movs	r3, #12
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	e7d6      	b.n	800672a <_free_r+0x22>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	1821      	adds	r1, r4, r0
 8006780:	428b      	cmp	r3, r1
 8006782:	bf04      	itt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	bf04      	itt	eq
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	6054      	str	r4, [r2, #4]
 8006792:	e7ca      	b.n	800672a <_free_r+0x22>
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	20000720 	.word	0x20000720

0800679c <malloc>:
 800679c:	4b02      	ldr	r3, [pc, #8]	@ (80067a8 <malloc+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f000 b825 	b.w	80067f0 <_malloc_r>
 80067a6:	bf00      	nop
 80067a8:	20000018 	.word	0x20000018

080067ac <sbrk_aligned>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0f      	ldr	r6, [pc, #60]	@ (80067ec <sbrk_aligned+0x40>)
 80067b0:	460c      	mov	r4, r1
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	4605      	mov	r5, r0
 80067b6:	b911      	cbnz	r1, 80067be <sbrk_aligned+0x12>
 80067b8:	f000 fc64 	bl	8007084 <_sbrk_r>
 80067bc:	6030      	str	r0, [r6, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fc5f 	bl	8007084 <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d103      	bne.n	80067d2 <sbrk_aligned+0x26>
 80067ca:	f04f 34ff 	mov.w	r4, #4294967295
 80067ce:	4620      	mov	r0, r4
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	1cc4      	adds	r4, r0, #3
 80067d4:	f024 0403 	bic.w	r4, r4, #3
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d0f8      	beq.n	80067ce <sbrk_aligned+0x22>
 80067dc:	1a21      	subs	r1, r4, r0
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 fc50 	bl	8007084 <_sbrk_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d1f2      	bne.n	80067ce <sbrk_aligned+0x22>
 80067e8:	e7ef      	b.n	80067ca <sbrk_aligned+0x1e>
 80067ea:	bf00      	nop
 80067ec:	2000071c 	.word	0x2000071c

080067f0 <_malloc_r>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	1ccd      	adds	r5, r1, #3
 80067f6:	f025 0503 	bic.w	r5, r5, #3
 80067fa:	3508      	adds	r5, #8
 80067fc:	2d0c      	cmp	r5, #12
 80067fe:	bf38      	it	cc
 8006800:	250c      	movcc	r5, #12
 8006802:	2d00      	cmp	r5, #0
 8006804:	4606      	mov	r6, r0
 8006806:	db01      	blt.n	800680c <_malloc_r+0x1c>
 8006808:	42a9      	cmp	r1, r5
 800680a:	d904      	bls.n	8006816 <_malloc_r+0x26>
 800680c:	230c      	movs	r3, #12
 800680e:	6033      	str	r3, [r6, #0]
 8006810:	2000      	movs	r0, #0
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068ec <_malloc_r+0xfc>
 800681a:	f000 f869 	bl	80068f0 <__malloc_lock>
 800681e:	f8d8 3000 	ldr.w	r3, [r8]
 8006822:	461c      	mov	r4, r3
 8006824:	bb44      	cbnz	r4, 8006878 <_malloc_r+0x88>
 8006826:	4629      	mov	r1, r5
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff ffbf 	bl	80067ac <sbrk_aligned>
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	4604      	mov	r4, r0
 8006832:	d158      	bne.n	80068e6 <_malloc_r+0xf6>
 8006834:	f8d8 4000 	ldr.w	r4, [r8]
 8006838:	4627      	mov	r7, r4
 800683a:	2f00      	cmp	r7, #0
 800683c:	d143      	bne.n	80068c6 <_malloc_r+0xd6>
 800683e:	2c00      	cmp	r4, #0
 8006840:	d04b      	beq.n	80068da <_malloc_r+0xea>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	4639      	mov	r1, r7
 8006846:	4630      	mov	r0, r6
 8006848:	eb04 0903 	add.w	r9, r4, r3
 800684c:	f000 fc1a 	bl	8007084 <_sbrk_r>
 8006850:	4581      	cmp	r9, r0
 8006852:	d142      	bne.n	80068da <_malloc_r+0xea>
 8006854:	6821      	ldr	r1, [r4, #0]
 8006856:	1a6d      	subs	r5, r5, r1
 8006858:	4629      	mov	r1, r5
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff ffa6 	bl	80067ac <sbrk_aligned>
 8006860:	3001      	adds	r0, #1
 8006862:	d03a      	beq.n	80068da <_malloc_r+0xea>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	442b      	add	r3, r5
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	f8d8 3000 	ldr.w	r3, [r8]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	bb62      	cbnz	r2, 80068cc <_malloc_r+0xdc>
 8006872:	f8c8 7000 	str.w	r7, [r8]
 8006876:	e00f      	b.n	8006898 <_malloc_r+0xa8>
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	1b52      	subs	r2, r2, r5
 800687c:	d420      	bmi.n	80068c0 <_malloc_r+0xd0>
 800687e:	2a0b      	cmp	r2, #11
 8006880:	d917      	bls.n	80068b2 <_malloc_r+0xc2>
 8006882:	1961      	adds	r1, r4, r5
 8006884:	42a3      	cmp	r3, r4
 8006886:	6025      	str	r5, [r4, #0]
 8006888:	bf18      	it	ne
 800688a:	6059      	strne	r1, [r3, #4]
 800688c:	6863      	ldr	r3, [r4, #4]
 800688e:	bf08      	it	eq
 8006890:	f8c8 1000 	streq.w	r1, [r8]
 8006894:	5162      	str	r2, [r4, r5]
 8006896:	604b      	str	r3, [r1, #4]
 8006898:	4630      	mov	r0, r6
 800689a:	f000 f82f 	bl	80068fc <__malloc_unlock>
 800689e:	f104 000b 	add.w	r0, r4, #11
 80068a2:	1d23      	adds	r3, r4, #4
 80068a4:	f020 0007 	bic.w	r0, r0, #7
 80068a8:	1ac2      	subs	r2, r0, r3
 80068aa:	bf1c      	itt	ne
 80068ac:	1a1b      	subne	r3, r3, r0
 80068ae:	50a3      	strne	r3, [r4, r2]
 80068b0:	e7af      	b.n	8006812 <_malloc_r+0x22>
 80068b2:	6862      	ldr	r2, [r4, #4]
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	bf0c      	ite	eq
 80068b8:	f8c8 2000 	streq.w	r2, [r8]
 80068bc:	605a      	strne	r2, [r3, #4]
 80068be:	e7eb      	b.n	8006898 <_malloc_r+0xa8>
 80068c0:	4623      	mov	r3, r4
 80068c2:	6864      	ldr	r4, [r4, #4]
 80068c4:	e7ae      	b.n	8006824 <_malloc_r+0x34>
 80068c6:	463c      	mov	r4, r7
 80068c8:	687f      	ldr	r7, [r7, #4]
 80068ca:	e7b6      	b.n	800683a <_malloc_r+0x4a>
 80068cc:	461a      	mov	r2, r3
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d1fb      	bne.n	80068cc <_malloc_r+0xdc>
 80068d4:	2300      	movs	r3, #0
 80068d6:	6053      	str	r3, [r2, #4]
 80068d8:	e7de      	b.n	8006898 <_malloc_r+0xa8>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f80c 	bl	80068fc <__malloc_unlock>
 80068e4:	e794      	b.n	8006810 <_malloc_r+0x20>
 80068e6:	6005      	str	r5, [r0, #0]
 80068e8:	e7d6      	b.n	8006898 <_malloc_r+0xa8>
 80068ea:	bf00      	nop
 80068ec:	20000720 	.word	0x20000720

080068f0 <__malloc_lock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__malloc_lock+0x8>)
 80068f2:	f7ff bee8 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	20000718 	.word	0x20000718

080068fc <__malloc_unlock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__malloc_unlock+0x8>)
 80068fe:	f7ff bee3 	b.w	80066c8 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	20000718 	.word	0x20000718

08006908 <__ssputs_r>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	688e      	ldr	r6, [r1, #8]
 800690e:	461f      	mov	r7, r3
 8006910:	42be      	cmp	r6, r7
 8006912:	680b      	ldr	r3, [r1, #0]
 8006914:	4682      	mov	sl, r0
 8006916:	460c      	mov	r4, r1
 8006918:	4690      	mov	r8, r2
 800691a:	d82d      	bhi.n	8006978 <__ssputs_r+0x70>
 800691c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006924:	d026      	beq.n	8006974 <__ssputs_r+0x6c>
 8006926:	6965      	ldr	r5, [r4, #20]
 8006928:	6909      	ldr	r1, [r1, #16]
 800692a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800692e:	eba3 0901 	sub.w	r9, r3, r1
 8006932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006936:	1c7b      	adds	r3, r7, #1
 8006938:	444b      	add	r3, r9
 800693a:	106d      	asrs	r5, r5, #1
 800693c:	429d      	cmp	r5, r3
 800693e:	bf38      	it	cc
 8006940:	461d      	movcc	r5, r3
 8006942:	0553      	lsls	r3, r2, #21
 8006944:	d527      	bpl.n	8006996 <__ssputs_r+0x8e>
 8006946:	4629      	mov	r1, r5
 8006948:	f7ff ff52 	bl	80067f0 <_malloc_r>
 800694c:	4606      	mov	r6, r0
 800694e:	b360      	cbz	r0, 80069aa <__ssputs_r+0xa2>
 8006950:	6921      	ldr	r1, [r4, #16]
 8006952:	464a      	mov	r2, r9
 8006954:	f000 fba6 	bl	80070a4 <memcpy>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800695e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	6126      	str	r6, [r4, #16]
 8006966:	6165      	str	r5, [r4, #20]
 8006968:	444e      	add	r6, r9
 800696a:	eba5 0509 	sub.w	r5, r5, r9
 800696e:	6026      	str	r6, [r4, #0]
 8006970:	60a5      	str	r5, [r4, #8]
 8006972:	463e      	mov	r6, r7
 8006974:	42be      	cmp	r6, r7
 8006976:	d900      	bls.n	800697a <__ssputs_r+0x72>
 8006978:	463e      	mov	r6, r7
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	4632      	mov	r2, r6
 800697e:	4641      	mov	r1, r8
 8006980:	f000 fb66 	bl	8007050 <memmove>
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	1b9b      	subs	r3, r3, r6
 8006988:	60a3      	str	r3, [r4, #8]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	4433      	add	r3, r6
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	2000      	movs	r0, #0
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	462a      	mov	r2, r5
 8006998:	f000 fb99 	bl	80070ce <_realloc_r>
 800699c:	4606      	mov	r6, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d1e0      	bne.n	8006964 <__ssputs_r+0x5c>
 80069a2:	6921      	ldr	r1, [r4, #16]
 80069a4:	4650      	mov	r0, sl
 80069a6:	f7ff feaf 	bl	8006708 <_free_r>
 80069aa:	230c      	movs	r3, #12
 80069ac:	f8ca 3000 	str.w	r3, [sl]
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e7e9      	b.n	8006992 <__ssputs_r+0x8a>
	...

080069c0 <_svfiprintf_r>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	4698      	mov	r8, r3
 80069c6:	898b      	ldrh	r3, [r1, #12]
 80069c8:	061b      	lsls	r3, r3, #24
 80069ca:	b09d      	sub	sp, #116	@ 0x74
 80069cc:	4607      	mov	r7, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	d510      	bpl.n	80069f6 <_svfiprintf_r+0x36>
 80069d4:	690b      	ldr	r3, [r1, #16]
 80069d6:	b973      	cbnz	r3, 80069f6 <_svfiprintf_r+0x36>
 80069d8:	2140      	movs	r1, #64	@ 0x40
 80069da:	f7ff ff09 	bl	80067f0 <_malloc_r>
 80069de:	6028      	str	r0, [r5, #0]
 80069e0:	6128      	str	r0, [r5, #16]
 80069e2:	b930      	cbnz	r0, 80069f2 <_svfiprintf_r+0x32>
 80069e4:	230c      	movs	r3, #12
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	b01d      	add	sp, #116	@ 0x74
 80069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f2:	2340      	movs	r3, #64	@ 0x40
 80069f4:	616b      	str	r3, [r5, #20]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	2320      	movs	r3, #32
 80069fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a04:	2330      	movs	r3, #48	@ 0x30
 8006a06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ba4 <_svfiprintf_r+0x1e4>
 8006a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a0e:	f04f 0901 	mov.w	r9, #1
 8006a12:	4623      	mov	r3, r4
 8006a14:	469a      	mov	sl, r3
 8006a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1a:	b10a      	cbz	r2, 8006a20 <_svfiprintf_r+0x60>
 8006a1c:	2a25      	cmp	r2, #37	@ 0x25
 8006a1e:	d1f9      	bne.n	8006a14 <_svfiprintf_r+0x54>
 8006a20:	ebba 0b04 	subs.w	fp, sl, r4
 8006a24:	d00b      	beq.n	8006a3e <_svfiprintf_r+0x7e>
 8006a26:	465b      	mov	r3, fp
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff ff6b 	bl	8006908 <__ssputs_r>
 8006a32:	3001      	adds	r0, #1
 8006a34:	f000 80a7 	beq.w	8006b86 <_svfiprintf_r+0x1c6>
 8006a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3a:	445a      	add	r2, fp
 8006a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 809f 	beq.w	8006b86 <_svfiprintf_r+0x1c6>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a52:	f10a 0a01 	add.w	sl, sl, #1
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	9307      	str	r3, [sp, #28]
 8006a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a60:	4654      	mov	r4, sl
 8006a62:	2205      	movs	r2, #5
 8006a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a68:	484e      	ldr	r0, [pc, #312]	@ (8006ba4 <_svfiprintf_r+0x1e4>)
 8006a6a:	f7f9 fbd1 	bl	8000210 <memchr>
 8006a6e:	9a04      	ldr	r2, [sp, #16]
 8006a70:	b9d8      	cbnz	r0, 8006aaa <_svfiprintf_r+0xea>
 8006a72:	06d0      	lsls	r0, r2, #27
 8006a74:	bf44      	itt	mi
 8006a76:	2320      	movmi	r3, #32
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a7c:	0711      	lsls	r1, r2, #28
 8006a7e:	bf44      	itt	mi
 8006a80:	232b      	movmi	r3, #43	@ 0x2b
 8006a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a86:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8c:	d015      	beq.n	8006aba <_svfiprintf_r+0xfa>
 8006a8e:	9a07      	ldr	r2, [sp, #28]
 8006a90:	4654      	mov	r4, sl
 8006a92:	2000      	movs	r0, #0
 8006a94:	f04f 0c0a 	mov.w	ip, #10
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a9e:	3b30      	subs	r3, #48	@ 0x30
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d94b      	bls.n	8006b3c <_svfiprintf_r+0x17c>
 8006aa4:	b1b0      	cbz	r0, 8006ad4 <_svfiprintf_r+0x114>
 8006aa6:	9207      	str	r2, [sp, #28]
 8006aa8:	e014      	b.n	8006ad4 <_svfiprintf_r+0x114>
 8006aaa:	eba0 0308 	sub.w	r3, r0, r8
 8006aae:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	46a2      	mov	sl, r4
 8006ab8:	e7d2      	b.n	8006a60 <_svfiprintf_r+0xa0>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	1d19      	adds	r1, r3, #4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	9103      	str	r1, [sp, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfbb      	ittet	lt
 8006ac6:	425b      	neglt	r3, r3
 8006ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8006acc:	9307      	strge	r3, [sp, #28]
 8006ace:	9307      	strlt	r3, [sp, #28]
 8006ad0:	bfb8      	it	lt
 8006ad2:	9204      	strlt	r2, [sp, #16]
 8006ad4:	7823      	ldrb	r3, [r4, #0]
 8006ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad8:	d10a      	bne.n	8006af0 <_svfiprintf_r+0x130>
 8006ada:	7863      	ldrb	r3, [r4, #1]
 8006adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ade:	d132      	bne.n	8006b46 <_svfiprintf_r+0x186>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	9203      	str	r2, [sp, #12]
 8006ae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aec:	3402      	adds	r4, #2
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006bb4 <_svfiprintf_r+0x1f4>
 8006af4:	7821      	ldrb	r1, [r4, #0]
 8006af6:	2203      	movs	r2, #3
 8006af8:	4650      	mov	r0, sl
 8006afa:	f7f9 fb89 	bl	8000210 <memchr>
 8006afe:	b138      	cbz	r0, 8006b10 <_svfiprintf_r+0x150>
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	eba0 000a 	sub.w	r0, r0, sl
 8006b06:	2240      	movs	r2, #64	@ 0x40
 8006b08:	4082      	lsls	r2, r0
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	3401      	adds	r4, #1
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b14:	4824      	ldr	r0, [pc, #144]	@ (8006ba8 <_svfiprintf_r+0x1e8>)
 8006b16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b1a:	2206      	movs	r2, #6
 8006b1c:	f7f9 fb78 	bl	8000210 <memchr>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d036      	beq.n	8006b92 <_svfiprintf_r+0x1d2>
 8006b24:	4b21      	ldr	r3, [pc, #132]	@ (8006bac <_svfiprintf_r+0x1ec>)
 8006b26:	bb1b      	cbnz	r3, 8006b70 <_svfiprintf_r+0x1b0>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	3307      	adds	r3, #7
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b36:	4433      	add	r3, r6
 8006b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b3a:	e76a      	b.n	8006a12 <_svfiprintf_r+0x52>
 8006b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b40:	460c      	mov	r4, r1
 8006b42:	2001      	movs	r0, #1
 8006b44:	e7a8      	b.n	8006a98 <_svfiprintf_r+0xd8>
 8006b46:	2300      	movs	r3, #0
 8006b48:	3401      	adds	r4, #1
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f04f 0c0a 	mov.w	ip, #10
 8006b52:	4620      	mov	r0, r4
 8006b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b58:	3a30      	subs	r2, #48	@ 0x30
 8006b5a:	2a09      	cmp	r2, #9
 8006b5c:	d903      	bls.n	8006b66 <_svfiprintf_r+0x1a6>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c6      	beq.n	8006af0 <_svfiprintf_r+0x130>
 8006b62:	9105      	str	r1, [sp, #20]
 8006b64:	e7c4      	b.n	8006af0 <_svfiprintf_r+0x130>
 8006b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e7f0      	b.n	8006b52 <_svfiprintf_r+0x192>
 8006b70:	ab03      	add	r3, sp, #12
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	462a      	mov	r2, r5
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <_svfiprintf_r+0x1f0>)
 8006b78:	a904      	add	r1, sp, #16
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f3af 8000 	nop.w
 8006b80:	1c42      	adds	r2, r0, #1
 8006b82:	4606      	mov	r6, r0
 8006b84:	d1d6      	bne.n	8006b34 <_svfiprintf_r+0x174>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	065b      	lsls	r3, r3, #25
 8006b8a:	f53f af2d 	bmi.w	80069e8 <_svfiprintf_r+0x28>
 8006b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b90:	e72c      	b.n	80069ec <_svfiprintf_r+0x2c>
 8006b92:	ab03      	add	r3, sp, #12
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	462a      	mov	r2, r5
 8006b98:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <_svfiprintf_r+0x1f0>)
 8006b9a:	a904      	add	r1, sp, #16
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f000 f879 	bl	8006c94 <_printf_i>
 8006ba2:	e7ed      	b.n	8006b80 <_svfiprintf_r+0x1c0>
 8006ba4:	08007952 	.word	0x08007952
 8006ba8:	0800795c 	.word	0x0800795c
 8006bac:	00000000 	.word	0x00000000
 8006bb0:	08006909 	.word	0x08006909
 8006bb4:	08007958 	.word	0x08007958

08006bb8 <_printf_common>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	688a      	ldr	r2, [r1, #8]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	bfb8      	it	lt
 8006bcc:	4613      	movlt	r3, r2
 8006bce:	6033      	str	r3, [r6, #0]
 8006bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	b10a      	cbz	r2, 8006bde <_printf_common+0x26>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	0699      	lsls	r1, r3, #26
 8006be2:	bf42      	ittt	mi
 8006be4:	6833      	ldrmi	r3, [r6, #0]
 8006be6:	3302      	addmi	r3, #2
 8006be8:	6033      	strmi	r3, [r6, #0]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	f015 0506 	ands.w	r5, r5, #6
 8006bf0:	d106      	bne.n	8006c00 <_printf_common+0x48>
 8006bf2:	f104 0a19 	add.w	sl, r4, #25
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	6832      	ldr	r2, [r6, #0]
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dc26      	bgt.n	8006c4e <_printf_common+0x96>
 8006c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	3b00      	subs	r3, #0
 8006c08:	bf18      	it	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	0692      	lsls	r2, r2, #26
 8006c0e:	d42b      	bmi.n	8006c68 <_printf_common+0xb0>
 8006c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c14:	4641      	mov	r1, r8
 8006c16:	4638      	mov	r0, r7
 8006c18:	47c8      	blx	r9
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d01e      	beq.n	8006c5c <_printf_common+0xa4>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	bf02      	ittt	eq
 8006c2a:	68e5      	ldreq	r5, [r4, #12]
 8006c2c:	6833      	ldreq	r3, [r6, #0]
 8006c2e:	1aed      	subeq	r5, r5, r3
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	bf0c      	ite	eq
 8006c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c38:	2500      	movne	r5, #0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	bfc4      	itt	gt
 8006c3e:	1a9b      	subgt	r3, r3, r2
 8006c40:	18ed      	addgt	r5, r5, r3
 8006c42:	2600      	movs	r6, #0
 8006c44:	341a      	adds	r4, #26
 8006c46:	42b5      	cmp	r5, r6
 8006c48:	d11a      	bne.n	8006c80 <_printf_common+0xc8>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e008      	b.n	8006c60 <_printf_common+0xa8>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4652      	mov	r2, sl
 8006c52:	4641      	mov	r1, r8
 8006c54:	4638      	mov	r0, r7
 8006c56:	47c8      	blx	r9
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d103      	bne.n	8006c64 <_printf_common+0xac>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7c6      	b.n	8006bf6 <_printf_common+0x3e>
 8006c68:	18e1      	adds	r1, r4, r3
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c72:	4422      	add	r2, r4
 8006c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7c7      	b.n	8006c10 <_printf_common+0x58>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4622      	mov	r2, r4
 8006c84:	4641      	mov	r1, r8
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c8      	blx	r9
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d0e6      	beq.n	8006c5c <_printf_common+0xa4>
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7d9      	b.n	8006c46 <_printf_common+0x8e>
	...

08006c94 <_printf_i>:
 8006c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	7e0f      	ldrb	r7, [r1, #24]
 8006c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c9c:	2f78      	cmp	r7, #120	@ 0x78
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	469a      	mov	sl, r3
 8006ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006caa:	d807      	bhi.n	8006cbc <_printf_i+0x28>
 8006cac:	2f62      	cmp	r7, #98	@ 0x62
 8006cae:	d80a      	bhi.n	8006cc6 <_printf_i+0x32>
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	f000 80d2 	beq.w	8006e5a <_printf_i+0x1c6>
 8006cb6:	2f58      	cmp	r7, #88	@ 0x58
 8006cb8:	f000 80b9 	beq.w	8006e2e <_printf_i+0x19a>
 8006cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cc4:	e03a      	b.n	8006d3c <_printf_i+0xa8>
 8006cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cca:	2b15      	cmp	r3, #21
 8006ccc:	d8f6      	bhi.n	8006cbc <_printf_i+0x28>
 8006cce:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd4 <_printf_i+0x40>)
 8006cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006cbd 	.word	0x08006cbd
 8006ce0:	08006cbd 	.word	0x08006cbd
 8006ce4:	08006cbd 	.word	0x08006cbd
 8006ce8:	08006cbd 	.word	0x08006cbd
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006cbd 	.word	0x08006cbd
 8006cf4:	08006cbd 	.word	0x08006cbd
 8006cf8:	08006cbd 	.word	0x08006cbd
 8006cfc:	08006cbd 	.word	0x08006cbd
 8006d00:	08006e41 	.word	0x08006e41
 8006d04:	08006d6b 	.word	0x08006d6b
 8006d08:	08006dfb 	.word	0x08006dfb
 8006d0c:	08006cbd 	.word	0x08006cbd
 8006d10:	08006cbd 	.word	0x08006cbd
 8006d14:	08006e63 	.word	0x08006e63
 8006d18:	08006cbd 	.word	0x08006cbd
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006cbd 	.word	0x08006cbd
 8006d24:	08006cbd 	.word	0x08006cbd
 8006d28:	08006e03 	.word	0x08006e03
 8006d2c:	6833      	ldr	r3, [r6, #0]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e09d      	b.n	8006e7c <_printf_i+0x1e8>
 8006d40:	6833      	ldr	r3, [r6, #0]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0xbc>
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <_printf_i+0xc4>
 8006d50:	0645      	lsls	r5, r0, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0xb8>
 8006d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d58:	2d00      	cmp	r5, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xd0>
 8006d5c:	232d      	movs	r3, #45	@ 0x2d
 8006d5e:	426d      	negs	r5, r5
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d64:	4859      	ldr	r0, [pc, #356]	@ (8006ecc <_printf_i+0x238>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e011      	b.n	8006d8e <_printf_i+0xfa>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	0608      	lsls	r0, r1, #24
 8006d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0xe8>
 8006d76:	0649      	lsls	r1, r1, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2ad      	uxthmi	r5, r5
 8006d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d7e:	4853      	ldr	r0, [pc, #332]	@ (8006ecc <_printf_i+0x238>)
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	bf14      	ite	ne
 8006d84:	230a      	movne	r3, #10
 8006d86:	2308      	moveq	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d8e:	6866      	ldr	r6, [r4, #4]
 8006d90:	60a6      	str	r6, [r4, #8]
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	bfa2      	ittt	ge
 8006d96:	6821      	ldrge	r1, [r4, #0]
 8006d98:	f021 0104 	bicge.w	r1, r1, #4
 8006d9c:	6021      	strge	r1, [r4, #0]
 8006d9e:	b90d      	cbnz	r5, 8006da4 <_printf_i+0x110>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	d04b      	beq.n	8006e3c <_printf_i+0x1a8>
 8006da4:	4616      	mov	r6, r2
 8006da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006daa:	fb03 5711 	mls	r7, r3, r1, r5
 8006dae:	5dc7      	ldrb	r7, [r0, r7]
 8006db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006db4:	462f      	mov	r7, r5
 8006db6:	42bb      	cmp	r3, r7
 8006db8:	460d      	mov	r5, r1
 8006dba:	d9f4      	bls.n	8006da6 <_printf_i+0x112>
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d10b      	bne.n	8006dd8 <_printf_i+0x144>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07df      	lsls	r7, r3, #31
 8006dc4:	d508      	bpl.n	8006dd8 <_printf_i+0x144>
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	bfde      	ittt	le
 8006dce:	2330      	movle	r3, #48	@ 0x30
 8006dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dd8:	1b92      	subs	r2, r2, r6
 8006dda:	6122      	str	r2, [r4, #16]
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	464b      	mov	r3, r9
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fee6 	bl	8006bb8 <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d14a      	bne.n	8006e86 <_printf_i+0x1f2>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b004      	add	sp, #16
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	4833      	ldr	r0, [pc, #204]	@ (8006ed0 <_printf_i+0x23c>)
 8006e04:	2778      	movs	r7, #120	@ 0x78
 8006e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6831      	ldr	r1, [r6, #0]
 8006e0e:	061f      	lsls	r7, r3, #24
 8006e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e14:	d402      	bmi.n	8006e1c <_printf_i+0x188>
 8006e16:	065f      	lsls	r7, r3, #25
 8006e18:	bf48      	it	mi
 8006e1a:	b2ad      	uxthmi	r5, r5
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b11d      	cbz	r5, 8006e32 <_printf_i+0x19e>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	e7ac      	b.n	8006d88 <_printf_i+0xf4>
 8006e2e:	4827      	ldr	r0, [pc, #156]	@ (8006ecc <_printf_i+0x238>)
 8006e30:	e7e9      	b.n	8006e06 <_printf_i+0x172>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	e7f6      	b.n	8006e2a <_printf_i+0x196>
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	e7bd      	b.n	8006dbc <_printf_i+0x128>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	6030      	str	r0, [r6, #0]
 8006e4a:	062e      	lsls	r6, r5, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0x1c0>
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0x1c6>
 8006e54:	0668      	lsls	r0, r5, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0x1bc>
 8006e58:	8019      	strh	r1, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	4616      	mov	r6, r2
 8006e60:	e7bc      	b.n	8006ddc <_printf_i+0x148>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	6032      	str	r2, [r6, #0]
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7f9 f9ce 	bl	8000210 <memchr>
 8006e74:	b108      	cbz	r0, 8006e7a <_printf_i+0x1e6>
 8006e76:	1b80      	subs	r0, r0, r6
 8006e78:	6060      	str	r0, [r4, #4]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e84:	e7aa      	b.n	8006ddc <_printf_i+0x148>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d0ad      	beq.n	8006df0 <_printf_i+0x15c>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	079b      	lsls	r3, r3, #30
 8006e98:	d413      	bmi.n	8006ec2 <_printf_i+0x22e>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e7a6      	b.n	8006df4 <_printf_i+0x160>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d09d      	beq.n	8006df0 <_printf_i+0x15c>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dcf2      	bgt.n	8006ea6 <_printf_i+0x212>
 8006ec0:	e7eb      	b.n	8006e9a <_printf_i+0x206>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	f104 0619 	add.w	r6, r4, #25
 8006ec8:	e7f5      	b.n	8006eb6 <_printf_i+0x222>
 8006eca:	bf00      	nop
 8006ecc:	08007963 	.word	0x08007963
 8006ed0:	08007974 	.word	0x08007974

08006ed4 <__sflush_r>:
 8006ed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	0716      	lsls	r6, r2, #28
 8006ede:	4605      	mov	r5, r0
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	d454      	bmi.n	8006f8e <__sflush_r+0xba>
 8006ee4:	684b      	ldr	r3, [r1, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dc02      	bgt.n	8006ef0 <__sflush_r+0x1c>
 8006eea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dd48      	ble.n	8006f82 <__sflush_r+0xae>
 8006ef0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d045      	beq.n	8006f82 <__sflush_r+0xae>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006efc:	682f      	ldr	r7, [r5, #0]
 8006efe:	6a21      	ldr	r1, [r4, #32]
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	d030      	beq.n	8006f66 <__sflush_r+0x92>
 8006f04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	0759      	lsls	r1, r3, #29
 8006f0a:	d505      	bpl.n	8006f18 <__sflush_r+0x44>
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f12:	b10b      	cbz	r3, 8006f18 <__sflush_r+0x44>
 8006f14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f1c:	6a21      	ldr	r1, [r4, #32]
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b0      	blx	r6
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	d106      	bne.n	8006f36 <__sflush_r+0x62>
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	291d      	cmp	r1, #29
 8006f2c:	d82b      	bhi.n	8006f86 <__sflush_r+0xb2>
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd8 <__sflush_r+0x104>)
 8006f30:	410a      	asrs	r2, r1
 8006f32:	07d6      	lsls	r6, r2, #31
 8006f34:	d427      	bmi.n	8006f86 <__sflush_r+0xb2>
 8006f36:	2200      	movs	r2, #0
 8006f38:	6062      	str	r2, [r4, #4]
 8006f3a:	04d9      	lsls	r1, r3, #19
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	d504      	bpl.n	8006f4c <__sflush_r+0x78>
 8006f42:	1c42      	adds	r2, r0, #1
 8006f44:	d101      	bne.n	8006f4a <__sflush_r+0x76>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b903      	cbnz	r3, 8006f4c <__sflush_r+0x78>
 8006f4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f4e:	602f      	str	r7, [r5, #0]
 8006f50:	b1b9      	cbz	r1, 8006f82 <__sflush_r+0xae>
 8006f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f56:	4299      	cmp	r1, r3
 8006f58:	d002      	beq.n	8006f60 <__sflush_r+0x8c>
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7ff fbd4 	bl	8006708 <_free_r>
 8006f60:	2300      	movs	r3, #0
 8006f62:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f64:	e00d      	b.n	8006f82 <__sflush_r+0xae>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b0      	blx	r6
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	1c50      	adds	r0, r2, #1
 8006f70:	d1c9      	bne.n	8006f06 <__sflush_r+0x32>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0c6      	beq.n	8006f06 <__sflush_r+0x32>
 8006f78:	2b1d      	cmp	r3, #29
 8006f7a:	d001      	beq.n	8006f80 <__sflush_r+0xac>
 8006f7c:	2b16      	cmp	r3, #22
 8006f7e:	d11e      	bne.n	8006fbe <__sflush_r+0xea>
 8006f80:	602f      	str	r7, [r5, #0]
 8006f82:	2000      	movs	r0, #0
 8006f84:	e022      	b.n	8006fcc <__sflush_r+0xf8>
 8006f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	e01b      	b.n	8006fc6 <__sflush_r+0xf2>
 8006f8e:	690f      	ldr	r7, [r1, #16]
 8006f90:	2f00      	cmp	r7, #0
 8006f92:	d0f6      	beq.n	8006f82 <__sflush_r+0xae>
 8006f94:	0793      	lsls	r3, r2, #30
 8006f96:	680e      	ldr	r6, [r1, #0]
 8006f98:	bf08      	it	eq
 8006f9a:	694b      	ldreq	r3, [r1, #20]
 8006f9c:	600f      	str	r7, [r1, #0]
 8006f9e:	bf18      	it	ne
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	eba6 0807 	sub.w	r8, r6, r7
 8006fa6:	608b      	str	r3, [r1, #8]
 8006fa8:	f1b8 0f00 	cmp.w	r8, #0
 8006fac:	dde9      	ble.n	8006f82 <__sflush_r+0xae>
 8006fae:	6a21      	ldr	r1, [r4, #32]
 8006fb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fb2:	4643      	mov	r3, r8
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b0      	blx	r6
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	dc08      	bgt.n	8006fd0 <__sflush_r+0xfc>
 8006fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd0:	4407      	add	r7, r0
 8006fd2:	eba8 0800 	sub.w	r8, r8, r0
 8006fd6:	e7e7      	b.n	8006fa8 <__sflush_r+0xd4>
 8006fd8:	dfbffffe 	.word	0xdfbffffe

08006fdc <_fflush_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	b913      	cbnz	r3, 8006fec <_fflush_r+0x10>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	4628      	mov	r0, r5
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	b118      	cbz	r0, 8006ff6 <_fflush_r+0x1a>
 8006fee:	6a03      	ldr	r3, [r0, #32]
 8006ff0:	b90b      	cbnz	r3, 8006ff6 <_fflush_r+0x1a>
 8006ff2:	f7ff f9f9 	bl	80063e8 <__sinit>
 8006ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f3      	beq.n	8006fe6 <_fflush_r+0xa>
 8006ffe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007000:	07d0      	lsls	r0, r2, #31
 8007002:	d404      	bmi.n	800700e <_fflush_r+0x32>
 8007004:	0599      	lsls	r1, r3, #22
 8007006:	d402      	bmi.n	800700e <_fflush_r+0x32>
 8007008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800700a:	f7ff fb5c 	bl	80066c6 <__retarget_lock_acquire_recursive>
 800700e:	4628      	mov	r0, r5
 8007010:	4621      	mov	r1, r4
 8007012:	f7ff ff5f 	bl	8006ed4 <__sflush_r>
 8007016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007018:	07da      	lsls	r2, r3, #31
 800701a:	4605      	mov	r5, r0
 800701c:	d4e4      	bmi.n	8006fe8 <_fflush_r+0xc>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	059b      	lsls	r3, r3, #22
 8007022:	d4e1      	bmi.n	8006fe8 <_fflush_r+0xc>
 8007024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007026:	f7ff fb4f 	bl	80066c8 <__retarget_lock_release_recursive>
 800702a:	e7dd      	b.n	8006fe8 <_fflush_r+0xc>

0800702c <fiprintf>:
 800702c:	b40e      	push	{r1, r2, r3}
 800702e:	b503      	push	{r0, r1, lr}
 8007030:	4601      	mov	r1, r0
 8007032:	ab03      	add	r3, sp, #12
 8007034:	4805      	ldr	r0, [pc, #20]	@ (800704c <fiprintf+0x20>)
 8007036:	f853 2b04 	ldr.w	r2, [r3], #4
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f000 f89d 	bl	800717c <_vfiprintf_r>
 8007042:	b002      	add	sp, #8
 8007044:	f85d eb04 	ldr.w	lr, [sp], #4
 8007048:	b003      	add	sp, #12
 800704a:	4770      	bx	lr
 800704c:	20000018 	.word	0x20000018

08007050 <memmove>:
 8007050:	4288      	cmp	r0, r1
 8007052:	b510      	push	{r4, lr}
 8007054:	eb01 0402 	add.w	r4, r1, r2
 8007058:	d902      	bls.n	8007060 <memmove+0x10>
 800705a:	4284      	cmp	r4, r0
 800705c:	4623      	mov	r3, r4
 800705e:	d807      	bhi.n	8007070 <memmove+0x20>
 8007060:	1e43      	subs	r3, r0, #1
 8007062:	42a1      	cmp	r1, r4
 8007064:	d008      	beq.n	8007078 <memmove+0x28>
 8007066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706e:	e7f8      	b.n	8007062 <memmove+0x12>
 8007070:	4402      	add	r2, r0
 8007072:	4601      	mov	r1, r0
 8007074:	428a      	cmp	r2, r1
 8007076:	d100      	bne.n	800707a <memmove+0x2a>
 8007078:	bd10      	pop	{r4, pc}
 800707a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007082:	e7f7      	b.n	8007074 <memmove+0x24>

08007084 <_sbrk_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d06      	ldr	r5, [pc, #24]	@ (80070a0 <_sbrk_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7f9 ff28 	bl	8000ee4 <_sbrk>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_sbrk_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_sbrk_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20000714 	.word	0x20000714

080070a4 <memcpy>:
 80070a4:	440a      	add	r2, r1
 80070a6:	4291      	cmp	r1, r2
 80070a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ac:	d100      	bne.n	80070b0 <memcpy+0xc>
 80070ae:	4770      	bx	lr
 80070b0:	b510      	push	{r4, lr}
 80070b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ba:	4291      	cmp	r1, r2
 80070bc:	d1f9      	bne.n	80070b2 <memcpy+0xe>
 80070be:	bd10      	pop	{r4, pc}

080070c0 <abort>:
 80070c0:	b508      	push	{r3, lr}
 80070c2:	2006      	movs	r0, #6
 80070c4:	f000 fa2e 	bl	8007524 <raise>
 80070c8:	2001      	movs	r0, #1
 80070ca:	f7f9 fe93 	bl	8000df4 <_exit>

080070ce <_realloc_r>:
 80070ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	4680      	mov	r8, r0
 80070d4:	4615      	mov	r5, r2
 80070d6:	460c      	mov	r4, r1
 80070d8:	b921      	cbnz	r1, 80070e4 <_realloc_r+0x16>
 80070da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070de:	4611      	mov	r1, r2
 80070e0:	f7ff bb86 	b.w	80067f0 <_malloc_r>
 80070e4:	b92a      	cbnz	r2, 80070f2 <_realloc_r+0x24>
 80070e6:	f7ff fb0f 	bl	8006708 <_free_r>
 80070ea:	2400      	movs	r4, #0
 80070ec:	4620      	mov	r0, r4
 80070ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f2:	f000 fa33 	bl	800755c <_malloc_usable_size_r>
 80070f6:	4285      	cmp	r5, r0
 80070f8:	4606      	mov	r6, r0
 80070fa:	d802      	bhi.n	8007102 <_realloc_r+0x34>
 80070fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007100:	d8f4      	bhi.n	80070ec <_realloc_r+0x1e>
 8007102:	4629      	mov	r1, r5
 8007104:	4640      	mov	r0, r8
 8007106:	f7ff fb73 	bl	80067f0 <_malloc_r>
 800710a:	4607      	mov	r7, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	d0ec      	beq.n	80070ea <_realloc_r+0x1c>
 8007110:	42b5      	cmp	r5, r6
 8007112:	462a      	mov	r2, r5
 8007114:	4621      	mov	r1, r4
 8007116:	bf28      	it	cs
 8007118:	4632      	movcs	r2, r6
 800711a:	f7ff ffc3 	bl	80070a4 <memcpy>
 800711e:	4621      	mov	r1, r4
 8007120:	4640      	mov	r0, r8
 8007122:	f7ff faf1 	bl	8006708 <_free_r>
 8007126:	463c      	mov	r4, r7
 8007128:	e7e0      	b.n	80070ec <_realloc_r+0x1e>

0800712a <__sfputc_r>:
 800712a:	6893      	ldr	r3, [r2, #8]
 800712c:	3b01      	subs	r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	b410      	push	{r4}
 8007132:	6093      	str	r3, [r2, #8]
 8007134:	da08      	bge.n	8007148 <__sfputc_r+0x1e>
 8007136:	6994      	ldr	r4, [r2, #24]
 8007138:	42a3      	cmp	r3, r4
 800713a:	db01      	blt.n	8007140 <__sfputc_r+0x16>
 800713c:	290a      	cmp	r1, #10
 800713e:	d103      	bne.n	8007148 <__sfputc_r+0x1e>
 8007140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007144:	f000 b932 	b.w	80073ac <__swbuf_r>
 8007148:	6813      	ldr	r3, [r2, #0]
 800714a:	1c58      	adds	r0, r3, #1
 800714c:	6010      	str	r0, [r2, #0]
 800714e:	7019      	strb	r1, [r3, #0]
 8007150:	4608      	mov	r0, r1
 8007152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007156:	4770      	bx	lr

08007158 <__sfputs_r>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	4614      	mov	r4, r2
 8007160:	18d5      	adds	r5, r2, r3
 8007162:	42ac      	cmp	r4, r5
 8007164:	d101      	bne.n	800716a <__sfputs_r+0x12>
 8007166:	2000      	movs	r0, #0
 8007168:	e007      	b.n	800717a <__sfputs_r+0x22>
 800716a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716e:	463a      	mov	r2, r7
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ffda 	bl	800712a <__sfputc_r>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d1f3      	bne.n	8007162 <__sfputs_r+0xa>
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800717c <_vfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	460d      	mov	r5, r1
 8007182:	b09d      	sub	sp, #116	@ 0x74
 8007184:	4614      	mov	r4, r2
 8007186:	4698      	mov	r8, r3
 8007188:	4606      	mov	r6, r0
 800718a:	b118      	cbz	r0, 8007194 <_vfiprintf_r+0x18>
 800718c:	6a03      	ldr	r3, [r0, #32]
 800718e:	b90b      	cbnz	r3, 8007194 <_vfiprintf_r+0x18>
 8007190:	f7ff f92a 	bl	80063e8 <__sinit>
 8007194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007196:	07d9      	lsls	r1, r3, #31
 8007198:	d405      	bmi.n	80071a6 <_vfiprintf_r+0x2a>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	059a      	lsls	r2, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_vfiprintf_r+0x2a>
 80071a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071a2:	f7ff fa90 	bl	80066c6 <__retarget_lock_acquire_recursive>
 80071a6:	89ab      	ldrh	r3, [r5, #12]
 80071a8:	071b      	lsls	r3, r3, #28
 80071aa:	d501      	bpl.n	80071b0 <_vfiprintf_r+0x34>
 80071ac:	692b      	ldr	r3, [r5, #16]
 80071ae:	b99b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x5c>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4630      	mov	r0, r6
 80071b4:	f000 f938 	bl	8007428 <__swsetup_r>
 80071b8:	b170      	cbz	r0, 80071d8 <_vfiprintf_r+0x5c>
 80071ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071bc:	07dc      	lsls	r4, r3, #31
 80071be:	d504      	bpl.n	80071ca <_vfiprintf_r+0x4e>
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	b01d      	add	sp, #116	@ 0x74
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	0598      	lsls	r0, r3, #22
 80071ce:	d4f7      	bmi.n	80071c0 <_vfiprintf_r+0x44>
 80071d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071d2:	f7ff fa79 	bl	80066c8 <__retarget_lock_release_recursive>
 80071d6:	e7f3      	b.n	80071c0 <_vfiprintf_r+0x44>
 80071d8:	2300      	movs	r3, #0
 80071da:	9309      	str	r3, [sp, #36]	@ 0x24
 80071dc:	2320      	movs	r3, #32
 80071de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e6:	2330      	movs	r3, #48	@ 0x30
 80071e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007398 <_vfiprintf_r+0x21c>
 80071ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071f0:	f04f 0901 	mov.w	r9, #1
 80071f4:	4623      	mov	r3, r4
 80071f6:	469a      	mov	sl, r3
 80071f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fc:	b10a      	cbz	r2, 8007202 <_vfiprintf_r+0x86>
 80071fe:	2a25      	cmp	r2, #37	@ 0x25
 8007200:	d1f9      	bne.n	80071f6 <_vfiprintf_r+0x7a>
 8007202:	ebba 0b04 	subs.w	fp, sl, r4
 8007206:	d00b      	beq.n	8007220 <_vfiprintf_r+0xa4>
 8007208:	465b      	mov	r3, fp
 800720a:	4622      	mov	r2, r4
 800720c:	4629      	mov	r1, r5
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff ffa2 	bl	8007158 <__sfputs_r>
 8007214:	3001      	adds	r0, #1
 8007216:	f000 80a7 	beq.w	8007368 <_vfiprintf_r+0x1ec>
 800721a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721c:	445a      	add	r2, fp
 800721e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007220:	f89a 3000 	ldrb.w	r3, [sl]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 809f 	beq.w	8007368 <_vfiprintf_r+0x1ec>
 800722a:	2300      	movs	r3, #0
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007234:	f10a 0a01 	add.w	sl, sl, #1
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007240:	931a      	str	r3, [sp, #104]	@ 0x68
 8007242:	4654      	mov	r4, sl
 8007244:	2205      	movs	r2, #5
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	4853      	ldr	r0, [pc, #332]	@ (8007398 <_vfiprintf_r+0x21c>)
 800724c:	f7f8 ffe0 	bl	8000210 <memchr>
 8007250:	9a04      	ldr	r2, [sp, #16]
 8007252:	b9d8      	cbnz	r0, 800728c <_vfiprintf_r+0x110>
 8007254:	06d1      	lsls	r1, r2, #27
 8007256:	bf44      	itt	mi
 8007258:	2320      	movmi	r3, #32
 800725a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725e:	0713      	lsls	r3, r2, #28
 8007260:	bf44      	itt	mi
 8007262:	232b      	movmi	r3, #43	@ 0x2b
 8007264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007268:	f89a 3000 	ldrb.w	r3, [sl]
 800726c:	2b2a      	cmp	r3, #42	@ 0x2a
 800726e:	d015      	beq.n	800729c <_vfiprintf_r+0x120>
 8007270:	9a07      	ldr	r2, [sp, #28]
 8007272:	4654      	mov	r4, sl
 8007274:	2000      	movs	r0, #0
 8007276:	f04f 0c0a 	mov.w	ip, #10
 800727a:	4621      	mov	r1, r4
 800727c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007280:	3b30      	subs	r3, #48	@ 0x30
 8007282:	2b09      	cmp	r3, #9
 8007284:	d94b      	bls.n	800731e <_vfiprintf_r+0x1a2>
 8007286:	b1b0      	cbz	r0, 80072b6 <_vfiprintf_r+0x13a>
 8007288:	9207      	str	r2, [sp, #28]
 800728a:	e014      	b.n	80072b6 <_vfiprintf_r+0x13a>
 800728c:	eba0 0308 	sub.w	r3, r0, r8
 8007290:	fa09 f303 	lsl.w	r3, r9, r3
 8007294:	4313      	orrs	r3, r2
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	46a2      	mov	sl, r4
 800729a:	e7d2      	b.n	8007242 <_vfiprintf_r+0xc6>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	1d19      	adds	r1, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	9103      	str	r1, [sp, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bfbb      	ittet	lt
 80072a8:	425b      	neglt	r3, r3
 80072aa:	f042 0202 	orrlt.w	r2, r2, #2
 80072ae:	9307      	strge	r3, [sp, #28]
 80072b0:	9307      	strlt	r3, [sp, #28]
 80072b2:	bfb8      	it	lt
 80072b4:	9204      	strlt	r2, [sp, #16]
 80072b6:	7823      	ldrb	r3, [r4, #0]
 80072b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ba:	d10a      	bne.n	80072d2 <_vfiprintf_r+0x156>
 80072bc:	7863      	ldrb	r3, [r4, #1]
 80072be:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c0:	d132      	bne.n	8007328 <_vfiprintf_r+0x1ac>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	9203      	str	r2, [sp, #12]
 80072ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ce:	3402      	adds	r4, #2
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073a8 <_vfiprintf_r+0x22c>
 80072d6:	7821      	ldrb	r1, [r4, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4650      	mov	r0, sl
 80072dc:	f7f8 ff98 	bl	8000210 <memchr>
 80072e0:	b138      	cbz	r0, 80072f2 <_vfiprintf_r+0x176>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	eba0 000a 	sub.w	r0, r0, sl
 80072e8:	2240      	movs	r2, #64	@ 0x40
 80072ea:	4082      	lsls	r2, r0
 80072ec:	4313      	orrs	r3, r2
 80072ee:	3401      	adds	r4, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4829      	ldr	r0, [pc, #164]	@ (800739c <_vfiprintf_r+0x220>)
 80072f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fc:	2206      	movs	r2, #6
 80072fe:	f7f8 ff87 	bl	8000210 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d03f      	beq.n	8007386 <_vfiprintf_r+0x20a>
 8007306:	4b26      	ldr	r3, [pc, #152]	@ (80073a0 <_vfiprintf_r+0x224>)
 8007308:	bb1b      	cbnz	r3, 8007352 <_vfiprintf_r+0x1d6>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	443b      	add	r3, r7
 800731a:	9309      	str	r3, [sp, #36]	@ 0x24
 800731c:	e76a      	b.n	80071f4 <_vfiprintf_r+0x78>
 800731e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007322:	460c      	mov	r4, r1
 8007324:	2001      	movs	r0, #1
 8007326:	e7a8      	b.n	800727a <_vfiprintf_r+0xfe>
 8007328:	2300      	movs	r3, #0
 800732a:	3401      	adds	r4, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0c0a 	mov.w	ip, #10
 8007334:	4620      	mov	r0, r4
 8007336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733a:	3a30      	subs	r2, #48	@ 0x30
 800733c:	2a09      	cmp	r2, #9
 800733e:	d903      	bls.n	8007348 <_vfiprintf_r+0x1cc>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0c6      	beq.n	80072d2 <_vfiprintf_r+0x156>
 8007344:	9105      	str	r1, [sp, #20]
 8007346:	e7c4      	b.n	80072d2 <_vfiprintf_r+0x156>
 8007348:	fb0c 2101 	mla	r1, ip, r1, r2
 800734c:	4604      	mov	r4, r0
 800734e:	2301      	movs	r3, #1
 8007350:	e7f0      	b.n	8007334 <_vfiprintf_r+0x1b8>
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <_vfiprintf_r+0x228>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4630      	mov	r0, r6
 800735e:	f3af 8000 	nop.w
 8007362:	4607      	mov	r7, r0
 8007364:	1c78      	adds	r0, r7, #1
 8007366:	d1d6      	bne.n	8007316 <_vfiprintf_r+0x19a>
 8007368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	d405      	bmi.n	800737a <_vfiprintf_r+0x1fe>
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	059a      	lsls	r2, r3, #22
 8007372:	d402      	bmi.n	800737a <_vfiprintf_r+0x1fe>
 8007374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007376:	f7ff f9a7 	bl	80066c8 <__retarget_lock_release_recursive>
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	065b      	lsls	r3, r3, #25
 800737e:	f53f af1f 	bmi.w	80071c0 <_vfiprintf_r+0x44>
 8007382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007384:	e71e      	b.n	80071c4 <_vfiprintf_r+0x48>
 8007386:	ab03      	add	r3, sp, #12
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	462a      	mov	r2, r5
 800738c:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <_vfiprintf_r+0x228>)
 800738e:	a904      	add	r1, sp, #16
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff fc7f 	bl	8006c94 <_printf_i>
 8007396:	e7e4      	b.n	8007362 <_vfiprintf_r+0x1e6>
 8007398:	08007952 	.word	0x08007952
 800739c:	0800795c 	.word	0x0800795c
 80073a0:	00000000 	.word	0x00000000
 80073a4:	08007159 	.word	0x08007159
 80073a8:	08007958 	.word	0x08007958

080073ac <__swbuf_r>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	460e      	mov	r6, r1
 80073b0:	4614      	mov	r4, r2
 80073b2:	4605      	mov	r5, r0
 80073b4:	b118      	cbz	r0, 80073be <__swbuf_r+0x12>
 80073b6:	6a03      	ldr	r3, [r0, #32]
 80073b8:	b90b      	cbnz	r3, 80073be <__swbuf_r+0x12>
 80073ba:	f7ff f815 	bl	80063e8 <__sinit>
 80073be:	69a3      	ldr	r3, [r4, #24]
 80073c0:	60a3      	str	r3, [r4, #8]
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	071a      	lsls	r2, r3, #28
 80073c6:	d501      	bpl.n	80073cc <__swbuf_r+0x20>
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	b943      	cbnz	r3, 80073de <__swbuf_r+0x32>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f82a 	bl	8007428 <__swsetup_r>
 80073d4:	b118      	cbz	r0, 80073de <__swbuf_r+0x32>
 80073d6:	f04f 37ff 	mov.w	r7, #4294967295
 80073da:	4638      	mov	r0, r7
 80073dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	1a98      	subs	r0, r3, r2
 80073e4:	6963      	ldr	r3, [r4, #20]
 80073e6:	b2f6      	uxtb	r6, r6
 80073e8:	4283      	cmp	r3, r0
 80073ea:	4637      	mov	r7, r6
 80073ec:	dc05      	bgt.n	80073fa <__swbuf_r+0x4e>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f7ff fdf3 	bl	8006fdc <_fflush_r>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1ed      	bne.n	80073d6 <__swbuf_r+0x2a>
 80073fa:	68a3      	ldr	r3, [r4, #8]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	60a3      	str	r3, [r4, #8]
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	6022      	str	r2, [r4, #0]
 8007406:	701e      	strb	r6, [r3, #0]
 8007408:	6962      	ldr	r2, [r4, #20]
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	429a      	cmp	r2, r3
 800740e:	d004      	beq.n	800741a <__swbuf_r+0x6e>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	07db      	lsls	r3, r3, #31
 8007414:	d5e1      	bpl.n	80073da <__swbuf_r+0x2e>
 8007416:	2e0a      	cmp	r6, #10
 8007418:	d1df      	bne.n	80073da <__swbuf_r+0x2e>
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f7ff fddd 	bl	8006fdc <_fflush_r>
 8007422:	2800      	cmp	r0, #0
 8007424:	d0d9      	beq.n	80073da <__swbuf_r+0x2e>
 8007426:	e7d6      	b.n	80073d6 <__swbuf_r+0x2a>

08007428 <__swsetup_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4b29      	ldr	r3, [pc, #164]	@ (80074d0 <__swsetup_r+0xa8>)
 800742c:	4605      	mov	r5, r0
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	460c      	mov	r4, r1
 8007432:	b118      	cbz	r0, 800743c <__swsetup_r+0x14>
 8007434:	6a03      	ldr	r3, [r0, #32]
 8007436:	b90b      	cbnz	r3, 800743c <__swsetup_r+0x14>
 8007438:	f7fe ffd6 	bl	80063e8 <__sinit>
 800743c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007440:	0719      	lsls	r1, r3, #28
 8007442:	d422      	bmi.n	800748a <__swsetup_r+0x62>
 8007444:	06da      	lsls	r2, r3, #27
 8007446:	d407      	bmi.n	8007458 <__swsetup_r+0x30>
 8007448:	2209      	movs	r2, #9
 800744a:	602a      	str	r2, [r5, #0]
 800744c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	e033      	b.n	80074c0 <__swsetup_r+0x98>
 8007458:	0758      	lsls	r0, r3, #29
 800745a:	d512      	bpl.n	8007482 <__swsetup_r+0x5a>
 800745c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800745e:	b141      	cbz	r1, 8007472 <__swsetup_r+0x4a>
 8007460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007464:	4299      	cmp	r1, r3
 8007466:	d002      	beq.n	800746e <__swsetup_r+0x46>
 8007468:	4628      	mov	r0, r5
 800746a:	f7ff f94d 	bl	8006708 <_free_r>
 800746e:	2300      	movs	r3, #0
 8007470:	6363      	str	r3, [r4, #52]	@ 0x34
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	2300      	movs	r3, #0
 800747c:	6063      	str	r3, [r4, #4]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f043 0308 	orr.w	r3, r3, #8
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	b94b      	cbnz	r3, 80074a2 <__swsetup_r+0x7a>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007498:	d003      	beq.n	80074a2 <__swsetup_r+0x7a>
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f000 f88b 	bl	80075b8 <__smakebuf_r>
 80074a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a6:	f013 0201 	ands.w	r2, r3, #1
 80074aa:	d00a      	beq.n	80074c2 <__swsetup_r+0x9a>
 80074ac:	2200      	movs	r2, #0
 80074ae:	60a2      	str	r2, [r4, #8]
 80074b0:	6962      	ldr	r2, [r4, #20]
 80074b2:	4252      	negs	r2, r2
 80074b4:	61a2      	str	r2, [r4, #24]
 80074b6:	6922      	ldr	r2, [r4, #16]
 80074b8:	b942      	cbnz	r2, 80074cc <__swsetup_r+0xa4>
 80074ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074be:	d1c5      	bne.n	800744c <__swsetup_r+0x24>
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	0799      	lsls	r1, r3, #30
 80074c4:	bf58      	it	pl
 80074c6:	6962      	ldrpl	r2, [r4, #20]
 80074c8:	60a2      	str	r2, [r4, #8]
 80074ca:	e7f4      	b.n	80074b6 <__swsetup_r+0x8e>
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7f7      	b.n	80074c0 <__swsetup_r+0x98>
 80074d0:	20000018 	.word	0x20000018

080074d4 <_raise_r>:
 80074d4:	291f      	cmp	r1, #31
 80074d6:	b538      	push	{r3, r4, r5, lr}
 80074d8:	4605      	mov	r5, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	d904      	bls.n	80074e8 <_raise_r+0x14>
 80074de:	2316      	movs	r3, #22
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074ea:	b112      	cbz	r2, 80074f2 <_raise_r+0x1e>
 80074ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074f0:	b94b      	cbnz	r3, 8007506 <_raise_r+0x32>
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f830 	bl	8007558 <_getpid_r>
 80074f8:	4622      	mov	r2, r4
 80074fa:	4601      	mov	r1, r0
 80074fc:	4628      	mov	r0, r5
 80074fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007502:	f000 b817 	b.w	8007534 <_kill_r>
 8007506:	2b01      	cmp	r3, #1
 8007508:	d00a      	beq.n	8007520 <_raise_r+0x4c>
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	d103      	bne.n	8007516 <_raise_r+0x42>
 800750e:	2316      	movs	r3, #22
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	2001      	movs	r0, #1
 8007514:	e7e7      	b.n	80074e6 <_raise_r+0x12>
 8007516:	2100      	movs	r1, #0
 8007518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800751c:	4620      	mov	r0, r4
 800751e:	4798      	blx	r3
 8007520:	2000      	movs	r0, #0
 8007522:	e7e0      	b.n	80074e6 <_raise_r+0x12>

08007524 <raise>:
 8007524:	4b02      	ldr	r3, [pc, #8]	@ (8007530 <raise+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bfd3 	b.w	80074d4 <_raise_r>
 800752e:	bf00      	nop
 8007530:	20000018 	.word	0x20000018

08007534 <_kill_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	@ (8007554 <_kill_r+0x20>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	4611      	mov	r1, r2
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	f7f9 fc47 	bl	8000dd4 <_kill>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d102      	bne.n	8007550 <_kill_r+0x1c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	b103      	cbz	r3, 8007550 <_kill_r+0x1c>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	20000714 	.word	0x20000714

08007558 <_getpid_r>:
 8007558:	f7f9 bc34 	b.w	8000dc4 <_getpid>

0800755c <_malloc_usable_size_r>:
 800755c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007560:	1f18      	subs	r0, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfbc      	itt	lt
 8007566:	580b      	ldrlt	r3, [r1, r0]
 8007568:	18c0      	addlt	r0, r0, r3
 800756a:	4770      	bx	lr

0800756c <__swhatbuf_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	460c      	mov	r4, r1
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2900      	cmp	r1, #0
 8007576:	b096      	sub	sp, #88	@ 0x58
 8007578:	4615      	mov	r5, r2
 800757a:	461e      	mov	r6, r3
 800757c:	da0d      	bge.n	800759a <__swhatbuf_r+0x2e>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	bf14      	ite	ne
 800758a:	2340      	movne	r3, #64	@ 0x40
 800758c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007590:	2000      	movs	r0, #0
 8007592:	6031      	str	r1, [r6, #0]
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	b016      	add	sp, #88	@ 0x58
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	466a      	mov	r2, sp
 800759c:	f000 f848 	bl	8007630 <_fstat_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dbec      	blt.n	800757e <__swhatbuf_r+0x12>
 80075a4:	9901      	ldr	r1, [sp, #4]
 80075a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075ae:	4259      	negs	r1, r3
 80075b0:	4159      	adcs	r1, r3
 80075b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075b6:	e7eb      	b.n	8007590 <__swhatbuf_r+0x24>

080075b8 <__smakebuf_r>:
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075bc:	079d      	lsls	r5, r3, #30
 80075be:	4606      	mov	r6, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	d507      	bpl.n	80075d4 <__smakebuf_r+0x1c>
 80075c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2301      	movs	r3, #1
 80075ce:	6163      	str	r3, [r4, #20]
 80075d0:	b003      	add	sp, #12
 80075d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d4:	ab01      	add	r3, sp, #4
 80075d6:	466a      	mov	r2, sp
 80075d8:	f7ff ffc8 	bl	800756c <__swhatbuf_r>
 80075dc:	9f00      	ldr	r7, [sp, #0]
 80075de:	4605      	mov	r5, r0
 80075e0:	4639      	mov	r1, r7
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7ff f904 	bl	80067f0 <_malloc_r>
 80075e8:	b948      	cbnz	r0, 80075fe <__smakebuf_r+0x46>
 80075ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ee:	059a      	lsls	r2, r3, #22
 80075f0:	d4ee      	bmi.n	80075d0 <__smakebuf_r+0x18>
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	f043 0302 	orr.w	r3, r3, #2
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	e7e2      	b.n	80075c4 <__smakebuf_r+0xc>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	6020      	str	r0, [r4, #0]
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	9b01      	ldr	r3, [sp, #4]
 800760a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800760e:	b15b      	cbz	r3, 8007628 <__smakebuf_r+0x70>
 8007610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f81d 	bl	8007654 <_isatty_r>
 800761a:	b128      	cbz	r0, 8007628 <__smakebuf_r+0x70>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	431d      	orrs	r5, r3
 800762c:	81a5      	strh	r5, [r4, #12]
 800762e:	e7cf      	b.n	80075d0 <__smakebuf_r+0x18>

08007630 <_fstat_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	@ (8007650 <_fstat_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f7f9 fc29 	bl	8000e94 <_fstat>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_fstat_r+0x1c>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b103      	cbz	r3, 800764c <_fstat_r+0x1c>
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	20000714 	.word	0x20000714

08007654 <_isatty_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	@ (8007670 <_isatty_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7f9 fc28 	bl	8000eb4 <_isatty>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_isatty_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_isatty_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20000714 	.word	0x20000714

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
