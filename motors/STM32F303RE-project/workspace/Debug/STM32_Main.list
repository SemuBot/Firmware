
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004efc  08004efc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004efc  08004efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010420  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025c8  00000000  00000000  0003049f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8c  00000000  00000000  000337f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000208c5  00000000  00000000  0003427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012c96  00000000  00000000  00054b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c68c3  00000000  00000000  000677d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000375c  00000000  00000000  0012e09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001317f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004eac 	.word	0x08004eac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004eac 	.word	0x08004eac

080001d4 <moveMotor>:
#include "motors.h"

void moveMotor(struct Motors* motor)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]


	if (motor->STEPS > 0){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	691b      	ldr	r3, [r3, #16]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	dd35      	ble.n	8000250 <moveMotor+0x7c>
		  //HAL_GPIO_WritePin(GPIOC, motor->dirPin, GPIO_PIN_RESET); // Set DIR high for one direction
		  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_RESET); // Set EN high to enable the driver
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	2200      	movs	r2, #0
 80001ec:	4619      	mov	r1, r3
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <moveMotor+0x84>)
 80001f0:	f001 f88c 	bl	800130c <HAL_GPIO_WritePin>

		  motor->TIMER-> CCR1 = clamp(motor->SPEED,1,200);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	22c8      	movs	r2, #200	; 0xc8
 80001fa:	2101      	movs	r1, #1
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f82d 	bl	800025c <clamp>
 8000202:	4602      	mov	r2, r0
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	635a      	str	r2, [r3, #52]	; 0x34

		  // Wait for the specified duration
		  HAL_Delay(MOVE_DURATION);
 800020a:	200a      	movs	r0, #10
 800020c:	f000 fd48 	bl	8000ca0 <HAL_Delay>

		  // Stop the motor
		  motor->TIMER-> CCR1 = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	2200      	movs	r2, #0
 8000216:	635a      	str	r2, [r3, #52]	; 0x34

		  // Wait for a moment
		  HAL_Delay(MOVE_DURATION);
 8000218:	200a      	movs	r0, #10
 800021a:	f000 fd41 	bl	8000ca0 <HAL_Delay>


		  // Disable the motor
		  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_SET);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	b29b      	uxth	r3, r3
 8000224:	2201      	movs	r2, #1
 8000226:	4619      	mov	r1, r3
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <moveMotor+0x84>)
 800022a:	f001 f86f 	bl	800130c <HAL_GPIO_WritePin>
		  motor->STEPS--;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	1e5a      	subs	r2, r3, #1
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	611a      	str	r2, [r3, #16]
		  if(motor->STEPS == 0){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	691b      	ldr	r3, [r3, #16]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d107      	bne.n	8000250 <moveMotor+0x7c>
			  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_SET);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	b29b      	uxth	r3, r3
 8000246:	2201      	movs	r2, #1
 8000248:	4619      	mov	r1, r3
 800024a:	4803      	ldr	r0, [pc, #12]	; (8000258 <moveMotor+0x84>)
 800024c:	f001 f85e 	bl	800130c <HAL_GPIO_WritePin>
		  }
	}
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	48000800 	.word	0x48000800

0800025c <clamp>:

int clamp(int value, int min, int max) {
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	429a      	cmp	r2, r3
 800026e:	da01      	bge.n	8000274 <clamp+0x18>
        return min;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	e006      	b.n	8000282 <clamp+0x26>
    } else if (value > max) {
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	429a      	cmp	r2, r3
 800027a:	dd01      	ble.n	8000280 <clamp+0x24>
        return max;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	e000      	b.n	8000282 <clamp+0x26>
    } else {
        return value;
 8000280:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
	...

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b39      	ldr	r3, [pc, #228]	; (800038c <MX_GPIO_Init+0xfc>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a38      	ldr	r2, [pc, #224]	; (800038c <MX_GPIO_Init+0xfc>)
 80002ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b36      	ldr	r3, [pc, #216]	; (800038c <MX_GPIO_Init+0xfc>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b33      	ldr	r3, [pc, #204]	; (800038c <MX_GPIO_Init+0xfc>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a32      	ldr	r2, [pc, #200]	; (800038c <MX_GPIO_Init+0xfc>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b30      	ldr	r3, [pc, #192]	; (800038c <MX_GPIO_Init+0xfc>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b2d      	ldr	r3, [pc, #180]	; (800038c <MX_GPIO_Init+0xfc>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a2c      	ldr	r2, [pc, #176]	; (800038c <MX_GPIO_Init+0xfc>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_GPIO_Init+0xfc>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_GPIO_Init+0xfc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a26      	ldr	r2, [pc, #152]	; (800038c <MX_GPIO_Init+0xfc>)
 80002f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_GPIO_Init+0xfc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	210c      	movs	r1, #12
 800030a:	4821      	ldr	r0, [pc, #132]	; (8000390 <MX_GPIO_Init+0x100>)
 800030c:	f000 fffe 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2120      	movs	r1, #32
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 fff8 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000322:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4619      	mov	r1, r3
 8000332:	4817      	ldr	r0, [pc, #92]	; (8000390 <MX_GPIO_Init+0x100>)
 8000334:	f000 fe60 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 8000338:	230c      	movs	r3, #12
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	4619      	mov	r1, r3
 800034e:	4810      	ldr	r0, [pc, #64]	; (8000390 <MX_GPIO_Init+0x100>)
 8000350:	f000 fe52 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000354:	2320      	movs	r3, #32
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f000 fe43 	bl	8000ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f000 fd91 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037c:	2028      	movs	r0, #40	; 0x28
 800037e:	f000 fdaa 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

}
 8000382:	bf00      	nop
 8000384:	3728      	adds	r7, #40	; 0x28
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	48000800 	.word	0x48000800

08000394 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d103      	bne.n	80003ae <HAL_TIM_PeriodElapsedCallback+0x1a>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 80003a6:	2120      	movs	r1, #32
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003aa:	f000 ffc7 	bl	800133c <HAL_GPIO_TogglePin>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40000400 	.word	0x40000400
 80003bc:	48000c00 	.word	0x48000c00

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fc06 	bl	8000bd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f83e 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f7ff ff60 	bl	8000290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003d0:	f000 fb22 	bl	8000a18 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003d4:	f000 faf0 	bl	80009b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80003d8:	f000 f9ec 	bl	80007b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80003dc:	f000 f95a 	bl	8000694 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4813      	ldr	r0, [pc, #76]	; (8000434 <main+0x74>)
 80003e8:	f000 ff90 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80003ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003f0:	f000 f890 	bl	8000514 <HAL_GPIO_EXTI_Callback>

  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim3);
 80003f4:	4810      	ldr	r0, [pc, #64]	; (8000438 <main+0x78>)
 80003f6:	f002 fc7b 	bl	8002cf0 <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2); // Set DIR high for one direction
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3); // Set EN high to enable the driver
  //TIM1->CCR1 = 0;

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 80003fa:	2100      	movs	r1, #0
 80003fc:	480f      	ldr	r0, [pc, #60]	; (800043c <main+0x7c>)
 80003fe:	f002 fd3f 	bl	8002e80 <HAL_TIM_PWM_Start>
  motor1.DIR_PIN = MOTOR1_DIR_PIN;
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <main+0x80>)
 8000404:	2204      	movs	r2, #4
 8000406:	601a      	str	r2, [r3, #0]
  motor1.STEP_PIN = MOTOR1_STEP_PIN;
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <main+0x80>)
 800040a:	2201      	movs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  motor1.EN_PIN = MOTOR1_EN_PIN;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <main+0x80>)
 8000410:	2208      	movs	r2, #8
 8000412:	609a      	str	r2, [r3, #8]
  motor1.SPEED = 100;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <main+0x80>)
 8000416:	2264      	movs	r2, #100	; 0x64
 8000418:	60da      	str	r2, [r3, #12]
  motor1.STEPS = 200;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <main+0x80>)
 800041c:	22c8      	movs	r2, #200	; 0xc8
 800041e:	611a      	str	r2, [r3, #16]
  motor1.TIMER = TIM1;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <main+0x80>)
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <main+0x84>)
 8000424:	615a      	str	r2, [r3, #20]
  moveMotor(&motor1);
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <main+0x80>)
 8000428:	f7ff fed4 	bl	80001d4 <moveMotor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  moveMotor(&motor1);
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <main+0x80>)
 800042e:	f7ff fed1 	bl	80001d4 <moveMotor>
 8000432:	e7fb      	b.n	800042c <main+0x6c>
 8000434:	48000800 	.word	0x48000800
 8000438:	20000090 	.word	0x20000090
 800043c:	20000044 	.word	0x20000044
 8000440:	20000028 	.word	0x20000028
 8000444:	40012c00 	.word	0x40012c00

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b0a6      	sub	sp, #152	; 0x98
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000452:	2228      	movs	r2, #40	; 0x28
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f004 fcfb 	bl	8004e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2258      	movs	r2, #88	; 0x58
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f004 fced 	bl	8004e52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	2310      	movs	r3, #16
 8000482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800048c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000494:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 ff7a 	bl	80013a0 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f84f 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2302      	movs	r3, #2
 80004bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 ffb8 	bl	8002448 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004de:	f000 f839 	bl	8000554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <SystemClock_Config+0xc8>)
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004f2:	2300      	movs	r3, #0
 80004f4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 f9db 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000504:	f000 f826 	bl	8000554 <Error_Handler>
  }
}
 8000508:	bf00      	nop
 800050a:	3798      	adds	r7, #152	; 0x98
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	00201003 	.word	0x00201003

08000514 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000524:	d10e      	bne.n	8000544 <HAL_GPIO_EXTI_Callback+0x30>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000526:	2120      	movs	r1, #32
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 ff06 	bl	800133c <HAL_GPIO_TogglePin>
	    motor1.STEPS = 200;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_GPIO_EXTI_Callback+0x38>)
 8000532:	22c8      	movs	r2, #200	; 0xc8
 8000534:	611a      	str	r2, [r3, #16]
	    motor1.SPEED = 10;
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_GPIO_EXTI_Callback+0x38>)
 8000538:	220a      	movs	r2, #10
 800053a:	60da      	str	r2, [r3, #12]

    // Change motor direction
    HAL_GPIO_TogglePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN); // Toggle direction pin
 800053c:	2104      	movs	r1, #4
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000540:	f000 fefc 	bl	800133c <HAL_GPIO_TogglePin>
  }
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028
 8000550:	48000800 	.word	0x48000800

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000596:	2007      	movs	r0, #7
 8000598:	f000 fc76 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 fb34 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000602:	f002 fd49 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000044 	.word	0x20000044

08000610 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000616:	f002 fd3f 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000044 	.word	0x20000044

08000624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM3_IRQHandler+0x10>)
 800062a:	f002 fd35 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000090 	.word	0x20000090

08000638 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <USART1_IRQHandler+0x10>)
 800063e:	f003 fccf 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000dc 	.word	0x200000dc

0800064c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <USART2_IRQHandler+0x10>)
 8000652:	f003 fcc5 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000164 	.word	0x20000164

08000660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000664:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000668:	f000 fe82 	bl	8001370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	222c      	movs	r2, #44	; 0x2c
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fbc6 	bl	8004e52 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c6:	4b39      	ldr	r3, [pc, #228]	; (80007ac <MX_TIM1_Init+0x118>)
 80006c8:	4a39      	ldr	r2, [pc, #228]	; (80007b0 <MX_TIM1_Init+0x11c>)
 80006ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <MX_TIM1_Init+0x118>)
 80006ce:	f240 12df 	movw	r2, #479	; 0x1df
 80006d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b35      	ldr	r3, [pc, #212]	; (80007ac <MX_TIM1_Init+0x118>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_TIM1_Init+0x118>)
 80006dc:	2263      	movs	r2, #99	; 0x63
 80006de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <MX_TIM1_Init+0x118>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MX_TIM1_Init+0x118>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ec:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_TIM1_Init+0x118>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <MX_TIM1_Init+0x118>)
 80006f4:	f002 fb6c 	bl	8002dd0 <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f7ff ff29 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000712:	4619      	mov	r1, r3
 8000714:	4825      	ldr	r0, [pc, #148]	; (80007ac <MX_TIM1_Init+0x118>)
 8000716:	f003 fae5 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000720:	f7ff ff18 	bl	8000554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000724:	2360      	movs	r3, #96	; 0x60
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <MX_TIM1_Init+0x118>)
 800074a:	f002 fdc5 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000754:	f7ff fefe 	bl	8000554 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM1_Init+0x118>)
 800078e:	f003 fb35 	bl	8003dfc <HAL_TIMEx_ConfigBreakDeadTime>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000798:	f7ff fedc 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM1_Init+0x118>)
 800079e:	f000 f8af 	bl	8000900 <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3758      	adds	r7, #88	; 0x58
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000044 	.word	0x20000044
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_TIM3_Init+0xb4>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3569;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007ee:	f640 52f1 	movw	r2, #3569	; 0xdf1
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM3_Init+0xb0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_TIM3_Init+0xb0>)
 8000802:	f002 fae5 	bl	8002dd0 <HAL_TIM_PWM_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800080c:	f7ff fea2 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_TIM3_Init+0xb0>)
 8000820:	f003 fa60 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800082a:	f7ff fe93 	bl	8000554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM3_Init+0xb0>)
 8000846:	f002 fd47 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000850:	f7ff fe80 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_TIM3_Init+0xb0>)
 8000856:	f000 f853 	bl	8000900 <HAL_TIM_MspPostInit>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000090 	.word	0x20000090
 8000868:	40000400 	.word	0x40000400

0800086c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <HAL_TIM_PWM_MspInit+0x88>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d11c      	bne.n	80008b8 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2018      	movs	r0, #24
 800089c:	f000 faff 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f000 fb18 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 faf7 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008b0:	2019      	movs	r0, #25
 80008b2:	f000 fb10 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008b6:	e018      	b.n	80008ea <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_TIM_PWM_MspInit+0x90>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d113      	bne.n	80008ea <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_TIM_PWM_MspInit+0x8c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	201d      	movs	r0, #29
 80008e0:	f000 fadd 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e4:	201d      	movs	r0, #29
 80008e6:	f000 faf6 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40000400 	.word	0x40000400

08000900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_TIM_MspPostInit+0xa8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d11c      	bne.n	800095c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 8000928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800094a:	2302      	movs	r3, #2
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <HAL_TIM_MspPostInit+0xb0>)
 8000956:	f000 fb4f 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800095a:	e021      	b.n	80009a0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_TIM_MspPostInit+0xb4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d11c      	bne.n	80009a0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_TIM_MspPostInit+0xac>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800098e:	2302      	movs	r3, #2
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fb2c 	bl	8000ff8 <HAL_GPIO_Init>
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART1_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009fc:	f003 faa2 	bl	8003f44 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f7ff fda5 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000dc 	.word	0x200000dc
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <MX_USART2_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a24:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f003 fa72 	bl	8003f44 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a66:	f7ff fd75 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000164 	.word	0x20000164
 8000a74:	40004400 	.word	0x40004400

08000a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <HAL_UART_MspInit+0xf8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d130      	bne.n	8000afc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a35      	ldr	r2, [pc, #212]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b33      	ldr	r3, [pc, #204]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000aca:	2330      	movs	r3, #48	; 0x30
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ada:	2307      	movs	r3, #7
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4824      	ldr	r0, [pc, #144]	; (8000b78 <HAL_UART_MspInit+0x100>)
 8000ae6:	f000 fa87 	bl	8000ff8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2025      	movs	r0, #37	; 0x25
 8000af0:	f000 f9d5 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000af4:	2025      	movs	r0, #37	; 0x25
 8000af6:	f000 f9ee 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afa:	e035      	b.n	8000b68 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_UART_MspInit+0x104>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d130      	bne.n	8000b68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	6153      	str	r3, [r2, #20]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0xfc>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b36:	230c      	movs	r3, #12
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fa50 	bl	8000ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2026      	movs	r0, #38	; 0x26
 8000b5e:	f000 f99e 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b62:	2026      	movs	r0, #38	; 0x26
 8000b64:	f000 f9b7 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	40004400 	.word	0x40004400

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff fd74 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f004 f959 	bl	8004e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fc05 	bl	80003c0 <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc4:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bcc:	200001f0 	.word	0x200001f0

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f94f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fcb6 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f967 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f92f 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	200001ec 	.word	0x200001ec

08000c88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200001ec 	.word	0x200001ec

08000ca0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffde 	bl	8000c88 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d008      	beq.n	8000f2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e020      	b.n	8000f70 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 020e 	bic.w	r2, r2, #14
 8000f3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d005      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2204      	movs	r2, #4
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e027      	b.n	8000fee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 020e 	bic.w	r2, r2, #14
 8000fac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    } 
  }
  return status;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e160      	b.n	80012ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2101      	movs	r1, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8152 	beq.w	80012c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d005      	beq.n	8001038 <HAL_GPIO_Init+0x40>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d130      	bne.n	800109a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106e:	2201      	movs	r2, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	f003 0201 	and.w	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d017      	beq.n	80010d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d123      	bne.n	800112a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	6939      	ldr	r1, [r7, #16]
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0203 	and.w	r2, r3, #3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80ac 	beq.w	80012c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <HAL_GPIO_Init+0x2f0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a5d      	ldr	r2, [pc, #372]	; (80012e8 <HAL_GPIO_Init+0x2f0>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <HAL_GPIO_Init+0x2f0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001184:	4a59      	ldr	r2, [pc, #356]	; (80012ec <HAL_GPIO_Init+0x2f4>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ae:	d025      	beq.n	80011fc <HAL_GPIO_Init+0x204>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x2f8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d01f      	beq.n	80011f8 <HAL_GPIO_Init+0x200>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x2fc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d019      	beq.n	80011f4 <HAL_GPIO_Init+0x1fc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x300>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1f8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x304>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1f4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x308>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1f0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_GPIO_Init+0x30c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1ec>
 80011e0:	2306      	movs	r3, #6
 80011e2:	e00c      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011e4:	2307      	movs	r3, #7
 80011e6:	e00a      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011e8:	2305      	movs	r3, #5
 80011ea:	e008      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011f0:	2303      	movs	r3, #3
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x206>
 80011fc:	2300      	movs	r3, #0
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120e:	4937      	ldr	r1, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2f4>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_GPIO_Init+0x310>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_GPIO_Init+0x310>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001294:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_GPIO_Init+0x310>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <HAL_GPIO_Init+0x310>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f ae97 	bne.w	8001008 <HAL_GPIO_Init+0x10>
  }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	48001000 	.word	0x48001000
 8001300:	48001400 	.word	0x48001400
 8001304:	48001800 	.word	0x48001800
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43d9      	mvns	r1, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	400b      	ands	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8c0 	bl	8000514 <HAL_GPIO_EXTI_Callback>
  }
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f001 b83a 	b.w	800243a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 816f 	beq.w	80016ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013dc:	4bb5      	ldr	r3, [pc, #724]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00c      	beq.n	8001402 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e8:	4bb2      	ldr	r3, [pc, #712]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d15c      	bne.n	80014ae <HAL_RCC_OscConfig+0x10e>
 80013f4:	4baf      	ldr	r3, [pc, #700]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d155      	bne.n	80014ae <HAL_RCC_OscConfig+0x10e>
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001416:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0x94>
 800142e:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0xc0>
 8001434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001438:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001450:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800145c:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001464:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001468:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800146c:	fa92 f2a2 	rbit	r2, r2
 8001470:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001474:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001478:	fab2 f282 	clz	r2, r2
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f042 0220 	orr.w	r2, r2, #32
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8111 	beq.w	80016b8 <HAL_RCC_OscConfig+0x318>
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 8108 	bne.w	80016b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f000 bfc6 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x12e>
 80014c0:	4b7c      	ldr	r3, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a7b      	ldr	r2, [pc, #492]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e036      	b.n	800153c <HAL_RCC_OscConfig+0x19c>
 80014ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x158>
 80014de:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a74      	ldr	r2, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a71      	ldr	r2, [pc, #452]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e021      	b.n	800153c <HAL_RCC_OscConfig+0x19c>
 80014f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x184>
 800150a:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a69      	ldr	r2, [pc, #420]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a66      	ldr	r2, [pc, #408]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0x19c>
 8001524:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a62      	ldr	r2, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d059      	beq.n	8001600 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fb9c 	bl	8000c88 <HAL_GetTick>
 8001550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001556:	f7ff fb97 	bl	8000c88 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d902      	bls.n	800156c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	f000 bf67 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001580:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <HAL_RCC_OscConfig+0x1fe>
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x22a>
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80015b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015d6:	fa92 f2a2 	rbit	r2, r2
 80015da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f002 021f 	and.w	r2, r2, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ab      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b6>
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fb42 	bl	8000c88 <HAL_GetTick>
 8001604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160a:	f7ff fb3d 	bl	8000c88 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d902      	bls.n	8001620 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	f000 bf0d 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001634:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x2b2>
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x2de>
 8001652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001656:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800166e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_RCC_OscConfig+0x314>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001682:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001686:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001692:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001696:	fab2 f282 	clz	r2, r2
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	f042 0220 	orr.w	r2, r2, #32
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f002 021f 	and.w	r2, r2, #31
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ab      	bne.n	800160a <HAL_RCC_OscConfig+0x26a>
 80016b2:	e002      	b.n	80016ba <HAL_RCC_OscConfig+0x31a>
 80016b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 817f 	beq.w	80019ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016d0:	4ba7      	ldr	r3, [pc, #668]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016dc:	4ba4      	ldr	r3, [pc, #656]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d173      	bne.n	80017d0 <HAL_RCC_OscConfig+0x430>
 80016e8:	4ba1      	ldr	r3, [pc, #644]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f4:	d16c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x430>
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001708:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_RCC_OscConfig+0x386>
 8001720:	4b93      	ldr	r3, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e013      	b.n	800174e <HAL_RCC_OscConfig+0x3ae>
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001738:	2302      	movs	r3, #2
 800173a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800173e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2202      	movs	r2, #2
 8001750:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001754:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001758:	fa92 f2a2 	rbit	r2, r2
 800175c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001760:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f002 021f 	and.w	r2, r2, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <HAL_RCC_OscConfig+0x3f6>
 8001780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d002      	beq.n	8001796 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f000 be52 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	21f8      	movs	r1, #248	; 0xf8
 80017ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80017b4:	fa91 f1a1 	rbit	r1, r1
 80017b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80017bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017c0:	fab1 f181 	clz	r1, r1
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	408b      	lsls	r3, r1
 80017c8:	4969      	ldr	r1, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e0fe      	b.n	80019ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8088 	beq.w	80018f2 <HAL_RCC_OscConfig+0x552>
 80017e2:	2301      	movs	r3, #1
 80017e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	461a      	mov	r2, r3
 800180a:	2301      	movs	r3, #1
 800180c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa3b 	bl	8000c88 <HAL_GetTick>
 8001812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fa36 	bl	8000c88 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d902      	bls.n	800182e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	f000 be06 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001840:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x4be>
 8001858:	4b45      	ldr	r3, [pc, #276]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0x4e6>
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001876:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	2202      	movs	r2, #2
 8001888:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800188c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001890:	fa92 f2a2 	rbit	r2, r2
 8001894:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001898:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f002 021f 	and.w	r2, r2, #31
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0af      	beq.n	8001818 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	21f8      	movs	r1, #248	; 0xf8
 80018ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018d6:	fa91 f1a1 	rbit	r1, r1
 80018da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018e2:	fab1 f181 	clz	r1, r1
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	408b      	lsls	r3, r1
 80018ea:	4921      	ldr	r1, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e06d      	b.n	80019ce <HAL_RCC_OscConfig+0x62e>
 80018f2:	2301      	movs	r3, #1
 80018f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001904:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	461a      	mov	r2, r3
 800191a:	2300      	movs	r3, #0
 800191c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff f9b3 	bl	8000c88 <HAL_GetTick>
 8001922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff f9ae 	bl	8000c88 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d902      	bls.n	800193e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	f000 bd7e 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x5d4>
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <HAL_RCC_OscConfig+0x5d0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e016      	b.n	800199c <HAL_RCC_OscConfig+0x5fc>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800198c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001998:	4bbf      	ldr	r3, [pc, #764]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2202      	movs	r2, #2
 800199e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80019a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019a6:	fa92 f2a2 	rbit	r2, r2
 80019aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80019ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ac      	bne.n	8001928 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8113 	beq.w	8001c0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d07c      	beq.n	8001aee <HAL_RCC_OscConfig+0x74e>
 80019f4:	2301      	movs	r3, #1
 80019f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4ba2      	ldr	r3, [pc, #648]	; (8001c9c <HAL_RCC_OscConfig+0x8fc>)
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f933 	bl	8000c88 <HAL_GetTick>
 8001a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff f92e 	bl	8000c88 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d902      	bls.n	8001a3e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f000 bcfe 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b7e      	ldr	r3, [pc, #504]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001aaa:	2102      	movs	r1, #2
 8001aac:	6019      	str	r1, [r3, #0]
 8001aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fa93 f1a3 	rbit	r1, r3
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ac4:	6019      	str	r1, [r3, #0]
  return result;
 8001ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d09d      	beq.n	8001a28 <HAL_RCC_OscConfig+0x688>
 8001aec:	e08d      	b.n	8001c0a <HAL_RCC_OscConfig+0x86a>
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x8fc>)
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f8aa 	bl	8000c88 <HAL_GetTick>
 8001b34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f8a5 	bl	8000c88 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d902      	bls.n	8001b50 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f000 bc75 	b.w	800243a <HAL_RCC_OscConfig+0x109a>
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b58:	2202      	movs	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bc8:	2102      	movs	r1, #2
 8001bca:	6019      	str	r1, [r3, #0]
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f1a3 	rbit	r1, r3
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001be2:	6019      	str	r1, [r3, #0]
  return result;
 8001be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d197      	bne.n	8001b3a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 81a5 	beq.w	8001f6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_OscConfig+0x8f8>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x900>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d121      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_OscConfig+0x900>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x900>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7ff f806 	bl	8000c88 <HAL_GetTick>
 8001c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e010      	b.n	8001ca4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7ff f801 	bl	8000c88 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d908      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e3d1      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	10908120 	.word	0x10908120
 8001ca0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b8d      	ldr	r3, [pc, #564]	; (8001edc <HAL_RCC_OscConfig+0xb3c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0e8      	beq.n	8001c82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x92e>
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a86      	ldr	r2, [pc, #536]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e035      	b.n	8001d3a <HAL_RCC_OscConfig+0x99a>
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x958>
 8001cde:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b7d      	ldr	r3, [pc, #500]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a7c      	ldr	r2, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	e020      	b.n	8001d3a <HAL_RCC_OscConfig+0x99a>
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x982>
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a74      	ldr	r2, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x99a>
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8081 	beq.w	8001e4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ff9c 	bl	8000c88 <HAL_GetTick>
 8001d50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe ff97 	bl	8000c88 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e365      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001db4:	601a      	str	r2, [r3, #0]
  return result;
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_OscConfig+0xa3a>
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	e013      	b.n	8001e02 <HAL_RCC_OscConfig+0xa62>
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	6011      	str	r1, [r2, #0]
 8001e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	fa92 f1a2 	rbit	r1, r2
 8001e1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e24:	6011      	str	r1, [r2, #0]
  return result;
 8001e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d084      	beq.n	8001d56 <HAL_RCC_OscConfig+0x9b6>
 8001e4c:	e083      	b.n	8001f56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff1b 	bl	8000c88 <HAL_GetTick>
 8001e52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe ff16 	bl	8000c88 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e2e4      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eb6:	601a      	str	r2, [r3, #0]
  return result;
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ec0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xb44>
 8001ed6:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <HAL_RCC_OscConfig+0xb40>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	e017      	b.n	8001f0c <HAL_RCC_OscConfig+0xb6c>
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4bb3      	ldr	r3, [pc, #716]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f14:	2102      	movs	r1, #2
 8001f16:	6011      	str	r1, [r2, #0]
 8001f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	fa92 f1a2 	rbit	r1, r2
 8001f26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f2e:	6011      	str	r1, [r2, #0]
  return result;
 8001f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d180      	bne.n	8001e58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a9d      	ldr	r2, [pc, #628]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 825e 	beq.w	8002438 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b96      	ldr	r3, [pc, #600]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	f000 821f 	beq.w	80023c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	f040 8170 	bne.w	800227c <HAL_RCC_OscConfig+0xedc>
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fc0:	601a      	str	r2, [r3, #0]
  return result;
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2300      	movs	r3, #0
 8001fe0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fe51 	bl	8000c88 <HAL_GetTick>
 8001fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e009      	b.n	8002000 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fe4c 	bl	8000c88 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e21c      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002024:	601a      	str	r2, [r3, #0]
  return result;
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800202e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d102      	bne.n	800204a <HAL_RCC_OscConfig+0xcaa>
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e027      	b.n	800209a <HAL_RCC_OscConfig+0xcfa>
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020a6:	6011      	str	r1, [r2, #0]
 80020a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	fa92 f1a2 	rbit	r1, r2
 80020b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020be:	6011      	str	r1, [r2, #0]
  return result;
 80020c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020c4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d182      	bne.n	8001fec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f023 020f 	bic.w	r2, r3, #15
 80020ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	4937      	ldr	r1, [pc, #220]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	430b      	orrs	r3, r1
 8002122:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800214c:	601a      	str	r2, [r3, #0]
  return result;
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002156:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002162:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	461a      	mov	r2, r3
 800216a:	2301      	movs	r3, #1
 800216c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe fd8b 	bl	8000c88 <HAL_GetTick>
 8002172:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fd86 	bl	8000c88 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e156      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021b0:	601a      	str	r2, [r3, #0]
  return result;
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0xe3c>
 80021d0:	4b01      	ldr	r3, [pc, #4]	; (80021d8 <HAL_RCC_OscConfig+0xe38>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e02a      	b.n	800222c <HAL_RCC_OscConfig+0xe8c>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCC_OscConfig+0x10a4>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002230:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002234:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002238:	6011      	str	r1, [r2, #0]
 800223a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800223e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fa92 f1a2 	rbit	r1, r2
 8002248:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800224c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002250:	6011      	str	r1, [r2, #0]
  return result;
 8002252:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002256:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	f43f af7f 	beq.w	8002178 <HAL_RCC_OscConfig+0xdd8>
 800227a:	e0dd      	b.n	8002438 <HAL_RCC_OscConfig+0x1098>
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022a0:	601a      	str	r2, [r3, #0]
  return result;
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2300      	movs	r3, #0
 80022c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fce1 	bl	8000c88 <HAL_GetTick>
 80022c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	e009      	b.n	80022e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fcdc 	bl	8000c88 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0ac      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002304:	601a      	str	r2, [r3, #0]
  return result;
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800230e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0xf8a>
 8002324:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCC_OscConfig+0x10a4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e027      	b.n	800237a <HAL_RCC_OscConfig+0xfda>
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002362:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x10a4>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002382:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002386:	6011      	str	r1, [r2, #0]
 8002388:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800238c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	fa92 f1a2 	rbit	r1, r2
 8002396:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800239a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800239e:	6011      	str	r1, [r2, #0]
  return result;
 80023a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0220 	orr.w	r2, r2, #32
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d182      	bne.n	80022cc <HAL_RCC_OscConfig+0xf2c>
 80023c6:	e037      	b.n	8002438 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e02e      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_OscConfig+0x10a4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_RCC_OscConfig+0x10a4>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	429a      	cmp	r2, r3
 8002402:	d117      	bne.n	8002434 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002408:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002418:	429a      	cmp	r2, r3
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800241c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b09e      	sub	sp, #120	; 0x78
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e162      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b90      	ldr	r3, [pc, #576]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	498b      	ldr	r1, [pc, #556]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e14a      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b82      	ldr	r3, [pc, #520]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	497f      	ldr	r1, [pc, #508]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80dc 	beq.w	8002674 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d13c      	bne.n	800253e <HAL_RCC_ClockConfig+0xf6>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_ClockConfig+0xa6>
 80024e8:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e00f      	b.n	800250e <HAL_RCC_ClockConfig+0xc6>
 80024ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
 80024fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002512:	65ba      	str	r2, [r7, #88]	; 0x58
 8002514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800251c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d17b      	bne.n	8002632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0f3      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d13c      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x178>
 8002546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_RCC_ClockConfig+0x128>
 800256a:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e00f      	b.n	8002590 <HAL_RCC_ClockConfig+0x148>
 8002570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002574:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
 800257e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
 8002584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258c:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002594:	63ba      	str	r2, [r7, #56]	; 0x38
 8002596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002598:	fa92 f2a2 	rbit	r2, r2
 800259c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800259e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f042 0220 	orr.w	r2, r2, #32
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f002 021f 	and.w	r2, r2, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13a      	bne.n	8002632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b2      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
 80025c0:	2302      	movs	r3, #2
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x1a0>
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e00d      	b.n	8002604 <HAL_RCC_ClockConfig+0x1bc>
 80025e8:	2302      	movs	r3, #2
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	2302      	movs	r3, #2
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2202      	movs	r2, #2
 8002606:	61ba      	str	r2, [r7, #24]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	fa92 f2a2 	rbit	r2, r2
 800260e:	617a      	str	r2, [r7, #20]
  return result;
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e079      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	491a      	ldr	r1, [pc, #104]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7fe fb20 	bl	8000c88 <HAL_GetTick>
 8002648:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7fe fb1c 	bl	8000c88 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e061      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_ClockConfig+0x260>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d214      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4906      	ldr	r1, [pc, #24]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_ClockConfig+0x25c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e040      	b.n	8002726 <HAL_RCC_ClockConfig+0x2de>
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_ClockConfig+0x2e8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	491a      	ldr	r1, [pc, #104]	; (8002730 <HAL_RCC_ClockConfig+0x2e8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x2e8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4912      	ldr	r1, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x2e8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026ea:	f000 f829 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCC_ClockConfig+0x2e8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f8:	22f0      	movs	r2, #240	; 0xf0
 80026fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	60fa      	str	r2, [r7, #12]
  return result;
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	40d3      	lsrs	r3, r2
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x2ec>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	fa21 f303 	lsr.w	r3, r1, r3
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_RCC_ClockConfig+0x2f0>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_ClockConfig+0x2f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fa6e 	bl	8000c00 <HAL_InitTick>
  
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3778      	adds	r7, #120	; 0x78
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	08004ec4 	.word	0x08004ec4
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_RCC_GetSysClockFreq+0xc4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x30>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x36>
 800276e:	e03f      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002772:	623b      	str	r3, [r7, #32]
      break;
 8002774:	e03f      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800277c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002780:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	fa92 f2a2 	rbit	r2, r2
 8002788:	607a      	str	r2, [r7, #4]
  return result;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	40d3      	lsrs	r3, r2
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCC_GetSysClockFreq+0xc4>)
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	220f      	movs	r2, #15
 80027a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	60fa      	str	r2, [r7, #12]
  return result;
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e007      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	623b      	str	r3, [r7, #32]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f2:	623b      	str	r3, [r7, #32]
      break;
 80027f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f6:	6a3b      	ldr	r3, [r7, #32]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	372c      	adds	r7, #44	; 0x2c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200
 800280c:	08004edc 	.word	0x08004edc
 8002810:	08004eec 	.word	0x08004eec

08002814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_GetHCLKFreq+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000000 	.word	0x20000000

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002832:	f7ff ffef 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002836:	4601      	mov	r1, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002840:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002844:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	fa92 f2a2 	rbit	r2, r2
 800284c:	603a      	str	r2, [r7, #0]
  return result;
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	40d3      	lsrs	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_RCC_GetPCLK1Freq+0x40>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	08004ed4 	.word	0x08004ed4

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002876:	f7ff ffcd 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002884:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	603a      	str	r2, [r7, #0]
  return result;
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004ed4 	.word	0x08004ed4

080028b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b092      	sub	sp, #72	; 0x48
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80d4 	beq.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10e      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	61d3      	str	r3, [r2, #28]
 80028f0:	4b48      	ldr	r3, [pc, #288]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a41      	ldr	r2, [pc, #260]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe f9b5 	bl	8000c88 <HAL_GetTick>
 800291e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe f9b1 	bl	8000c88 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1d6      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8084 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800295c:	429a      	cmp	r2, r3
 800295e:	d07c      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d04b      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe f961 	bl	8000c88 <HAL_GetTick>
 80029c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe f95d 	bl	8000c88 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e180      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	2302      	movs	r3, #2
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	61fb      	str	r3, [r7, #28]
  return result;
 80029f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a0e:	4b01      	ldr	r3, [pc, #4]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	e00d      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	10908100 	.word	0x10908100
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	4b9a      	ldr	r3, [pc, #616]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2202      	movs	r2, #2
 8002a32:	613a      	str	r2, [r7, #16]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	fa92 f2a2 	rbit	r2, r2
 8002a3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	fab2 f282 	clz	r2, r2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f002 021f 	and.w	r2, r2, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0b7      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a5a:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	498c      	ldr	r1, [pc, #560]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a74:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a8c:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f023 0203 	bic.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	497f      	ldr	r1, [pc, #508]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4978      	ldr	r1, [pc, #480]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ac8:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	4970      	ldr	r1, [pc, #448]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f023 0210 	bic.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4969      	ldr	r1, [pc, #420]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	4961      	ldr	r1, [pc, #388]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f023 0220 	bic.w	r2, r3, #32
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	495a      	ldr	r1, [pc, #360]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	4952      	ldr	r1, [pc, #328]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	494b      	ldr	r1, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4943      	ldr	r1, [pc, #268]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	493c      	ldr	r1, [pc, #240]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	492d      	ldr	r1, [pc, #180]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	4925      	ldr	r1, [pc, #148]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	491e      	ldr	r1, [pc, #120]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	490f      	ldr	r1, [pc, #60]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c8a:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	4913      	ldr	r1, [pc, #76]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	490b      	ldr	r1, [pc, #44]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cda:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3748      	adds	r7, #72	; 0x48
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d001      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e04f      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d018      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x76>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d115      	bne.n	8002d92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d015      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0xb4>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d011      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d90:	e008      	b.n	8002da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e000      	b.n	8002da6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40013400 	.word	0x40013400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40015000 	.word	0x40015000
 8002dcc:	00010007 	.word	0x00010007

08002dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e049      	b.n	8002e76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fd38 	bl	800086c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fb9e 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start+0x24>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e03c      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d109      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x3e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e02f      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x58>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e022      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x72>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e015      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start+0x8c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <HAL_TIM_PWM_Start+0x9e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0a1      	b.n	800306a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0xb6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	e023      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_PWM_Start+0xc6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	e01b      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0xd6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f54:	e013      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_PWM_Start+0xe6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f64:	e00b      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_PWM_Start+0xf6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	e003      	b.n	8002f7e <HAL_TIM_PWM_Start+0xfe>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fe86 	bl	8003c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_TIM_PWM_Start+0x1f4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x148>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a37      	ldr	r2, [pc, #220]	; (8003078 <HAL_TIM_PWM_Start+0x1f8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x148>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <HAL_TIM_PWM_Start+0x1fc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x148>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a34      	ldr	r2, [pc, #208]	; (8003080 <HAL_TIM_PWM_Start+0x200>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x148>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_TIM_PWM_Start+0x204>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x148>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_TIM_PWM_Start+0x208>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x14c>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_TIM_PWM_Start+0x14e>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_TIM_PWM_Start+0x1f4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01d      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d018      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_TIM_PWM_Start+0x20c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_TIM_PWM_Start+0x210>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_TIM_PWM_Start+0x1f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <HAL_TIM_PWM_Start+0x1fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1a8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_TIM_PWM_Start+0x208>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d115      	bne.n	8003054 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_TIM_PWM_Start+0x214>)
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d015      	beq.n	8003066 <HAL_TIM_PWM_Start+0x1e6>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d011      	beq.n	8003066 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003052:	e008      	b.n	8003066 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e000      	b.n	8003068 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40014000 	.word	0x40014000
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800
 8003088:	40015000 	.word	0x40015000
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	00010007 	.word	0x00010007

08003098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0202 	mvn.w	r2, #2
 80030c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa1a 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa0c 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa1d 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0204 	mvn.w	r2, #4
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f9f0 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9e2 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f9f3 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0208 	mvn.w	r2, #8
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2204      	movs	r2, #4
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9c6 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9b8 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f9c9 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0210 	mvn.w	r2, #16
 80031c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2208      	movs	r2, #8
 80031c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f99c 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f98e 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f99f 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10e      	bne.n	800321c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0201 	mvn.w	r2, #1
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd f8bc 	bl	8000394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d107      	bne.n	8003248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fe6a 	bl	8003f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003256:	d10e      	bne.n	8003276 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d107      	bne.n	8003276 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800326e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fe5d 	bl	8003f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d10e      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f94d 	bl	800353c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d10e      	bne.n	80032ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0220 	mvn.w	r2, #32
 80032c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fe1d 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0ff      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b14      	cmp	r3, #20
 8003302:	f200 80f0 	bhi.w	80034e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003361 	.word	0x08003361
 8003310:	080034e7 	.word	0x080034e7
 8003314:	080034e7 	.word	0x080034e7
 8003318:	080034e7 	.word	0x080034e7
 800331c:	080033a1 	.word	0x080033a1
 8003320:	080034e7 	.word	0x080034e7
 8003324:	080034e7 	.word	0x080034e7
 8003328:	080034e7 	.word	0x080034e7
 800332c:	080033e3 	.word	0x080033e3
 8003330:	080034e7 	.word	0x080034e7
 8003334:	080034e7 	.word	0x080034e7
 8003338:	080034e7 	.word	0x080034e7
 800333c:	08003423 	.word	0x08003423
 8003340:	080034e7 	.word	0x080034e7
 8003344:	080034e7 	.word	0x080034e7
 8003348:	080034e7 	.word	0x080034e7
 800334c:	08003465 	.word	0x08003465
 8003350:	080034e7 	.word	0x080034e7
 8003354:	080034e7 	.word	0x080034e7
 8003358:	080034e7 	.word	0x080034e7
 800335c:	080034a5 	.word	0x080034a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f990 	bl	800368c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
      break;
 800339e:	e0a5      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fa0a 	bl	80037c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	021a      	lsls	r2, r3, #8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	619a      	str	r2, [r3, #24]
      break;
 80033e0:	e084      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fa7d 	bl	80038e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0208 	orr.w	r2, r2, #8
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0204 	bic.w	r2, r2, #4
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	61da      	str	r2, [r3, #28]
      break;
 8003420:	e064      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 faef 	bl	8003a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	021a      	lsls	r2, r3, #8
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	61da      	str	r2, [r3, #28]
      break;
 8003462:	e043      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fb3e 	bl	8003aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034a2:	e023      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb88 	bl	8003bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034e4:	e002      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a42      	ldr	r2, [pc, #264]	; (800366c <TIM_Base_SetConfig+0x11c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d00f      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <TIM_Base_SetConfig+0x120>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3e      	ldr	r2, [pc, #248]	; (8003674 <TIM_Base_SetConfig+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <TIM_Base_SetConfig+0x128>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3c      	ldr	r2, [pc, #240]	; (800367c <TIM_Base_SetConfig+0x12c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <TIM_Base_SetConfig+0x11c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d01b      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2e      	ldr	r2, [pc, #184]	; (8003670 <TIM_Base_SetConfig+0x120>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d017      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <TIM_Base_SetConfig+0x124>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <TIM_Base_SetConfig+0x128>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00f      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <TIM_Base_SetConfig+0x130>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <TIM_Base_SetConfig+0x134>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <TIM_Base_SetConfig+0x138>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0x12c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <TIM_Base_SetConfig+0x11c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <TIM_Base_SetConfig+0x100>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a13      	ldr	r2, [pc, #76]	; (8003678 <TIM_Base_SetConfig+0x128>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00f      	beq.n	8003650 <TIM_Base_SetConfig+0x100>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <TIM_Base_SetConfig+0x130>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00b      	beq.n	8003650 <TIM_Base_SetConfig+0x100>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <TIM_Base_SetConfig+0x134>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_Base_SetConfig+0x100>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <TIM_Base_SetConfig+0x138>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0x100>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <TIM_Base_SetConfig+0x12c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40013400 	.word	0x40013400
 800367c:	40015000 	.word	0x40015000
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800

0800368c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0302 	bic.w	r3, r3, #2
 80036d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <TIM_OC1_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <TIM_OC1_SetConfig+0x88>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <TIM_OC1_SetConfig+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00f      	beq.n	8003714 <TIM_OC1_SetConfig+0x88>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <TIM_OC1_SetConfig+0x124>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_OC1_SetConfig+0x88>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <TIM_OC1_SetConfig+0x128>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC1_SetConfig+0x88>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <TIM_OC1_SetConfig+0x12c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC1_SetConfig+0x88>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <TIM_OC1_SetConfig+0x130>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10c      	bne.n	800372e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0308 	bic.w	r3, r3, #8
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <TIM_OC1_SetConfig+0x11c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <TIM_OC1_SetConfig+0xd2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_OC1_SetConfig+0x120>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00f      	beq.n	800375e <TIM_OC1_SetConfig+0xd2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <TIM_OC1_SetConfig+0x124>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_OC1_SetConfig+0xd2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <TIM_OC1_SetConfig+0x128>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_OC1_SetConfig+0xd2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_OC1_SetConfig+0x12c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC1_SetConfig+0xd2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_OC1_SetConfig+0x130>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800
 80037bc:	40015000 	.word	0x40015000

080037c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0210 	bic.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0320 	bic.w	r3, r3, #32
 800380e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a2c      	ldr	r2, [pc, #176]	; (80038d0 <TIM_OC2_SetConfig+0x110>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d007      	beq.n	8003834 <TIM_OC2_SetConfig+0x74>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <TIM_OC2_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_OC2_SetConfig+0x74>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <TIM_OC2_SetConfig+0x118>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10d      	bne.n	8003850 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <TIM_OC2_SetConfig+0x110>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <TIM_OC2_SetConfig+0xc0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <TIM_OC2_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00f      	beq.n	8003880 <TIM_OC2_SetConfig+0xc0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <TIM_OC2_SetConfig+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_OC2_SetConfig+0xc0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <TIM_OC2_SetConfig+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <TIM_OC2_SetConfig+0xc0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <TIM_OC2_SetConfig+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0xc0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <TIM_OC2_SetConfig+0x118>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d113      	bne.n	80038a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003886:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40013400 	.word	0x40013400
 80038d8:	40015000 	.word	0x40015000
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_OC3_SetConfig+0x10c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_OC3_SetConfig+0x72>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <TIM_OC3_SetConfig+0x110>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_OC3_SetConfig+0x72>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a29      	ldr	r2, [pc, #164]	; (80039fc <TIM_OC3_SetConfig+0x114>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d10d      	bne.n	8003976 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003974:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <TIM_OC3_SetConfig+0x10c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <TIM_OC3_SetConfig+0xbe>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <TIM_OC3_SetConfig+0x110>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00f      	beq.n	80039a6 <TIM_OC3_SetConfig+0xbe>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <TIM_OC3_SetConfig+0x118>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <TIM_OC3_SetConfig+0xbe>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <TIM_OC3_SetConfig+0x11c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <TIM_OC3_SetConfig+0xbe>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <TIM_OC3_SetConfig+0x120>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_OC3_SetConfig+0xbe>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <TIM_OC3_SetConfig+0x114>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d113      	bne.n	80039ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40013400 	.word	0x40013400
 80039fc:	40015000 	.word	0x40015000
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	031b      	lsls	r3, r3, #12
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <TIM_OC4_SetConfig+0xc8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <TIM_OC4_SetConfig+0x8c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <TIM_OC4_SetConfig+0xcc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00f      	beq.n	8003a98 <TIM_OC4_SetConfig+0x8c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <TIM_OC4_SetConfig+0xd0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_OC4_SetConfig+0x8c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <TIM_OC4_SetConfig+0xd4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_OC4_SetConfig+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <TIM_OC4_SetConfig+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC4_SetConfig+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <TIM_OC4_SetConfig+0xdc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d109      	bne.n	8003aac <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	40015000 	.word	0x40015000

08003aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <TIM_OC5_SetConfig+0xbc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <TIM_OC5_SetConfig+0x82>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <TIM_OC5_SetConfig+0xc0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00f      	beq.n	8003b6e <TIM_OC5_SetConfig+0x82>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <TIM_OC5_SetConfig+0xc4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <TIM_OC5_SetConfig+0x82>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <TIM_OC5_SetConfig+0xc8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <TIM_OC5_SetConfig+0x82>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <TIM_OC5_SetConfig+0xcc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_OC5_SetConfig+0x82>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <TIM_OC5_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d109      	bne.n	8003b82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800
 8003bbc:	40015000 	.word	0x40015000

08003bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	051b      	lsls	r3, r3, #20
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <TIM_OC6_SetConfig+0xc0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <TIM_OC6_SetConfig+0x84>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a19      	ldr	r2, [pc, #100]	; (8003c84 <TIM_OC6_SetConfig+0xc4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00f      	beq.n	8003c44 <TIM_OC6_SetConfig+0x84>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <TIM_OC6_SetConfig+0xc8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_OC6_SetConfig+0x84>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <TIM_OC6_SetConfig+0xcc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_OC6_SetConfig+0x84>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <TIM_OC6_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC6_SetConfig+0x84>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC6_SetConfig+0xd4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	029b      	lsls	r3, r3, #10
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40013400 	.word	0x40013400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800
 8003c94:	40015000 	.word	0x40015000

08003c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2201      	movs	r2, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e06d      	b.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a30      	ldr	r2, [pc, #192]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2f      	ldr	r2, [pc, #188]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d01d      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d018      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a11      	ldr	r2, [pc, #68]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10c      	bne.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40015000 	.word	0x40015000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40014000 	.word	0x40014000

08003dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e06a      	b.n	8003eee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d115      	bne.n	8003edc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	051b      	lsls	r3, r3, #20
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40015000 	.word	0x40015000

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e040      	b.n	8003fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc fd86 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fb32 	bl	80045ec <UART_SetConfig>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e022      	b.n	8003fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fcfa 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fd81 	bl	8004ad8 <UART_CheckIdleState>
 8003fd6:	4603      	mov	r3, r0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0ba      	sub	sp, #232	; 0xe8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800400a:	f640 030f 	movw	r3, #2063	; 0x80f
 800400e:	4013      	ands	r3, r2
 8004010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800401c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 82ab 	beq.w	8004594 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
      }
      return;
 8004046:	e2a5      	b.n	8004594 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8117 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800405e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_UART_IRQHandler+0x298>)
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 810a 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d011      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
 80040d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8211 	beq.w	8004598 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04f      	beq.n	8004262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fd97 	bl	8004cf6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d141      	bne.n	800425a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800420e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800421a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <HAL_UART_IRQHandler+0x29c>)
 8004230:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc fea0 	bl	8000f7c <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00f      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9b4 	bl	80045c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e00b      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9b0 	bl	80045c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e007      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9ac 	bl	80045c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004270:	e192      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	bf00      	nop
    return;
 8004274:	e190      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
 8004276:	bf00      	nop
 8004278:	04000120 	.word	0x04000120
 800427c:	08004dbf 	.word	0x08004dbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 814b 	bne.w	8004520 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8144 	beq.w	8004520 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 813d 	beq.w	8004520 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2210      	movs	r2, #16
 80042ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	f040 80b5 	bne.w	8004428 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8164 	beq.w	800459c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042de:	429a      	cmp	r2, r3
 80042e0:	f080 815c 	bcs.w	800459c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	f000 8086 	beq.w	8004406 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800430e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004316:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004324:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004328:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004330:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1da      	bne.n	80042fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004368:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800436c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004370:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800437a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e3      	bne.n	8004380 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e4      	bne.n	80043c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc fd82 	bl	8000f0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004418:	b29b      	uxth	r3, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8d7 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004426:	e0b9      	b.n	800459c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ab 	beq.w	80045a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800444a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a6 	beq.w	80045a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004476:	647b      	str	r3, [r7, #68]	; 0x44
 8004478:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800447c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e4      	bne.n	8004454 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3308      	adds	r3, #8
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	623b      	str	r3, [r7, #32]
   return(result);
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044ae:	633a      	str	r2, [r7, #48]	; 0x30
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e3      	bne.n	800448a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e4      	bne.n	80044d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f85b 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800451e:	e03f      	b.n	80045a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <HAL_UART_IRQHandler+0x56a>
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fc7b 	bl	8004e3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004548:	e02d      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01c      	beq.n	80045a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
    }
    return;
 8004572:	e017      	b.n	80045a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
 8004580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fc2c 	bl	8004dea <UART_EndTransmit_IT>
    return;
 8004592:	e008      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004594:	bf00      	nop
 8004596:	e006      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004598:	bf00      	nop
 800459a:	e004      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800459c:	bf00      	nop
 800459e:	e002      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80045a4:	bf00      	nop
  }

}
 80045a6:	37e8      	adds	r7, #232	; 0xe8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b92      	ldr	r3, [pc, #584]	; (8004860 <UART_SetConfig+0x274>)
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	6979      	ldr	r1, [r7, #20]
 8004620:	430b      	orrs	r3, r1
 8004622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a80      	ldr	r2, [pc, #512]	; (8004864 <UART_SetConfig+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d120      	bne.n	80046aa <UART_SetConfig+0xbe>
 8004668:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <UART_SetConfig+0x27c>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b03      	cmp	r3, #3
 8004672:	d817      	bhi.n	80046a4 <UART_SetConfig+0xb8>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0x90>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	0800468d 	.word	0x0800468d
 8004680:	08004699 	.word	0x08004699
 8004684:	0800469f 	.word	0x0800469f
 8004688:	08004693 	.word	0x08004693
 800468c:	2301      	movs	r3, #1
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e0b5      	b.n	80047fe <UART_SetConfig+0x212>
 8004692:	2302      	movs	r3, #2
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0b2      	b.n	80047fe <UART_SetConfig+0x212>
 8004698:	2304      	movs	r3, #4
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0af      	b.n	80047fe <UART_SetConfig+0x212>
 800469e:	2308      	movs	r3, #8
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0ac      	b.n	80047fe <UART_SetConfig+0x212>
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0a9      	b.n	80047fe <UART_SetConfig+0x212>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6f      	ldr	r2, [pc, #444]	; (800486c <UART_SetConfig+0x280>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d124      	bne.n	80046fe <UART_SetConfig+0x112>
 80046b4:	4b6c      	ldr	r3, [pc, #432]	; (8004868 <UART_SetConfig+0x27c>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046c0:	d011      	beq.n	80046e6 <UART_SetConfig+0xfa>
 80046c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046c6:	d817      	bhi.n	80046f8 <UART_SetConfig+0x10c>
 80046c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046cc:	d011      	beq.n	80046f2 <UART_SetConfig+0x106>
 80046ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d2:	d811      	bhi.n	80046f8 <UART_SetConfig+0x10c>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <UART_SetConfig+0xf4>
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d006      	beq.n	80046ec <UART_SetConfig+0x100>
 80046de:	e00b      	b.n	80046f8 <UART_SetConfig+0x10c>
 80046e0:	2300      	movs	r3, #0
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e08b      	b.n	80047fe <UART_SetConfig+0x212>
 80046e6:	2302      	movs	r3, #2
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e088      	b.n	80047fe <UART_SetConfig+0x212>
 80046ec:	2304      	movs	r3, #4
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e085      	b.n	80047fe <UART_SetConfig+0x212>
 80046f2:	2308      	movs	r3, #8
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e082      	b.n	80047fe <UART_SetConfig+0x212>
 80046f8:	2310      	movs	r3, #16
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e07f      	b.n	80047fe <UART_SetConfig+0x212>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5b      	ldr	r2, [pc, #364]	; (8004870 <UART_SetConfig+0x284>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d124      	bne.n	8004752 <UART_SetConfig+0x166>
 8004708:	4b57      	ldr	r3, [pc, #348]	; (8004868 <UART_SetConfig+0x27c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004710:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004714:	d011      	beq.n	800473a <UART_SetConfig+0x14e>
 8004716:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800471a:	d817      	bhi.n	800474c <UART_SetConfig+0x160>
 800471c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004720:	d011      	beq.n	8004746 <UART_SetConfig+0x15a>
 8004722:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004726:	d811      	bhi.n	800474c <UART_SetConfig+0x160>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <UART_SetConfig+0x148>
 800472c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004730:	d006      	beq.n	8004740 <UART_SetConfig+0x154>
 8004732:	e00b      	b.n	800474c <UART_SetConfig+0x160>
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e061      	b.n	80047fe <UART_SetConfig+0x212>
 800473a:	2302      	movs	r3, #2
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e05e      	b.n	80047fe <UART_SetConfig+0x212>
 8004740:	2304      	movs	r3, #4
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e05b      	b.n	80047fe <UART_SetConfig+0x212>
 8004746:	2308      	movs	r3, #8
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e058      	b.n	80047fe <UART_SetConfig+0x212>
 800474c:	2310      	movs	r3, #16
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e055      	b.n	80047fe <UART_SetConfig+0x212>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a47      	ldr	r2, [pc, #284]	; (8004874 <UART_SetConfig+0x288>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d124      	bne.n	80047a6 <UART_SetConfig+0x1ba>
 800475c:	4b42      	ldr	r3, [pc, #264]	; (8004868 <UART_SetConfig+0x27c>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004768:	d011      	beq.n	800478e <UART_SetConfig+0x1a2>
 800476a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476e:	d817      	bhi.n	80047a0 <UART_SetConfig+0x1b4>
 8004770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004774:	d011      	beq.n	800479a <UART_SetConfig+0x1ae>
 8004776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800477a:	d811      	bhi.n	80047a0 <UART_SetConfig+0x1b4>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <UART_SetConfig+0x19c>
 8004780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004784:	d006      	beq.n	8004794 <UART_SetConfig+0x1a8>
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x1b4>
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e037      	b.n	80047fe <UART_SetConfig+0x212>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e034      	b.n	80047fe <UART_SetConfig+0x212>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e031      	b.n	80047fe <UART_SetConfig+0x212>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e02e      	b.n	80047fe <UART_SetConfig+0x212>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e02b      	b.n	80047fe <UART_SetConfig+0x212>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a33      	ldr	r2, [pc, #204]	; (8004878 <UART_SetConfig+0x28c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d124      	bne.n	80047fa <UART_SetConfig+0x20e>
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <UART_SetConfig+0x27c>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047bc:	d011      	beq.n	80047e2 <UART_SetConfig+0x1f6>
 80047be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047c2:	d817      	bhi.n	80047f4 <UART_SetConfig+0x208>
 80047c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c8:	d011      	beq.n	80047ee <UART_SetConfig+0x202>
 80047ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ce:	d811      	bhi.n	80047f4 <UART_SetConfig+0x208>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <UART_SetConfig+0x1f0>
 80047d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d8:	d006      	beq.n	80047e8 <UART_SetConfig+0x1fc>
 80047da:	e00b      	b.n	80047f4 <UART_SetConfig+0x208>
 80047dc:	2300      	movs	r3, #0
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e00d      	b.n	80047fe <UART_SetConfig+0x212>
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e00a      	b.n	80047fe <UART_SetConfig+0x212>
 80047e8:	2304      	movs	r3, #4
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e007      	b.n	80047fe <UART_SetConfig+0x212>
 80047ee:	2308      	movs	r3, #8
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e004      	b.n	80047fe <UART_SetConfig+0x212>
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e001      	b.n	80047fe <UART_SetConfig+0x212>
 80047fa:	2310      	movs	r3, #16
 80047fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004806:	d16b      	bne.n	80048e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004808:	7ffb      	ldrb	r3, [r7, #31]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d838      	bhi.n	8004880 <UART_SetConfig+0x294>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x228>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004839 	.word	0x08004839
 8004818:	08004841 	.word	0x08004841
 800481c:	08004849 	.word	0x08004849
 8004820:	08004881 	.word	0x08004881
 8004824:	0800484f 	.word	0x0800484f
 8004828:	08004881 	.word	0x08004881
 800482c:	08004881 	.word	0x08004881
 8004830:	08004881 	.word	0x08004881
 8004834:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fd fff8 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 800483c:	61b8      	str	r0, [r7, #24]
        break;
 800483e:	e024      	b.n	800488a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe f816 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004844:	61b8      	str	r0, [r7, #24]
        break;
 8004846:	e020      	b.n	800488a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <UART_SetConfig+0x290>)
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e01d      	b.n	800488a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fd ff77 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8004852:	61b8      	str	r0, [r7, #24]
        break;
 8004854:	e019      	b.n	800488a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e015      	b.n	800488a <UART_SetConfig+0x29e>
 800485e:	bf00      	nop
 8004860:	efff69f3 	.word	0xefff69f3
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	40004400 	.word	0x40004400
 8004870:	40004800 	.word	0x40004800
 8004874:	40004c00 	.word	0x40004c00
 8004878:	40005000 	.word	0x40005000
 800487c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77bb      	strb	r3, [r7, #30]
        break;
 8004888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d073      	beq.n	8004978 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	005a      	lsls	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	441a      	add	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d916      	bls.n	80048da <UART_SetConfig+0x2ee>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d212      	bcs.n	80048da <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	89fa      	ldrh	r2, [r7, #14]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	e04e      	b.n	8004978 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77bb      	strb	r3, [r7, #30]
 80048de:	e04b      	b.n	8004978 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x34a>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x300>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fd ff8c 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fd ffaa 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 800491c:	61b8      	str	r0, [r7, #24]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <UART_SetConfig+0x3a4>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fd ff0b 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77bb      	strb	r3, [r7, #30]
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085a      	lsrs	r2, r3, #1
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d909      	bls.n	8004974 <UART_SetConfig+0x388>
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004966:	d205      	bcs.n	8004974 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e001      	b.n	8004978 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004984:	7fbb      	ldrb	r3, [r7, #30]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	007a1200 	.word	0x007a1200

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	; 0x60
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc f8ce 	bl	8000c88 <HAL_GetTick>
 8004aec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12e      	bne.n	8004b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f88c 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
 8004b36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e062      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d149      	bne.n	8004bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f856 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03c      	beq.n	8004bfc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd4:	61fa      	str	r2, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	617b      	str	r3, [r7, #20]
   return(result);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e011      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3758      	adds	r7, #88	; 0x58
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	e049      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d045      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fc f821 	bl	8000c88 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e048      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d031      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d110      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f838 	bl	8004cf6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e029      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca8:	d111      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f81e 	bl	8004cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d0a6      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b095      	sub	sp, #84	; 0x54
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d118      	bne.n	8004d9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0310 	bic.w	r3, r3, #16
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004db2:	bf00      	nop
 8004db4:	3754      	adds	r7, #84	; 0x54
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff fbef 	bl	80045c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6979      	ldr	r1, [r7, #20]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fbbb 	bl	80045ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <memset>:
 8004e52:	4402      	add	r2, r0
 8004e54:	4603      	mov	r3, r0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d100      	bne.n	8004e5c <memset+0xa>
 8004e5a:	4770      	bx	lr
 8004e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e60:	e7f9      	b.n	8004e56 <memset+0x4>
	...

08004e64 <__libc_init_array>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4d0d      	ldr	r5, [pc, #52]	; (8004e9c <__libc_init_array+0x38>)
 8004e68:	4c0d      	ldr	r4, [pc, #52]	; (8004ea0 <__libc_init_array+0x3c>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	42a6      	cmp	r6, r4
 8004e72:	d109      	bne.n	8004e88 <__libc_init_array+0x24>
 8004e74:	4d0b      	ldr	r5, [pc, #44]	; (8004ea4 <__libc_init_array+0x40>)
 8004e76:	4c0c      	ldr	r4, [pc, #48]	; (8004ea8 <__libc_init_array+0x44>)
 8004e78:	f000 f818 	bl	8004eac <_init>
 8004e7c:	1b64      	subs	r4, r4, r5
 8004e7e:	10a4      	asrs	r4, r4, #2
 8004e80:	2600      	movs	r6, #0
 8004e82:	42a6      	cmp	r6, r4
 8004e84:	d105      	bne.n	8004e92 <__libc_init_array+0x2e>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8c:	4798      	blx	r3
 8004e8e:	3601      	adds	r6, #1
 8004e90:	e7ee      	b.n	8004e70 <__libc_init_array+0xc>
 8004e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e96:	4798      	blx	r3
 8004e98:	3601      	adds	r6, #1
 8004e9a:	e7f2      	b.n	8004e82 <__libc_init_array+0x1e>
 8004e9c:	08004efc 	.word	0x08004efc
 8004ea0:	08004efc 	.word	0x08004efc
 8004ea4:	08004efc 	.word	0x08004efc
 8004ea8:	08004f00 	.word	0x08004f00

08004eac <_init>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr

08004eb8 <_fini>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr
