
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a04  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd0  08005bd0  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd0  08005bd0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd0  08005bd0  00006bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005bd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000002c0  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b31  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002631  00000000  00000000  00017bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  0001a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aba  00000000  00000000  0001afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021476  00000000  00000000  0001ba7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013208  00000000  00000000  0003cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca45e  00000000  00000000  000500f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a556  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003838  00000000  00000000  0011a59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000006c 	.word	0x2000006c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005b80 	.word	0x08005b80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000070 	.word	0x20000070
 80001d0:	08005b80 	.word	0x08005b80

080001d4 <moveMotor>:
#include "motors.h"

void moveMotor(struct Motors* motor){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	if (motor->STEPS > 0){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	dd2d      	ble.n	8000242 <moveMotor+0x6e>
		if(!motor->moving){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	7d1b      	ldrb	r3, [r3, #20]
 80001ea:	f083 0301 	eor.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00f      	beq.n	8000214 <moveMotor+0x40>

			HAL_GPIO_WritePin(motor->EN_PORT, motor->EN_PIN, GPIO_PIN_SET); // Set EN high to enable the driver
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	68d8      	ldr	r0, [r3, #12]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	2201      	movs	r2, #1
 8000202:	4619      	mov	r1, r3
 8000204:	f001 fc30 	bl	8001a68 <HAL_GPIO_WritePin>
			motor->moving = true;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2201      	movs	r2, #1
 800020c:	751a      	strb	r2, [r3, #20]
			HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f001 f8f4 	bl	80013fc <HAL_Delay>
		}
	  motor->TIMER-> CCR1 = clamp(motor->SPEED,1,200);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800021a:	22c8      	movs	r2, #200	@ 0xc8
 800021c:	2101      	movs	r1, #1
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f813 	bl	800024a <clamp>
 8000224:	4602      	mov	r2, r0
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	635a      	str	r2, [r3, #52]	@ 0x34

	  // Wait for the specified duration
	  HAL_Delay(8000);
 800022c:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000230:	f001 f8e4 	bl	80013fc <HAL_Delay>

	  // Stop the motor
	  motor->TIMER-> CCR1 = 0;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	2200      	movs	r2, #0
 800023a:	635a      	str	r2, [r3, #52]	@ 0x34
	  //HAL_Delay(MOVE_DURATION);


      //motor->STEPS -= (motor->STEPS > 0) ? 1 : -1;

	  motor->STEPS = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	809a      	strh	r2, [r3, #4]
      /*if(motor->STEPS == 0){
          HAL_GPIO_WritePin(motor->EN_PORT, motor->EN_PIN, GPIO_PIN_RESET);
          motor->moving = false;
      }*/
	}
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <clamp>:

// Function to clamp values for the duty cycle/ speed
int clamp(int value, int min, int max) {
 800024a:	b480      	push	{r7}
 800024c:	b085      	sub	sp, #20
 800024e:	af00      	add	r7, sp, #0
 8000250:	60f8      	str	r0, [r7, #12]
 8000252:	60b9      	str	r1, [r7, #8]
 8000254:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	429a      	cmp	r2, r3
 800025c:	da01      	bge.n	8000262 <clamp+0x18>
        return min;
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	e006      	b.n	8000270 <clamp+0x26>
    } else if (value > max) {
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	429a      	cmp	r2, r3
 8000268:	dd01      	ble.n	800026e <clamp+0x24>
        return max;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	e000      	b.n	8000270 <clamp+0x26>
    } else {
        return value;
 800026e:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000270:	4618      	mov	r0, r3
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b08a      	sub	sp, #40	@ 0x28
 8000280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b44      	ldr	r3, [pc, #272]	@ (80003a4 <MX_GPIO_Init+0x128>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a43      	ldr	r2, [pc, #268]	@ (80003a4 <MX_GPIO_Init+0x128>)
 8000298:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800029c:	6153      	str	r3, [r2, #20]
 800029e:	4b41      	ldr	r3, [pc, #260]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002a6:	613b      	str	r3, [r7, #16]
 80002a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b3e      	ldr	r3, [pc, #248]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a3d      	ldr	r2, [pc, #244]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b3b      	ldr	r3, [pc, #236]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b38      	ldr	r3, [pc, #224]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a37      	ldr	r2, [pc, #220]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b35      	ldr	r3, [pc, #212]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	4b32      	ldr	r3, [pc, #200]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a31      	ldr	r2, [pc, #196]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b2f      	ldr	r3, [pc, #188]	@ (80003a4 <MX_GPIO_Init+0x128>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2106      	movs	r1, #6
 80002f6:	482c      	ldr	r0, [pc, #176]	@ (80003a8 <MX_GPIO_Init+0x12c>)
 80002f8:	f001 fbb6 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 80002fc:	2200      	movs	r2, #0
 80002fe:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 8000302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000306:	f001 fbaf 	bl	8001a68 <HAL_GPIO_WritePin>
                          |MOTOR4_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f24d 0140 	movw	r1, #53312	@ 0xd040
 8000310:	4826      	ldr	r0, [pc, #152]	@ (80003ac <MX_GPIO_Init+0x130>)
 8000312:	f001 fba9 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	481e      	ldr	r0, [pc, #120]	@ (80003a8 <MX_GPIO_Init+0x12c>)
 800032e:	f001 fa11 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 8000332:	2306      	movs	r3, #6
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	4817      	ldr	r0, [pc, #92]	@ (80003a8 <MX_GPIO_Init+0x12c>)
 800034a:	f001 fa03 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 800034e:	f241 03b2 	movw	r3, #4274	@ 0x10b2
 8000352:	617b      	str	r3, [r7, #20]
                          |MOTOR4_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4619      	mov	r1, r3
 8000366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036a:	f001 f9f3 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin;
 800036e:	f24d 0340 	movw	r3, #53312	@ 0xd040
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4809      	ldr	r0, [pc, #36]	@ (80003ac <MX_GPIO_Init+0x130>)
 8000388:	f001 f9e4 	bl	8001754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2100      	movs	r1, #0
 8000390:	2028      	movs	r0, #40	@ 0x28
 8000392:	f001 f932 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000396:	2028      	movs	r0, #40	@ 0x28
 8000398:	f001 f94b 	bl	8001632 <HAL_NVIC_EnableIRQ>

}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	@ 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000800 	.word	0x48000800
 80003ac:	48000400 	.word	0x48000400

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 ffbc 	bl	8001330 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f8f4 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f7ff ff5e 	bl	800027c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003c0:	f000 fed8 	bl	8001174 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003c4:	f000 fea6 	bl	8001114 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80003c8:	f000 fbf2 	bl	8000bb0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80003cc:	f000 fb06 	bl	80009dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d0:	f000 fb94 	bl	8000afc <MX_TIM2_Init>
  MX_TIM4_Init();
 80003d4:	f000 fc46 	bl	8000c64 <MX_TIM4_Init>
  MX_TIM8_Init();
 80003d8:	f000 fc9e 	bl	8000d18 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e2:	4864      	ldr	r0, [pc, #400]	@ (8000574 <main+0x1c4>)
 80003e4:	f001 fb40 	bl	8001a68 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80003e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80003ec:	f000 f952 	bl	8000694 <HAL_GPIO_EXTI_Callback>

  HAL_TIM_Base_Start_IT(&htim3);
 80003f0:	4861      	ldr	r0, [pc, #388]	@ (8000578 <main+0x1c8>)
 80003f2:	f003 f82b 	bl	800344c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 80003f6:	2100      	movs	r1, #0
 80003f8:	4860      	ldr	r0, [pc, #384]	@ (800057c <main+0x1cc>)
 80003fa:	f003 f8ef 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start timer
 80003fe:	2100      	movs	r1, #0
 8000400:	485f      	ldr	r0, [pc, #380]	@ (8000580 <main+0x1d0>)
 8000402:	f003 f8eb 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Start timer
 8000406:	2100      	movs	r1, #0
 8000408:	485b      	ldr	r0, [pc, #364]	@ (8000578 <main+0x1c8>)
 800040a:	f003 f8e7 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start timer
 800040e:	2100      	movs	r1, #0
 8000410:	485c      	ldr	r0, [pc, #368]	@ (8000584 <main+0x1d4>)
 8000412:	f003 f8e3 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //Start timer
 8000416:	2100      	movs	r1, #0
 8000418:	485b      	ldr	r0, [pc, #364]	@ (8000588 <main+0x1d8>)
 800041a:	f003 f8df 	bl	80035dc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 800041e:	2214      	movs	r2, #20
 8000420:	495a      	ldr	r1, [pc, #360]	@ (800058c <main+0x1dc>)
 8000422:	485b      	ldr	r0, [pc, #364]	@ (8000590 <main+0x1e0>)
 8000424:	f004 f994 	bl	8004750 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, MAX_COMMAND_LENGTH);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2120      	movs	r1, #32
 800042c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000430:	f001 fb1a 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor1.DIR_PORT, motor1.DIR_PIN, GPIO_PIN_SET);
 8000434:	4b57      	ldr	r3, [pc, #348]	@ (8000594 <main+0x1e4>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	4a56      	ldr	r2, [pc, #344]	@ (8000594 <main+0x1e4>)
 800043a:	f992 2000 	ldrsb.w	r2, [r2]
 800043e:	b291      	uxth	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fb10 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor2.DIR_PORT, motor2.DIR_PIN, GPIO_PIN_RESET);
 8000448:	4b53      	ldr	r3, [pc, #332]	@ (8000598 <main+0x1e8>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	4a52      	ldr	r2, [pc, #328]	@ (8000598 <main+0x1e8>)
 800044e:	f992 2000 	ldrsb.w	r2, [r2]
 8000452:	b291      	uxth	r1, r2
 8000454:	2200      	movs	r2, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fb06 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor3.DIR_PORT, motor3.DIR_PIN, GPIO_PIN_RESET);
 800045c:	4b4f      	ldr	r3, [pc, #316]	@ (800059c <main+0x1ec>)
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	4a4e      	ldr	r2, [pc, #312]	@ (800059c <main+0x1ec>)
 8000462:	f992 2000 	ldrsb.w	r2, [r2]
 8000466:	b291      	uxth	r1, r2
 8000468:	2200      	movs	r2, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fafc 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor4.DIR_PORT, motor4.DIR_PIN, GPIO_PIN_SET);
 8000470:	4b4b      	ldr	r3, [pc, #300]	@ (80005a0 <main+0x1f0>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	4a4a      	ldr	r2, [pc, #296]	@ (80005a0 <main+0x1f0>)
 8000476:	f992 2000 	ldrsb.w	r2, [r2]
 800047a:	b291      	uxth	r1, r2
 800047c:	2201      	movs	r2, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f001 faf2 	bl	8001a68 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048c:	f001 faec 	bl	8001a68 <HAL_GPIO_WritePin>
	motor1.STEPS = 2500;
 8000490:	4b40      	ldr	r3, [pc, #256]	@ (8000594 <main+0x1e4>)
 8000492:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000496:	809a      	strh	r2, [r3, #4]
	motor1.SPEED = 5;
 8000498:	4b3e      	ldr	r3, [pc, #248]	@ (8000594 <main+0x1e4>)
 800049a:	2205      	movs	r2, #5
 800049c:	70da      	strb	r2, [r3, #3]

	motor2.STEPS = 1500;
 800049e:	4b3e      	ldr	r3, [pc, #248]	@ (8000598 <main+0x1e8>)
 80004a0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80004a4:	809a      	strh	r2, [r3, #4]
	motor2.SPEED = 5;
 80004a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000598 <main+0x1e8>)
 80004a8:	2205      	movs	r2, #5
 80004aa:	70da      	strb	r2, [r3, #3]

	motor3.STEPS = 1500;
 80004ac:	4b3b      	ldr	r3, [pc, #236]	@ (800059c <main+0x1ec>)
 80004ae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80004b2:	809a      	strh	r2, [r3, #4]
	motor3.SPEED = 5;
 80004b4:	4b39      	ldr	r3, [pc, #228]	@ (800059c <main+0x1ec>)
 80004b6:	2205      	movs	r2, #5
 80004b8:	70da      	strb	r2, [r3, #3]

	motor4.STEPS = 2500;
 80004ba:	4b39      	ldr	r3, [pc, #228]	@ (80005a0 <main+0x1f0>)
 80004bc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80004c0:	809a      	strh	r2, [r3, #4]
	motor4.SPEED = 5;
 80004c2:	4b37      	ldr	r3, [pc, #220]	@ (80005a0 <main+0x1f0>)
 80004c4:	2205      	movs	r2, #5
 80004c6:	70da      	strb	r2, [r3, #3]

	//moveMotor(&motor1);
	//moveMotor(&motor2);
	//moveMotor(&motor3);
	moveMotor(&motor4);
 80004c8:	4835      	ldr	r0, [pc, #212]	@ (80005a0 <main+0x1f0>)
 80004ca:	f7ff fe83 	bl	80001d4 <moveMotor>


	HAL_Delay(1000);
 80004ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004d2:	f000 ff93 	bl	80013fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f001 fac3 	bl	8001a68 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(motor1.DIR_PORT, motor1.DIR_PIN, GPIO_PIN_RESET);
 80004e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000594 <main+0x1e4>)
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000594 <main+0x1e4>)
 80004e8:	f992 2000 	ldrsb.w	r2, [r2]
 80004ec:	b291      	uxth	r1, r2
 80004ee:	2200      	movs	r2, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fab9 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor2.DIR_PORT, motor2.DIR_PIN, GPIO_PIN_SET);
 80004f6:	4b28      	ldr	r3, [pc, #160]	@ (8000598 <main+0x1e8>)
 80004f8:	691b      	ldr	r3, [r3, #16]
 80004fa:	4a27      	ldr	r2, [pc, #156]	@ (8000598 <main+0x1e8>)
 80004fc:	f992 2000 	ldrsb.w	r2, [r2]
 8000500:	b291      	uxth	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	4618      	mov	r0, r3
 8000506:	f001 faaf 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor3.DIR_PORT, motor3.DIR_PIN, GPIO_PIN_SET);
 800050a:	4b24      	ldr	r3, [pc, #144]	@ (800059c <main+0x1ec>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	4a23      	ldr	r2, [pc, #140]	@ (800059c <main+0x1ec>)
 8000510:	f992 2000 	ldrsb.w	r2, [r2]
 8000514:	b291      	uxth	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f001 faa5 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor4.DIR_PORT, motor4.DIR_PIN, GPIO_PIN_SET);
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <main+0x1f0>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	4a1f      	ldr	r2, [pc, #124]	@ (80005a0 <main+0x1f0>)
 8000524:	f992 2000 	ldrsb.w	r2, [r2]
 8000528:	b291      	uxth	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fa9b 	bl	8001a68 <HAL_GPIO_WritePin>

	motor1.STEPS = 2500;
 8000532:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <main+0x1e4>)
 8000534:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000538:	809a      	strh	r2, [r3, #4]
	motor1.SPEED = 10;
 800053a:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <main+0x1e4>)
 800053c:	220a      	movs	r2, #10
 800053e:	70da      	strb	r2, [r3, #3]

	motor2.STEPS = 1500;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <main+0x1e8>)
 8000542:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000546:	809a      	strh	r2, [r3, #4]
	motor2.SPEED = 10;
 8000548:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <main+0x1e8>)
 800054a:	220a      	movs	r2, #10
 800054c:	70da      	strb	r2, [r3, #3]

	motor3.STEPS = 1500;
 800054e:	4b13      	ldr	r3, [pc, #76]	@ (800059c <main+0x1ec>)
 8000550:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000554:	809a      	strh	r2, [r3, #4]
	motor3.SPEED = 10;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <main+0x1ec>)
 8000558:	220a      	movs	r2, #10
 800055a:	70da      	strb	r2, [r3, #3]

	motor4.STEPS = 1500;
 800055c:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <main+0x1f0>)
 800055e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000562:	809a      	strh	r2, [r3, #4]
	motor4.SPEED = 10;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0x1f0>)
 8000566:	220a      	movs	r2, #10
 8000568:	70da      	strb	r2, [r3, #3]


	moveMotor(&motor4);
 800056a:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <main+0x1f0>)
 800056c:	f7ff fe32 	bl	80001d4 <moveMotor>
	//moveMotor(&motor1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <main+0x1c0>
 8000574:	48000800 	.word	0x48000800
 8000578:	20000134 	.word	0x20000134
 800057c:	2000009c 	.word	0x2000009c
 8000580:	200000e8 	.word	0x200000e8
 8000584:	20000180 	.word	0x20000180
 8000588:	200001cc 	.word	0x200001cc
 800058c:	20000088 	.word	0x20000088
 8000590:	200002a0 	.word	0x200002a0
 8000594:	20000000 	.word	0x20000000
 8000598:	20000018 	.word	0x20000018
 800059c:	20000030 	.word	0x20000030
 80005a0:	20000048 	.word	0x20000048

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0a6      	sub	sp, #152	@ 0x98
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005ae:	2228      	movs	r2, #40	@ 0x28
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fab8 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2258      	movs	r2, #88	@ 0x58
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 faaa 	bl	8005b28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fa7a 	bl	8001afc <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800060e:	f000 f917 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000622:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fab8 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063a:	f000 f901 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <SystemClock_Config+0xd0>)
 8000640:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800064a:	2300      	movs	r3, #0
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800064e:	2300      	movs	r3, #0
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000652:	2300      	movs	r3, #0
 8000654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000656:	2300      	movs	r3, #0
 8000658:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fcd7 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000668:	f000 f8ea 	bl	8000840 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3798      	adds	r7, #152	@ 0x98
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	00303003 	.word	0x00303003

08000678 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f001 fa07 	bl	8001a98 <HAL_GPIO_TogglePin>

        // Restart UART receive interrupt
        HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
    }
    */
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800069e:	2120      	movs	r1, #32
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f001 f9f8 	bl	8001a98 <HAL_GPIO_TogglePin>

  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	f040 80bb 	bne.w	8000828 <HAL_GPIO_EXTI_Callback+0x194>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b2:	2120      	movs	r1, #32
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f001 f9ee 	bl	8001a98 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2120      	movs	r1, #32
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f001 f9d0 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1.DIR_PORT, motor1.DIR_PIN, GPIO_PIN_SET);
 80006c8:	4b59      	ldr	r3, [pc, #356]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a58      	ldr	r2, [pc, #352]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 80006ce:	f992 2000 	ldrsb.w	r2, [r2]
 80006d2:	b291      	uxth	r1, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f9c6 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2.DIR_PORT, motor2.DIR_PIN, GPIO_PIN_RESET);
 80006dc:	4b55      	ldr	r3, [pc, #340]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4a54      	ldr	r2, [pc, #336]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80006e2:	f992 2000 	ldrsb.w	r2, [r2]
 80006e6:	b291      	uxth	r1, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9bc 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3.DIR_PORT, motor3.DIR_PIN, GPIO_PIN_RESET);
 80006f0:	4b51      	ldr	r3, [pc, #324]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a50      	ldr	r2, [pc, #320]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80006f6:	f992 2000 	ldrsb.w	r2, [r2]
 80006fa:	b291      	uxth	r1, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f9b2 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4.DIR_PORT, motor4.DIR_PIN, GPIO_PIN_SET);
 8000704:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	4a4c      	ldr	r2, [pc, #304]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 800070a:	f992 2000 	ldrsb.w	r2, [r2]
 800070e:	b291      	uxth	r1, r2
 8000710:	2201      	movs	r2, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f9a8 	bl	8001a68 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000720:	f001 f9a2 	bl	8001a68 <HAL_GPIO_WritePin>
		motor1.STEPS = 2500;
 8000724:	4b42      	ldr	r3, [pc, #264]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000726:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800072a:	809a      	strh	r2, [r3, #4]
		motor1.SPEED = 5;
 800072c:	4b40      	ldr	r3, [pc, #256]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 800072e:	2205      	movs	r2, #5
 8000730:	70da      	strb	r2, [r3, #3]

		motor2.STEPS = 1500;
 8000732:	4b40      	ldr	r3, [pc, #256]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000734:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000738:	809a      	strh	r2, [r3, #4]
		motor2.SPEED = 5;
 800073a:	4b3e      	ldr	r3, [pc, #248]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800073c:	2205      	movs	r2, #5
 800073e:	70da      	strb	r2, [r3, #3]

		motor3.STEPS = 1500;
 8000740:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000742:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000746:	809a      	strh	r2, [r3, #4]
		motor3.SPEED = 5;
 8000748:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800074a:	2205      	movs	r2, #5
 800074c:	70da      	strb	r2, [r3, #3]

		motor4.STEPS = 1500;
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000750:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000754:	809a      	strh	r2, [r3, #4]
		motor4.SPEED = 5;
 8000756:	4b39      	ldr	r3, [pc, #228]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000758:	2205      	movs	r2, #5
 800075a:	70da      	strb	r2, [r3, #3]

		moveMotor(&motor1);
 800075c:	4834      	ldr	r0, [pc, #208]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 800075e:	f7ff fd39 	bl	80001d4 <moveMotor>
		moveMotor(&motor2);
 8000762:	4834      	ldr	r0, [pc, #208]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000764:	f7ff fd36 	bl	80001d4 <moveMotor>
		moveMotor(&motor3);
 8000768:	4833      	ldr	r0, [pc, #204]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800076a:	f7ff fd33 	bl	80001d4 <moveMotor>
		moveMotor(&motor4);
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000770:	f7ff fd30 	bl	80001d4 <moveMotor>


		HAL_Delay(1000);
 8000774:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000778:	f000 fe40 	bl	80013fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f001 f970 	bl	8001a68 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(motor1.DIR_PORT, motor1.DIR_PIN, GPIO_PIN_RESET);
 8000788:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	4a28      	ldr	r2, [pc, #160]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 800078e:	f992 2000 	ldrsb.w	r2, [r2]
 8000792:	b291      	uxth	r1, r2
 8000794:	2200      	movs	r2, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f966 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2.DIR_PORT, motor2.DIR_PIN, GPIO_PIN_SET);
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	4a24      	ldr	r2, [pc, #144]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80007a2:	f992 2000 	ldrsb.w	r2, [r2]
 80007a6:	b291      	uxth	r1, r2
 80007a8:	2201      	movs	r2, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f95c 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3.DIR_PORT, motor3.DIR_PIN, GPIO_PIN_SET);
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80007b6:	f992 2000 	ldrsb.w	r2, [r2]
 80007ba:	b291      	uxth	r1, r2
 80007bc:	2201      	movs	r2, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f952 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4.DIR_PORT, motor4.DIR_PIN, GPIO_PIN_RESET);
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007ca:	f992 2000 	ldrsb.w	r2, [r2]
 80007ce:	b291      	uxth	r1, r2
 80007d0:	2200      	movs	r2, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f948 	bl	8001a68 <HAL_GPIO_WritePin>

		motor1.STEPS = 2500;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 80007da:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80007de:	809a      	strh	r2, [r3, #4]
		motor1.SPEED = 10;
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 80007e2:	220a      	movs	r2, #10
 80007e4:	70da      	strb	r2, [r3, #3]

		motor2.STEPS = 1500;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80007e8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007ec:	809a      	strh	r2, [r3, #4]
		motor2.SPEED = 10;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	70da      	strb	r2, [r3, #3]

		motor3.STEPS = 1500;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80007f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007fa:	809a      	strh	r2, [r3, #4]
		motor3.SPEED = 10;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80007fe:	220a      	movs	r2, #10
 8000800:	70da      	strb	r2, [r3, #3]

		motor4.STEPS = 1500;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000804:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000808:	809a      	strh	r2, [r3, #4]
		motor4.SPEED = 10;
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 800080c:	220a      	movs	r2, #10
 800080e:	70da      	strb	r2, [r3, #3]


		moveMotor(&motor4);
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000812:	f7ff fcdf 	bl	80001d4 <moveMotor>
		moveMotor(&motor3);
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000818:	f7ff fcdc 	bl	80001d4 <moveMotor>
		moveMotor(&motor2);
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800081e:	f7ff fcd9 	bl	80001d4 <moveMotor>
		moveMotor(&motor1);
 8000822:	4803      	ldr	r0, [pc, #12]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000824:	f7ff fcd6 	bl	80001d4 <moveMotor>

  }
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000000 	.word	0x20000000
 8000834:	20000018 	.word	0x20000018
 8000838:	20000030 	.word	0x20000030
 800083c:	20000048 	.word	0x20000048

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_MspInit+0x44>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <HAL_MspInit+0x44>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_MspInit+0x44>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <HAL_MspInit+0x44>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x44>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 feae 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <MemManage_Handler+0x4>

080008ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <UsageFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 fd67 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80008fa:	f002 ff7b 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000009c 	.word	0x2000009c

08000908 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800090e:	f002 ff71 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000009c 	.word	0x2000009c

0800091c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <TIM2_IRQHandler+0x10>)
 8000922:	f002 ff67 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000e8 	.word	0x200000e8

08000930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM3_IRQHandler+0x10>)
 8000936:	f002 ff5d 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000134 	.word	0x20000134

08000944 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <TIM4_IRQHandler+0x10>)
 800094a:	f002 ff53 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000180 	.word	0x20000180

08000958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <USART1_IRQHandler+0x10>)
 800095e:	f003 ff3b 	bl	80047d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000218 	.word	0x20000218

0800096c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <USART2_IRQHandler+0x10>)
 8000972:	f003 ff31 	bl	80047d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200002a0 	.word	0x200002a0

08000980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000984:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000988:	f001 f8a0 	bl	8001acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <TIM8_BRK_IRQHandler+0x10>)
 8000996:	f002 ff2d 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001cc 	.word	0x200001cc

080009a4 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <TIM8_UP_IRQHandler+0x10>)
 80009aa:	f002 ff23 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001cc 	.word	0x200001cc

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	@ 0x58
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	222c      	movs	r2, #44	@ 0x2c
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 f88d 	bl	8005b28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0e:	4b39      	ldr	r3, [pc, #228]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a10:	4a39      	ldr	r2, [pc, #228]	@ (8000af8 <MX_TIM1_Init+0x11c>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000a14:	4b37      	ldr	r3, [pc, #220]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a16:	f240 12df 	movw	r2, #479	@ 0x1df
 8000a1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a22:	4b34      	ldr	r3, [pc, #208]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a24:	2263      	movs	r2, #99	@ 0x63
 8000a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2e:	4b31      	ldr	r3, [pc, #196]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a34:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a36:	2280      	movs	r2, #128	@ 0x80
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3a:	482e      	ldr	r0, [pc, #184]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a3c:	f002 fd76 	bl	800352c <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f7ff fefb 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4825      	ldr	r0, [pc, #148]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a5e:	f003 fcf9 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f7ff feea 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2360      	movs	r3, #96	@ 0x60
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000a92:	f002 ffcf 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a9c:	f7ff fed0 	bl	8000840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000ad6:	f003 fd49 	bl	800456c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ae0:	f7ff feae 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <MX_TIM1_Init+0x118>)
 8000ae6:	f000 fa4b 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000aea:	bf00      	nop
 8000aec:	3758      	adds	r7, #88	@ 0x58
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	40012c00 	.word	0x40012c00

08000afc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b2a:	f240 12df 	movw	r2, #479	@ 0x1df
 8000b2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b38:	2263      	movs	r2, #99	@ 0x63
 8000b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b48:	4818      	ldr	r0, [pc, #96]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b4a:	f002 fcef 	bl	800352c <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f7ff fe74 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b68:	f003 fc74 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b72:	f7ff fe65 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	2360      	movs	r3, #96	@ 0x60
 8000b78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b8e:	f002 ff51 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b98:	f7ff fe52 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM2_Init+0xb0>)
 8000b9e:	f000 f9ef 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000e8 	.word	0x200000e8

08000bb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bd6:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <MX_TIM3_Init+0xb0>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bdc:	f240 12df 	movw	r2, #479	@ 0x1df
 8000be0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bea:	2263      	movs	r2, #99	@ 0x63
 8000bec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bfa:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000bfc:	f002 fc96 	bl	800352c <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c06:	f7ff fe1b 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000c1a:	f003 fc1b 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c24:	f7ff fe0c 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	2360      	movs	r3, #96	@ 0x60
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000c40:	f002 fef8 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c4a:	f7ff fdf9 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4e:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <MX_TIM3_Init+0xac>)
 8000c50:	f000 f996 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000134 	.word	0x20000134
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000c8a:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <MX_TIM4_Init+0xb0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000c90:	f240 12df 	movw	r2, #479	@ 0x1df
 8000c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000c9e:	2263      	movs	r2, #99	@ 0x63
 8000ca0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000cb0:	f002 fc3c 	bl	800352c <HAL_TIM_PWM_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cba:	f7ff fdc1 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000cce:	f003 fbc1 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f7ff fdb2 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000cf4:	f002 fe9e 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000cfe:	f7ff fd9f 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d02:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <MX_TIM4_Init+0xac>)
 8000d04:	f000 f93c 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000180 	.word	0x20000180
 8000d14:	40000800 	.word	0x40000800

08000d18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	@ 0x58
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	222c      	movs	r2, #44	@ 0x2c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 feef 	bl	8005b28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d4a:	4b39      	ldr	r3, [pc, #228]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d4c:	4a39      	ldr	r2, [pc, #228]	@ (8000e34 <MX_TIM8_Init+0x11c>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 480-1;
 8000d50:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d52:	f240 12df 	movw	r2, #479	@ 0x1df
 8000d56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d60:	2263      	movs	r2, #99	@ 0x63
 8000d62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b32      	ldr	r3, [pc, #200]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d76:	482e      	ldr	r0, [pc, #184]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d78:	f002 fbd8 	bl	800352c <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f7ff fd5d 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d96:	4619      	mov	r1, r3
 8000d98:	4825      	ldr	r0, [pc, #148]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000d9a:	f003 fb5b 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000da4:	f7ff fd4c 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	@ 0x60
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000dce:	f002 fe31 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000dd8:	f7ff fd32 	bl	8000840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000e12:	f003 fbab 	bl	800456c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000e1c:	f7ff fd10 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <MX_TIM8_Init+0x118>)
 8000e22:	f000 f8ad 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000e26:	bf00      	nop
 8000e28:	3758      	adds	r7, #88	@ 0x58
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001cc 	.word	0x200001cc
 8000e34:	40013400 	.word	0x40013400

08000e38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a49      	ldr	r2, [pc, #292]	@ (8000f6c <HAL_TIM_PWM_MspInit+0x134>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d11c      	bne.n	8000e84 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4a:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a48      	ldr	r2, [pc, #288]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b46      	ldr	r3, [pc, #280]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2018      	movs	r0, #24
 8000e68:	f000 fbc7 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e6c:	2018      	movs	r0, #24
 8000e6e:	f000 fbe0 	bl	8001632 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2019      	movs	r0, #25
 8000e78:	f000 fbbf 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e7c:	2019      	movs	r0, #25
 8000e7e:	f000 fbd8 	bl	8001632 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e82:	e06e      	b.n	8000f62 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e8c:	d114      	bne.n	8000eb8 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a37      	ldr	r2, [pc, #220]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	201c      	movs	r0, #28
 8000eac:	f000 fba5 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f000 fbbe 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 8000eb6:	e054      	b.n	8000f62 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d114      	bne.n	8000eec <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201d      	movs	r0, #29
 8000ee0:	f000 fb8b 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee4:	201d      	movs	r0, #29
 8000ee6:	f000 fba4 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 8000eea:	e03a      	b.n	8000f62 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <HAL_TIM_PWM_MspInit+0x140>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d114      	bne.n	8000f20 <HAL_TIM_PWM_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201e      	movs	r0, #30
 8000f14:	f000 fb71 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f18:	201e      	movs	r0, #30
 8000f1a:	f000 fb8a 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 8000f1e:	e020      	b.n	8000f62 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM8)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <HAL_TIM_PWM_MspInit+0x144>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d11b      	bne.n	8000f62 <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000f30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_TIM_PWM_MspInit+0x138>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	202b      	movs	r0, #43	@ 0x2b
 8000f48:	f000 fb57 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8000f4c:	202b      	movs	r0, #43	@ 0x2b
 8000f4e:	f000 fb70 	bl	8001632 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	202c      	movs	r0, #44	@ 0x2c
 8000f58:	f000 fb4f 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000f5c:	202c      	movs	r0, #44	@ 0x2c
 8000f5e:	f000 fb68 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40012c00 	.word	0x40012c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40000800 	.word	0x40000800
 8000f7c:	40013400 	.word	0x40013400

08000f80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <HAL_TIM_MspPostInit+0x17c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11c      	bne.n	8000fdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b57      	ldr	r3, [pc, #348]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	484b      	ldr	r0, [pc, #300]	@ (8001104 <HAL_TIM_MspPostInit+0x184>)
 8000fd6:	f000 fbbd 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000fda:	e08a      	b.n	80010f2 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe4:	d11d      	bne.n	8001022 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a45      	ldr	r2, [pc, #276]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR2_PUL_Pin;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100e:	2301      	movs	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f000 fb9a 	bl	8001754 <HAL_GPIO_Init>
}
 8001020:	e067      	b.n	80010f2 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a38      	ldr	r2, [pc, #224]	@ (8001108 <HAL_TIM_MspPostInit+0x188>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d11d      	bne.n	8001068 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a33      	ldr	r2, [pc, #204]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8001032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001036:	6153      	str	r3, [r2, #20]
 8001038:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR3_PUL_Pin;
 8001044:	2340      	movs	r3, #64	@ 0x40
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001054:	2302      	movs	r3, #2
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR3_PUL_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001062:	f000 fb77 	bl	8001754 <HAL_GPIO_Init>
}
 8001066:	e044      	b.n	80010f2 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM4)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a27      	ldr	r2, [pc, #156]	@ (800110c <HAL_TIM_MspPostInit+0x18c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11e      	bne.n	80010b0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_PUL_Pin;
 800108a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800109c:	230a      	movs	r3, #10
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR4_PUL_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010aa:	f000 fb53 	bl	8001754 <HAL_GPIO_Init>
}
 80010ae:	e020      	b.n	80010f2 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM8)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <HAL_TIM_MspPostInit+0x190>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d11b      	bne.n	80010f2 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 80010c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_TIM_MspPostInit+0x180>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR5_PUL_Pin;
 80010d2:	2340      	movs	r3, #64	@ 0x40
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80010e2:	2304      	movs	r3, #4
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR5_PUL_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_TIM_MspPostInit+0x184>)
 80010ee:	f000 fb31 	bl	8001754 <HAL_GPIO_Init>
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	@ 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800
 8001108:	40000400 	.word	0x40000400
 800110c:	40000800 	.word	0x40000800
 8001110:	40013400 	.word	0x40013400

08001114 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_USART1_UART_Init+0x58>)
 800111a:	4a15      	ldr	r2, [pc, #84]	@ (8001170 <MX_USART1_UART_Init+0x5c>)
 800111c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_USART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_USART1_UART_Init+0x58>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_USART1_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_USART1_UART_Init+0x58>)
 8001158:	f003 faac 	bl	80046b4 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001162:	f7ff fb6d 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000218 	.word	0x20000218
 8001170:	40013800 	.word	0x40013800

08001174 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 800117a:	4a15      	ldr	r2, [pc, #84]	@ (80011d0 <MX_USART2_UART_Init+0x5c>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_USART2_UART_Init+0x58>)
 80011b8:	f003 fa7c 	bl	80046b4 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f7ff fb3d 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002a0 	.word	0x200002a0
 80011d0:	40004400 	.word	0x40004400

080011d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a36      	ldr	r2, [pc, #216]	@ (80012cc <HAL_UART_MspInit+0xf8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d130      	bne.n	8001258 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a35      	ldr	r2, [pc, #212]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a2f      	ldr	r2, [pc, #188]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001226:	2330      	movs	r3, #48	@ 0x30
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001236:	2307      	movs	r3, #7
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4824      	ldr	r0, [pc, #144]	@ (80012d4 <HAL_UART_MspInit+0x100>)
 8001242:	f000 fa87 	bl	8001754 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2025      	movs	r0, #37	@ 0x25
 800124c:	f000 f9d5 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001250:	2025      	movs	r0, #37	@ 0x25
 8001252:	f000 f9ee 	bl	8001632 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001256:	e035      	b.n	80012c4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1e      	ldr	r2, [pc, #120]	@ (80012d8 <HAL_UART_MspInit+0x104>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d130      	bne.n	80012c4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a1a      	ldr	r2, [pc, #104]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_UART_MspInit+0xfc>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001292:	230c      	movs	r3, #12
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b0:	f000 fa50 	bl	8001754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2026      	movs	r0, #38	@ 0x26
 80012ba:	f000 f99e 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012be:	2026      	movs	r0, #38	@ 0x26
 80012c0:	f000 f9b7 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 80012c4:	bf00      	nop
 80012c6:	3730      	adds	r7, #48	@ 0x30
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000800 	.word	0x48000800
 80012d8:	40004400 	.word	0x40004400

080012dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001314 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e0:	f7ff fb6a 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	@ (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f004 fc15 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130e:	f7ff f84f 	bl	80003b0 <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001314:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001320:	08005bd8 	.word	0x08005bd8
  ldr r2, =_sbss
 8001324:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001328:	2000032c 	.word	0x2000032c

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f94f 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fa7e 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f967 	bl	800164e <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f92f 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	@ (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000060 	.word	0x20000060
 80013b4:	20000068 	.word	0x20000068
 80013b8:	20000064 	.word	0x20000064

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000068 	.word	0x20000068
 80013e0:	20000328 	.word	0x20000328

080013e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000328 	.word	0x20000328

080013fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000068 	.word	0x20000068

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff3e 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff31 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001674:	2b02      	cmp	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2204      	movs	r2, #4
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e020      	b.n	80016cc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 020e 	bic.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e027      	b.n	800174a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    } 
  }
  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e160      	b.n	8001a26 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8152 	beq.w	8001a20 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d005      	beq.n	8001794 <HAL_GPIO_Init+0x40>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80ac 	beq.w	8001a20 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a44 <HAL_GPIO_Init+0x2f0>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a44 <HAL_GPIO_Init+0x2f0>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001a44 <HAL_GPIO_Init+0x2f0>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e0:	4a59      	ldr	r2, [pc, #356]	@ (8001a48 <HAL_GPIO_Init+0x2f4>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190a:	d025      	beq.n	8001958 <HAL_GPIO_Init+0x204>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a4c <HAL_GPIO_Init+0x2f8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d01f      	beq.n	8001954 <HAL_GPIO_Init+0x200>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4e      	ldr	r2, [pc, #312]	@ (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d019      	beq.n	8001950 <HAL_GPIO_Init+0x1fc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x1f8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a4c      	ldr	r2, [pc, #304]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1f4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4b      	ldr	r2, [pc, #300]	@ (8001a5c <HAL_GPIO_Init+0x308>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1f0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4a      	ldr	r2, [pc, #296]	@ (8001a60 <HAL_GPIO_Init+0x30c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1ec>
 800193c:	2306      	movs	r3, #6
 800193e:	e00c      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001940:	2307      	movs	r3, #7
 8001942:	e00a      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001944:	2305      	movs	r3, #5
 8001946:	e008      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001948:	2304      	movs	r3, #4
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x206>
 800194c:	2303      	movs	r3, #3
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001950:	2302      	movs	r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001958:	2300      	movs	r3, #0
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196a:	4937      	ldr	r1, [pc, #220]	@ (8001a48 <HAL_GPIO_Init+0x2f4>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001978:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800199c:	4a31      	ldr	r2, [pc, #196]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a2:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c6:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f ae97 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000c00 	.word	0x48000c00
 8001a58:	48001000 	.word	0x48001000
 8001a5c:	48001400 	.word	0x48001400
 8001a60:	48001800 	.word	0x48001800
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43d9      	mvns	r1, r3
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ad6:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fdd2 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f001 b83a 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 816f 	beq.w	8001e16 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b38:	4bb5      	ldr	r3, [pc, #724]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4bb2      	ldr	r3, [pc, #712]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d15c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x10e>
 8001b50:	4baf      	ldr	r3, [pc, #700]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d155      	bne.n	8001c0a <HAL_RCC_OscConfig+0x10e>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b62:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x94>
 8001b8a:	4ba1      	ldr	r3, [pc, #644]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0xc0>
 8001b90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b94:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bb8:	4b95      	ldr	r3, [pc, #596]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bc0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001bc4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001bd0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8111 	beq.w	8001e14 <HAL_RCC_OscConfig+0x318>
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8108 	bne.w	8001e14 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f000 bfc6 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12e>
 8001c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7b      	ldr	r2, [pc, #492]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e036      	b.n	8001c98 <HAL_RCC_OscConfig+0x19c>
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x158>
 8001c3a:	4b75      	ldr	r3, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a74      	ldr	r2, [pc, #464]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b72      	ldr	r3, [pc, #456]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e021      	b.n	8001c98 <HAL_RCC_OscConfig+0x19c>
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x184>
 8001c66:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a69      	ldr	r2, [pc, #420]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b67      	ldr	r3, [pc, #412]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a66      	ldr	r2, [pc, #408]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0x19c>
 8001c80:	4b63      	ldr	r3, [pc, #396]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a62      	ldr	r2, [pc, #392]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a5f      	ldr	r2, [pc, #380]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d059      	beq.n	8001d5c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb9c 	bl	80013e4 <HAL_GetTick>
 8001cac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fb97 	bl	80013e4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d902      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	f000 bf67 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 8001cc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ccc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001cdc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1fe>
 8001cf4:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x22a>
 8001cfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cfe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d12:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d2a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001d2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001d32:	fa92 f2a2 	rbit	r2, r2
 8001d36:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001d3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d3e:	fab2 f282 	clz	r2, r2
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f002 021f 	and.w	r2, r2, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f202 	lsl.w	r2, r1, r2
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ab      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b6>
 8001d5a:	e05c      	b.n	8001e16 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fb42 	bl	80013e4 <HAL_GetTick>
 8001d60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d66:	f7ff fb3d 	bl	80013e4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	@ 0x64
 8001d74:	d902      	bls.n	8001d7c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	f000 bf0d 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001d90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x2b2>
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x2de>
 8001dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001dc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_RCC_OscConfig+0x314>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dde:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001de2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001de6:	fa92 f2a2 	rbit	r2, r2
 8001dea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001dee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0220 	orr.w	r2, r2, #32
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ab      	bne.n	8001d66 <HAL_RCC_OscConfig+0x26a>
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_OscConfig+0x31a>
 8001e10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 817f 	beq.w	800212a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e2c:	4ba7      	ldr	r3, [pc, #668]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e38:	4ba4      	ldr	r3, [pc, #656]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d173      	bne.n	8001f2c <HAL_RCC_OscConfig+0x430>
 8001e44:	4ba1      	ldr	r3, [pc, #644]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e50:	d16c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x430>
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001e64:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_OscConfig+0x386>
 8001e7c:	4b93      	ldr	r3, [pc, #588]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0x3ae>
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001e94:	2302      	movs	r3, #2
 8001e96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e9a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ea6:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001eb0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001eb4:	fa92 f2a2 	rbit	r2, r2
 8001eb8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001ebc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3f6>
 8001edc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d002      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f000 be52 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b76      	ldr	r3, [pc, #472]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	21f8      	movs	r1, #248	@ 0xf8
 8001f08:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001f10:	fa91 f1a1 	rbit	r1, r1
 8001f14:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001f18:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f1c:	fab1 f181 	clz	r1, r1
 8001f20:	b2c9      	uxtb	r1, r1
 8001f22:	408b      	lsls	r3, r1
 8001f24:	4969      	ldr	r1, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e0fe      	b.n	800212a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8088 	beq.w	800204e <HAL_RCC_OscConfig+0x552>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001f50:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	461a      	mov	r2, r3
 8001f66:	2301      	movs	r3, #1
 8001f68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fa3b 	bl	80013e4 <HAL_GetTick>
 8001f6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f74:	f7ff fa36 	bl	80013e4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d902      	bls.n	8001f8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	f000 be06 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001f9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x4be>
 8001fb4:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e013      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e6>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fd2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fde:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001fe8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001ff4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0af      	beq.n	8001f74 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	21f8      	movs	r1, #248	@ 0xf8
 800202a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002032:	fa91 f1a1 	rbit	r1, r1
 8002036:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800203a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800203e:	fab1 f181 	clz	r1, r1
 8002042:	b2c9      	uxtb	r1, r1
 8002044:	408b      	lsls	r3, r1
 8002046:	4921      	ldr	r1, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e06d      	b.n	800212a <HAL_RCC_OscConfig+0x62e>
 800204e:	2301      	movs	r3, #1
 8002050:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002060:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800206e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	461a      	mov	r2, r3
 8002076:	2300      	movs	r3, #0
 8002078:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff f9b3 	bl	80013e4 <HAL_GetTick>
 800207e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff f9ae 	bl	80013e4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d902      	bls.n	800209a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	f000 bd7e 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80020ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5d4>
 80020c4:	4b01      	ldr	r3, [pc, #4]	@ (80020cc <HAL_RCC_OscConfig+0x5d0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e016      	b.n	80020f8 <HAL_RCC_OscConfig+0x5fc>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020f4:	4bbf      	ldr	r3, [pc, #764]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2202      	movs	r2, #2
 80020fa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80020fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800210a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ac      	bne.n	8002084 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8113 	beq.w	8002366 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002144:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d07c      	beq.n	800224a <HAL_RCC_OscConfig+0x74e>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002162:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4ba2      	ldr	r3, [pc, #648]	@ (80023f8 <HAL_RCC_OscConfig+0x8fc>)
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff f933 	bl	80013e4 <HAL_GetTick>
 800217e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff f92e 	bl	80013e4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d902      	bls.n	800219a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	f000 bcfe 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021de:	2202      	movs	r2, #2
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b7e      	ldr	r3, [pc, #504]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 80021fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002206:	2102      	movs	r1, #2
 8002208:	6019      	str	r1, [r3, #0]
 800220a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f1a3 	rbit	r1, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002220:	6019      	str	r1, [r3, #0]
  return result;
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d09d      	beq.n	8002184 <HAL_RCC_OscConfig+0x688>
 8002248:	e08d      	b.n	8002366 <HAL_RCC_OscConfig+0x86a>
 800224a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002268:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800226c:	601a      	str	r2, [r3, #0]
  return result;
 800226e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002272:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002276:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <HAL_RCC_OscConfig+0x8fc>)
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff f8aa 	bl	80013e4 <HAL_GetTick>
 8002290:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7ff f8a5 	bl	80013e4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d902      	bls.n	80022ac <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	f000 bc75 	b.w	8002b96 <HAL_RCC_OscConfig+0x109a>
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022b4:	2202      	movs	r2, #2
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002312:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002316:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b36      	ldr	r3, [pc, #216]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 800231a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800231c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002320:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002324:	2102      	movs	r1, #2
 8002326:	6019      	str	r1, [r3, #0]
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f1a3 	rbit	r1, r3
 8002336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800233e:	6019      	str	r1, [r3, #0]
  return result;
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d197      	bne.n	8002296 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 81a5 	beq.w	80026c6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_RCC_OscConfig+0x8f8>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_RCC_OscConfig+0x900>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d121      	bne.n	800240c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_RCC_OscConfig+0x900>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	@ (80023fc <HAL_RCC_OscConfig+0x900>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f806 	bl	80013e4 <HAL_GetTick>
 80023d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e010      	b.n	8002400 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff f801 	bl	80013e4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d908      	bls.n	8002400 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e3d1      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	10908120 	.word	0x10908120
 80023fc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b8d      	ldr	r3, [pc, #564]	@ (8002638 <HAL_RCC_OscConfig+0xb3c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0e8      	beq.n	80023de <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x92e>
 800241c:	4b87      	ldr	r3, [pc, #540]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a86      	ldr	r2, [pc, #536]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e035      	b.n	8002496 <HAL_RCC_OscConfig+0x99a>
 800242a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x958>
 800243a:	4b80      	ldr	r3, [pc, #512]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a7f      	ldr	r2, [pc, #508]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b7d      	ldr	r3, [pc, #500]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a7c      	ldr	r2, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	e020      	b.n	8002496 <HAL_RCC_OscConfig+0x99a>
 8002454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002458:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x982>
 8002464:	4b75      	ldr	r3, [pc, #468]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a74      	ldr	r2, [pc, #464]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b72      	ldr	r3, [pc, #456]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a71      	ldr	r2, [pc, #452]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x99a>
 800247e:	4b6f      	ldr	r3, [pc, #444]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a6e      	ldr	r2, [pc, #440]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b6c      	ldr	r3, [pc, #432]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a6b      	ldr	r2, [pc, #428]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8081 	beq.w	80025aa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe ff9c 	bl	80013e4 <HAL_GetTick>
 80024ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe ff97 	bl	80013e4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e365      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 80024ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024d2:	2202      	movs	r2, #2
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002510:	601a      	str	r2, [r3, #0]
  return result;
 8002512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002516:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800251a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d102      	bne.n	8002536 <HAL_RCC_OscConfig+0xa3a>
 8002530:	4b42      	ldr	r3, [pc, #264]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	e013      	b.n	800255e <HAL_RCC_OscConfig+0xa62>
 8002536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800253e:	2202      	movs	r2, #2
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002546:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b38      	ldr	r3, [pc, #224]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002562:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002566:	2102      	movs	r1, #2
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800256e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fa92 f1a2 	rbit	r1, r2
 8002578:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800257c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002580:	6011      	str	r1, [r2, #0]
  return result;
 8002582:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002586:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d084      	beq.n	80024b2 <HAL_RCC_OscConfig+0x9b6>
 80025a8:	e083      	b.n	80026b2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe ff1b 	bl	80013e4 <HAL_GetTick>
 80025ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe ff16 	bl	80013e4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e2e4      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 80025cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025d4:	2202      	movs	r2, #2
 80025d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025dc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025f8:	2202      	movs	r2, #2
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002600:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002612:	601a      	str	r2, [r3, #0]
  return result;
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800261c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0xb44>
 8002632:	4b02      	ldr	r3, [pc, #8]	@ (800263c <HAL_RCC_OscConfig+0xb40>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	e017      	b.n	8002668 <HAL_RCC_OscConfig+0xb6c>
 8002638:	40007000 	.word	0x40007000
 800263c:	40021000 	.word	0x40021000
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002648:	2202      	movs	r2, #2
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002650:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4bb3      	ldr	r3, [pc, #716]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002670:	2102      	movs	r1, #2
 8002672:	6011      	str	r1, [r2, #0]
 8002674:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002678:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fa92 f1a2 	rbit	r1, r2
 8002682:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002686:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800268a:	6011      	str	r1, [r2, #0]
  return result;
 800268c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002690:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d180      	bne.n	80025b4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a9d      	ldr	r2, [pc, #628]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 825e 	beq.w	8002b94 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d8:	4b96      	ldr	r3, [pc, #600]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f000 821f 	beq.w	8002b24 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 8170 	bne.w	80029d8 <HAL_RCC_OscConfig+0xedc>
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800271c:	601a      	str	r2, [r3, #0]
  return result;
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002726:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002732:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2300      	movs	r3, #0
 800273c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fe51 	bl	80013e4 <HAL_GetTick>
 8002742:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	e009      	b.n	800275c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fe4c 	bl	80013e4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e21c      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 800275c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002760:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800278a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0xcaa>
 80027a0:	4b64      	ldr	r3, [pc, #400]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e027      	b.n	80027f6 <HAL_RCC_OscConfig+0xcfa>
 80027a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002802:	6011      	str	r1, [r2, #0]
 8002804:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002808:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fa92 f1a2 	rbit	r1, r2
 8002812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002816:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800281a:	6011      	str	r1, [r2, #0]
  return result;
 800281c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002820:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d182      	bne.n	8002748 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	4937      	ldr	r1, [pc, #220]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 8002858:	4313      	orrs	r3, r2
 800285a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800285c:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a19      	ldr	r1, [r3, #32]
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	430b      	orrs	r3, r1
 800287e:	492d      	ldr	r1, [pc, #180]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800288c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002896:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028a8:	601a      	str	r2, [r3, #0]
  return result;
 80028aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028b2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fd8b 	bl	80013e4 <HAL_GetTick>
 80028ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d2:	e009      	b.n	80028e8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fd86 	bl	80013e4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e156      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 80028e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002908:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800290c:	601a      	str	r2, [r3, #0]
  return result;
 800290e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002912:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002916:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0xe3c>
 800292c:	4b01      	ldr	r3, [pc, #4]	@ (8002934 <HAL_RCC_OscConfig+0xe38>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	e02a      	b.n	8002988 <HAL_RCC_OscConfig+0xe8c>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002958:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002962:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002966:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4b86      	ldr	r3, [pc, #536]	@ (8002ba0 <HAL_RCC_OscConfig+0x10a4>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800298c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002990:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002994:	6011      	str	r1, [r2, #0]
 8002996:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800299a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	fa92 f1a2 	rbit	r1, r2
 80029a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029ac:	6011      	str	r1, [r2, #0]
  return result;
 80029ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	fab2 f282 	clz	r2, r2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f002 021f 	and.w	r2, r2, #31
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f43f af7f 	beq.w	80028d4 <HAL_RCC_OscConfig+0xdd8>
 80029d6:	e0dd      	b.n	8002b94 <HAL_RCC_OscConfig+0x1098>
 80029d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029fc:	601a      	str	r2, [r3, #0]
  return result;
 80029fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a02:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a06:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fce1 	bl	80013e4 <HAL_GetTick>
 8002a22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	e009      	b.n	8002a3c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fcdc 	bl	80013e4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0ac      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
 8002a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a40:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a60:	601a      	str	r2, [r3, #0]
  return result;
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_RCC_OscConfig+0xf8a>
 8002a80:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_OscConfig+0x10a4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e027      	b.n	8002ad6 <HAL_RCC_OscConfig+0xfda>
 8002a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002abe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_RCC_OscConfig+0x10a4>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ada:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ade:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ae2:	6011      	str	r1, [r2, #0]
 8002ae4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	fa92 f1a2 	rbit	r1, r2
 8002af2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002afa:	6011      	str	r1, [r2, #0]
  return result;
 8002afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b00:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d182      	bne.n	8002a28 <HAL_RCC_OscConfig+0xf2c>
 8002b22:	e037      	b.n	8002b94 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02e      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_RCC_OscConfig+0x10a4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x10a4>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b4c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d117      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b64:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b7c:	f003 020f 	and.w	r2, r3, #15
 8002b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b09e      	sub	sp, #120	@ 0x78
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e162      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b90      	ldr	r3, [pc, #576]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	498b      	ldr	r1, [pc, #556]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b89      	ldr	r3, [pc, #548]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e14a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b82      	ldr	r3, [pc, #520]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	497f      	ldr	r1, [pc, #508]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80dc 	beq.w	8002dd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d13c      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xf6>
 8002c20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c24:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xa6>
 8002c44:	4b6f      	ldr	r3, [pc, #444]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e00f      	b.n	8002c6a <HAL_RCC_ClockConfig+0xc6>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c66:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d17b      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0f3      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d13c      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x178>
 8002ca2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x128>
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_ClockConfig+0x148>
 8002ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce8:	4b46      	ldr	r3, [pc, #280]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cf4:	fa92 f2a2 	rbit	r2, r2
 8002cf8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f002 021f 	and.w	r2, r2, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13a      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b2      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1a0>
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e00d      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1bc>
 8002d44:	2302      	movs	r3, #2
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	4b29      	ldr	r3, [pc, #164]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	2202      	movs	r2, #2
 8002d62:	61ba      	str	r2, [r7, #24]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	617a      	str	r2, [r7, #20]
  return result;
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0220 	orr.w	r2, r2, #32
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e079      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	491a      	ldr	r1, [pc, #104]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fb20 	bl	80013e4 <HAL_GetTick>
 8002da4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe fb1c 	bl	80013e4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e061      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d214      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4906      	ldr	r1, [pc, #24]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e040      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2de>
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_ClockConfig+0x2e8>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	491a      	ldr	r1, [pc, #104]	@ (8002e8c <HAL_RCC_ClockConfig+0x2e8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <HAL_RCC_ClockConfig+0x2e8>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4912      	ldr	r1, [pc, #72]	@ (8002e8c <HAL_RCC_ClockConfig+0x2e8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e46:	f000 f829 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_RCC_ClockConfig+0x2e8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e54:	22f0      	movs	r2, #240	@ 0xf0
 8002e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	fa92 f2a2 	rbit	r2, r2
 8002e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	fab2 f282 	clz	r2, r2
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	40d3      	lsrs	r3, r2
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_RCC_ClockConfig+0x2ec>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e72:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <HAL_RCC_ClockConfig+0x2f0>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCC_ClockConfig+0x2f4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fa6e 	bl	800135c <HAL_InitTick>
  
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3778      	adds	r7, #120	@ 0x78
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08005b98 	.word	0x08005b98
 8002e94:	20000060 	.word	0x20000060
 8002e98:	20000064 	.word	0x20000064

08002e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b08b      	sub	sp, #44	@ 0x2c
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x30>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eca:	e03f      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ece:	623b      	str	r3, [r7, #32]
      break;
 8002ed0:	e03f      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ed8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002edc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	607a      	str	r2, [r7, #4]
  return result;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	fab2 f282 	clz	r2, r2
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	40d3      	lsrs	r3, r2
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	220f      	movs	r2, #15
 8002f00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	60fa      	str	r2, [r7, #12]
  return result;
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	40d3      	lsrs	r3, r2
 8002f14:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f24:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	e007      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f36:	4a0b      	ldr	r2, [pc, #44]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	623b      	str	r3, [r7, #32]
      break;
 8002f4a:	e002      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f4e:	623b      	str	r3, [r7, #32]
      break;
 8002f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	372c      	adds	r7, #44	@ 0x2c
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40021000 	.word	0x40021000
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	08005bb0 	.word	0x08005bb0
 8002f6c:	08005bc0 	.word	0x08005bc0

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000060 	.word	0x20000060

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f8e:	f7ff ffef 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f92:	4601      	mov	r1, r0
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f9c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	603a      	str	r2, [r7, #0]
  return result;
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	40d3      	lsrs	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005ba8 	.word	0x08005ba8

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fd2:	f7ff ffcd 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fe0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fe4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	603a      	str	r2, [r7, #0]
  return result;
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	40d3      	lsrs	r3, r2
 8002ff8:	4a04      	ldr	r2, [pc, #16]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	08005ba8 	.word	0x08005ba8

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b092      	sub	sp, #72	@ 0x48
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80d4 	beq.w	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003034:	4b4e      	ldr	r3, [pc, #312]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10e      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b4b      	ldr	r3, [pc, #300]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a4a      	ldr	r2, [pc, #296]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	4b48      	ldr	r3, [pc, #288]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b45      	ldr	r3, [pc, #276]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b42      	ldr	r3, [pc, #264]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a41      	ldr	r2, [pc, #260]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe f9b5 	bl	80013e4 <HAL_GetTick>
 800307a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7fe f9b1 	bl	80013e4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	@ 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1d6      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b38      	ldr	r3, [pc, #224]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800309c:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8084 	beq.w	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d07c      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	2301      	movs	r3, #1
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2300      	movs	r3, #0
 800310c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003112:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04b      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe f961 	bl	80013e4 <HAL_GetTick>
 8003122:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe f95d 	bl	80013e4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e180      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800313c:	2302      	movs	r3, #2
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
 8003148:	2302      	movs	r3, #2
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	61fb      	str	r3, [r7, #28]
  return result;
 8003154:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d108      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800316a:	4b01      	ldr	r3, [pc, #4]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	e00d      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
 8003178:	10908100 	.word	0x10908100
 800317c:	2302      	movs	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	4b9a      	ldr	r3, [pc, #616]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	2202      	movs	r2, #2
 800318e:	613a      	str	r2, [r7, #16]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	fa92 f2a2 	rbit	r2, r2
 8003196:	60fa      	str	r2, [r7, #12]
  return result;
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f002 021f 	and.w	r2, r2, #31
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0b7      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031b6:	4b8f      	ldr	r3, [pc, #572]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	498c      	ldr	r1, [pc, #560]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a87      	ldr	r2, [pc, #540]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e8:	4b82      	ldr	r3, [pc, #520]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	f023 0203 	bic.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	497f      	ldr	r1, [pc, #508]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003206:	4b7b      	ldr	r3, [pc, #492]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4978      	ldr	r1, [pc, #480]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003224:	4b73      	ldr	r3, [pc, #460]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	4970      	ldr	r1, [pc, #448]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003242:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f023 0210 	bic.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4969      	ldr	r1, [pc, #420]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003260:	4b64      	ldr	r3, [pc, #400]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	4961      	ldr	r1, [pc, #388]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800327e:	4b5d      	ldr	r3, [pc, #372]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f023 0220 	bic.w	r2, r3, #32
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	495a      	ldr	r1, [pc, #360]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800329c:	4b55      	ldr	r3, [pc, #340]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	4952      	ldr	r1, [pc, #328]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ba:	4b4e      	ldr	r3, [pc, #312]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	494b      	ldr	r1, [pc, #300]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d8:	4b46      	ldr	r3, [pc, #280]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	4943      	ldr	r1, [pc, #268]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032f6:	4b3f      	ldr	r3, [pc, #252]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	493c      	ldr	r1, [pc, #240]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003314:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	4934      	ldr	r1, [pc, #208]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003332:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	492d      	ldr	r1, [pc, #180]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003350:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335c:	4925      	ldr	r1, [pc, #148]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800336e:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	491e      	ldr	r1, [pc, #120]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800338c:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	4916      	ldr	r1, [pc, #88]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	490f      	ldr	r1, [pc, #60]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d4:	4907      	ldr	r1, [pc, #28]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80033e6:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	e002      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	4913      	ldr	r1, [pc, #76]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003418:	490b      	ldr	r1, [pc, #44]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800341a:	4313      	orrs	r3, r2
 800341c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800342a:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	4904      	ldr	r1, [pc, #16]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003438:	4313      	orrs	r3, r2
 800343a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3748      	adds	r7, #72	@ 0x48
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e04f      	b.n	8003504 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a23      	ldr	r2, [pc, #140]	@ (8003510 <HAL_TIM_Base_Start_IT+0xc4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348e:	d018      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_TIM_Base_Start_IT+0xc8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_TIM_Base_Start_IT+0xcc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_TIM_Base_Start_IT+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_TIM_Base_Start_IT+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_TIM_Base_Start_IT+0x76>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_TIM_Base_Start_IT+0xd8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d115      	bne.n	80034ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_TIM_Base_Start_IT+0xdc>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d015      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0xb4>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034da:	d011      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	e008      	b.n	8003500 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e000      	b.n	8003502 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40013400 	.word	0x40013400
 8003520:	40014000 	.word	0x40014000
 8003524:	40015000 	.word	0x40015000
 8003528:	00010007 	.word	0x00010007

0800352c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e049      	b.n	80035d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fc70 	bl	8000e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fba8 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_TIM_PWM_Start+0x24>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e03c      	b.n	800367a <HAL_TIM_PWM_Start+0x9e>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d109      	bne.n	800361a <HAL_TIM_PWM_Start+0x3e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e02f      	b.n	800367a <HAL_TIM_PWM_Start+0x9e>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d109      	bne.n	8003634 <HAL_TIM_PWM_Start+0x58>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e022      	b.n	800367a <HAL_TIM_PWM_Start+0x9e>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d109      	bne.n	800364e <HAL_TIM_PWM_Start+0x72>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	bf14      	ite	ne
 8003646:	2301      	movne	r3, #1
 8003648:	2300      	moveq	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e015      	b.n	800367a <HAL_TIM_PWM_Start+0x9e>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d109      	bne.n	8003668 <HAL_TIM_PWM_Start+0x8c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e008      	b.n	800367a <HAL_TIM_PWM_Start+0x9e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0a1      	b.n	80037c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <HAL_TIM_PWM_Start+0xb6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003690:	e023      	b.n	80036da <HAL_TIM_PWM_Start+0xfe>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_PWM_Start+0xc6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a0:	e01b      	b.n	80036da <HAL_TIM_PWM_Start+0xfe>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_PWM_Start+0xd6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b0:	e013      	b.n	80036da <HAL_TIM_PWM_Start+0xfe>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start+0xe6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036c0:	e00b      	b.n	80036da <HAL_TIM_PWM_Start+0xfe>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0xf6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d0:	e003      	b.n	80036da <HAL_TIM_PWM_Start+0xfe>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fe90 	bl	8004408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <HAL_TIM_PWM_Start+0x1f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_TIM_PWM_Start+0x148>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a37      	ldr	r2, [pc, #220]	@ (80037d4 <HAL_TIM_PWM_Start+0x1f8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_TIM_PWM_Start+0x148>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a35      	ldr	r2, [pc, #212]	@ (80037d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_PWM_Start+0x148>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a34      	ldr	r2, [pc, #208]	@ (80037dc <HAL_TIM_PWM_Start+0x200>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_TIM_PWM_Start+0x148>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a32      	ldr	r2, [pc, #200]	@ (80037e0 <HAL_TIM_PWM_Start+0x204>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_PWM_Start+0x148>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <HAL_TIM_PWM_Start+0x208>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_TIM_PWM_Start+0x14c>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_TIM_PWM_Start+0x14e>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a23      	ldr	r2, [pc, #140]	@ (80037d0 <HAL_TIM_PWM_Start+0x1f4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003750:	d018      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a24      	ldr	r2, [pc, #144]	@ (80037e8 <HAL_TIM_PWM_Start+0x20c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	@ (80037ec <HAL_TIM_PWM_Start+0x210>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1a      	ldr	r2, [pc, #104]	@ (80037d4 <HAL_TIM_PWM_Start+0x1f8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_TIM_PWM_Start+0x1a8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <HAL_TIM_PWM_Start+0x208>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d115      	bne.n	80037b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_TIM_PWM_Start+0x214>)
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d015      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x1e6>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d011      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	e008      	b.n	80037c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40013400 	.word	0x40013400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40014400 	.word	0x40014400
 80037e0:	40014800 	.word	0x40014800
 80037e4:	40015000 	.word	0x40015000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	00010007 	.word	0x00010007

080037f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0202 	mvn.w	r2, #2
 8003820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa24 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa16 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fa27 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0204 	mvn.w	r2, #4
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9fa 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9ec 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f9fd 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0208 	mvn.w	r2, #8
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2204      	movs	r2, #4
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9d0 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9c2 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f9d3 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b10      	cmp	r3, #16
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b10      	cmp	r3, #16
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0210 	mvn.w	r2, #16
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2208      	movs	r2, #8
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9a6 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f998 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f9a9 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0201 	mvn.w	r2, #1
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f972 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b80      	cmp	r3, #128	@ 0x80
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fe74 	bl	800468c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b2:	d10e      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fe67 	bl	80046a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b40      	cmp	r3, #64	@ 0x40
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f957 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0220 	mvn.w	r2, #32
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fe27 	bl	8004678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0ff      	b.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b14      	cmp	r3, #20
 8003a5e:	f200 80f0 	bhi.w	8003c42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003abd 	.word	0x08003abd
 8003a6c:	08003c43 	.word	0x08003c43
 8003a70:	08003c43 	.word	0x08003c43
 8003a74:	08003c43 	.word	0x08003c43
 8003a78:	08003afd 	.word	0x08003afd
 8003a7c:	08003c43 	.word	0x08003c43
 8003a80:	08003c43 	.word	0x08003c43
 8003a84:	08003c43 	.word	0x08003c43
 8003a88:	08003b3f 	.word	0x08003b3f
 8003a8c:	08003c43 	.word	0x08003c43
 8003a90:	08003c43 	.word	0x08003c43
 8003a94:	08003c43 	.word	0x08003c43
 8003a98:	08003b7f 	.word	0x08003b7f
 8003a9c:	08003c43 	.word	0x08003c43
 8003aa0:	08003c43 	.word	0x08003c43
 8003aa4:	08003c43 	.word	0x08003c43
 8003aa8:	08003bc1 	.word	0x08003bc1
 8003aac:	08003c43 	.word	0x08003c43
 8003ab0:	08003c43 	.word	0x08003c43
 8003ab4:	08003c43 	.word	0x08003c43
 8003ab8:	08003c01 	.word	0x08003c01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f99a 	bl	8003dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0204 	bic.w	r2, r2, #4
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]
      break;
 8003afa:	e0a5      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fa14 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6999      	ldr	r1, [r3, #24]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	619a      	str	r2, [r3, #24]
      break;
 8003b3c:	e084      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fa87 	bl	8004058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0208 	orr.w	r2, r2, #8
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0204 	bic.w	r2, r2, #4
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]
      break;
 8003b7c:	e064      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 faf9 	bl	800417c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69d9      	ldr	r1, [r3, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	61da      	str	r2, [r3, #28]
      break;
 8003bbe:	e043      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fb48 	bl	800425c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0208 	orr.w	r2, r2, #8
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0204 	bic.w	r2, r2, #4
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bfe:	e023      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fb92 	bl	8004330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
      break;
 8003c46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a42      	ldr	r2, [pc, #264]	@ (8003ddc <TIM_Base_SetConfig+0x11c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8003de0 <TIM_Base_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3e      	ldr	r2, [pc, #248]	@ (8003de4 <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8003de8 <TIM_Base_SetConfig+0x128>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a31      	ldr	r2, [pc, #196]	@ (8003ddc <TIM_Base_SetConfig+0x11c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d01b      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <TIM_Base_SetConfig+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d017      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <TIM_Base_SetConfig+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <TIM_Base_SetConfig+0x128>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00f      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <TIM_Base_SetConfig+0x134>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003df8 <TIM_Base_SetConfig+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_Base_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a25      	ldr	r2, [pc, #148]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d108      	bne.n	8003d6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <TIM_Base_SetConfig+0x11c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <TIM_Base_SetConfig+0x100>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <TIM_Base_SetConfig+0x128>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00f      	beq.n	8003dc0 <TIM_Base_SetConfig+0x100>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <TIM_Base_SetConfig+0x100>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <TIM_Base_SetConfig+0x134>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_Base_SetConfig+0x100>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <TIM_Base_SetConfig+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_Base_SetConfig+0x100>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	615a      	str	r2, [r3, #20]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40015000 	.word	0x40015000
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 0302 	bic.w	r3, r3, #2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <TIM_OC1_SetConfig+0x11c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_OC1_SetConfig+0x88>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <TIM_OC1_SetConfig+0x120>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00f      	beq.n	8003e84 <TIM_OC1_SetConfig+0x88>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <TIM_OC1_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_OC1_SetConfig+0x88>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f24 <TIM_OC1_SetConfig+0x128>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_OC1_SetConfig+0x88>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <TIM_OC1_SetConfig+0x12c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC1_SetConfig+0x88>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <TIM_OC1_SetConfig+0x130>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <TIM_OC1_SetConfig+0x11c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_OC1_SetConfig+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <TIM_OC1_SetConfig+0x120>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_OC1_SetConfig+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <TIM_OC1_SetConfig+0x124>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_OC1_SetConfig+0xd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <TIM_OC1_SetConfig+0x128>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_OC1_SetConfig+0xd2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <TIM_OC1_SetConfig+0x12c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_OC1_SetConfig+0xd2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <TIM_OC1_SetConfig+0x130>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800
 8003f2c:	40015000 	.word	0x40015000

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0210 	bic.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0320 	bic.w	r3, r3, #32
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <TIM_OC2_SetConfig+0x110>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x74>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	@ (8004044 <TIM_OC2_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x74>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <TIM_OC2_SetConfig+0x118>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10d      	bne.n	8003fc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <TIM_OC2_SetConfig+0x110>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xc0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1e      	ldr	r2, [pc, #120]	@ (8004044 <TIM_OC2_SetConfig+0x114>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00f      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xc0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <TIM_OC2_SetConfig+0x11c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xc0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1d      	ldr	r2, [pc, #116]	@ (8004050 <TIM_OC2_SetConfig+0x120>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xc0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8004054 <TIM_OC2_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xc0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a17      	ldr	r2, [pc, #92]	@ (8004048 <TIM_OC2_SetConfig+0x118>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d113      	bne.n	8004018 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ff6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ffe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40015000 	.word	0x40015000
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800

08004058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004164 <TIM_OC3_SetConfig+0x10c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC3_SetConfig+0x72>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004168 <TIM_OC3_SetConfig+0x110>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC3_SetConfig+0x72>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a29      	ldr	r2, [pc, #164]	@ (800416c <TIM_OC3_SetConfig+0x114>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10d      	bne.n	80040e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <TIM_OC3_SetConfig+0x10c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <TIM_OC3_SetConfig+0xbe>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <TIM_OC3_SetConfig+0x110>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00f      	beq.n	8004116 <TIM_OC3_SetConfig+0xbe>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <TIM_OC3_SetConfig+0x118>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_OC3_SetConfig+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <TIM_OC3_SetConfig+0x11c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_OC3_SetConfig+0xbe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <TIM_OC3_SetConfig+0x120>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_OC3_SetConfig+0xbe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a16      	ldr	r2, [pc, #88]	@ (800416c <TIM_OC3_SetConfig+0x114>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d113      	bne.n	800413e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800411c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40013400 	.word	0x40013400
 800416c:	40015000 	.word	0x40015000
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400
 8004178:	40014800 	.word	0x40014800

0800417c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	031b      	lsls	r3, r3, #12
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <TIM_OC4_SetConfig+0xc8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <TIM_OC4_SetConfig+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <TIM_OC4_SetConfig+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00f      	beq.n	8004208 <TIM_OC4_SetConfig+0x8c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a18      	ldr	r2, [pc, #96]	@ (800424c <TIM_OC4_SetConfig+0xd0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00b      	beq.n	8004208 <TIM_OC4_SetConfig+0x8c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a17      	ldr	r2, [pc, #92]	@ (8004250 <TIM_OC4_SetConfig+0xd4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <TIM_OC4_SetConfig+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a16      	ldr	r2, [pc, #88]	@ (8004254 <TIM_OC4_SetConfig+0xd8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC4_SetConfig+0x8c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a15      	ldr	r2, [pc, #84]	@ (8004258 <TIM_OC4_SetConfig+0xdc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800420e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800
 8004258:	40015000 	.word	0x40015000

0800425c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <TIM_OC5_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <TIM_OC5_SetConfig+0x82>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	@ (800431c <TIM_OC5_SetConfig+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00f      	beq.n	80042de <TIM_OC5_SetConfig+0x82>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <TIM_OC5_SetConfig+0xc4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <TIM_OC5_SetConfig+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <TIM_OC5_SetConfig+0xc8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <TIM_OC5_SetConfig+0x82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a15      	ldr	r2, [pc, #84]	@ (8004328 <TIM_OC5_SetConfig+0xcc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC5_SetConfig+0x82>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a14      	ldr	r2, [pc, #80]	@ (800432c <TIM_OC5_SetConfig+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d109      	bne.n	80042f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40015000 	.word	0x40015000

08004330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <TIM_OC6_SetConfig+0xc0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_OC6_SetConfig+0x84>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <TIM_OC6_SetConfig+0xc4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_OC6_SetConfig+0x84>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <TIM_OC6_SetConfig+0xc8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_OC6_SetConfig+0x84>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <TIM_OC6_SetConfig+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_OC6_SetConfig+0x84>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <TIM_OC6_SetConfig+0xd0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_OC6_SetConfig+0x84>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <TIM_OC6_SetConfig+0xd4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d109      	bne.n	80043c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40013400 	.word	0x40013400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	40015000 	.word	0x40015000

08004408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2201      	movs	r2, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1a      	ldr	r2, [r3, #32]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	43db      	mvns	r3, r3
 800442a:	401a      	ands	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e06d      	b.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a30      	ldr	r2, [pc, #192]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2f      	ldr	r2, [pc, #188]	@ (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d018      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a15      	ldr	r2, [pc, #84]	@ (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a11      	ldr	r2, [pc, #68]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10c      	bne.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40015000 	.word	0x40015000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40014000 	.word	0x40014000

0800456c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004584:	2302      	movs	r3, #2
 8004586:	e06a      	b.n	800465e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a19      	ldr	r2, [pc, #100]	@ (800466c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a17      	ldr	r2, [pc, #92]	@ (8004670 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a16      	ldr	r2, [pc, #88]	@ (8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d115      	bne.n	800464c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40013400 	.word	0x40013400
 8004674:	40015000 	.word	0x40015000

08004678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e040      	b.n	8004748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fd7c 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb76 	bl	8004de4 <UART_SetConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e022      	b.n	8004748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fd3e 	bl	800518c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800471e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800472e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fdc5 	bl	80052d0 <UART_CheckIdleState>
 8004746:	4603      	mov	r3, r0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	@ 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004764:	2b20      	cmp	r3, #32
 8004766:	d132      	bne.n	80047ce <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Receive_IT+0x24>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e02b      	b.n	80047d0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d018      	beq.n	80047be <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	613b      	str	r3, [r7, #16]
   return(result);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fe93 	bl	80054f0 <UART_Start_Receive_IT>
 80047ca:	4603      	mov	r3, r0
 80047cc:	e000      	b.n	80047d0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	@ 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b0ba      	sub	sp, #232	@ 0xe8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004802:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004806:	4013      	ands	r3, r2
 8004808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800480c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d115      	bne.n	8004840 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00f      	beq.n	8004840 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 82ab 	beq.w	8004d8c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
      }
      return;
 800483e:	e2a5      	b.n	8004d8c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8117 	beq.w	8004a78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800484a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800485a:	4b85      	ldr	r3, [pc, #532]	@ (8004a70 <HAL_UART_IRQHandler+0x298>)
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 810a 	beq.w	8004a78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d011      	beq.n	8004894 <HAL_UART_IRQHandler+0xbc>
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d011      	beq.n	80048c4 <HAL_UART_IRQHandler+0xec>
 80048a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2202      	movs	r2, #2
 80048b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d011      	beq.n	80048f4 <HAL_UART_IRQHandler+0x11c>
 80048d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2204      	movs	r2, #4
 80048e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800490c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004910:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2208      	movs	r2, #8
 800491e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004926:	f043 0208 	orr.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <HAL_UART_IRQHandler+0x18a>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8211 	beq.w	8004d90 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800497a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049aa:	2b40      	cmp	r3, #64	@ 0x40
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04f      	beq.n	8004a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fe5e 	bl	800567c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	d141      	bne.n	8004a52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1d9      	bne.n	80049ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d013      	beq.n	8004a4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a26:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <HAL_UART_IRQHandler+0x29c>)
 8004a28:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fe52 	bl	80016d8 <HAL_DMA_Abort_IT>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a44:	4610      	mov	r0, r2
 8004a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	e00f      	b.n	8004a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9b4 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00b      	b.n	8004a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9b0 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e007      	b.n	8004a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9ac 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a68:	e192      	b.n	8004d90 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6a:	bf00      	nop
    return;
 8004a6c:	e190      	b.n	8004d90 <HAL_UART_IRQHandler+0x5b8>
 8004a6e:	bf00      	nop
 8004a70:	04000120 	.word	0x04000120
 8004a74:	08005745 	.word	0x08005745

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	f040 814b 	bne.w	8004d18 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8144 	beq.w	8004d18 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 813d 	beq.w	8004d18 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab0:	2b40      	cmp	r3, #64	@ 0x40
 8004ab2:	f040 80b5 	bne.w	8004c20 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8164 	beq.w	8004d94 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	f080 815c 	bcs.w	8004d94 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f000 8086 	beq.w	8004bfe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b20:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1da      	bne.n	8004af2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b60:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e1      	bne.n	8004b3c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ba2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e3      	bne.n	8004b78 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004be2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004be6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e4      	bne.n	8004bbe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fc fd34 	bl	8001666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8d7 	bl	8004dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c1e:	e0b9      	b.n	8004d94 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80ab 	beq.w	8004d98 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80a6 	beq.w	8004d98 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c70:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e4      	bne.n	8004c4c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3308      	adds	r3, #8
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	623b      	str	r3, [r7, #32]
   return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ca6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e3      	bne.n	8004c82 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0310 	bic.w	r3, r3, #16
 8004ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e4      	bne.n	8004cce <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f85b 	bl	8004dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d16:	e03f      	b.n	8004d98 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_UART_IRQHandler+0x56a>
 8004d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 feea 	bl	8005b14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d40:	e02d      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00e      	beq.n	8004d6c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01c      	beq.n	8004d9c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
    }
    return;
 8004d6a:	e017      	b.n	8004d9c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d012      	beq.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fcf3 	bl	8005770 <UART_EndTransmit_IT>
    return;
 8004d8a:	e008      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d8c:	bf00      	nop
 8004d8e:	e006      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d90:	bf00      	nop
 8004d92:	e004      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d94:	bf00      	nop
 8004d96:	e002      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d9c:	bf00      	nop
  }

}
 8004d9e:	37e8      	adds	r7, #232	@ 0xe8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b92      	ldr	r3, [pc, #584]	@ (8005058 <UART_SetConfig+0x274>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a80      	ldr	r2, [pc, #512]	@ (800505c <UART_SetConfig+0x278>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d120      	bne.n	8004ea2 <UART_SetConfig+0xbe>
 8004e60:	4b7f      	ldr	r3, [pc, #508]	@ (8005060 <UART_SetConfig+0x27c>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d817      	bhi.n	8004e9c <UART_SetConfig+0xb8>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0x90>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e91 	.word	0x08004e91
 8004e7c:	08004e97 	.word	0x08004e97
 8004e80:	08004e8b 	.word	0x08004e8b
 8004e84:	2301      	movs	r3, #1
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e0b5      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e0b2      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004e90:	2304      	movs	r3, #4
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e0af      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004e96:	2308      	movs	r3, #8
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e0ac      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e0a9      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8005064 <UART_SetConfig+0x280>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d124      	bne.n	8004ef6 <UART_SetConfig+0x112>
 8004eac:	4b6c      	ldr	r3, [pc, #432]	@ (8005060 <UART_SetConfig+0x27c>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eb8:	d011      	beq.n	8004ede <UART_SetConfig+0xfa>
 8004eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ebe:	d817      	bhi.n	8004ef0 <UART_SetConfig+0x10c>
 8004ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ec4:	d011      	beq.n	8004eea <UART_SetConfig+0x106>
 8004ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eca:	d811      	bhi.n	8004ef0 <UART_SetConfig+0x10c>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <UART_SetConfig+0xf4>
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed4:	d006      	beq.n	8004ee4 <UART_SetConfig+0x100>
 8004ed6:	e00b      	b.n	8004ef0 <UART_SetConfig+0x10c>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e08b      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e088      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e085      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004eea:	2308      	movs	r3, #8
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e082      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e07f      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5b      	ldr	r2, [pc, #364]	@ (8005068 <UART_SetConfig+0x284>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d124      	bne.n	8004f4a <UART_SetConfig+0x166>
 8004f00:	4b57      	ldr	r3, [pc, #348]	@ (8005060 <UART_SetConfig+0x27c>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f0c:	d011      	beq.n	8004f32 <UART_SetConfig+0x14e>
 8004f0e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f12:	d817      	bhi.n	8004f44 <UART_SetConfig+0x160>
 8004f14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f18:	d011      	beq.n	8004f3e <UART_SetConfig+0x15a>
 8004f1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f1e:	d811      	bhi.n	8004f44 <UART_SetConfig+0x160>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <UART_SetConfig+0x148>
 8004f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f28:	d006      	beq.n	8004f38 <UART_SetConfig+0x154>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x160>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e061      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e05e      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e05b      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e058      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e055      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a47      	ldr	r2, [pc, #284]	@ (800506c <UART_SetConfig+0x288>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d124      	bne.n	8004f9e <UART_SetConfig+0x1ba>
 8004f54:	4b42      	ldr	r3, [pc, #264]	@ (8005060 <UART_SetConfig+0x27c>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f60:	d011      	beq.n	8004f86 <UART_SetConfig+0x1a2>
 8004f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f66:	d817      	bhi.n	8004f98 <UART_SetConfig+0x1b4>
 8004f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f6c:	d011      	beq.n	8004f92 <UART_SetConfig+0x1ae>
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f72:	d811      	bhi.n	8004f98 <UART_SetConfig+0x1b4>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <UART_SetConfig+0x19c>
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7c:	d006      	beq.n	8004f8c <UART_SetConfig+0x1a8>
 8004f7e:	e00b      	b.n	8004f98 <UART_SetConfig+0x1b4>
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e037      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e034      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e031      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e02e      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e02b      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a33      	ldr	r2, [pc, #204]	@ (8005070 <UART_SetConfig+0x28c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d124      	bne.n	8004ff2 <UART_SetConfig+0x20e>
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8005060 <UART_SetConfig+0x27c>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004fb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fb4:	d011      	beq.n	8004fda <UART_SetConfig+0x1f6>
 8004fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0x208>
 8004fbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fc0:	d011      	beq.n	8004fe6 <UART_SetConfig+0x202>
 8004fc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fc6:	d811      	bhi.n	8004fec <UART_SetConfig+0x208>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x1f0>
 8004fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x1fc>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x208>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e00d      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e00a      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e007      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e004      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e001      	b.n	8004ff6 <UART_SetConfig+0x212>
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffe:	d16b      	bne.n	80050d8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005000:	7ffb      	ldrb	r3, [r7, #31]
 8005002:	2b08      	cmp	r3, #8
 8005004:	d838      	bhi.n	8005078 <UART_SetConfig+0x294>
 8005006:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <UART_SetConfig+0x228>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	08005079 	.word	0x08005079
 800501c:	08005047 	.word	0x08005047
 8005020:	08005079 	.word	0x08005079
 8005024:	08005079 	.word	0x08005079
 8005028:	08005079 	.word	0x08005079
 800502c:	0800504f 	.word	0x0800504f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fd ffaa 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8005034:	61b8      	str	r0, [r7, #24]
        break;
 8005036:	e024      	b.n	8005082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005038:	f7fd ffc8 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e020      	b.n	8005082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <UART_SetConfig+0x290>)
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e01d      	b.n	8005082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005046:	f7fd ff29 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800504a:	61b8      	str	r0, [r7, #24]
        break;
 800504c:	e019      	b.n	8005082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005052:	61bb      	str	r3, [r7, #24]
        break;
 8005054:	e015      	b.n	8005082 <UART_SetConfig+0x29e>
 8005056:	bf00      	nop
 8005058:	efff69f3 	.word	0xefff69f3
 800505c:	40013800 	.word	0x40013800
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	40004800 	.word	0x40004800
 800506c:	40004c00 	.word	0x40004c00
 8005070:	40005000 	.word	0x40005000
 8005074:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77bb      	strb	r3, [r7, #30]
        break;
 8005080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d073      	beq.n	8005170 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	005a      	lsls	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	441a      	add	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b0f      	cmp	r3, #15
 80050a2:	d916      	bls.n	80050d2 <UART_SetConfig+0x2ee>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050aa:	d212      	bcs.n	80050d2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f023 030f 	bic.w	r3, r3, #15
 80050b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	89fa      	ldrh	r2, [r7, #14]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e04e      	b.n	8005170 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	77bb      	strb	r3, [r7, #30]
 80050d6:	e04b      	b.n	8005170 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050d8:	7ffb      	ldrb	r3, [r7, #31]
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d827      	bhi.n	800512e <UART_SetConfig+0x34a>
 80050de:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <UART_SetConfig+0x300>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fd ff3e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e013      	b.n	8005138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fd ff5c 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <UART_SetConfig+0x3a4>)
 800511a:	61bb      	str	r3, [r7, #24]
        break;
 800511c:	e00c      	b.n	8005138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fd febd 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8005122:	61b8      	str	r0, [r7, #24]
        break;
 8005124:	e008      	b.n	8005138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512a:	61bb      	str	r3, [r7, #24]
        break;
 800512c:	e004      	b.n	8005138 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77bb      	strb	r3, [r7, #30]
        break;
 8005136:	bf00      	nop
    }

    if (pclk != 0U)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085a      	lsrs	r2, r3, #1
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d909      	bls.n	800516c <UART_SetConfig+0x388>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515e:	d205      	bcs.n	800516c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e001      	b.n	8005170 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800517c:	7fbb      	ldrb	r3, [r7, #30]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	007a1200 	.word	0x007a1200

0800518c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528a:	d10a      	bne.n	80052a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b098      	sub	sp, #96	@ 0x60
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e0:	f7fc f880 	bl	80013e4 <HAL_GetTick>
 80052e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d12e      	bne.n	8005352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f88c 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d021      	beq.n	8005352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005322:	653b      	str	r3, [r7, #80]	@ 0x50
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e062      	b.n	8005418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d149      	bne.n	80053f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005368:	2200      	movs	r2, #0
 800536a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f856 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03c      	beq.n	80053f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	623b      	str	r3, [r7, #32]
   return(result);
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
 800539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e011      	b.n	8005418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3758      	adds	r7, #88	@ 0x58
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	e049      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d045      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fb ffd3 	bl	80013e4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <UART_WaitOnFlagUntilTimeout+0x30>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e048      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d031      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d110      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2208      	movs	r2, #8
 8005476:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f8ff 	bl	800567c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2208      	movs	r2, #8
 8005482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e029      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a0:	d111      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f8e5 	bl	800567c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e00f      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d0a6      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b097      	sub	sp, #92	@ 0x5c
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005522:	d10e      	bne.n	8005542 <UART_Start_Receive_IT+0x52>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <UART_Start_Receive_IT+0x48>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005532:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005536:	e02d      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005540:	e028      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <UART_Start_Receive_IT+0x76>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <UART_Start_Receive_IT+0x6c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	22ff      	movs	r2, #255	@ 0xff
 8005556:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800555a:	e01b      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	227f      	movs	r2, #127	@ 0x7f
 8005560:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005564:	e016      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800556e:	d10d      	bne.n	800558c <UART_Start_Receive_IT+0x9c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <UART_Start_Receive_IT+0x92>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	227f      	movs	r2, #127	@ 0x7f
 800557c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005580:	e008      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	223f      	movs	r2, #63	@ 0x3f
 8005586:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800558a:	e003      	b.n	8005594 <UART_Start_Receive_IT+0xa4>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2222      	movs	r2, #34	@ 0x22
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80055c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80055d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e0:	d107      	bne.n	80055f2 <UART_Start_Receive_IT+0x102>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a21      	ldr	r2, [pc, #132]	@ (8005674 <UART_Start_Receive_IT+0x184>)
 80055ee:	669a      	str	r2, [r3, #104]	@ 0x68
 80055f0:	e002      	b.n	80055f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a20      	ldr	r2, [pc, #128]	@ (8005678 <UART_Start_Receive_IT+0x188>)
 80055f6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d019      	beq.n	8005634 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005620:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e6      	bne.n	8005600 <UART_Start_Receive_IT+0x110>
 8005632:	e018      	b.n	8005666 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	613b      	str	r3, [r7, #16]
   return(result);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	653b      	str	r3, [r7, #80]	@ 0x50
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	69f9      	ldr	r1, [r7, #28]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e6      	bne.n	8005634 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	375c      	adds	r7, #92	@ 0x5c
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	0800596d 	.word	0x0800596d
 8005678:	080057c5 	.word	0x080057c5

0800567c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b095      	sub	sp, #84	@ 0x54
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e6      	bne.n	8005684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d118      	bne.n	8005724 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005738:	bf00      	nop
 800573a:	3754      	adds	r7, #84	@ 0x54
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fb28 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	60bb      	str	r3, [r7, #8]
   return(result);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	613b      	str	r3, [r7, #16]
   return(result);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e6      	bne.n	8005778 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff faf4 	bl	8004da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057bc:	bf00      	nop
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b09c      	sub	sp, #112	@ 0x70
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057dc:	2b22      	cmp	r3, #34	@ 0x22
 80057de:	f040 80b9 	bne.w	8005954 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80057e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057f0:	b2d9      	uxtb	r1, r3
 80057f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fc:	400a      	ands	r2, r1
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 809c 	bne.w	8005964 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800583a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800583c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800584a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e6      	bne.n	800582c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	667b      	str	r3, [r7, #100]	@ 0x64
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3308      	adds	r3, #8
 800587c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800587e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005884:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800588c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d018      	beq.n	80058e6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	623b      	str	r3, [r7, #32]
   return(result);
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e6      	bne.n	80058b4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d12e      	bne.n	800594c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60fb      	str	r3, [r7, #12]
   return(result);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	617b      	str	r3, [r7, #20]
   return(result);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d103      	bne.n	800593c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fa41 	bl	8004dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800594a:	e00b      	b.n	8005964 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fa fe93 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 8005952:	e007      	b.n	8005964 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	619a      	str	r2, [r3, #24]
}
 8005964:	bf00      	nop
 8005966:	3770      	adds	r7, #112	@ 0x70
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b09c      	sub	sp, #112	@ 0x70
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800597a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005984:	2b22      	cmp	r3, #34	@ 0x22
 8005986:	f040 80b9 	bne.w	8005afc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005990:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005998:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800599a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800599e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059a2:	4013      	ands	r3, r2
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 809c 	bne.w	8005b0c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80059e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d018      	beq.n	8005a8e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e6      	bne.n	8005a5c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d12e      	bne.n	8005af4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d103      	bne.n	8005ae4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff f96d 	bl	8004dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005af2:	e00b      	b.n	8005b0c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fa fdbf 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 8005afa:	e007      	b.n	8005b0c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	619a      	str	r2, [r3, #24]
}
 8005b0c:	bf00      	nop
 8005b0e:	3770      	adds	r7, #112	@ 0x70
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	@ (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f000 f818 	bl	8005b80 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08005bd0 	.word	0x08005bd0
 8005b74:	08005bd0 	.word	0x08005bd0
 8005b78:	08005bd0 	.word	0x08005bd0
 8005b7c:	08005bd4 	.word	0x08005bd4

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
