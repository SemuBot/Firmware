
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e44  08004e44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e44  08004e44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e44  08004e44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010018  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002487  00000000  00000000  00030097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d68  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a77  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc08  00000000  00000000  00033cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000124c3  00000000  00000000  00053907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6825  00000000  00000000  00065dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000371c  00000000  00000000  0012c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0012fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004df4 	.word	0x08004df4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004df4 	.word	0x08004df4

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b39      	ldr	r3, [pc, #228]	; (80002d0 <MX_GPIO_Init+0xfc>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a38      	ldr	r2, [pc, #224]	; (80002d0 <MX_GPIO_Init+0xfc>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b36      	ldr	r3, [pc, #216]	; (80002d0 <MX_GPIO_Init+0xfc>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b30      	ldr	r3, [pc, #192]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <MX_GPIO_Init+0xfc>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a26      	ldr	r2, [pc, #152]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_GPIO_Init+0xfc>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	210c      	movs	r1, #12
 800024e:	4821      	ldr	r0, [pc, #132]	; (80002d4 <MX_GPIO_Init+0x100>)
 8000250:	f001 f800 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2120      	movs	r1, #32
 8000258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025c:	f000 fffa 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000266:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4619      	mov	r1, r3
 8000276:	4817      	ldr	r0, [pc, #92]	; (80002d4 <MX_GPIO_Init+0x100>)
 8000278:	f000 fe62 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 800027c:	230c      	movs	r3, #12
 800027e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	2301      	movs	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	4619      	mov	r1, r3
 8000292:	4810      	ldr	r0, [pc, #64]	; (80002d4 <MX_GPIO_Init+0x100>)
 8000294:	f000 fe54 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000298:	2320      	movs	r3, #32
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4619      	mov	r1, r3
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f000 fe45 	bl	8000f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	2028      	movs	r0, #40	; 0x28
 80002bc:	f000 fd93 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f000 fdac 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	48000800 	.word	0x48000800

080002d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d104      	bne.n	80002f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002ea:	2120      	movs	r1, #32
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f000 ffc8 	bl	8001284 <HAL_GPIO_TogglePin>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40000400 	.word	0x40000400

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000304:	f000 fc0a 	bl	8000b1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f82a 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030c:	f7ff ff62 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000310:	f000 fb26 	bl	8000960 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000314:	f000 faf4 	bl	8000900 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000318:	f000 f9f0 	bl	80006fc <MX_TIM3_Init>
  MX_TIM1_Init();
 800031c:	f000 f95e 	bl	80005dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <main+0x54>)
 8000328:	f000 ff94 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800032c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000330:	f000 f87c 	bl	800042c <HAL_GPIO_EXTI_Callback>

  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim3);
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <main+0x58>)
 8000336:	f002 fc7f 	bl	8002c38 <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2); // Set DIR high for one direction
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3); // Set EN high to enable the driver
  //TIM1->CCR1 = 0;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 800033a:	2100      	movs	r1, #0
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <main+0x5c>)
 800033e:	f002 fd43 	bl	8002dc8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN, GPIO_PIN_RESET); // Set DIR high for one direction
 8000342:	2200      	movs	r2, #0
 8000344:	2104      	movs	r1, #4
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <main+0x54>)
 8000348:	f000 ff84 	bl	8001254 <HAL_GPIO_WritePin>

  moveMotor();
 800034c:	f000 f886 	bl	800045c <moveMotor>
  //HAL_TIM_Base_Start_IT(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	e7fe      	b.n	8000350 <main+0x50>
 8000352:	bf00      	nop
 8000354:	48000800 	.word	0x48000800
 8000358:	20000074 	.word	0x20000074
 800035c:	20000028 	.word	0x20000028

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b0a6      	sub	sp, #152	; 0x98
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f004 fd13 	bl	8004d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2258      	movs	r2, #88	; 0x58
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 fd05 	bl	8004d9a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	2302      	movs	r3, #2
 8000392:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	2301      	movs	r3, #1
 8000396:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000398:	2310      	movs	r3, #16
 800039a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 ff92 	bl	80012e8 <HAL_RCC_OscConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f867 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	230f      	movs	r3, #15
 80003d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d2:	2302      	movs	r3, #2
 80003d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e8:	2102      	movs	r1, #2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 ffd0 	bl	8002390 <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003f6:	f000 f851 	bl	800049c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <SystemClock_Config+0xc8>)
 80003fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000406:	2300      	movs	r3, #0
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800040a:	2300      	movs	r3, #0
 800040c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4618      	mov	r0, r3
 8000412:	f002 f9f3 	bl	80027fc <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800041c:	f000 f83e 	bl	800049c <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3798      	adds	r7, #152	; 0x98
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	00201003 	.word	0x00201003

0800042c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043c:	d108      	bne.n	8000450 <HAL_GPIO_EXTI_Callback+0x24>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800043e:	2120      	movs	r1, #32
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 ff1e 	bl	8001284 <HAL_GPIO_TogglePin>

    // Change motor direction
    HAL_GPIO_TogglePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN); // Toggle direction pin
 8000448:	2104      	movs	r1, #4
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <HAL_GPIO_EXTI_Callback+0x2c>)
 800044c:	f000 ff1a 	bl	8001284 <HAL_GPIO_TogglePin>
  }
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	48000800 	.word	0x48000800

0800045c <moveMotor>:


void moveMotor(void){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  // Set motor direction and enable it
  //HAL_GPIO_WritePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN, GPIO_PIN_RESET); // Set DIR high for one direction
  HAL_GPIO_WritePin(MOTOR1_EN_PORT, MOTOR1_EN_PIN, GPIO_PIN_RESET); // Set EN high to enable the driver
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <moveMotor+0x38>)
 8000466:	f000 fef5 	bl	8001254 <HAL_GPIO_WritePin>
  // Set PWM duty cycle to start the motor movement
  TIM1->CCR1 = 40; // Adjust duty cycle as necessary
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <moveMotor+0x3c>)
 800046c:	2228      	movs	r2, #40	; 0x28
 800046e:	635a      	str	r2, [r3, #52]	; 0x34

  // Wait for the specified duration
  HAL_Delay(MOVE_DURATION);
 8000470:	200a      	movs	r0, #10
 8000472:	f000 fbb9 	bl	8000be8 <HAL_Delay>

  // Stop the motor
  TIM1->CCR1 = 0;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <moveMotor+0x3c>)
 8000478:	2200      	movs	r2, #0
 800047a:	635a      	str	r2, [r3, #52]	; 0x34

  // Wait for a moment
  HAL_Delay(MOVE_DURATION);
 800047c:	200a      	movs	r0, #10
 800047e:	f000 fbb3 	bl	8000be8 <HAL_Delay>

  //HAL_GPIO_WritePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN, GPIO_PIN_RESET); // Change direction

  HAL_GPIO_WritePin(MOTOR1_EN_PORT, MOTOR1_EN_PIN, GPIO_PIN_SET); // Set EN high to enable the driver
 8000482:	2201      	movs	r2, #1
 8000484:	2108      	movs	r1, #8
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <moveMotor+0x38>)
 8000488:	f000 fee4 	bl	8001254 <HAL_GPIO_WritePin>

  // Move the motor again (you may need to adjust this loop for your specific application)
  moveMotor();
 800048c:	f7ff ffe6 	bl	800045c <moveMotor>

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	48000800 	.word	0x48000800
 8000498:	40012c00 	.word	0x40012c00

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004de:	2007      	movs	r0, #7
 80004e0:	f000 fc76 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 fb34 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800054a:	f002 fd49 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028

08000558 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800055e:	f002 fd3f 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <TIM3_IRQHandler+0x10>)
 8000572:	f002 fd35 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074

08000580 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <USART1_IRQHandler+0x10>)
 8000586:	f003 fccf 	bl	8003f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000c0 	.word	0x200000c0

08000594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <USART2_IRQHandler+0x10>)
 800059a:	f003 fcc5 	bl	8003f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000148 	.word	0x20000148

080005a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005b0:	f000 fe82 	bl	80012b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	222c      	movs	r2, #44	; 0x2c
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fbc6 	bl	8004d9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060e:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000610:	4a39      	ldr	r2, [pc, #228]	; (80006f8 <MX_TIM1_Init+0x11c>)
 8000612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000616:	f240 12df 	movw	r2, #479	; 0x1df
 800061a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <MX_TIM1_Init+0x118>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000624:	2263      	movs	r2, #99	; 0x63
 8000626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <MX_TIM1_Init+0x118>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000634:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800063a:	482e      	ldr	r0, [pc, #184]	; (80006f4 <MX_TIM1_Init+0x118>)
 800063c:	f002 fb6c 	bl	8002d18 <HAL_TIM_PWM_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f7ff ff29 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065a:	4619      	mov	r1, r3
 800065c:	4825      	ldr	r0, [pc, #148]	; (80006f4 <MX_TIM1_Init+0x118>)
 800065e:	f003 fae5 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000668:	f7ff ff18 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066c:	2360      	movs	r3, #96	; 0x60
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	4818      	ldr	r0, [pc, #96]	; (80006f4 <MX_TIM1_Init+0x118>)
 8000692:	f002 fdc5 	bl	8003220 <HAL_TIM_PWM_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800069c:	f7ff fefe 	bl	800049c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <MX_TIM1_Init+0x118>)
 80006d6:	f003 fb35 	bl	8003d44 <HAL_TIMEx_ConfigBreakDeadTime>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80006e0:	f7ff fedc 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <MX_TIM1_Init+0x118>)
 80006e6:	f000 f8af 	bl	8000848 <HAL_TIM_MspPostInit>

}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40012c00 	.word	0x40012c00

080006fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000722:	4a23      	ldr	r2, [pc, #140]	; (80007b0 <MX_TIM3_Init+0xb4>)
 8000724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000728:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800072c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3569;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000736:	f640 52f1 	movw	r2, #3569	; 0xdf1
 800073a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM3_Init+0xb0>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <MX_TIM3_Init+0xb0>)
 800074a:	f002 fae5 	bl	8002d18 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000754:	f7ff fea2 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <MX_TIM3_Init+0xb0>)
 8000768:	f003 fa60 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000772:	f7ff fe93 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM3_Init+0xb0>)
 800078e:	f002 fd47 	bl	8003220 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000798:	f7ff fe80 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM3_Init+0xb0>)
 800079e:	f000 f853 	bl	8000848 <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000074 	.word	0x20000074
 80007b0:	40000400 	.word	0x40000400

080007b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <HAL_TIM_PWM_MspInit+0x88>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d11c      	bne.n	8000800 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 80007cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2018      	movs	r0, #24
 80007e4:	f000 faff 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80007e8:	2018      	movs	r0, #24
 80007ea:	f000 fb18 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2019      	movs	r0, #25
 80007f4:	f000 faf7 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007f8:	2019      	movs	r0, #25
 80007fa:	f000 fb10 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007fe:	e018      	b.n	8000832 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_TIM_PWM_MspInit+0x90>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d113      	bne.n	8000832 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_PWM_MspInit+0x8c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	201d      	movs	r0, #29
 8000828:	f000 fadd 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800082c:	201d      	movs	r0, #29
 800082e:	f000 faf6 	bl	8000e1e <HAL_NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40012c00 	.word	0x40012c00
 8000840:	40021000 	.word	0x40021000
 8000844:	40000400 	.word	0x40000400

08000848 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <HAL_TIM_MspPostInit+0xa8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d11c      	bne.n	80008a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 8000870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000892:	2302      	movs	r3, #2
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <HAL_TIM_MspPostInit+0xb0>)
 800089e:	f000 fb4f 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008a2:	e021      	b.n	80008e8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_TIM_MspPostInit+0xb4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d11c      	bne.n	80008e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_TIM_MspPostInit+0xac>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008d6:	2302      	movs	r3, #2
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fb2c 	bl	8000f40 <HAL_GPIO_Init>
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000800 	.word	0x48000800
 80008fc:	40000400 	.word	0x40000400

08000900 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	f003 faa2 	bl	8003e8c <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f7ff fda5 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000c0 	.word	0x200000c0
 800095c:	40013800 	.word	0x40013800

08000960 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART2_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800096c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 80009a4:	f003 fa72 	bl	8003e8c <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f7ff fd75 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000148 	.word	0x20000148
 80009bc:	40004400 	.word	0x40004400

080009c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <HAL_UART_MspInit+0xf8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d130      	bne.n	8000a44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <HAL_UART_MspInit+0xfc>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <HAL_UART_MspInit+0xfc>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <HAL_UART_MspInit+0xfc>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <HAL_UART_MspInit+0xfc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a04:	6153      	str	r3, [r2, #20]
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a12:	2330      	movs	r3, #48	; 0x30
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a22:	2307      	movs	r3, #7
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <HAL_UART_MspInit+0x100>)
 8000a2e:	f000 fa87 	bl	8000f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2025      	movs	r0, #37	; 0x25
 8000a38:	f000 f9d5 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a3c:	2025      	movs	r0, #37	; 0x25
 8000a3e:	f000 f9ee 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a42:	e035      	b.n	8000ab0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_UART_MspInit+0x104>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d130      	bne.n	8000ab0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0xfc>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fa50 	bl	8000f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2026      	movs	r0, #38	; 0x26
 8000aa6:	f000 f99e 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aaa:	2026      	movs	r0, #38	; 0x26
 8000aac:	f000 f9b7 	bl	8000e1e <HAL_NVIC_EnableIRQ>
}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff fd74 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 f959 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fc01 	bl	8000300 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b0c:	08004e4c 	.word	0x08004e4c
  ldr r2, =_sbss
 8000b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b14:	200001d4 	.word	0x200001d4

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f94f 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fcb6 	bl	80004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f967 	bl	8000e3a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f92f 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200001d0 	.word	0x200001d0

08000bd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200001d0 	.word	0x200001d0

08000be8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d008      	beq.n	8000e76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e020      	b.n	8000eb8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 020e 	bic.w	r2, r2, #14
 8000e84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d005      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2204      	movs	r2, #4
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e027      	b.n	8000f36 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 020e 	bic.w	r2, r2, #14
 8000ef4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4798      	blx	r3
    } 
  }
  return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e160      	b.n	8001212 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8152 	beq.w	800120c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0203 	and.w	r2, r3, #3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80ac 	beq.w	800120c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a5d      	ldr	r2, [pc, #372]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010cc:	4a59      	ldr	r2, [pc, #356]	; (8001234 <HAL_GPIO_Init+0x2f4>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f6:	d025      	beq.n	8001144 <HAL_GPIO_Init+0x204>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <HAL_GPIO_Init+0x2f8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d01f      	beq.n	8001140 <HAL_GPIO_Init+0x200>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_GPIO_Init+0x2fc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d019      	beq.n	800113c <HAL_GPIO_Init+0x1fc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <HAL_GPIO_Init+0x300>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1f8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x304>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1f4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4b      	ldr	r2, [pc, #300]	; (8001248 <HAL_GPIO_Init+0x308>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1f0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <HAL_GPIO_Init+0x30c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1ec>
 8001128:	2306      	movs	r3, #6
 800112a:	e00c      	b.n	8001146 <HAL_GPIO_Init+0x206>
 800112c:	2307      	movs	r3, #7
 800112e:	e00a      	b.n	8001146 <HAL_GPIO_Init+0x206>
 8001130:	2305      	movs	r3, #5
 8001132:	e008      	b.n	8001146 <HAL_GPIO_Init+0x206>
 8001134:	2304      	movs	r3, #4
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x206>
 8001138:	2303      	movs	r3, #3
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x206>
 800113c:	2302      	movs	r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x206>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x206>
 8001144:	2300      	movs	r3, #0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2f4>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_GPIO_Init+0x310>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001188:	4a31      	ldr	r2, [pc, #196]	; (8001250 <HAL_GPIO_Init+0x310>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x310>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x310>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_GPIO_Init+0x310>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_GPIO_Init+0x310>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x310>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_GPIO_Init+0x310>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f ae97 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	48001000 	.word	0x48001000
 8001248:	48001400 	.word	0x48001400
 800124c:	48001800 	.word	0x48001800
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001270:	e002      	b.n	8001278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43d9      	mvns	r1, r3
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	400b      	ands	r3, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f8a8 	bl	800042c <HAL_GPIO_EXTI_Callback>
  }
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f001 b83a 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001312:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 816f 	beq.w	8001602 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001324:	4bb5      	ldr	r3, [pc, #724]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001330:	4bb2      	ldr	r3, [pc, #712]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d15c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x10e>
 800133c:	4baf      	ldr	r3, [pc, #700]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d155      	bne.n	80013f6 <HAL_RCC_OscConfig+0x10e>
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800135e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0x94>
 8001376:	4ba1      	ldr	r3, [pc, #644]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	e015      	b.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 800137c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001380:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001398:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013a4:	4b95      	ldr	r3, [pc, #596]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ac:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013b0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013b4:	fa92 f2a2 	rbit	r2, r2
 80013b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80013bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013c0:	fab2 f282 	clz	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f002 021f 	and.w	r2, r2, #31
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8111 	beq.w	8001600 <HAL_RCC_OscConfig+0x318>
 80013de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8108 	bne.w	8001600 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f000 bfc6 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x12e>
 8001408:	4b7c      	ldr	r3, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a7b      	ldr	r2, [pc, #492]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e036      	b.n	8001484 <HAL_RCC_OscConfig+0x19c>
 8001416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x158>
 8001426:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a74      	ldr	r2, [pc, #464]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a71      	ldr	r2, [pc, #452]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e021      	b.n	8001484 <HAL_RCC_OscConfig+0x19c>
 8001440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001444:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x184>
 8001452:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a66      	ldr	r2, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x19c>
 800146c:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a62      	ldr	r2, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b60      	ldr	r3, [pc, #384]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a5f      	ldr	r2, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001488:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d059      	beq.n	8001548 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fb9c 	bl	8000bd0 <HAL_GetTick>
 8001498:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff fb97 	bl	8000bd0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d902      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f000 bf67 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 80014b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80014c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1fe>
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x22a>
 80014e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001502:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001516:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800151a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001526:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ab      	beq.n	800149e <HAL_RCC_OscConfig+0x1b6>
 8001546:	e05c      	b.n	8001602 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb42 	bl	8000bd0 <HAL_GetTick>
 800154c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fb3d 	bl	8000bd0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d902      	bls.n	8001568 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	f000 bf0d 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 8001568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800157c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x2b2>
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x2de>
 800159a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x314>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80015da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ab      	bne.n	8001552 <HAL_RCC_OscConfig+0x26a>
 80015fa:	e002      	b.n	8001602 <HAL_RCC_OscConfig+0x31a>
 80015fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 817f 	beq.w	8001916 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001618:	4ba7      	ldr	r3, [pc, #668]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001624:	4ba4      	ldr	r3, [pc, #656]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d173      	bne.n	8001718 <HAL_RCC_OscConfig+0x430>
 8001630:	4ba1      	ldr	r3, [pc, #644]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163c:	d16c      	bne.n	8001718 <HAL_RCC_OscConfig+0x430>
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001650:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <HAL_RCC_OscConfig+0x386>
 8001668:	4b93      	ldr	r3, [pc, #588]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	e013      	b.n	8001696 <HAL_RCC_OscConfig+0x3ae>
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001686:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2202      	movs	r2, #2
 8001698:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800169c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016a0:	fa92 f2a2 	rbit	r2, r2
 80016a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80016a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f002 021f 	and.w	r2, r2, #31
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00a      	beq.n	80016de <HAL_RCC_OscConfig+0x3f6>
 80016c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d002      	beq.n	80016de <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f000 be52 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	21f8      	movs	r1, #248	; 0xf8
 80016f4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80016fc:	fa91 f1a1 	rbit	r1, r1
 8001700:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001704:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001708:	fab1 f181 	clz	r1, r1
 800170c:	b2c9      	uxtb	r1, r1
 800170e:	408b      	lsls	r3, r1
 8001710:	4969      	ldr	r1, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e0fe      	b.n	8001916 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8088 	beq.w	800183a <HAL_RCC_OscConfig+0x552>
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800173c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800174a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	461a      	mov	r2, r3
 8001752:	2301      	movs	r3, #1
 8001754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fa3b 	bl	8000bd0 <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fa36 	bl	8000bd0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d902      	bls.n	8001776 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	f000 be06 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001788:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4be>
 80017a0:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e013      	b.n	80017ce <HAL_RCC_OscConfig+0x4e6>
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2202      	movs	r2, #2
 80017d0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017d8:	fa92 f2a2 	rbit	r2, r2
 80017dc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80017e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0af      	beq.n	8001760 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	21f8      	movs	r1, #248	; 0xf8
 8001816:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800181e:	fa91 f1a1 	rbit	r1, r1
 8001822:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001826:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800182a:	fab1 f181 	clz	r1, r1
 800182e:	b2c9      	uxtb	r1, r1
 8001830:	408b      	lsls	r3, r1
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e06d      	b.n	8001916 <HAL_RCC_OscConfig+0x62e>
 800183a:	2301      	movs	r3, #1
 800183c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800184c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	461a      	mov	r2, r3
 8001862:	2300      	movs	r3, #0
 8001864:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f9b3 	bl	8000bd0 <HAL_GetTick>
 800186a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff f9ae 	bl	8000bd0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d902      	bls.n	8001886 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	f000 bd7e 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x5d4>
 80018b0:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <HAL_RCC_OscConfig+0x5d0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e016      	b.n	80018e4 <HAL_RCC_OscConfig+0x5fc>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018e0:	4bbf      	ldr	r3, [pc, #764]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	2202      	movs	r2, #2
 80018e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018ee:	fa92 f2a2 	rbit	r2, r2
 80018f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018fa:	fab2 f282 	clz	r2, r2
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ac      	bne.n	8001870 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8113 	beq.w	8001b52 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001930:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d07c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x74e>
 800193c:	2301      	movs	r3, #1
 800193e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800194e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	4ba2      	ldr	r3, [pc, #648]	; (8001be4 <HAL_RCC_OscConfig+0x8fc>)
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	461a      	mov	r2, r3
 8001962:	2301      	movs	r3, #1
 8001964:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff f933 	bl	8000bd0 <HAL_GetTick>
 800196a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff f92e 	bl	8000bd0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d902      	bls.n	8001986 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	f000 bcfe 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019a6:	2202      	movs	r2, #2
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019f2:	2102      	movs	r1, #2
 80019f4:	6019      	str	r1, [r3, #0]
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f1a3 	rbit	r1, r3
 8001a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a0c:	6019      	str	r1, [r3, #0]
  return result;
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d09d      	beq.n	8001970 <HAL_RCC_OscConfig+0x688>
 8001a34:	e08d      	b.n	8001b52 <HAL_RCC_OscConfig+0x86a>
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x8fc>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f8aa 	bl	8000bd0 <HAL_GetTick>
 8001a7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f8a5 	bl	8000bd0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f000 bc75 	b.w	8002382 <HAL_RCC_OscConfig+0x109a>
 8001a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 8001b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b10:	2102      	movs	r1, #2
 8001b12:	6019      	str	r1, [r3, #0]
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f1a3 	rbit	r1, r3
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b2a:	6019      	str	r1, [r3, #0]
  return result;
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d197      	bne.n	8001a82 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 81a5 	beq.w	8001eb2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_RCC_OscConfig+0x8f8>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCC_OscConfig+0x900>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d121      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_OscConfig+0x900>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x900>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f806 	bl	8000bd0 <HAL_GetTick>
 8001bc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e010      	b.n	8001bec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff f801 	bl	8000bd0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d908      	bls.n	8001bec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e3d1      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	10908120 	.word	0x10908120
 8001be8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <HAL_RCC_OscConfig+0xb3c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0e8      	beq.n	8001bca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x92e>
 8001c08:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a86      	ldr	r2, [pc, #536]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e035      	b.n	8001c82 <HAL_RCC_OscConfig+0x99a>
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x958>
 8001c26:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a7c      	ldr	r2, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e020      	b.n	8001c82 <HAL_RCC_OscConfig+0x99a>
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x982>
 8001c50:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a74      	ldr	r2, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x99a>
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a6b      	ldr	r2, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8081 	beq.w	8001d96 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7fe ff9c 	bl	8000bd0 <HAL_GetTick>
 8001c98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe ff97 	bl	8000bd0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e365      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cfc:	601a      	str	r2, [r3, #0]
  return result;
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0xa3a>
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	e013      	b.n	8001d4a <HAL_RCC_OscConfig+0xa62>
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d4e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d52:	2102      	movs	r1, #2
 8001d54:	6011      	str	r1, [r2, #0]
 8001d56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fa92 f1a2 	rbit	r1, r2
 8001d64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d68:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d6c:	6011      	str	r1, [r2, #0]
  return result;
 8001d6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d72:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d084      	beq.n	8001c9e <HAL_RCC_OscConfig+0x9b6>
 8001d94:	e083      	b.n	8001e9e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ff1b 	bl	8000bd0 <HAL_GetTick>
 8001d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe ff16 	bl	8000bd0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e2e4      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001de4:	2202      	movs	r2, #2
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0xb44>
 8001e1e:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_OscConfig+0xb40>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	e017      	b.n	8001e54 <HAL_RCC_OscConfig+0xb6c>
 8001e24:	40007000 	.word	0x40007000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	4bb3      	ldr	r3, [pc, #716]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	6011      	str	r1, [r2, #0]
 8001e60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	fa92 f1a2 	rbit	r1, r2
 8001e6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e72:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e76:	6011      	str	r1, [r2, #0]
  return result;
 8001e78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d180      	bne.n	8001da0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e9e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a9d      	ldr	r2, [pc, #628]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 825e 	beq.w	8002380 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b96      	ldr	r3, [pc, #600]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	f000 821f 	beq.w	8002310 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	f040 8170 	bne.w	80021c4 <HAL_RCC_OscConfig+0xedc>
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f12:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2300      	movs	r3, #0
 8001f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fe51 	bl	8000bd0 <HAL_GetTick>
 8001f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fe4c 	bl	8000bd0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e21c      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_OscConfig+0xcaa>
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_OscConfig+0xcfa>
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fee:	6011      	str	r1, [r2, #0]
 8001ff0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	fa92 f1a2 	rbit	r1, r2
 8001ffe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002002:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002006:	6011      	str	r1, [r2, #0]
  return result;
 8002008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f002 021f 	and.w	r2, r2, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d182      	bne.n	8001f34 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f023 020f 	bic.w	r2, r3, #15
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	4937      	ldr	r1, [pc, #220]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 8002044:	4313      	orrs	r3, r2
 8002046:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002054:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a19      	ldr	r1, [r3, #32]
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	430b      	orrs	r3, r1
 800206a:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800209e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fd8b 	bl	8000bd0 <HAL_GetTick>
 80020ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020be:	e009      	b.n	80020d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fd86 	bl	8000bd0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e156      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 80020d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002102:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0xe3c>
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <HAL_RCC_OscConfig+0xe38>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e02a      	b.n	8002174 <HAL_RCC_OscConfig+0xe8c>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800212c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCC_OscConfig+0x10a4>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002178:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800217c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002180:	6011      	str	r1, [r2, #0]
 8002182:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002186:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	fa92 f1a2 	rbit	r1, r2
 8002190:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002194:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002198:	6011      	str	r1, [r2, #0]
  return result;
 800219a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800219e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f43f af7f 	beq.w	80020c0 <HAL_RCC_OscConfig+0xdd8>
 80021c2:	e0dd      	b.n	8002380 <HAL_RCC_OscConfig+0x1098>
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021f2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fce1 	bl	8000bd0 <HAL_GetTick>
 800220e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fcdc 	bl	8000bd0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0ac      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002252:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002256:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0xf8a>
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_OscConfig+0x10a4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e027      	b.n	80022c2 <HAL_RCC_OscConfig+0xfda>
 8002272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002276:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800227a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x10a4>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ec:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0220 	orr.w	r2, r2, #32
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d182      	bne.n	8002214 <HAL_RCC_OscConfig+0xf2c>
 800230e:	e037      	b.n	8002380 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002314:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e02e      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x10a4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_RCC_OscConfig+0x10a4>)
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002334:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002338:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d117      	bne.n	800237c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800234c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002350:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002360:	429a      	cmp	r2, r3
 8002362:	d10b      	bne.n	800237c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b09e      	sub	sp, #120	; 0x78
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e162      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b90      	ldr	r3, [pc, #576]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b8d      	ldr	r3, [pc, #564]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	498b      	ldr	r1, [pc, #556]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e14a      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	497f      	ldr	r1, [pc, #508]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80dc 	beq.w	80025bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d13c      	bne.n	8002486 <HAL_RCC_ClockConfig+0xf6>
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d102      	bne.n	8002436 <HAL_RCC_ClockConfig+0xa6>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	e00f      	b.n	8002456 <HAL_RCC_ClockConfig+0xc6>
 8002436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	667b      	str	r3, [r7, #100]	; 0x64
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	663b      	str	r3, [r7, #96]	; 0x60
 800244a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800245a:	65ba      	str	r2, [r7, #88]	; 0x58
 800245c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800245e:	fa92 f2a2 	rbit	r2, r2
 8002462:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002466:	fab2 f282 	clz	r2, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f002 021f 	and.w	r2, r2, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d17b      	bne.n	800257a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0f3      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d13c      	bne.n	8002508 <HAL_RCC_ClockConfig+0x178>
 800248e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002492:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x128>
 80024b2:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	e00f      	b.n	80024d8 <HAL_RCC_ClockConfig+0x148>
 80024b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
 80024cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80024de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d13a      	bne.n	800257a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b2      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
 8002508:	2302      	movs	r3, #2
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_RCC_ClockConfig+0x1a0>
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e00d      	b.n	800254c <HAL_RCC_ClockConfig+0x1bc>
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2202      	movs	r2, #2
 800254e:	61ba      	str	r2, [r7, #24]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	fa92 f2a2 	rbit	r2, r2
 8002556:	617a      	str	r2, [r7, #20]
  return result;
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e079      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	491a      	ldr	r1, [pc, #104]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe fb20 	bl	8000bd0 <HAL_GetTick>
 8002590:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fb1c 	bl	8000bd0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e061      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_ClockConfig+0x260>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d214      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4906      	ldr	r1, [pc, #24]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_RCC_ClockConfig+0x25c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e040      	b.n	800266e <HAL_RCC_ClockConfig+0x2de>
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_ClockConfig+0x2e8>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	491a      	ldr	r1, [pc, #104]	; (8002678 <HAL_RCC_ClockConfig+0x2e8>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x2e8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4912      	ldr	r1, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x2e8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002632:	f000 f829 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002636:	4601      	mov	r1, r0
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_ClockConfig+0x2e8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002640:	22f0      	movs	r2, #240	; 0xf0
 8002642:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	fa92 f2a2 	rbit	r2, r2
 800264a:	60fa      	str	r2, [r7, #12]
  return result;
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	40d3      	lsrs	r3, r2
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x2ec>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	fa21 f303 	lsr.w	r3, r1, r3
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_RCC_ClockConfig+0x2f0>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_RCC_ClockConfig+0x2f4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fa6e 	bl	8000b48 <HAL_InitTick>
  
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3778      	adds	r7, #120	; 0x78
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	08004e0c 	.word	0x08004e0c
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x30>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x36>
 80026b6:	e03f      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ba:	623b      	str	r3, [r7, #32]
      break;
 80026bc:	e03f      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	607a      	str	r2, [r7, #4]
  return result;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	40d3      	lsrs	r3, r2
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	220f      	movs	r2, #15
 80026ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	fa92 f2a2 	rbit	r2, r2
 80026f4:	60fa      	str	r2, [r7, #12]
  return result;
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	40d3      	lsrs	r3, r2
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	fbb2 f2f3 	udiv	r2, r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	e007      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fbb2 f2f3 	udiv	r2, r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	623b      	str	r3, [r7, #32]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 800273a:	623b      	str	r3, [r7, #32]
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6a3b      	ldr	r3, [r7, #32]
}
 8002740:	4618      	mov	r0, r3
 8002742:	372c      	adds	r7, #44	; 0x2c
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	007a1200 	.word	0x007a1200
 8002754:	08004e24 	.word	0x08004e24
 8002758:	08004e34 	.word	0x08004e34

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_RCC_GetHCLKFreq+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800277a:	f7ff ffef 	bl	800275c <HAL_RCC_GetHCLKFreq>
 800277e:	4601      	mov	r1, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002788:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800278c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	603a      	str	r2, [r7, #0]
  return result;
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	40d3      	lsrs	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08004e1c 	.word	0x08004e1c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027be:	f7ff ffcd 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027c2:	4601      	mov	r1, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	fa92 f2a2 	rbit	r2, r2
 80027d8:	603a      	str	r2, [r7, #0]
  return result;
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	40d3      	lsrs	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004e1c 	.word	0x08004e1c

080027fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b092      	sub	sp, #72	; 0x48
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80d4 	beq.w	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002820:	4b4e      	ldr	r3, [pc, #312]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10e      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b4b      	ldr	r3, [pc, #300]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a4a      	ldr	r2, [pc, #296]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002856:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a41      	ldr	r2, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002862:	f7fe f9b5 	bl	8000bd0 <HAL_GetTick>
 8002866:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	e008      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7fe f9b1 	bl	8000bd0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	; 0x64
 8002876:	d901      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1d6      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8084 	beq.w	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d07c      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	461a      	mov	r2, r3
 80028d2:	2301      	movs	r3, #1
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	461a      	mov	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04b      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe f961 	bl	8000bd0 <HAL_GetTick>
 800290e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe f95d 	bl	8000bd0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e180      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002928:	2302      	movs	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	61fb      	str	r3, [r7, #28]
  return result;
 8002940:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d108      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002956:	4b01      	ldr	r3, [pc, #4]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	e00d      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
 8002964:	10908100 	.word	0x10908100
 8002968:	2302      	movs	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	4b9a      	ldr	r3, [pc, #616]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2202      	movs	r2, #2
 800297a:	613a      	str	r2, [r7, #16]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	60fa      	str	r2, [r7, #12]
  return result;
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0b7      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029a2:	4b8f      	ldr	r3, [pc, #572]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	498c      	ldr	r1, [pc, #560]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a87      	ldr	r2, [pc, #540]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d4:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f023 0203 	bic.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	497f      	ldr	r1, [pc, #508]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f2:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4978      	ldr	r1, [pc, #480]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a10:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4970      	ldr	r1, [pc, #448]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f023 0210 	bic.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4969      	ldr	r1, [pc, #420]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a4c:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	4961      	ldr	r1, [pc, #388]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f023 0220 	bic.w	r2, r3, #32
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	495a      	ldr	r1, [pc, #360]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a88:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	4952      	ldr	r1, [pc, #328]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	494b      	ldr	r1, [pc, #300]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4943      	ldr	r1, [pc, #268]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	493c      	ldr	r1, [pc, #240]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	4934      	ldr	r1, [pc, #208]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	492d      	ldr	r1, [pc, #180]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	4925      	ldr	r1, [pc, #148]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	491e      	ldr	r1, [pc, #120]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	4916      	ldr	r1, [pc, #88]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	490f      	ldr	r1, [pc, #60]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bd2:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	e002      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	4913      	ldr	r1, [pc, #76]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	490b      	ldr	r1, [pc, #44]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	4904      	ldr	r1, [pc, #16]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3748      	adds	r7, #72	; 0x48
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04f      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d018      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x76>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d115      	bne.n	8002cda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d015      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0xb4>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d011      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd8:	e008      	b.n	8002cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e000      	b.n	8002cee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40015000 	.word	0x40015000
 8002d14:	00010007 	.word	0x00010007

08002d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e049      	b.n	8002dbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fd38 	bl	80007b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 fb9e 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_TIM_PWM_Start+0x24>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e03c      	b.n	8002e66 <HAL_TIM_PWM_Start+0x9e>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d109      	bne.n	8002e06 <HAL_TIM_PWM_Start+0x3e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e02f      	b.n	8002e66 <HAL_TIM_PWM_Start+0x9e>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x58>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e022      	b.n	8002e66 <HAL_TIM_PWM_Start+0x9e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d109      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x72>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e015      	b.n	8002e66 <HAL_TIM_PWM_Start+0x9e>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d109      	bne.n	8002e54 <HAL_TIM_PWM_Start+0x8c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e008      	b.n	8002e66 <HAL_TIM_PWM_Start+0x9e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0a1      	b.n	8002fb2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xb6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	e023      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xfe>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Start+0xc6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	e01b      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xfe>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0xd6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	e013      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xfe>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_PWM_Start+0xe6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xfe>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_PWM_Start+0xf6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ebc:	e003      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xfe>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fe86 	bl	8003be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_TIM_PWM_Start+0x1f4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x148>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_TIM_PWM_Start+0x1f8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x148>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <HAL_TIM_PWM_Start+0x1fc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x148>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <HAL_TIM_PWM_Start+0x200>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x148>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <HAL_TIM_PWM_Start+0x204>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x148>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <HAL_TIM_PWM_Start+0x208>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_PWM_Start+0x14c>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_TIM_PWM_Start+0x14e>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_TIM_PWM_Start+0x1f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01d      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d018      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_TIM_PWM_Start+0x20c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <HAL_TIM_PWM_Start+0x210>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_TIM_PWM_Start+0x1f8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_TIM_PWM_Start+0x1fc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x1a8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_TIM_PWM_Start+0x208>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d115      	bne.n	8002f9c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_TIM_PWM_Start+0x214>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d015      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1e6>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d011      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e008      	b.n	8002fae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40013400 	.word	0x40013400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800
 8002fd0:	40015000 	.word	0x40015000
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	00010007 	.word	0x00010007

08002fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa1a 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa0c 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa1d 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0204 	mvn.w	r2, #4
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9f0 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9e2 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9f3 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0208 	mvn.w	r2, #8
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2204      	movs	r2, #4
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9c6 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f9b8 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9c9 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f99c 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f98e 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f99f 	bl	8003470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd f8ba 	bl	80002d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fe6a 	bl	8003e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d10e      	bne.n	80031be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d107      	bne.n	80031be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fe5d 	bl	8003e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d10e      	bne.n	80031ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d107      	bne.n	80031ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f94d 	bl	8003484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d10e      	bne.n	8003216 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d107      	bne.n	8003216 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0220 	mvn.w	r2, #32
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fe1d 	bl	8003e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800323a:	2302      	movs	r3, #2
 800323c:	e0ff      	b.n	800343e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b14      	cmp	r3, #20
 800324a:	f200 80f0 	bhi.w	800342e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	080032a9 	.word	0x080032a9
 8003258:	0800342f 	.word	0x0800342f
 800325c:	0800342f 	.word	0x0800342f
 8003260:	0800342f 	.word	0x0800342f
 8003264:	080032e9 	.word	0x080032e9
 8003268:	0800342f 	.word	0x0800342f
 800326c:	0800342f 	.word	0x0800342f
 8003270:	0800342f 	.word	0x0800342f
 8003274:	0800332b 	.word	0x0800332b
 8003278:	0800342f 	.word	0x0800342f
 800327c:	0800342f 	.word	0x0800342f
 8003280:	0800342f 	.word	0x0800342f
 8003284:	0800336b 	.word	0x0800336b
 8003288:	0800342f 	.word	0x0800342f
 800328c:	0800342f 	.word	0x0800342f
 8003290:	0800342f 	.word	0x0800342f
 8003294:	080033ad 	.word	0x080033ad
 8003298:	0800342f 	.word	0x0800342f
 800329c:	0800342f 	.word	0x0800342f
 80032a0:	0800342f 	.word	0x0800342f
 80032a4:	080033ed 	.word	0x080033ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f990 	bl	80035d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
      break;
 80032e6:	e0a5      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa0a 	bl	8003708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      break;
 8003328:	e084      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fa7d 	bl	8003830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0208 	orr.w	r2, r2, #8
 8003344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0204 	bic.w	r2, r2, #4
 8003354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      break;
 8003368:	e064      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 faef 	bl	8003954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	61da      	str	r2, [r3, #28]
      break;
 80033aa:	e043      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb3e 	bl	8003a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0204 	bic.w	r2, r2, #4
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033ea:	e023      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fb88 	bl	8003b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003416:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800342c:	e002      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      break;
 8003432:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a42      	ldr	r2, [pc, #264]	; (80035b4 <TIM_Base_SetConfig+0x11c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d00f      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <TIM_Base_SetConfig+0x120>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <TIM_Base_SetConfig+0x124>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3d      	ldr	r2, [pc, #244]	; (80035c0 <TIM_Base_SetConfig+0x128>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <TIM_Base_SetConfig+0x12c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <TIM_Base_SetConfig+0x11c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d01b      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <TIM_Base_SetConfig+0x120>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d017      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <TIM_Base_SetConfig+0x124>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <TIM_Base_SetConfig+0x128>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <TIM_Base_SetConfig+0x130>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <TIM_Base_SetConfig+0x134>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <TIM_Base_SetConfig+0x138>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <TIM_Base_SetConfig+0x12c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <TIM_Base_SetConfig+0x11c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <TIM_Base_SetConfig+0x100>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <TIM_Base_SetConfig+0x128>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00f      	beq.n	8003598 <TIM_Base_SetConfig+0x100>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <TIM_Base_SetConfig+0x130>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_Base_SetConfig+0x100>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <TIM_Base_SetConfig+0x134>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <TIM_Base_SetConfig+0x100>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <TIM_Base_SetConfig+0x138>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0x100>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <TIM_Base_SetConfig+0x12c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40013400 	.word	0x40013400
 80035c4:	40015000 	.word	0x40015000
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 0302 	bic.w	r3, r3, #2
 8003620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a30      	ldr	r2, [pc, #192]	; (80036f0 <TIM_OC1_SetConfig+0x11c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_OC1_SetConfig+0x88>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <TIM_OC1_SetConfig+0x120>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00f      	beq.n	800365c <TIM_OC1_SetConfig+0x88>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2e      	ldr	r2, [pc, #184]	; (80036f8 <TIM_OC1_SetConfig+0x124>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_OC1_SetConfig+0x88>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <TIM_OC1_SetConfig+0x128>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_OC1_SetConfig+0x88>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <TIM_OC1_SetConfig+0x12c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_OC1_SetConfig+0x88>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <TIM_OC1_SetConfig+0x130>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10c      	bne.n	8003676 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0308 	bic.w	r3, r3, #8
 8003662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <TIM_OC1_SetConfig+0x11c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_OC1_SetConfig+0xd2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <TIM_OC1_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_OC1_SetConfig+0xd2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <TIM_OC1_SetConfig+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_OC1_SetConfig+0xd2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <TIM_OC1_SetConfig+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_OC1_SetConfig+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <TIM_OC1_SetConfig+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC1_SetConfig+0xd2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <TIM_OC1_SetConfig+0x130>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40013400 	.word	0x40013400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800
 8003704:	40015000 	.word	0x40015000

08003708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0210 	bic.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0320 	bic.w	r3, r3, #32
 8003756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <TIM_OC2_SetConfig+0x110>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_OC2_SetConfig+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2b      	ldr	r2, [pc, #172]	; (800381c <TIM_OC2_SetConfig+0x114>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_OC2_SetConfig+0x74>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <TIM_OC2_SetConfig+0x118>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10d      	bne.n	8003798 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <TIM_OC2_SetConfig+0x110>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <TIM_OC2_SetConfig+0xc0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <TIM_OC2_SetConfig+0x114>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <TIM_OC2_SetConfig+0xc0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <TIM_OC2_SetConfig+0x11c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <TIM_OC2_SetConfig+0xc0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <TIM_OC2_SetConfig+0x120>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_OC2_SetConfig+0xc0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <TIM_OC2_SetConfig+0x124>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC2_SetConfig+0xc0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a17      	ldr	r2, [pc, #92]	; (8003820 <TIM_OC2_SetConfig+0x118>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d113      	bne.n	80037f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40015000 	.word	0x40015000
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800

08003830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2b      	ldr	r2, [pc, #172]	; (800393c <TIM_OC3_SetConfig+0x10c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_OC3_SetConfig+0x72>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <TIM_OC3_SetConfig+0x110>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC3_SetConfig+0x72>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a29      	ldr	r2, [pc, #164]	; (8003944 <TIM_OC3_SetConfig+0x114>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10d      	bne.n	80038be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <TIM_OC3_SetConfig+0x10c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_OC3_SetConfig+0xbe>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <TIM_OC3_SetConfig+0x110>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_OC3_SetConfig+0xbe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <TIM_OC3_SetConfig+0x118>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_OC3_SetConfig+0xbe>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	; (800394c <TIM_OC3_SetConfig+0x11c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_OC3_SetConfig+0xbe>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <TIM_OC3_SetConfig+0x120>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC3_SetConfig+0xbe>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a16      	ldr	r2, [pc, #88]	; (8003944 <TIM_OC3_SetConfig+0x114>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d113      	bne.n	8003916 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40013400 	.word	0x40013400
 8003944:	40015000 	.word	0x40015000
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	031b      	lsls	r3, r3, #12
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <TIM_OC4_SetConfig+0xc8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <TIM_OC4_SetConfig+0x8c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <TIM_OC4_SetConfig+0xcc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00f      	beq.n	80039e0 <TIM_OC4_SetConfig+0x8c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <TIM_OC4_SetConfig+0xd0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_OC4_SetConfig+0x8c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <TIM_OC4_SetConfig+0xd4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_OC4_SetConfig+0x8c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <TIM_OC4_SetConfig+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_OC4_SetConfig+0x8c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <TIM_OC4_SetConfig+0xdc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d109      	bne.n	80039f4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40013400 	.word	0x40013400
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400
 8003a2c:	40014800 	.word	0x40014800
 8003a30:	40015000 	.word	0x40015000

08003a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <TIM_OC5_SetConfig+0xbc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <TIM_OC5_SetConfig+0x82>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <TIM_OC5_SetConfig+0xc0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00f      	beq.n	8003ab6 <TIM_OC5_SetConfig+0x82>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <TIM_OC5_SetConfig+0xc4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <TIM_OC5_SetConfig+0x82>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <TIM_OC5_SetConfig+0xc8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_OC5_SetConfig+0x82>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <TIM_OC5_SetConfig+0xcc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_OC5_SetConfig+0x82>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_OC5_SetConfig+0xd0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d109      	bne.n	8003aca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800
 8003b04:	40015000 	.word	0x40015000

08003b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <TIM_OC6_SetConfig+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <TIM_OC6_SetConfig+0x84>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <TIM_OC6_SetConfig+0xc4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <TIM_OC6_SetConfig+0x84>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <TIM_OC6_SetConfig+0xc8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_OC6_SetConfig+0x84>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <TIM_OC6_SetConfig+0xcc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_OC6_SetConfig+0x84>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <TIM_OC6_SetConfig+0xd0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC6_SetConfig+0x84>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <TIM_OC6_SetConfig+0xd4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d109      	bne.n	8003ba0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	029b      	lsls	r3, r3, #10
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40013400 	.word	0x40013400
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800
 8003bdc:	40015000 	.word	0x40015000

08003be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06d      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40015000 	.word	0x40015000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e06a      	b.n	8003e36 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d115      	bne.n	8003e24 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40015000 	.word	0x40015000

08003e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e040      	b.n	8003f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fd86 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb32 	bl	8004534 <UART_SetConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fcfa 	bl	80048dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fd81 	bl	8004a20 <UART_CheckIdleState>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0ba      	sub	sp, #232	; 0xe8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f52:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f56:	4013      	ands	r3, r2
 8003f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d115      	bne.n	8003f90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 82ab 	beq.w	80044dc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
      }
      return;
 8003f8e:	e2a5      	b.n	80044dc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8117 	beq.w	80041c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_UART_IRQHandler+0x298>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 810a 	beq.w	80041c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d011      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xbc>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_UART_IRQHandler+0xec>
 8003ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2202      	movs	r2, #2
 8004002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	f043 0204 	orr.w	r2, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <HAL_UART_IRQHandler+0x11c>
 8004020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2204      	movs	r2, #4
 8004032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d017      	beq.n	8004080 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800405c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004060:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2208      	movs	r2, #8
 800406e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	f043 0208 	orr.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <HAL_UART_IRQHandler+0x18a>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8211 	beq.w	80044e0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d005      	beq.n	800410a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004102:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04f      	beq.n	80041aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fd97 	bl	8004c3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d141      	bne.n	80041a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800414a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800414e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1d9      	bne.n	800411e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	2b00      	cmp	r3, #0
 8004170:	d013      	beq.n	800419a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_UART_IRQHandler+0x29c>)
 8004178:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fea0 	bl	8000ec4 <HAL_DMA_Abort_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e00f      	b.n	80041ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9b4 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	e00b      	b.n	80041ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9b0 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e007      	b.n	80041ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f9ac 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80041b8:	e192      	b.n	80044e0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ba:	bf00      	nop
    return;
 80041bc:	e190      	b.n	80044e0 <HAL_UART_IRQHandler+0x5b8>
 80041be:	bf00      	nop
 80041c0:	04000120 	.word	0x04000120
 80041c4:	08004d07 	.word	0x08004d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 814b 	bne.w	8004468 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8144 	beq.w	8004468 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 813d 	beq.w	8004468 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2210      	movs	r2, #16
 80041f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	f040 80b5 	bne.w	8004370 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004212:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8164 	beq.w	80044e4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004226:	429a      	cmp	r2, r3
 8004228:	f080 815c 	bcs.w	80044e4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b20      	cmp	r3, #32
 800423e:	f000 8086 	beq.w	800434e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800426c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004270:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1da      	bne.n	8004242 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800429c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e1      	bne.n	800428c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004330:	65bb      	str	r3, [r7, #88]	; 0x58
 8004332:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e4      	bne.n	800430e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fd82 	bl	8000e52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004360:	b29b      	uxth	r3, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	b29b      	uxth	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f8d7 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800436e:	e0b9      	b.n	80044e4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800437c:	b29b      	uxth	r3, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80ab 	beq.w	80044e8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80a6 	beq.w	80044e8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043be:	647b      	str	r3, [r7, #68]	; 0x44
 80043c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e4      	bne.n	800439c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	623b      	str	r3, [r7, #32]
   return(result);
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043f6:	633a      	str	r2, [r7, #48]	; 0x30
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e3      	bne.n	80043d2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60fb      	str	r3, [r7, #12]
   return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	617b      	str	r3, [r7, #20]
   return(result);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e4      	bne.n	800441e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800445a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f85b 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004466:	e03f      	b.n	80044e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_UART_IRQHandler+0x56a>
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fc7b 	bl	8004d86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004490:	e02d      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01c      	beq.n	80044ec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
    }
    return;
 80044ba:	e017      	b.n	80044ec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <HAL_UART_IRQHandler+0x5c6>
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fc2c 	bl	8004d32 <UART_EndTransmit_IT>
    return;
 80044da:	e008      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80044dc:	bf00      	nop
 80044de:	e006      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80044e0:	bf00      	nop
 80044e2:	e004      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80044e4:	bf00      	nop
 80044e6:	e002      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80044ec:	bf00      	nop
  }

}
 80044ee:	37e8      	adds	r7, #232	; 0xe8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b92      	ldr	r3, [pc, #584]	; (80047a8 <UART_SetConfig+0x274>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	430b      	orrs	r3, r1
 800456a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <UART_SetConfig+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d120      	bne.n	80045f2 <UART_SetConfig+0xbe>
 80045b0:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <UART_SetConfig+0x27c>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d817      	bhi.n	80045ec <UART_SetConfig+0xb8>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x90>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045e7 	.word	0x080045e7
 80045d0:	080045db 	.word	0x080045db
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e0b5      	b.n	8004746 <UART_SetConfig+0x212>
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e0b2      	b.n	8004746 <UART_SetConfig+0x212>
 80045e0:	2304      	movs	r3, #4
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e0af      	b.n	8004746 <UART_SetConfig+0x212>
 80045e6:	2308      	movs	r3, #8
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e0ac      	b.n	8004746 <UART_SetConfig+0x212>
 80045ec:	2310      	movs	r3, #16
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e0a9      	b.n	8004746 <UART_SetConfig+0x212>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6f      	ldr	r2, [pc, #444]	; (80047b4 <UART_SetConfig+0x280>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d124      	bne.n	8004646 <UART_SetConfig+0x112>
 80045fc:	4b6c      	ldr	r3, [pc, #432]	; (80047b0 <UART_SetConfig+0x27c>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004608:	d011      	beq.n	800462e <UART_SetConfig+0xfa>
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460e:	d817      	bhi.n	8004640 <UART_SetConfig+0x10c>
 8004610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004614:	d011      	beq.n	800463a <UART_SetConfig+0x106>
 8004616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461a:	d811      	bhi.n	8004640 <UART_SetConfig+0x10c>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <UART_SetConfig+0xf4>
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d006      	beq.n	8004634 <UART_SetConfig+0x100>
 8004626:	e00b      	b.n	8004640 <UART_SetConfig+0x10c>
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e08b      	b.n	8004746 <UART_SetConfig+0x212>
 800462e:	2302      	movs	r3, #2
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e088      	b.n	8004746 <UART_SetConfig+0x212>
 8004634:	2304      	movs	r3, #4
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e085      	b.n	8004746 <UART_SetConfig+0x212>
 800463a:	2308      	movs	r3, #8
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e082      	b.n	8004746 <UART_SetConfig+0x212>
 8004640:	2310      	movs	r3, #16
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e07f      	b.n	8004746 <UART_SetConfig+0x212>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5b      	ldr	r2, [pc, #364]	; (80047b8 <UART_SetConfig+0x284>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d124      	bne.n	800469a <UART_SetConfig+0x166>
 8004650:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <UART_SetConfig+0x27c>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004658:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800465c:	d011      	beq.n	8004682 <UART_SetConfig+0x14e>
 800465e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004662:	d817      	bhi.n	8004694 <UART_SetConfig+0x160>
 8004664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004668:	d011      	beq.n	800468e <UART_SetConfig+0x15a>
 800466a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800466e:	d811      	bhi.n	8004694 <UART_SetConfig+0x160>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <UART_SetConfig+0x148>
 8004674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004678:	d006      	beq.n	8004688 <UART_SetConfig+0x154>
 800467a:	e00b      	b.n	8004694 <UART_SetConfig+0x160>
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e061      	b.n	8004746 <UART_SetConfig+0x212>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e05e      	b.n	8004746 <UART_SetConfig+0x212>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e05b      	b.n	8004746 <UART_SetConfig+0x212>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e058      	b.n	8004746 <UART_SetConfig+0x212>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e055      	b.n	8004746 <UART_SetConfig+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a47      	ldr	r2, [pc, #284]	; (80047bc <UART_SetConfig+0x288>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d124      	bne.n	80046ee <UART_SetConfig+0x1ba>
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <UART_SetConfig+0x27c>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b0:	d011      	beq.n	80046d6 <UART_SetConfig+0x1a2>
 80046b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b6:	d817      	bhi.n	80046e8 <UART_SetConfig+0x1b4>
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	d011      	beq.n	80046e2 <UART_SetConfig+0x1ae>
 80046be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c2:	d811      	bhi.n	80046e8 <UART_SetConfig+0x1b4>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x19c>
 80046c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x1a8>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x1b4>
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e037      	b.n	8004746 <UART_SetConfig+0x212>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e034      	b.n	8004746 <UART_SetConfig+0x212>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e031      	b.n	8004746 <UART_SetConfig+0x212>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e02e      	b.n	8004746 <UART_SetConfig+0x212>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e02b      	b.n	8004746 <UART_SetConfig+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <UART_SetConfig+0x28c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d124      	bne.n	8004742 <UART_SetConfig+0x20e>
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <UART_SetConfig+0x27c>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004704:	d011      	beq.n	800472a <UART_SetConfig+0x1f6>
 8004706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470a:	d817      	bhi.n	800473c <UART_SetConfig+0x208>
 800470c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004710:	d011      	beq.n	8004736 <UART_SetConfig+0x202>
 8004712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004716:	d811      	bhi.n	800473c <UART_SetConfig+0x208>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x1f0>
 800471c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004720:	d006      	beq.n	8004730 <UART_SetConfig+0x1fc>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x208>
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x212>
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e00a      	b.n	8004746 <UART_SetConfig+0x212>
 8004730:	2304      	movs	r3, #4
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e007      	b.n	8004746 <UART_SetConfig+0x212>
 8004736:	2308      	movs	r3, #8
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e004      	b.n	8004746 <UART_SetConfig+0x212>
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e001      	b.n	8004746 <UART_SetConfig+0x212>
 8004742:	2310      	movs	r3, #16
 8004744:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474e:	d16b      	bne.n	8004828 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d838      	bhi.n	80047c8 <UART_SetConfig+0x294>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x228>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004781 	.word	0x08004781
 8004760:	08004789 	.word	0x08004789
 8004764:	08004791 	.word	0x08004791
 8004768:	080047c9 	.word	0x080047c9
 800476c:	08004797 	.word	0x08004797
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047c9 	.word	0x080047c9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	0800479f 	.word	0x0800479f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7fd fff8 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004784:	61b8      	str	r0, [r7, #24]
        break;
 8004786:	e024      	b.n	80047d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004788:	f7fe f816 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 800478c:	61b8      	str	r0, [r7, #24]
        break;
 800478e:	e020      	b.n	80047d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <UART_SetConfig+0x290>)
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e01d      	b.n	80047d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004796:	f7fd ff77 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800479a:	61b8      	str	r0, [r7, #24]
        break;
 800479c:	e019      	b.n	80047d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	61bb      	str	r3, [r7, #24]
        break;
 80047a4:	e015      	b.n	80047d2 <UART_SetConfig+0x29e>
 80047a6:	bf00      	nop
 80047a8:	efff69f3 	.word	0xefff69f3
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40004800 	.word	0x40004800
 80047bc:	40004c00 	.word	0x40004c00
 80047c0:	40005000 	.word	0x40005000
 80047c4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	77bb      	strb	r3, [r7, #30]
        break;
 80047d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d073      	beq.n	80048c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	005a      	lsls	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	441a      	add	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d916      	bls.n	8004822 <UART_SetConfig+0x2ee>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d212      	bcs.n	8004822 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f023 030f 	bic.w	r3, r3, #15
 8004804:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	b29a      	uxth	r2, r3
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	4313      	orrs	r3, r2
 8004816:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	89fa      	ldrh	r2, [r7, #14]
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	e04e      	b.n	80048c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	77bb      	strb	r3, [r7, #30]
 8004826:	e04b      	b.n	80048c0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004828:	7ffb      	ldrb	r3, [r7, #31]
 800482a:	2b08      	cmp	r3, #8
 800482c:	d827      	bhi.n	800487e <UART_SetConfig+0x34a>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x300>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	0800487f 	.word	0x0800487f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800487f 	.word	0x0800487f
 800484c:	0800487f 	.word	0x0800487f
 8004850:	0800487f 	.word	0x0800487f
 8004854:	08004877 	.word	0x08004877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fd ff8c 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 800485c:	61b8      	str	r0, [r7, #24]
        break;
 800485e:	e013      	b.n	8004888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fd ffaa 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8004864:	61b8      	str	r0, [r7, #24]
        break;
 8004866:	e00f      	b.n	8004888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <UART_SetConfig+0x3a4>)
 800486a:	61bb      	str	r3, [r7, #24]
        break;
 800486c:	e00c      	b.n	8004888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486e:	f7fd ff0b 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8004872:	61b8      	str	r0, [r7, #24]
        break;
 8004874:	e008      	b.n	8004888 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	61bb      	str	r3, [r7, #24]
        break;
 800487c:	e004      	b.n	8004888 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	77bb      	strb	r3, [r7, #30]
        break;
 8004886:	bf00      	nop
    }

    if (pclk != 0U)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d018      	beq.n	80048c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	085a      	lsrs	r2, r3, #1
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	441a      	add	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b0f      	cmp	r3, #15
 80048a6:	d909      	bls.n	80048bc <UART_SetConfig+0x388>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d205      	bcs.n	80048bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e001      	b.n	80048c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	007a1200 	.word	0x007a1200

080048dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d10a      	bne.n	80049f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b098      	sub	sp, #96	; 0x60
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a30:	f7fc f8ce 	bl	8000bd0 <HAL_GetTick>
 8004a34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d12e      	bne.n	8004aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f88c 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d021      	beq.n	8004aa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e062      	b.n	8004b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d149      	bne.n	8004b44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f856 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03c      	beq.n	8004b44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e6      	bne.n	8004aca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1c:	61fa      	str	r2, [r7, #28]
 8004b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e011      	b.n	8004b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3758      	adds	r7, #88	; 0x58
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b80:	e049      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d045      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fc f821 	bl	8000bd0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e048      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d031      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d110      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f838 	bl	8004c3e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e029      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf0:	d111      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f81e 	bl	8004c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e00f      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d0a6      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b095      	sub	sp, #84	; 0x54
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c64:	643b      	str	r3, [r7, #64]	; 0x40
 8004c66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d118      	bne.n	8004ce6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cfa:	bf00      	nop
 8004cfc:	3754      	adds	r7, #84	; 0x54
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fbef 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b088      	sub	sp, #32
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fbbb 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7e:	bf00      	nop
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <memset>:
 8004d9a:	4402      	add	r2, r0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d100      	bne.n	8004da4 <memset+0xa>
 8004da2:	4770      	bx	lr
 8004da4:	f803 1b01 	strb.w	r1, [r3], #1
 8004da8:	e7f9      	b.n	8004d9e <memset+0x4>
	...

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	; (8004de4 <__libc_init_array+0x38>)
 8004db0:	4c0d      	ldr	r4, [pc, #52]	; (8004de8 <__libc_init_array+0x3c>)
 8004db2:	1b64      	subs	r4, r4, r5
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	2600      	movs	r6, #0
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <__libc_init_array+0x40>)
 8004dbe:	4c0c      	ldr	r4, [pc, #48]	; (8004df0 <__libc_init_array+0x44>)
 8004dc0:	f000 f818 	bl	8004df4 <_init>
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	2600      	movs	r6, #0
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08004e44 	.word	0x08004e44
 8004de8:	08004e44 	.word	0x08004e44
 8004dec:	08004e44 	.word	0x08004e44
 8004df0:	08004e48 	.word	0x08004e48

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
