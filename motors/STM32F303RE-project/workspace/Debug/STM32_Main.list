
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ba0  08005ba0  00006ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd8  08005bd8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd8  08005bd8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd8  08005bd8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00006bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005be0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000344  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010808  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002501  00000000  00000000  00017844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00019d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aba  00000000  00000000  0001ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207ca  00000000  00000000  0001b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b57  00000000  00000000  0003bd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4ab  00000000  00000000  0004e8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118d86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000386c  00000000  00000000  00118dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005b88 	.word	0x08005b88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005b88 	.word	0x08005b88

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b43      	ldr	r3, [pc, #268]	@ (80002f8 <MX_GPIO_Init+0x124>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a42      	ldr	r2, [pc, #264]	@ (80002f8 <MX_GPIO_Init+0x124>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b40      	ldr	r3, [pc, #256]	@ (80002f8 <MX_GPIO_Init+0x124>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b3d      	ldr	r3, [pc, #244]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a3c      	ldr	r2, [pc, #240]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b3a      	ldr	r3, [pc, #232]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b37      	ldr	r3, [pc, #220]	@ (80002f8 <MX_GPIO_Init+0x124>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a36      	ldr	r2, [pc, #216]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b34      	ldr	r3, [pc, #208]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b31      	ldr	r3, [pc, #196]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a30      	ldr	r2, [pc, #192]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b2e      	ldr	r3, [pc, #184]	@ (80002f8 <MX_GPIO_Init+0x124>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2106      	movs	r1, #6
 800024e:	482b      	ldr	r0, [pc, #172]	@ (80002fc <MX_GPIO_Init+0x128>)
 8000250:	f001 fc18 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	21b2      	movs	r1, #178	@ 0xb2
 8000258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025c:	f001 fc12 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR4_DIR_Pin|MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin
 8000260:	2200      	movs	r2, #0
 8000262:	f64d 0140 	movw	r1, #55360	@ 0xd840
 8000266:	4826      	ldr	r0, [pc, #152]	@ (8000300 <MX_GPIO_Init+0x12c>)
 8000268:	f001 fc0c 	bl	8001a84 <HAL_GPIO_WritePin>
                          |MOTOR3_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800026c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000272:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	481e      	ldr	r0, [pc, #120]	@ (80002fc <MX_GPIO_Init+0x128>)
 8000284:	f001 fa74 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 8000288:	2306      	movs	r3, #6
 800028a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4619      	mov	r1, r3
 800029e:	4817      	ldr	r0, [pc, #92]	@ (80002fc <MX_GPIO_Init+0x128>)
 80002a0:	f001 fa66 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin;
 80002a4:	23b2      	movs	r3, #178	@ 0xb2
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	4619      	mov	r1, r3
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002be:	f001 fa57 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = MOTOR4_DIR_Pin|MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin
 80002c2:	f64d 0340 	movw	r3, #55360	@ 0xd840
 80002c6:	617b      	str	r3, [r7, #20]
                          |MOTOR3_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c8:	2301      	movs	r3, #1
 80002ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	4809      	ldr	r0, [pc, #36]	@ (8000300 <MX_GPIO_Init+0x12c>)
 80002dc:	f001 fa48 	bl	8001770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	2028      	movs	r0, #40	@ 0x28
 80002e6:	f001 f996 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002ea:	2028      	movs	r0, #40	@ 0x28
 80002ec:	f001 f9af 	bl	800164e <HAL_NVIC_EnableIRQ>

}
 80002f0:	bf00      	nop
 80002f2:	3728      	adds	r7, #40	@ 0x28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000800 	.word	0x48000800
 8000300:	48000400 	.word	0x48000400

08000304 <move_motor>:
Motors motor3;
Motors motor4;
volatile Motors motor5;
int counter = 0;

void move_motor(Motors* m){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if (m->STEPS == 0) return;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d040      	beq.n	8000398 <move_motor+0x94>

	m->SPEED_CNT++;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	3301      	adds	r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	b25a      	sxtb	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	711a      	strb	r2, [r3, #4]

	if (m->SPEED_CNT == 0){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d109      	bne.n	8000346 <move_motor+0x42>
		HAL_GPIO_TogglePin(m->PWM_PORT, m->PWM_PIN);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	695a      	ldr	r2, [r3, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800033c:	b29b      	uxth	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	4610      	mov	r0, r2
 8000342:	f001 fbb7 	bl	8001ab4 <HAL_GPIO_TogglePin>
	}

	if (m->SPEED_CNT == (m->SPEED >> 1)){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000352:	105b      	asrs	r3, r3, #1
 8000354:	b25b      	sxtb	r3, r3
 8000356:	429a      	cmp	r2, r3
 8000358:	d109      	bne.n	800036e <move_motor+0x6a>
		HAL_GPIO_TogglePin(m->PWM_PORT, m->PWM_PIN);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	695a      	ldr	r2, [r3, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8000364:	b29b      	uxth	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	4610      	mov	r0, r2
 800036a:	f001 fba3 	bl	8001ab4 <HAL_GPIO_TogglePin>
	}
	if (m->SPEED_CNT == m->SPEED){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800037a:	429a      	cmp	r2, r3
 800037c:	d10d      	bne.n	800039a <move_motor+0x96>

		m->STEPS--;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000384:	b29b      	uxth	r3, r3
 8000386:	3b01      	subs	r3, #1
 8000388:	b29b      	uxth	r3, r3
 800038a:	b21a      	sxth	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	80da      	strh	r2, [r3, #6]
		m->SPEED_CNT = 0;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2200      	movs	r2, #0
 8000394:	711a      	strb	r2, [r3, #4]
 8000396:	e000      	b.n	800039a <move_motor+0x96>
	if (m->STEPS == 0) return;
 8000398:	bf00      	nop

	// Ajutine muutuja, mis määrab kiirust. kiirus > speed, siis toggle
	// Kui on 2 korda toggle toimunud, siis steps--


	}
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

  move_motor(&motor1);
 80003a8:	480a      	ldr	r0, [pc, #40]	@ (80003d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80003aa:	f7ff ffab 	bl	8000304 <move_motor>
  move_motor(&motor2);
 80003ae:	480a      	ldr	r0, [pc, #40]	@ (80003d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80003b0:	f7ff ffa8 	bl	8000304 <move_motor>
  move_motor(&motor3);
 80003b4:	4809      	ldr	r0, [pc, #36]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80003b6:	f7ff ffa5 	bl	8000304 <move_motor>
  move_motor(&motor4);
 80003ba:	4809      	ldr	r0, [pc, #36]	@ (80003e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80003bc:	f7ff ffa2 	bl	8000304 <move_motor>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003c0:	2120      	movs	r1, #32
 80003c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c6:	f001 fb75 	bl	8001ab4 <HAL_GPIO_TogglePin>
  // decrement steps value
  // if reaches zero, dont move
  // Speed determines when to toggle step pin


}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000030 	.word	0x20000030
 80003d8:	2000004c 	.word	0x2000004c
 80003dc:	20000068 	.word	0x20000068
 80003e0:	20000084 	.word	0x20000084

080003e4 <add_motor_val>:



#define DEFAULT_STEPS_NR 500

void add_motor_val(Motors* m, int8_t val){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
	if (val < 0){
 80003f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	da13      	bge.n	8000420 <add_motor_val+0x3c>
		m->DIR_PIN = 0;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(m->DIR_PORT, m->DIR_PIN, GPIO_PIN_RESET); // Set EN high to enable the driver
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6918      	ldr	r0, [r3, #16]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f993 3000 	ldrsb.w	r3, [r3]
 8000408:	b29b      	uxth	r3, r3
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	f001 fb39 	bl	8001a84 <HAL_GPIO_WritePin>
		m->SPEED = -val;
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	425b      	negs	r3, r3
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25a      	sxtb	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	70da      	strb	r2, [r3, #3]
 800041e:	e00f      	b.n	8000440 <add_motor_val+0x5c>
	} else {
		m->DIR_PIN = 1;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(m->DIR_PORT, m->DIR_PIN, GPIO_PIN_SET); // Set EN high to enable the driver
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6918      	ldr	r0, [r3, #16]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f993 3000 	ldrsb.w	r3, [r3]
 8000430:	b29b      	uxth	r3, r3
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	f001 fb25 	bl	8001a84 <HAL_GPIO_WritePin>
		m->SPEED = val;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	78fa      	ldrb	r2, [r7, #3]
 800043e:	70da      	strb	r2, [r3, #3]

	}
	m->SPEED_CNT = 0;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	711a      	strb	r2, [r3, #4]
	m->STEPS = 200;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	22c8      	movs	r2, #200	@ 0xc8
 800044a:	80da      	strh	r2, [r3, #6]
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <receive>:

void receive(){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	uint16_t packet_start = UART2_rxBuffer[0] << 8 || UART2_rxBuffer[1];
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <receive+0xa8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	021b      	lsls	r3, r3, #8
 8000460:	2b00      	cmp	r3, #0
 8000462:	d103      	bne.n	800046c <receive+0x18>
 8000464:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <receive+0xa8>)
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <receive+0x1c>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <receive+0x1e>
 8000470:	2300      	movs	r3, #0
 8000472:	80fb      	strh	r3, [r7, #6]
	if (packet_start != 0x4994) return;
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	f644 1294 	movw	r2, #18836	@ 0x4994
 800047a:	4293      	cmp	r3, r2
 800047c:	d139      	bne.n	80004f2 <receive+0x9e>

	// Do cmd byte check

	int8_t m1_val = UART2_rxBuffer[3];
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <receive+0xa8>)
 8000480:	78db      	ldrb	r3, [r3, #3]
 8000482:	717b      	strb	r3, [r7, #5]
	int8_t m2_val = UART2_rxBuffer[4];
 8000484:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <receive+0xa8>)
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	713b      	strb	r3, [r7, #4]
	int8_t m3_val = UART2_rxBuffer[5];
 800048a:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <receive+0xa8>)
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	70fb      	strb	r3, [r7, #3]
	int8_t m4_val = UART2_rxBuffer[6];
 8000490:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <receive+0xa8>)
 8000492:	799b      	ldrb	r3, [r3, #6]
 8000494:	70bb      	strb	r3, [r7, #2]

	if (m1_val != 0) add_motor_val(&motor1, m1_val);
 8000496:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d005      	beq.n	80004aa <receive+0x56>
 800049e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004a2:	4619      	mov	r1, r3
 80004a4:	4816      	ldr	r0, [pc, #88]	@ (8000500 <receive+0xac>)
 80004a6:	f7ff ff9d 	bl	80003e4 <add_motor_val>
	if (m2_val != 0) add_motor_val(&motor2, m2_val);
 80004aa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d005      	beq.n	80004be <receive+0x6a>
 80004b2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4812      	ldr	r0, [pc, #72]	@ (8000504 <receive+0xb0>)
 80004ba:	f7ff ff93 	bl	80003e4 <add_motor_val>
	if (m3_val != 0) add_motor_val(&motor3, m3_val);
 80004be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d005      	beq.n	80004d2 <receive+0x7e>
 80004c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004ca:	4619      	mov	r1, r3
 80004cc:	480e      	ldr	r0, [pc, #56]	@ (8000508 <receive+0xb4>)
 80004ce:	f7ff ff89 	bl	80003e4 <add_motor_val>
	if (m4_val != 0) add_motor_val(&motor4, m4_val);
 80004d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d005      	beq.n	80004e6 <receive+0x92>
 80004da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80004de:	4619      	mov	r1, r3
 80004e0:	480a      	ldr	r0, [pc, #40]	@ (800050c <receive+0xb8>)
 80004e2:	f7ff ff7f 	bl	80003e4 <add_motor_val>

	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 80004e6:	2207      	movs	r2, #7
 80004e8:	4904      	ldr	r1, [pc, #16]	@ (80004fc <receive+0xa8>)
 80004ea:	4809      	ldr	r0, [pc, #36]	@ (8000510 <receive+0xbc>)
 80004ec:	f004 f934 	bl	8004758 <HAL_UART_Receive_IT>
 80004f0:	e000      	b.n	80004f4 <receive+0xa0>
	if (packet_start != 0x4994) return;
 80004f2:	bf00      	nop


}
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028
 8000500:	20000030 	.word	0x20000030
 8000504:	2000004c 	.word	0x2000004c
 8000508:	20000068 	.word	0x20000068
 800050c:	20000084 	.word	0x20000084
 8000510:	200002c4 	.word	0x200002c4

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ff3c 	bl	8001394 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f90c 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f7ff fe58 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fe58 	bl	80011d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000528:	f000 fe26 	bl	8001178 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800052c:	f000 fb72 	bl	8000c14 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000530:	f000 fa86 	bl	8000a40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000534:	f000 fb14 	bl	8000b60 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000538:	f000 fbc6 	bl	8000cc8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800053c:	f000 fc1e 	bl	8000d7c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000546:	486a      	ldr	r0, [pc, #424]	@ (80006f0 <main+0x1dc>)
 8000548:	f001 fa9c 	bl	8001a84 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800054c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000550:	f000 f96c 	bl	800082c <HAL_GPIO_EXTI_Callback>

  HAL_TIM_Base_Start_IT(&htim3);
 8000554:	4867      	ldr	r0, [pc, #412]	@ (80006f4 <main+0x1e0>)
 8000556:	f002 ff87 	bl	8003468 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 800055a:	2100      	movs	r1, #0
 800055c:	4866      	ldr	r0, [pc, #408]	@ (80006f8 <main+0x1e4>)
 800055e:	f003 f84b 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start timer
 8000562:	2100      	movs	r1, #0
 8000564:	4865      	ldr	r0, [pc, #404]	@ (80006fc <main+0x1e8>)
 8000566:	f003 f847 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Start timer
 800056a:	2100      	movs	r1, #0
 800056c:	4861      	ldr	r0, [pc, #388]	@ (80006f4 <main+0x1e0>)
 800056e:	f003 f843 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start timer
 8000572:	2100      	movs	r1, #0
 8000574:	4862      	ldr	r0, [pc, #392]	@ (8000700 <main+0x1ec>)
 8000576:	f003 f83f 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //Start timer
 800057a:	2100      	movs	r1, #0
 800057c:	4861      	ldr	r0, [pc, #388]	@ (8000704 <main+0x1f0>)
 800057e:	f003 f83b 	bl	80035f8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 8000582:	2207      	movs	r2, #7
 8000584:	4960      	ldr	r1, [pc, #384]	@ (8000708 <main+0x1f4>)
 8000586:	4861      	ldr	r0, [pc, #388]	@ (800070c <main+0x1f8>)
 8000588:	f004 f8e6 	bl	8004758 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart1, UART2_rxBuffer, MAX_COMMAND_LENGTH);


  // Motor 1 initialization
  motor1.DIR_PIN = MOTOR1_DIR_Pin;
 800058c:	4b60      	ldr	r3, [pc, #384]	@ (8000710 <main+0x1fc>)
 800058e:	2202      	movs	r2, #2
 8000590:	701a      	strb	r2, [r3, #0]
  motor1.STEP_PIN = MOTOR1_PUL_Pin;
 8000592:	4b5f      	ldr	r3, [pc, #380]	@ (8000710 <main+0x1fc>)
 8000594:	2201      	movs	r2, #1
 8000596:	705a      	strb	r2, [r3, #1]
  motor1.EN_PIN = MOTOR1_EN_Pin;
 8000598:	4b5d      	ldr	r3, [pc, #372]	@ (8000710 <main+0x1fc>)
 800059a:	2204      	movs	r2, #4
 800059c:	709a      	strb	r2, [r3, #2]
  motor1.SPEED = 100;
 800059e:	4b5c      	ldr	r3, [pc, #368]	@ (8000710 <main+0x1fc>)
 80005a0:	2264      	movs	r2, #100	@ 0x64
 80005a2:	70da      	strb	r2, [r3, #3]
  motor1.SPEED_CNT = 0;
 80005a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000710 <main+0x1fc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	711a      	strb	r2, [r3, #4]
  motor1.STEPS = 200;
 80005aa:	4b59      	ldr	r3, [pc, #356]	@ (8000710 <main+0x1fc>)
 80005ac:	22c8      	movs	r2, #200	@ 0xc8
 80005ae:	80da      	strh	r2, [r3, #6]
  motor1.TIMER = TIM1;
 80005b0:	4b57      	ldr	r3, [pc, #348]	@ (8000710 <main+0x1fc>)
 80005b2:	4a58      	ldr	r2, [pc, #352]	@ (8000714 <main+0x200>)
 80005b4:	609a      	str	r2, [r3, #8]
  motor1.EN_PORT = MOTOR1_EN_GPIO_Port;
 80005b6:	4b56      	ldr	r3, [pc, #344]	@ (8000710 <main+0x1fc>)
 80005b8:	4a4d      	ldr	r2, [pc, #308]	@ (80006f0 <main+0x1dc>)
 80005ba:	60da      	str	r2, [r3, #12]
  motor1.DIR_PORT = MOTOR1_DIR_GPIO_Port;
 80005bc:	4b54      	ldr	r3, [pc, #336]	@ (8000710 <main+0x1fc>)
 80005be:	4a4c      	ldr	r2, [pc, #304]	@ (80006f0 <main+0x1dc>)
 80005c0:	611a      	str	r2, [r3, #16]
  motor1.PWM_PORT = MOTOR1_PUL_GPIO_Port;
 80005c2:	4b53      	ldr	r3, [pc, #332]	@ (8000710 <main+0x1fc>)
 80005c4:	4a4a      	ldr	r2, [pc, #296]	@ (80006f0 <main+0x1dc>)
 80005c6:	615a      	str	r2, [r3, #20]
  motor1.is_high = false;
 80005c8:	4b51      	ldr	r3, [pc, #324]	@ (8000710 <main+0x1fc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	765a      	strb	r2, [r3, #25]

  // Motor 2 initialization
  motor2.DIR_PIN = MOTOR2_DIR_Pin;
 80005ce:	4b52      	ldr	r3, [pc, #328]	@ (8000718 <main+0x204>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	701a      	strb	r2, [r3, #0]
  motor2.STEP_PIN = MOTOR2_PUL_Pin;
 80005d4:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <main+0x204>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	705a      	strb	r2, [r3, #1]
  motor2.EN_PIN = MOTOR2_EN_Pin;
 80005da:	4b4f      	ldr	r3, [pc, #316]	@ (8000718 <main+0x204>)
 80005dc:	2202      	movs	r2, #2
 80005de:	709a      	strb	r2, [r3, #2]
  motor2.SPEED = 100;
 80005e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000718 <main+0x204>)
 80005e2:	2264      	movs	r2, #100	@ 0x64
 80005e4:	70da      	strb	r2, [r3, #3]
  motor2.SPEED_CNT = 0;
 80005e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000718 <main+0x204>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]

  motor2.STEPS = 200;
 80005ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <main+0x204>)
 80005ee:	22c8      	movs	r2, #200	@ 0xc8
 80005f0:	80da      	strh	r2, [r3, #6]
  motor2.TIMER = TIM2;
 80005f2:	4b49      	ldr	r3, [pc, #292]	@ (8000718 <main+0x204>)
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f8:	609a      	str	r2, [r3, #8]
  motor2.EN_PORT = MOTOR2_EN_GPIO_Port;
 80005fa:	4b47      	ldr	r3, [pc, #284]	@ (8000718 <main+0x204>)
 80005fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000600:	60da      	str	r2, [r3, #12]
  motor2.DIR_PORT = MOTOR2_DIR_GPIO_Port;
 8000602:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <main+0x204>)
 8000604:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000608:	611a      	str	r2, [r3, #16]
  motor2.PWM_PORT = MOTOR2_PUL_GPIO_Port;
 800060a:	4b43      	ldr	r3, [pc, #268]	@ (8000718 <main+0x204>)
 800060c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000610:	615a      	str	r2, [r3, #20]
  motor2.is_high = false;
 8000612:	4b41      	ldr	r3, [pc, #260]	@ (8000718 <main+0x204>)
 8000614:	2200      	movs	r2, #0
 8000616:	765a      	strb	r2, [r3, #25]


  // Motor 3 initialization
  motor3.DIR_PIN = MOTOR3_DIR_Pin;
 8000618:	4b40      	ldr	r3, [pc, #256]	@ (800071c <main+0x208>)
 800061a:	2240      	movs	r2, #64	@ 0x40
 800061c:	701a      	strb	r2, [r3, #0]
  motor3.STEP_PIN = MOTOR3_PUL_Pin;
 800061e:	4b3f      	ldr	r3, [pc, #252]	@ (800071c <main+0x208>)
 8000620:	2240      	movs	r2, #64	@ 0x40
 8000622:	705a      	strb	r2, [r3, #1]
  motor3.EN_PIN = MOTOR3_EN_Pin;
 8000624:	4b3d      	ldr	r3, [pc, #244]	@ (800071c <main+0x208>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	709a      	strb	r2, [r3, #2]
  motor3.SPEED = 100;
 800062a:	4b3c      	ldr	r3, [pc, #240]	@ (800071c <main+0x208>)
 800062c:	2264      	movs	r2, #100	@ 0x64
 800062e:	70da      	strb	r2, [r3, #3]
  motor3.SPEED_CNT = 0;
 8000630:	4b3a      	ldr	r3, [pc, #232]	@ (800071c <main+0x208>)
 8000632:	2200      	movs	r2, #0
 8000634:	711a      	strb	r2, [r3, #4]
  motor3.STEPS = 200;
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <main+0x208>)
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	80da      	strh	r2, [r3, #6]
  motor3.TIMER = TIM3;
 800063c:	4b37      	ldr	r3, [pc, #220]	@ (800071c <main+0x208>)
 800063e:	4a38      	ldr	r2, [pc, #224]	@ (8000720 <main+0x20c>)
 8000640:	609a      	str	r2, [r3, #8]
  motor3.EN_PORT = MOTOR3_EN_GPIO_Port;
 8000642:	4b36      	ldr	r3, [pc, #216]	@ (800071c <main+0x208>)
 8000644:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000648:	60da      	str	r2, [r3, #12]
  motor3.DIR_PORT = MOTOR3_DIR_GPIO_Port;
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <main+0x208>)
 800064c:	4a35      	ldr	r2, [pc, #212]	@ (8000724 <main+0x210>)
 800064e:	611a      	str	r2, [r3, #16]
  motor3.PWM_PORT = MOTOR3_PUL_GPIO_Port;
 8000650:	4b32      	ldr	r3, [pc, #200]	@ (800071c <main+0x208>)
 8000652:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000656:	615a      	str	r2, [r3, #20]
  motor3.is_high = false;
 8000658:	4b30      	ldr	r3, [pc, #192]	@ (800071c <main+0x208>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]


  // Motor 4 initialization
  motor4.DIR_PIN = MOTOR4_DIR_Pin;
 800065e:	4b32      	ldr	r3, [pc, #200]	@ (8000728 <main+0x214>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  motor4.STEP_PIN = MOTOR4_PUL_Pin;
 8000664:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <main+0x214>)
 8000666:	2200      	movs	r2, #0
 8000668:	705a      	strb	r2, [r3, #1]
  motor4.EN_PIN = MOTOR4_EN_Pin;
 800066a:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <main+0x214>)
 800066c:	2200      	movs	r2, #0
 800066e:	709a      	strb	r2, [r3, #2]
  motor4.SPEED = 100;
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <main+0x214>)
 8000672:	2264      	movs	r2, #100	@ 0x64
 8000674:	70da      	strb	r2, [r3, #3]
  motor4.SPEED_CNT = 0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <main+0x214>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]

  motor4.STEPS = 200;
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <main+0x214>)
 800067e:	22c8      	movs	r2, #200	@ 0xc8
 8000680:	80da      	strh	r2, [r3, #6]
  motor4.TIMER = TIM4;
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <main+0x214>)
 8000684:	4a29      	ldr	r2, [pc, #164]	@ (800072c <main+0x218>)
 8000686:	609a      	str	r2, [r3, #8]
  motor4.EN_PORT = MOTOR4_EN_GPIO_Port;
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <main+0x214>)
 800068a:	4a26      	ldr	r2, [pc, #152]	@ (8000724 <main+0x210>)
 800068c:	60da      	str	r2, [r3, #12]
  motor4.DIR_PORT = MOTOR4_DIR_GPIO_Port;
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <main+0x214>)
 8000690:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <main+0x210>)
 8000692:	611a      	str	r2, [r3, #16]

  motor4.PWM_PORT = MOTOR4_PUL_GPIO_Port;
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <main+0x214>)
 8000696:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800069a:	615a      	str	r2, [r3, #20]
  motor4.is_high = false;
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <main+0x214>)
 800069e:	2200      	movs	r2, #0
 80006a0:	765a      	strb	r2, [r3, #25]


  // Motor 5 initialization
  motor5.DIR_PIN = MOTOR5_DIR_Pin;
 80006a2:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <main+0x21c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
  motor5.STEP_PIN = MOTOR5_PUL_Pin;
 80006a8:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <main+0x21c>)
 80006aa:	2240      	movs	r2, #64	@ 0x40
 80006ac:	705a      	strb	r2, [r3, #1]
  motor5.EN_PIN = MOTOR5_EN_Pin;
 80006ae:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <main+0x21c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	709a      	strb	r2, [r3, #2]
  motor5.PWM_PIN = MOTOR5_PUL_Pin;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <main+0x21c>)
 80006b6:	2240      	movs	r2, #64	@ 0x40
 80006b8:	761a      	strb	r2, [r3, #24]
  motor5.SPEED = 100;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <main+0x21c>)
 80006bc:	2264      	movs	r2, #100	@ 0x64
 80006be:	70da      	strb	r2, [r3, #3]
  motor5.SPEED_CNT = 0;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <main+0x21c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	711a      	strb	r2, [r3, #4]
  motor5.STEPS = 200;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <main+0x21c>)
 80006c8:	22c8      	movs	r2, #200	@ 0xc8
 80006ca:	80da      	strh	r2, [r3, #6]
  motor5.TIMER = TIM8;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <main+0x21c>)
 80006ce:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <main+0x220>)
 80006d0:	609a      	str	r2, [r3, #8]
  motor5.EN_PORT = MOTOR5_EN_GPIO_Port;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <main+0x21c>)
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <main+0x210>)
 80006d6:	60da      	str	r2, [r3, #12]
  motor5.DIR_PORT = MOTOR5_DIR_GPIO_Port;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <main+0x21c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <main+0x210>)
 80006dc:	611a      	str	r2, [r3, #16]
  motor5.PWM_PORT = MOTOR5_PUL_GPIO_Port;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <main+0x21c>)
 80006e0:	4a03      	ldr	r2, [pc, #12]	@ (80006f0 <main+0x1dc>)
 80006e2:	615a      	str	r2, [r3, #20]
  motor5.is_high = false;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <main+0x21c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	765a      	strb	r2, [r3, #25]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <main+0x1d6>
 80006ee:	bf00      	nop
 80006f0:	48000800 	.word	0x48000800
 80006f4:	20000158 	.word	0x20000158
 80006f8:	200000c0 	.word	0x200000c0
 80006fc:	2000010c 	.word	0x2000010c
 8000700:	200001a4 	.word	0x200001a4
 8000704:	200001f0 	.word	0x200001f0
 8000708:	20000028 	.word	0x20000028
 800070c:	200002c4 	.word	0x200002c4
 8000710:	20000030 	.word	0x20000030
 8000714:	40012c00 	.word	0x40012c00
 8000718:	2000004c 	.word	0x2000004c
 800071c:	20000068 	.word	0x20000068
 8000720:	40000400 	.word	0x40000400
 8000724:	48000400 	.word	0x48000400
 8000728:	20000084 	.word	0x20000084
 800072c:	40000800 	.word	0x40000800
 8000730:	200000a0 	.word	0x200000a0
 8000734:	40013400 	.word	0x40013400

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0a6      	sub	sp, #152	@ 0x98
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000742:	2228      	movs	r2, #40	@ 0x28
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f005 f9f2 	bl	8005b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2258      	movs	r2, #88	@ 0x58
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 f9e4 	bl	8005b30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000784:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9be 	bl	8001b18 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f87f 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 f9fc 	bl	8002bc0 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ce:	f000 f869 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <SystemClock_Config+0xd0>)
 80007d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007de:	2300      	movs	r3, #0
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fc1b 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007fc:	f000 f852 	bl	80008a4 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3798      	adds	r7, #152	@ 0x98
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	00303003 	.word	0x00303003

0800080c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000814:	2120      	movs	r1, #32
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f001 f94b 	bl	8001ab4 <HAL_GPIO_TogglePin>
    receive();
 800081e:	f7ff fe19 	bl	8000454 <receive>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800083c:	d128      	bne.n	8000890 <HAL_GPIO_EXTI_Callback+0x64>
  {
	    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	    motor1.STEPS = 200;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000840:	22c8      	movs	r2, #200	@ 0xc8
 8000842:	80da      	strh	r2, [r3, #6]
	    motor1.SPEED = 50;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000846:	2232      	movs	r2, #50	@ 0x32
 8000848:	70da      	strb	r2, [r3, #3]
	    motor2.STEPS = 200;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 800084c:	22c8      	movs	r2, #200	@ 0xc8
 800084e:	80da      	strh	r2, [r3, #6]
	    motor2.SPEED = 50;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 8000852:	2232      	movs	r2, #50	@ 0x32
 8000854:	70da      	strb	r2, [r3, #3]
	    counter++;
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800085e:	6013      	str	r3, [r2, #0]
	    if (counter > 2){
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b02      	cmp	r3, #2
 8000866:	dd13      	ble.n	8000890 <HAL_GPIO_EXTI_Callback+0x64>
	    	HAL_GPIO_TogglePin(motor1.DIR_PORT, motor1.DIR_PIN); // Toggle the direction pin
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x6c>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x6c>)
 800086e:	f992 2000 	ldrsb.w	r2, [r2]
 8000872:	b292      	uxth	r2, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f91c 	bl	8001ab4 <HAL_GPIO_TogglePin>
	    	HAL_GPIO_TogglePin(motor2.DIR_PORT, motor2.DIR_PIN); // Toggle the direction pin
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	4a06      	ldr	r2, [pc, #24]	@ (800089c <HAL_GPIO_EXTI_Callback+0x70>)
 8000882:	f992 2000 	ldrsb.w	r2, [r2]
 8000886:	b292      	uxth	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f912 	bl	8001ab4 <HAL_GPIO_TogglePin>

	    }
  }
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000030 	.word	0x20000030
 800089c:	2000004c 	.word	0x2000004c
 80008a0:	200000bc 	.word	0x200000bc

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f000 fe8a 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 fd67 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800095e:	f002 ff57 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000c0 	.word	0x200000c0

0800096c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000972:	f002 ff4d 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000c0 	.word	0x200000c0

08000980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <TIM2_IRQHandler+0x10>)
 8000986:	f002 ff43 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000010c 	.word	0x2000010c

08000994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM3_IRQHandler+0x10>)
 800099a:	f002 ff39 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000158 	.word	0x20000158

080009a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM4_IRQHandler+0x10>)
 80009ae:	f002 ff2f 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001a4 	.word	0x200001a4

080009bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART1_IRQHandler+0x10>)
 80009c2:	f003 ff0d 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000023c 	.word	0x2000023c

080009d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <USART2_IRQHandler+0x10>)
 80009d6:	f003 ff03 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002c4 	.word	0x200002c4

080009e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009ec:	f001 f87c 	bl	8001ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <TIM8_BRK_IRQHandler+0x10>)
 80009fa:	f002 ff09 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001f0 	.word	0x200001f0

08000a08 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <TIM8_UP_IRQHandler+0x10>)
 8000a0e:	f002 feff 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001f0 	.word	0x200001f0

08000a1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b096      	sub	sp, #88	@ 0x58
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	222c      	movs	r2, #44	@ 0x2c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 f85f 	bl	8005b30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a72:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a74:	4a39      	ldr	r2, [pc, #228]	@ (8000b5c <MX_TIM1_Init+0x11c>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a7a:	f240 12df 	movw	r2, #479	@ 0x1df
 8000a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b35      	ldr	r3, [pc, #212]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a86:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a88:	2263      	movs	r2, #99	@ 0x63
 8000a8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a92:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a98:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9e:	482e      	ldr	r0, [pc, #184]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000aa0:	f002 fd52 	bl	8003548 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f7ff fefb 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4825      	ldr	r0, [pc, #148]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000ac2:	f003 fccb 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000acc:	f7ff feea 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad0:	2360      	movs	r3, #96	@ 0x60
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000af6:	f002 ffab 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b00:	f7ff fed0 	bl	80008a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000b3a:	f003 fd1b 	bl	8004574 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b44:	f7ff feae 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_TIM1_Init+0x118>)
 8000b4a:	f000 fa4b 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000b4e:	bf00      	nop
 8000b50:	3758      	adds	r7, #88	@ 0x58
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000c0 	.word	0x200000c0
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000b8e:	f240 12df 	movw	r2, #479	@ 0x1df
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000b9c:	2263      	movs	r2, #99	@ 0x63
 8000b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bac:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000bae:	f002 fccb 	bl	8003548 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f7ff fe74 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000bcc:	f003 fc46 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f7ff fe65 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	@ 0x60
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000bf2:	f002 ff2d 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bfc:	f7ff fe52 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c00:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM2_Init+0xb0>)
 8000c02:	f000 f9ef 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000010c 	.word	0x2000010c

08000c14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c3a:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c40:	f240 12df 	movw	r2, #479	@ 0x1df
 8000c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c4e:	2263      	movs	r2, #99	@ 0x63
 8000c50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5e:	4818      	ldr	r0, [pc, #96]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c60:	f002 fc72 	bl	8003548 <HAL_TIM_PWM_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c6a:	f7ff fe1b 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000c7e:	f003 fbed 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c88:	f7ff fe0c 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8c:	2360      	movs	r3, #96	@ 0x60
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000ca4:	f002 fed4 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cae:	f7ff fdf9 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb2:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <MX_TIM3_Init+0xac>)
 8000cb4:	f000 f996 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000158 	.word	0x20000158
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000cee:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <MX_TIM4_Init+0xb0>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000cf4:	f240 12df 	movw	r2, #479	@ 0x1df
 8000cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d02:	2263      	movs	r2, #99	@ 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d14:	f002 fc18 	bl	8003548 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d1e:	f7ff fdc1 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d32:	f003 fb93 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d3c:	f7ff fdb2 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	@ 0x60
 8000d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d58:	f002 fe7a 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f7ff fd9f 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM4_Init+0xac>)
 8000d68:	f000 f93c 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200001a4 	.word	0x200001a4
 8000d78:	40000800 	.word	0x40000800

08000d7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b096      	sub	sp, #88	@ 0x58
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	222c      	movs	r2, #44	@ 0x2c
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fec1 	bl	8005b30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dae:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000db0:	4a39      	ldr	r2, [pc, #228]	@ (8000e98 <MX_TIM8_Init+0x11c>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 480-1;
 8000db4:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000db6:	f240 12df 	movw	r2, #479	@ 0x1df
 8000dba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dc4:	2263      	movs	r2, #99	@ 0x63
 8000dc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dda:	482e      	ldr	r0, [pc, #184]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000ddc:	f002 fbb4 	bl	8003548 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f7ff fd5d 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000df6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4825      	ldr	r0, [pc, #148]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000dfe:	f003 fb2d 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e08:	f7ff fd4c 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	@ 0x60
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000e32:	f002 fe0d 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e3c:	f7ff fd32 	bl	80008a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000e76:	f003 fb7d 	bl	8004574 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000e80:	f7ff fd10 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <MX_TIM8_Init+0x118>)
 8000e86:	f000 f8ad 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3758      	adds	r7, #88	@ 0x58
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200001f0 	.word	0x200001f0
 8000e98:	40013400 	.word	0x40013400

08000e9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x134>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11c      	bne.n	8000ee8 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a48      	ldr	r2, [pc, #288]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000eb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2018      	movs	r0, #24
 8000ecc:	f000 fba3 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ed0:	2018      	movs	r0, #24
 8000ed2:	f000 fbbc 	bl	800164e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2019      	movs	r0, #25
 8000edc:	f000 fb9b 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ee0:	2019      	movs	r0, #25
 8000ee2:	f000 fbb4 	bl	800164e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000ee6:	e06e      	b.n	8000fc6 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef0:	d114      	bne.n	8000f1c <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a37      	ldr	r2, [pc, #220]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 fb81 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f14:	201c      	movs	r0, #28
 8000f16:	f000 fb9a 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000f1a:	e054      	b.n	8000fc6 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd8 <HAL_TIM_PWM_MspInit+0x13c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d114      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f26:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	201d      	movs	r0, #29
 8000f44:	f000 fb67 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f48:	201d      	movs	r0, #29
 8000f4a:	f000 fb80 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000f4e:	e03a      	b.n	8000fc6 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM4)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <HAL_TIM_PWM_MspInit+0x140>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d114      	bne.n	8000f84 <HAL_TIM_PWM_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	201e      	movs	r0, #30
 8000f78:	f000 fb4d 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f000 fb66 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000f82:	e020      	b.n	8000fc6 <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM8)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a15      	ldr	r2, [pc, #84]	@ (8000fe0 <HAL_TIM_PWM_MspInit+0x144>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d11b      	bne.n	8000fc6 <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a10      	ldr	r2, [pc, #64]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x138>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	202b      	movs	r0, #43	@ 0x2b
 8000fac:	f000 fb33 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8000fb0:	202b      	movs	r0, #43	@ 0x2b
 8000fb2:	f000 fb4c 	bl	800164e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	202c      	movs	r0, #44	@ 0x2c
 8000fbc:	f000 fb2b 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000fc0:	202c      	movs	r0, #44	@ 0x2c
 8000fc2:	f000 fb44 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40000800 	.word	0x40000800
 8000fe0:	40013400 	.word	0x40013400

08000fe4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	@ 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a57      	ldr	r2, [pc, #348]	@ (8001160 <HAL_TIM_MspPostInit+0x17c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d11c      	bne.n	8001040 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a56      	ldr	r2, [pc, #344]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 800100c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b54      	ldr	r3, [pc, #336]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800102e:	2302      	movs	r3, #2
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	484b      	ldr	r0, [pc, #300]	@ (8001168 <HAL_TIM_MspPostInit+0x184>)
 800103a:	f000 fb99 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800103e:	e08a      	b.n	8001156 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001048:	d11d      	bne.n	8001086 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b46      	ldr	r3, [pc, #280]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a45      	ldr	r2, [pc, #276]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	6153      	str	r3, [r2, #20]
 8001056:	4b43      	ldr	r3, [pc, #268]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR2_PUL_Pin;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001080:	f000 fb76 	bl	8001770 <HAL_GPIO_Init>
}
 8001084:	e067      	b.n	8001156 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a38      	ldr	r2, [pc, #224]	@ (800116c <HAL_TIM_MspPostInit+0x188>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d11d      	bne.n	80010cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	4a33      	ldr	r2, [pc, #204]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109a:	6153      	str	r3, [r2, #20]
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR3_PUL_Pin;
 80010a8:	2340      	movs	r3, #64	@ 0x40
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010b8:	2302      	movs	r3, #2
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR3_PUL_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f000 fb53 	bl	8001770 <HAL_GPIO_Init>
}
 80010ca:	e044      	b.n	8001156 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM4)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <HAL_TIM_MspPostInit+0x18c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11e      	bne.n	8001114 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_PUL_Pin;
 80010ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001100:	230a      	movs	r3, #10
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR4_PUL_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f000 fb2f 	bl	8001770 <HAL_GPIO_Init>
}
 8001112:	e020      	b.n	8001156 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM8)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <HAL_TIM_MspPostInit+0x190>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11b      	bne.n	8001156 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a10      	ldr	r2, [pc, #64]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 8001124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_TIM_MspPostInit+0x180>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR5_PUL_Pin;
 8001136:	2340      	movs	r3, #64	@ 0x40
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001146:	2304      	movs	r3, #4
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR5_PUL_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_TIM_MspPostInit+0x184>)
 8001152:	f000 fb0d 	bl	8001770 <HAL_GPIO_Init>
}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	@ 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00
 8001164:	40021000 	.word	0x40021000
 8001168:	48000800 	.word	0x48000800
 800116c:	40000400 	.word	0x40000400
 8001170:	40000800 	.word	0x40000800
 8001174:	40013400 	.word	0x40013400

08001178 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 800117e:	4a15      	ldr	r2, [pc, #84]	@ (80011d4 <MX_USART1_UART_Init+0x5c>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART1_UART_Init+0x58>)
 80011bc:	f003 fa7e 	bl	80046bc <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011c6:	f7ff fb6d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000023c 	.word	0x2000023c
 80011d4:	40013800 	.word	0x40013800

080011d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <MX_USART2_UART_Init+0x5c>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x58>)
 800121c:	f003 fa4e 	bl	80046bc <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001226:	f7ff fb3d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002c4 	.word	0x200002c4
 8001234:	40004400 	.word	0x40004400

08001238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a36      	ldr	r2, [pc, #216]	@ (8001330 <HAL_UART_MspInit+0xf8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d130      	bne.n	80012bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a35      	ldr	r2, [pc, #212]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 8001278:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800127c:	6153      	str	r3, [r2, #20]
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800128a:	2330      	movs	r3, #48	@ 0x30
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800129a:	2307      	movs	r3, #7
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4824      	ldr	r0, [pc, #144]	@ (8001338 <HAL_UART_MspInit+0x100>)
 80012a6:	f000 fa63 	bl	8001770 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2025      	movs	r0, #37	@ 0x25
 80012b0:	f000 f9b1 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012b4:	2025      	movs	r0, #37	@ 0x25
 80012b6:	f000 f9ca 	bl	800164e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ba:	e035      	b.n	8001328 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_UART_MspInit+0x104>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d130      	bne.n	8001328 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_UART_MspInit+0xfc>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f6:	230c      	movs	r3, #12
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f000 fa2c 	bl	8001770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2026      	movs	r0, #38	@ 0x26
 800131e:	f000 f97a 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001322:	2026      	movs	r0, #38	@ 0x26
 8001324:	f000 f993 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	@ 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013800 	.word	0x40013800
 8001334:	40021000 	.word	0x40021000
 8001338:	48000800 	.word	0x48000800
 800133c:	40004400 	.word	0x40004400

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001378 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fb6a 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f004 fbe7 	bl	8005b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f8cf 	bl	8000514 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800138c:	20000350 	.word	0x20000350

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f92b 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fa7e 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f943 	bl	800166a <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f90b 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	2000034c 	.word	0x2000034c

08001448 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;  
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000034c 	.word	0x2000034c

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	@ (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	@ (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff29 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff3e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff8e 	bl	8001554 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5d 	bl	8001500 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff31 	bl	80014c4 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001690:	2b02      	cmp	r3, #2
 8001692:	d008      	beq.n	80016a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2204      	movs	r2, #4
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e020      	b.n	80016e8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001706:	2b02      	cmp	r3, #2
 8001708:	d005      	beq.n	8001716 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2204      	movs	r2, #4
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e027      	b.n	8001766 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 020e 	bic.w	r2, r2, #14
 8001724:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
    } 
  }
  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e160      	b.n	8001a42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8152 	beq.w	8001a3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d005      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b03      	cmp	r3, #3
 800181c:	d017      	beq.n	800184e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80ac 	beq.w	8001a3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018fc:	4a59      	ldr	r2, [pc, #356]	@ (8001a64 <HAL_GPIO_Init+0x2f4>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001926:	d025      	beq.n	8001974 <HAL_GPIO_Init+0x204>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a4f      	ldr	r2, [pc, #316]	@ (8001a68 <HAL_GPIO_Init+0x2f8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d01f      	beq.n	8001970 <HAL_GPIO_Init+0x200>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a4e      	ldr	r2, [pc, #312]	@ (8001a6c <HAL_GPIO_Init+0x2fc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d019      	beq.n	800196c <HAL_GPIO_Init+0x1fc>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a70 <HAL_GPIO_Init+0x300>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1f4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a78 <HAL_GPIO_Init+0x308>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1f0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <HAL_GPIO_Init+0x30c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1ec>
 8001958:	2306      	movs	r3, #6
 800195a:	e00c      	b.n	8001976 <HAL_GPIO_Init+0x206>
 800195c:	2307      	movs	r3, #7
 800195e:	e00a      	b.n	8001976 <HAL_GPIO_Init+0x206>
 8001960:	2305      	movs	r3, #5
 8001962:	e008      	b.n	8001976 <HAL_GPIO_Init+0x206>
 8001964:	2304      	movs	r3, #4
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x206>
 8001968:	2303      	movs	r3, #3
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x206>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x206>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x206>
 8001974:	2300      	movs	r3, #0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001986:	4937      	ldr	r1, [pc, #220]	@ (8001a64 <HAL_GPIO_Init+0x2f4>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019b8:	4a31      	ldr	r2, [pc, #196]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019be:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e2:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f ae97 	bne.w	8001780 <HAL_GPIO_Init+0x10>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48000c00 	.word	0x48000c00
 8001a74:	48001000 	.word	0x48001000
 8001a78:	48001400 	.word	0x48001400
 8001a7c:	48001800 	.word	0x48001800
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43d9      	mvns	r1, r3
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fe90 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f001 b83a 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 816f 	beq.w	8001e32 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b54:	4bb5      	ldr	r3, [pc, #724]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b60:	4bb2      	ldr	r3, [pc, #712]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d15c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x10e>
 8001b6c:	4baf      	ldr	r3, [pc, #700]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b78:	d155      	bne.n	8001c26 <HAL_RCC_OscConfig+0x10e>
 8001b7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x94>
 8001ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	e015      	b.n	8001bd8 <HAL_RCC_OscConfig+0xc0>
 8001bac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001bc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bc4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bc8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bd4:	4b95      	ldr	r3, [pc, #596]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bdc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001be0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001bec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8111 	beq.w	8001e30 <HAL_RCC_OscConfig+0x318>
 8001c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8108 	bne.w	8001e30 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f000 bfc6 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12e>
 8001c38:	4b7c      	ldr	r3, [pc, #496]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7b      	ldr	r2, [pc, #492]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e036      	b.n	8001cb4 <HAL_RCC_OscConfig+0x19c>
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x158>
 8001c56:	4b75      	ldr	r3, [pc, #468]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a74      	ldr	r2, [pc, #464]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b72      	ldr	r3, [pc, #456]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a71      	ldr	r2, [pc, #452]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e021      	b.n	8001cb4 <HAL_RCC_OscConfig+0x19c>
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x184>
 8001c82:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a69      	ldr	r2, [pc, #420]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b67      	ldr	r3, [pc, #412]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a66      	ldr	r2, [pc, #408]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x19c>
 8001c9c:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a62      	ldr	r2, [pc, #392]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b60      	ldr	r3, [pc, #384]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5f      	ldr	r2, [pc, #380]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d059      	beq.n	8001d78 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fbc0 	bl	8001448 <HAL_GetTick>
 8001cc8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cce:	f7ff fbbb 	bl	8001448 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f000 bf67 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8001ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001cf8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1fe>
 8001d10:	4b46      	ldr	r3, [pc, #280]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x22a>
 8001d16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d1a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d2e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d46:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001d4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001d56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ab      	beq.n	8001cce <HAL_RCC_OscConfig+0x1b6>
 8001d76:	e05c      	b.n	8001e32 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb66 	bl	8001448 <HAL_GetTick>
 8001d7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb61 	bl	8001448 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d902      	bls.n	8001d98 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	f000 bf0d 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8001d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d9c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001dac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <HAL_RCC_OscConfig+0x2b2>
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x2de>
 8001dca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001dde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_RCC_OscConfig+0x314>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dfa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001dfe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001e0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ab      	bne.n	8001d82 <HAL_RCC_OscConfig+0x26a>
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_OscConfig+0x31a>
 8001e2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 817f 	beq.w	8002146 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e48:	4ba7      	ldr	r3, [pc, #668]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e54:	4ba4      	ldr	r3, [pc, #656]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d173      	bne.n	8001f48 <HAL_RCC_OscConfig+0x430>
 8001e60:	4ba1      	ldr	r3, [pc, #644]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e6c:	d16c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x430>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001e80:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0x386>
 8001e98:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	e013      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3ae>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001eb6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001ecc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001ed8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3f6>
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d002      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f000 be52 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b76      	ldr	r3, [pc, #472]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	21f8      	movs	r1, #248	@ 0xf8
 8001f24:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001f2c:	fa91 f1a1 	rbit	r1, r1
 8001f30:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001f34:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f38:	fab1 f181 	clz	r1, r1
 8001f3c:	b2c9      	uxtb	r1, r1
 8001f3e:	408b      	lsls	r3, r1
 8001f40:	4969      	ldr	r1, [pc, #420]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e0fe      	b.n	8002146 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8088 	beq.w	800206a <HAL_RCC_OscConfig+0x552>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001f6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fa5f 	bl	8001448 <HAL_GetTick>
 8001f8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff fa5a 	bl	8001448 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f000 be06 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001fb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4be>
 8001fd0:	4b45      	ldr	r3, [pc, #276]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e013      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2202      	movs	r2, #2
 8002000:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002004:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002010:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0af      	beq.n	8001f90 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	21f8      	movs	r1, #248	@ 0xf8
 8002046:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800204e:	fa91 f1a1 	rbit	r1, r1
 8002052:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002056:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800205a:	fab1 f181 	clz	r1, r1
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	408b      	lsls	r3, r1
 8002062:	4921      	ldr	r1, [pc, #132]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e06d      	b.n	8002146 <HAL_RCC_OscConfig+0x62e>
 800206a:	2301      	movs	r3, #1
 800206c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800207c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800208a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	461a      	mov	r2, r3
 8002092:	2300      	movs	r3, #0
 8002094:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff f9d7 	bl	8001448 <HAL_GetTick>
 800209a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff f9d2 	bl	8001448 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d902      	bls.n	80020b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f000 bd7e 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80020c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x5d4>
 80020e0:	4b01      	ldr	r3, [pc, #4]	@ (80020e8 <HAL_RCC_OscConfig+0x5d0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	e016      	b.n	8002114 <HAL_RCC_OscConfig+0x5fc>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002104:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002110:	4bbf      	ldr	r3, [pc, #764]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	2202      	movs	r2, #2
 8002116:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800211a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002126:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f002 021f 	and.w	r2, r2, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ac      	bne.n	80020a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8113 	beq.w	8002382 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002160:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d07c      	beq.n	8002266 <HAL_RCC_OscConfig+0x74e>
 800216c:	2301      	movs	r3, #1
 800216e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800217e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4ba2      	ldr	r3, [pc, #648]	@ (8002414 <HAL_RCC_OscConfig+0x8fc>)
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	461a      	mov	r2, r3
 8002192:	2301      	movs	r3, #1
 8002194:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff f957 	bl	8001448 <HAL_GetTick>
 800219a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f952 	bl	8001448 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d902      	bls.n	80021b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f000 bcfe 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002214:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 8002218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800221a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002222:	2102      	movs	r1, #2
 8002224:	6019      	str	r1, [r3, #0]
 8002226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f1a3 	rbit	r1, r3
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800223c:	6019      	str	r1, [r3, #0]
  return result;
 800223e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002242:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d09d      	beq.n	80021a0 <HAL_RCC_OscConfig+0x688>
 8002264:	e08d      	b.n	8002382 <HAL_RCC_OscConfig+0x86a>
 8002266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002288:	601a      	str	r2, [r3, #0]
  return result;
 800228a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002292:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	4b5d      	ldr	r3, [pc, #372]	@ (8002414 <HAL_RCC_OscConfig+0x8fc>)
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff f8ce 	bl	8001448 <HAL_GetTick>
 80022ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff f8c9 	bl	8001448 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d902      	bls.n	80022c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	f000 bc75 	b.w	8002bb2 <HAL_RCC_OscConfig+0x109a>
 80022c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022d0:	2202      	movs	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fa93 f2a3 	rbit	r2, r3
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002320:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002332:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b36      	ldr	r3, [pc, #216]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 8002336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002340:	2102      	movs	r1, #2
 8002342:	6019      	str	r1, [r3, #0]
 8002344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002348:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f1a3 	rbit	r1, r3
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800235a:	6019      	str	r1, [r3, #0]
  return result;
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d197      	bne.n	80022b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002386:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 81a5 	beq.w	80026e2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <HAL_RCC_OscConfig+0x8f8>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_RCC_OscConfig+0x900>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d121      	bne.n	8002428 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_RCC_OscConfig+0x900>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_RCC_OscConfig+0x900>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f0:	f7ff f82a 	bl	8001448 <HAL_GetTick>
 80023f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e010      	b.n	800241c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7ff f825 	bl	8001448 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e3d1      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	10908120 	.word	0x10908120
 8002418:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b8d      	ldr	r3, [pc, #564]	@ (8002654 <HAL_RCC_OscConfig+0xb3c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0e8      	beq.n	80023fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x92e>
 8002438:	4b87      	ldr	r3, [pc, #540]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a86      	ldr	r2, [pc, #536]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e035      	b.n	80024b2 <HAL_RCC_OscConfig+0x99a>
 8002446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x958>
 8002456:	4b80      	ldr	r3, [pc, #512]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a7f      	ldr	r2, [pc, #508]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b7d      	ldr	r3, [pc, #500]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a7c      	ldr	r2, [pc, #496]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	e020      	b.n	80024b2 <HAL_RCC_OscConfig+0x99a>
 8002470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002474:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x982>
 8002480:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a74      	ldr	r2, [pc, #464]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4b72      	ldr	r3, [pc, #456]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a71      	ldr	r2, [pc, #452]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x99a>
 800249a:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a6e      	ldr	r2, [pc, #440]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8081 	beq.w	80025c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe ffc0 	bl	8001448 <HAL_GetTick>
 80024c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe ffbb 	bl	8001448 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e365      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 80024e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002512:	2202      	movs	r2, #2
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002528:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800252c:	601a      	str	r2, [r3, #0]
  return result;
 800252e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002532:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0xa3a>
 800254c:	4b42      	ldr	r3, [pc, #264]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0xa62>
 8002552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002556:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800255a:	2202      	movs	r2, #2
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002562:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f2a3 	rbit	r2, r3
 800256c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002570:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800257e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002582:	2102      	movs	r1, #2
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800258a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002598:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025a2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d084      	beq.n	80024ce <HAL_RCC_OscConfig+0x9b6>
 80025c4:	e083      	b.n	80026ce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe ff3f 	bl	8001448 <HAL_GetTick>
 80025ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe ff3a 	bl	8001448 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2e4      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 80025e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025f0:	2202      	movs	r2, #2
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002614:	2202      	movs	r2, #2
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002634:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002638:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0xb44>
 800264e:	4b02      	ldr	r3, [pc, #8]	@ (8002658 <HAL_RCC_OscConfig+0xb40>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	e017      	b.n	8002684 <HAL_RCC_OscConfig+0xb6c>
 8002654:	40007000 	.word	0x40007000
 8002658:	40021000 	.word	0x40021000
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002664:	2202      	movs	r2, #2
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	4bb3      	ldr	r3, [pc, #716]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002688:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800268c:	2102      	movs	r1, #2
 800268e:	6011      	str	r1, [r2, #0]
 8002690:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002694:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	fa92 f1a2 	rbit	r1, r2
 800269e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026a2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026a6:	6011      	str	r1, [r2, #0]
  return result;
 80026a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f002 021f 	and.w	r2, r2, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d180      	bne.n	80025d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ce:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a9d      	ldr	r2, [pc, #628]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 825e 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f4:	4b96      	ldr	r3, [pc, #600]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	f000 821f 	beq.w	8002b40 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b02      	cmp	r3, #2
 8002710:	f040 8170 	bne.w	80029f4 <HAL_RCC_OscConfig+0xedc>
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800271c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002734:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002738:	601a      	str	r2, [r3, #0]
  return result;
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002742:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800274e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	2300      	movs	r3, #0
 8002758:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fe75 	bl	8001448 <HAL_GetTick>
 800275e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002762:	e009      	b.n	8002778 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fe70 	bl	8001448 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e21c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8002778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002780:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800279c:	601a      	str	r2, [r3, #0]
  return result;
 800279e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0xcaa>
 80027bc:	4b64      	ldr	r3, [pc, #400]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e027      	b.n	8002812 <HAL_RCC_OscConfig+0xcfa>
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002808:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b50      	ldr	r3, [pc, #320]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002816:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800281a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800281e:	6011      	str	r1, [r2, #0]
 8002820:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002824:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fa92 f1a2 	rbit	r1, r2
 800282e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002832:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002836:	6011      	str	r1, [r2, #0]
  return result;
 8002838:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800283c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d182      	bne.n	8002764 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285e:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	f023 020f 	bic.w	r2, r3, #15
 8002866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	4937      	ldr	r1, [pc, #220]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 8002874:	4313      	orrs	r3, r2
 8002876:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002884:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a19      	ldr	r1, [r3, #32]
 800288c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002890:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	430b      	orrs	r3, r1
 800289a:	492d      	ldr	r1, [pc, #180]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
 80028a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028c4:	601a      	str	r2, [r3, #0]
  return result;
 80028c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	2301      	movs	r3, #1
 80028e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fdaf 	bl	8001448 <HAL_GetTick>
 80028ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ee:	e009      	b.n	8002904 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fdaa 	bl	8001448 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e156      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8002904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002908:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800290c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002916:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002928:	601a      	str	r2, [r3, #0]
  return result;
 800292a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002932:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0xe3c>
 8002948:	4b01      	ldr	r3, [pc, #4]	@ (8002950 <HAL_RCC_OscConfig+0xe38>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e02a      	b.n	80029a4 <HAL_RCC_OscConfig+0xe8c>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002958:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800295c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002966:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002974:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002982:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b86      	ldr	r3, [pc, #536]	@ (8002bbc <HAL_RCC_OscConfig+0x10a4>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fa92 f1a2 	rbit	r1, r2
 80029c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029c4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029c8:	6011      	str	r1, [r2, #0]
  return result;
 80029ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029ce:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f43f af7f 	beq.w	80028f0 <HAL_RCC_OscConfig+0xdd8>
 80029f2:	e0dd      	b.n	8002bb0 <HAL_RCC_OscConfig+0x1098>
 80029f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a18:	601a      	str	r2, [r3, #0]
  return result;
 8002a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a22:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fd05 	bl	8001448 <HAL_GetTick>
 8002a3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fd00 	bl	8001448 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0ac      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a7c:	601a      	str	r2, [r3, #0]
  return result;
 8002a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xf8a>
 8002a9c:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_OscConfig+0x10a4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	e027      	b.n	8002af2 <HAL_RCC_OscConfig+0xfda>
 8002aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ada:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_RCC_OscConfig+0x10a4>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002afa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002afe:	6011      	str	r1, [r2, #0]
 8002b00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	fa92 f1a2 	rbit	r1, r2
 8002b0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b12:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b16:	6011      	str	r1, [r2, #0]
  return result;
 8002b18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b1c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d182      	bne.n	8002a44 <HAL_RCC_OscConfig+0xf2c>
 8002b3e:	e037      	b.n	8002bb0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02e      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_RCC_OscConfig+0x10a4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <HAL_RCC_OscConfig+0x10a4>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b68:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d117      	bne.n	8002bac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b80:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b09e      	sub	sp, #120	@ 0x78
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e162      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b90      	ldr	r3, [pc, #576]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	498b      	ldr	r1, [pc, #556]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b89      	ldr	r3, [pc, #548]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e14a      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	497f      	ldr	r1, [pc, #508]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80dc 	beq.w	8002dec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d13c      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xf6>
 8002c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xa6>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	e00f      	b.n	8002c86 <HAL_RCC_ClockConfig+0xc6>
 8002c66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c82:	4b67      	ldr	r3, [pc, #412]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c8e:	fa92 f2a2 	rbit	r2, r2
 8002c92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0220 	orr.w	r2, r2, #32
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d17b      	bne.n	8002daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0f3      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d13c      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x178>
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x128>
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e00f      	b.n	8002d08 <HAL_RCC_ClockConfig+0x148>
 8002ce8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d04:	4b46      	ldr	r3, [pc, #280]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f042 0220 	orr.w	r2, r2, #32
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f002 021f 	and.w	r2, r2, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d13a      	bne.n	8002daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b2      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
 8002d5a:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e00d      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1bc>
 8002d60:	2302      	movs	r3, #2
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	61ba      	str	r2, [r7, #24]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	fa92 f2a2 	rbit	r2, r2
 8002d86:	617a      	str	r2, [r7, #20]
  return result;
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f042 0220 	orr.w	r2, r2, #32
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 021f 	and.w	r2, r2, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e079      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	491a      	ldr	r1, [pc, #104]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fb44 	bl	8001448 <HAL_GetTick>
 8002dc0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe fb40 	bl	8001448 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e061      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d214      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	4906      	ldr	r1, [pc, #24]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e040      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2de>
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	491a      	ldr	r1, [pc, #104]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4912      	ldr	r1, [pc, #72]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e62:	f000 f829 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4601      	mov	r1, r0
 8002e68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e70:	22f0      	movs	r2, #240	@ 0xf0
 8002e72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	fa92 f2a2 	rbit	r2, r2
 8002e7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	fab2 f282 	clz	r2, r2
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	40d3      	lsrs	r3, r2
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x2ec>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8e:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fa92 	bl	80013c0 <HAL_InitTick>
  
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3778      	adds	r7, #120	@ 0x78
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08005ba0 	.word	0x08005ba0
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b08b      	sub	sp, #44	@ 0x2c
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x36>
 8002ee6:	e03f      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eea:	623b      	str	r3, [r7, #32]
      break;
 8002eec:	e03f      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ef4:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002ef8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	fa92 f2a2 	rbit	r2, r2
 8002f00:	607a      	str	r2, [r7, #4]
  return result;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	40d3      	lsrs	r3, r2
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f12:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	fa92 f2a2 	rbit	r2, r2
 8002f24:	60fa      	str	r2, [r7, #12]
  return result;
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	40d3      	lsrs	r3, r2
 8002f30:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f40:	4a0f      	ldr	r2, [pc, #60]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f50:	e007      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f52:	4a0b      	ldr	r2, [pc, #44]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	623b      	str	r3, [r7, #32]
      break;
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f6a:	623b      	str	r3, [r7, #32]
      break;
 8002f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	372c      	adds	r7, #44	@ 0x2c
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	007a1200 	.word	0x007a1200
 8002f84:	08005bb8 	.word	0x08005bb8
 8002f88:	08005bc8 	.word	0x08005bc8

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002faa:	f7ff ffef 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fb8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	603a      	str	r2, [r7, #0]
  return result;
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	40d3      	lsrs	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08005bb0 	.word	0x08005bb0

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fee:	f7ff ffcd 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ffc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003000:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	603a      	str	r2, [r7, #0]
  return result;
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	40d3      	lsrs	r3, r2
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	08005bb0 	.word	0x08005bb0

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b092      	sub	sp, #72	@ 0x48
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80d4 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003050:	4b4e      	ldr	r3, [pc, #312]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10e      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b4b      	ldr	r3, [pc, #300]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a4a      	ldr	r2, [pc, #296]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	4b48      	ldr	r3, [pc, #288]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b42      	ldr	r3, [pc, #264]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a41      	ldr	r2, [pc, #260]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003090:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7fe f9d9 	bl	8001448 <HAL_GetTick>
 8003096:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fe f9d5 	bl	8001448 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	@ 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e1d6      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8084 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d07c      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	461a      	mov	r2, r3
 8003102:	2301      	movs	r3, #1
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800312a:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04b      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f985 	bl	8001448 <HAL_GetTick>
 800313e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f981 	bl	8001448 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e180      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003158:	2302      	movs	r3, #2
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	61fb      	str	r3, [r7, #28]
  return result;
 8003170:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d108      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003186:	4b01      	ldr	r3, [pc, #4]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	e00d      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	10908100 	.word	0x10908100
 8003198:	2302      	movs	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	2202      	movs	r2, #2
 80031aa:	613a      	str	r2, [r7, #16]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	60fa      	str	r2, [r7, #12]
  return result;
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0b7      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	498c      	ldr	r1, [pc, #560]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a87      	ldr	r2, [pc, #540]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003204:	4b82      	ldr	r3, [pc, #520]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	f023 0203 	bic.w	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	497f      	ldr	r1, [pc, #508]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003222:	4b7b      	ldr	r3, [pc, #492]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4978      	ldr	r1, [pc, #480]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003240:	4b73      	ldr	r3, [pc, #460]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4970      	ldr	r1, [pc, #448]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800325e:	4b6c      	ldr	r3, [pc, #432]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4969      	ldr	r1, [pc, #420]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800327c:	4b64      	ldr	r3, [pc, #400]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	4961      	ldr	r1, [pc, #388]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f023 0220 	bic.w	r2, r3, #32
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	495a      	ldr	r1, [pc, #360]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032b8:	4b55      	ldr	r3, [pc, #340]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	4952      	ldr	r1, [pc, #328]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	494b      	ldr	r1, [pc, #300]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032f4:	4b46      	ldr	r3, [pc, #280]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4943      	ldr	r1, [pc, #268]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003312:	4b3f      	ldr	r3, [pc, #252]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	493c      	ldr	r1, [pc, #240]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003330:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	4934      	ldr	r1, [pc, #208]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800334e:	4b30      	ldr	r3, [pc, #192]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	492d      	ldr	r1, [pc, #180]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800336c:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	4925      	ldr	r1, [pc, #148]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800338a:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	491e      	ldr	r1, [pc, #120]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	4916      	ldr	r1, [pc, #88]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	490f      	ldr	r1, [pc, #60]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003402:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003416:	4913      	ldr	r1, [pc, #76]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003418:	4313      	orrs	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003434:	490b      	ldr	r1, [pc, #44]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003436:	4313      	orrs	r3, r2
 8003438:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003452:	4904      	ldr	r1, [pc, #16]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003454:	4313      	orrs	r3, r2
 8003456:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3748      	adds	r7, #72	@ 0x48
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04f      	b.n	8003520 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	@ (800352c <HAL_TIM_Base_Start_IT+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034aa:	d018      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003530 <HAL_TIM_Base_Start_IT+0xc8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_TIM_Base_Start_IT+0xcc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <HAL_TIM_Base_Start_IT+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_TIM_Base_Start_IT+0xd4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	@ (8003540 <HAL_TIM_Base_Start_IT+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d115      	bne.n	800350a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d015      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f6:	d011      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	e008      	b.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e000      	b.n	800351e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40013400 	.word	0x40013400
 800353c:	40014000 	.word	0x40014000
 8003540:	40015000 	.word	0x40015000
 8003544:	00010007 	.word	0x00010007

08003548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e049      	b.n	80035ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fc94 	bl	8000e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fb9e 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_TIM_PWM_Start+0x24>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e03c      	b.n	8003696 <HAL_TIM_PWM_Start+0x9e>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d109      	bne.n	8003636 <HAL_TIM_PWM_Start+0x3e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	e02f      	b.n	8003696 <HAL_TIM_PWM_Start+0x9e>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d109      	bne.n	8003650 <HAL_TIM_PWM_Start+0x58>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e022      	b.n	8003696 <HAL_TIM_PWM_Start+0x9e>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d109      	bne.n	800366a <HAL_TIM_PWM_Start+0x72>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e015      	b.n	8003696 <HAL_TIM_PWM_Start+0x9e>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b10      	cmp	r3, #16
 800366e:	d109      	bne.n	8003684 <HAL_TIM_PWM_Start+0x8c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e008      	b.n	8003696 <HAL_TIM_PWM_Start+0x9e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0a1      	b.n	80037e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0xb6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ac:	e023      	b.n	80036f6 <HAL_TIM_PWM_Start+0xfe>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0xc6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036bc:	e01b      	b.n	80036f6 <HAL_TIM_PWM_Start+0xfe>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xd6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036cc:	e013      	b.n	80036f6 <HAL_TIM_PWM_Start+0xfe>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xe6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_PWM_Start+0xfe>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xf6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ec:	e003      	b.n	80036f6 <HAL_TIM_PWM_Start+0xfe>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fe86 	bl	8004410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <HAL_TIM_PWM_Start+0x1f4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_PWM_Start+0x148>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a37      	ldr	r2, [pc, #220]	@ (80037f0 <HAL_TIM_PWM_Start+0x1f8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_TIM_PWM_Start+0x148>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a35      	ldr	r2, [pc, #212]	@ (80037f4 <HAL_TIM_PWM_Start+0x1fc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_PWM_Start+0x148>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a34      	ldr	r2, [pc, #208]	@ (80037f8 <HAL_TIM_PWM_Start+0x200>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_PWM_Start+0x148>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a32      	ldr	r2, [pc, #200]	@ (80037fc <HAL_TIM_PWM_Start+0x204>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_PWM_Start+0x148>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a31      	ldr	r2, [pc, #196]	@ (8003800 <HAL_TIM_PWM_Start+0x208>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_TIM_PWM_Start+0x14c>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_TIM_PWM_Start+0x14e>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_TIM_PWM_Start+0x1f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a24      	ldr	r2, [pc, #144]	@ (8003804 <HAL_TIM_PWM_Start+0x20c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <HAL_TIM_PWM_Start+0x210>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <HAL_TIM_PWM_Start+0x1f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <HAL_TIM_PWM_Start+0x1fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIM_PWM_Start+0x1a8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <HAL_TIM_PWM_Start+0x208>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d115      	bne.n	80037cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_TIM_PWM_Start+0x214>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d015      	beq.n	80037de <HAL_TIM_PWM_Start+0x1e6>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b8:	d011      	beq.n	80037de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	e008      	b.n	80037de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e000      	b.n	80037e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800
 8003800:	40015000 	.word	0x40015000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	00010007 	.word	0x00010007

08003810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0202 	mvn.w	r2, #2
 800383c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa1a 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa0c 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fa1d 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0204 	mvn.w	r2, #4
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9f0 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9e2 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f9f3 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0208 	mvn.w	r2, #8
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9c6 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9b8 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f9c9 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2208      	movs	r2, #8
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f99c 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f98e 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f99f 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fc fd06 	bl	80003a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399e:	2b80      	cmp	r3, #128	@ 0x80
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ac:	2b80      	cmp	r3, #128	@ 0x80
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe6a 	bl	8004694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fe5d 	bl	80046a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b40      	cmp	r3, #64	@ 0x40
 80039fa:	d10e      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f94d 	bl	8003cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d10e      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d107      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0220 	mvn.w	r2, #32
 8003a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fe1d 	bl	8004680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0ff      	b.n	8003c6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b14      	cmp	r3, #20
 8003a7a:	f200 80f0 	bhi.w	8003c5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003c5f 	.word	0x08003c5f
 8003a8c:	08003c5f 	.word	0x08003c5f
 8003a90:	08003c5f 	.word	0x08003c5f
 8003a94:	08003b19 	.word	0x08003b19
 8003a98:	08003c5f 	.word	0x08003c5f
 8003a9c:	08003c5f 	.word	0x08003c5f
 8003aa0:	08003c5f 	.word	0x08003c5f
 8003aa4:	08003b5b 	.word	0x08003b5b
 8003aa8:	08003c5f 	.word	0x08003c5f
 8003aac:	08003c5f 	.word	0x08003c5f
 8003ab0:	08003c5f 	.word	0x08003c5f
 8003ab4:	08003b9b 	.word	0x08003b9b
 8003ab8:	08003c5f 	.word	0x08003c5f
 8003abc:	08003c5f 	.word	0x08003c5f
 8003ac0:	08003c5f 	.word	0x08003c5f
 8003ac4:	08003bdd 	.word	0x08003bdd
 8003ac8:	08003c5f 	.word	0x08003c5f
 8003acc:	08003c5f 	.word	0x08003c5f
 8003ad0:	08003c5f 	.word	0x08003c5f
 8003ad4:	08003c1d 	.word	0x08003c1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f990 	bl	8003e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0208 	orr.w	r2, r2, #8
 8003af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0204 	bic.w	r2, r2, #4
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6999      	ldr	r1, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	619a      	str	r2, [r3, #24]
      break;
 8003b16:	e0a5      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fa0a 	bl	8003f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	619a      	str	r2, [r3, #24]
      break;
 8003b58:	e084      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa7d 	bl	8004060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0208 	orr.w	r2, r2, #8
 8003b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0204 	bic.w	r2, r2, #4
 8003b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
      break;
 8003b98:	e064      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 faef 	bl	8004184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69d9      	ldr	r1, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	021a      	lsls	r2, r3, #8
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	61da      	str	r2, [r3, #28]
      break;
 8003bda:	e043      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb3e 	bl	8004264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c1a:	e023      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fb88 	bl	8004338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c5c:	e002      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
      break;
 8003c62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop

08003c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a42      	ldr	r2, [pc, #264]	@ (8003de4 <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce6:	d00f      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3f      	ldr	r2, [pc, #252]	@ (8003de8 <TIM_Base_SetConfig+0x120>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dec <TIM_Base_SetConfig+0x124>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003df0 <TIM_Base_SetConfig+0x128>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3c      	ldr	r2, [pc, #240]	@ (8003df4 <TIM_Base_SetConfig+0x12c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a31      	ldr	r2, [pc, #196]	@ (8003de4 <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003de8 <TIM_Base_SetConfig+0x120>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <TIM_Base_SetConfig+0x124>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <TIM_Base_SetConfig+0x128>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <TIM_Base_SetConfig+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dfc <TIM_Base_SetConfig+0x134>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2a      	ldr	r2, [pc, #168]	@ (8003e00 <TIM_Base_SetConfig+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0x9a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <TIM_Base_SetConfig+0x12c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <TIM_Base_SetConfig+0x11c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <TIM_Base_SetConfig+0x100>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <TIM_Base_SetConfig+0x128>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x100>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <TIM_Base_SetConfig+0x130>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x100>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a12      	ldr	r2, [pc, #72]	@ (8003dfc <TIM_Base_SetConfig+0x134>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x100>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <TIM_Base_SetConfig+0x138>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x100>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003df4 <TIM_Base_SetConfig+0x12c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d103      	bne.n	8003dd0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	615a      	str	r2, [r3, #20]
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40013400 	.word	0x40013400
 8003df4:	40015000 	.word	0x40015000
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800

08003e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a30      	ldr	r2, [pc, #192]	@ (8003f20 <TIM_OC1_SetConfig+0x11c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <TIM_OC1_SetConfig+0x88>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	@ (8003f24 <TIM_OC1_SetConfig+0x120>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00f      	beq.n	8003e8c <TIM_OC1_SetConfig+0x88>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f28 <TIM_OC1_SetConfig+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <TIM_OC1_SetConfig+0x88>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <TIM_OC1_SetConfig+0x128>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC1_SetConfig+0x88>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f30 <TIM_OC1_SetConfig+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC1_SetConfig+0x88>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	@ (8003f34 <TIM_OC1_SetConfig+0x130>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10c      	bne.n	8003ea6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0308 	bic.w	r3, r3, #8
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <TIM_OC1_SetConfig+0x11c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <TIM_OC1_SetConfig+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <TIM_OC1_SetConfig+0x120>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00f      	beq.n	8003ed6 <TIM_OC1_SetConfig+0xd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <TIM_OC1_SetConfig+0x124>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_OC1_SetConfig+0xd2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <TIM_OC1_SetConfig+0x128>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_OC1_SetConfig+0xd2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <TIM_OC1_SetConfig+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC1_SetConfig+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <TIM_OC1_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d111      	bne.n	8003efa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40015000 	.word	0x40015000

08003f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f023 0210 	bic.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0320 	bic.w	r3, r3, #32
 8003f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2c      	ldr	r2, [pc, #176]	@ (8004048 <TIM_OC2_SetConfig+0x110>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_OC2_SetConfig+0x74>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800404c <TIM_OC2_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x74>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8004050 <TIM_OC2_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10d      	bne.n	8003fc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	@ (8004048 <TIM_OC2_SetConfig+0x110>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <TIM_OC2_SetConfig+0x114>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <TIM_OC2_SetConfig+0x11c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <TIM_OC2_SetConfig+0x120>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <TIM_OC2_SetConfig+0x124>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC2_SetConfig+0xc0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <TIM_OC2_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d113      	bne.n	8004020 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ffe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004006:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40015000 	.word	0x40015000
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <TIM_OC3_SetConfig+0x10c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <TIM_OC3_SetConfig+0x72>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <TIM_OC3_SetConfig+0x110>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_OC3_SetConfig+0x72>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a29      	ldr	r2, [pc, #164]	@ (8004174 <TIM_OC3_SetConfig+0x114>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10d      	bne.n	80040ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <TIM_OC3_SetConfig+0x10c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <TIM_OC3_SetConfig+0xbe>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <TIM_OC3_SetConfig+0x110>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00f      	beq.n	800411e <TIM_OC3_SetConfig+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <TIM_OC3_SetConfig+0x118>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <TIM_OC3_SetConfig+0xbe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <TIM_OC3_SetConfig+0x11c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <TIM_OC3_SetConfig+0xbe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1b      	ldr	r2, [pc, #108]	@ (8004180 <TIM_OC3_SetConfig+0x120>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC3_SetConfig+0xbe>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <TIM_OC3_SetConfig+0x114>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d113      	bne.n	8004146 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800412c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40013400 	.word	0x40013400
 8004174:	40015000 	.word	0x40015000
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <TIM_OC4_SetConfig+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <TIM_OC4_SetConfig+0x8c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <TIM_OC4_SetConfig+0xcc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00f      	beq.n	8004210 <TIM_OC4_SetConfig+0x8c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <TIM_OC4_SetConfig+0xd0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_OC4_SetConfig+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <TIM_OC4_SetConfig+0xd4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_OC4_SetConfig+0x8c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a16      	ldr	r2, [pc, #88]	@ (800425c <TIM_OC4_SetConfig+0xd8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC4_SetConfig+0x8c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <TIM_OC4_SetConfig+0xdc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d109      	bne.n	8004224 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40015000 	.word	0x40015000

08004264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <TIM_OC5_SetConfig+0xbc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <TIM_OC5_SetConfig+0x82>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <TIM_OC5_SetConfig+0xc0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00f      	beq.n	80042e6 <TIM_OC5_SetConfig+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <TIM_OC5_SetConfig+0xc4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_OC5_SetConfig+0x82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a16      	ldr	r2, [pc, #88]	@ (800432c <TIM_OC5_SetConfig+0xc8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC5_SetConfig+0x82>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <TIM_OC5_SetConfig+0xcc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC5_SetConfig+0x82>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <TIM_OC5_SetConfig+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d109      	bne.n	80042fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800
 8004334:	40015000 	.word	0x40015000

08004338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800437e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	051b      	lsls	r3, r3, #20
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1a      	ldr	r2, [pc, #104]	@ (80043f8 <TIM_OC6_SetConfig+0xc0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <TIM_OC6_SetConfig+0x84>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <TIM_OC6_SetConfig+0xc4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_OC6_SetConfig+0x84>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <TIM_OC6_SetConfig+0xc8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_OC6_SetConfig+0x84>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <TIM_OC6_SetConfig+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_OC6_SetConfig+0x84>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <TIM_OC6_SetConfig+0xd0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC6_SetConfig+0x84>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a15      	ldr	r2, [pc, #84]	@ (800440c <TIM_OC6_SetConfig+0xd4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d109      	bne.n	80043d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800
 800440c:	40015000 	.word	0x40015000

08004410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2201      	movs	r2, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e06d      	b.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f0:	d018      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10c      	bne.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800452a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40013400 	.word	0x40013400
 8004564:	40015000 	.word	0x40015000
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40014000 	.word	0x40014000

08004574 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800458c:	2302      	movs	r3, #2
 800458e:	e06a      	b.n	8004666 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d115      	bne.n	8004654 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	051b      	lsls	r3, r3, #20
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40015000 	.word	0x40015000

08004680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e040      	b.n	8004750 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fdaa 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	@ 0x24
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb76 	bl	8004dec <UART_SetConfig>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e022      	b.n	8004750 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fd3e 	bl	8005194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fdc5 	bl	80052d8 <UART_CheckIdleState>
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	@ 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476c:	2b20      	cmp	r3, #32
 800476e:	d132      	bne.n	80047d6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_UART_Receive_IT+0x24>
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e02b      	b.n	80047d8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	613b      	str	r3, [r7, #16]
   return(result);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	69f9      	ldr	r1, [r7, #28]
 80047b8:	6a3a      	ldr	r2, [r7, #32]
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e6      	bne.n	8004794 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fe93 	bl	80054f8 <UART_Start_Receive_IT>
 80047d2:	4603      	mov	r3, r0
 80047d4:	e000      	b.n	80047d8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	@ 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0ba      	sub	sp, #232	@ 0xe8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800480a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800480e:	4013      	ands	r3, r2
 8004810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d115      	bne.n	8004848 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 82ab 	beq.w	8004d94 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
      }
      return;
 8004846:	e2a5      	b.n	8004d94 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8117 	beq.w	8004a80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800485e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004862:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_UART_IRQHandler+0x298>)
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 810a 	beq.w	8004a80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_UART_IRQHandler+0xbc>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d011      	beq.n	80048cc <HAL_UART_IRQHandler+0xec>
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2202      	movs	r2, #2
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d011      	beq.n	80048fc <HAL_UART_IRQHandler+0x11c>
 80048d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2204      	movs	r2, #4
 80048ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f2:	f043 0202 	orr.w	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004918:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800492e:	f043 0208 	orr.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_UART_IRQHandler+0x18a>
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8211 	beq.w	8004d98 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d005      	beq.n	80049c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04f      	beq.n	8004a62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fe5e 	bl	8005684 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d141      	bne.n	8004a5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <HAL_UART_IRQHandler+0x29c>)
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc fe5c 	bl	80016f4 <HAL_DMA_Abort_IT>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00f      	b.n	8004a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9b4 	bl	8004dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e00b      	b.n	8004a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9b0 	bl	8004dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e007      	b.n	8004a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9ac 	bl	8004dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a70:	e192      	b.n	8004d98 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a72:	bf00      	nop
    return;
 8004a74:	e190      	b.n	8004d98 <HAL_UART_IRQHandler+0x5b8>
 8004a76:	bf00      	nop
 8004a78:	04000120 	.word	0x04000120
 8004a7c:	0800574d 	.word	0x0800574d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 814b 	bne.w	8004d20 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8144 	beq.w	8004d20 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 813d 	beq.w	8004d20 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	f040 80b5 	bne.w	8004c28 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8164 	beq.w	8004d9c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	f080 815c 	bcs.w	8004d9c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	f000 8086 	beq.w	8004c06 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1da      	bne.n	8004afa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e1      	bne.n	8004b44 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ba4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004baa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004be8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e4      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc fd3e 	bl	8001682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8d7 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c26:	e0b9      	b.n	8004d9c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80ab 	beq.w	8004da0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80a6 	beq.w	8004da0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e4      	bne.n	8004c54 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	617b      	str	r3, [r7, #20]
   return(result);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e4      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f85b 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d1e:	e03f      	b.n	8004da0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <HAL_UART_IRQHandler+0x56a>
 8004d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 feea 	bl	8005b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d48:	e02d      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01c      	beq.n	8004da4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
    }
    return;
 8004d72:	e017      	b.n	8004da4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d012      	beq.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fcf3 	bl	8005778 <UART_EndTransmit_IT>
    return;
 8004d92:	e008      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d94:	bf00      	nop
 8004d96:	e006      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d98:	bf00      	nop
 8004d9a:	e004      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d9c:	bf00      	nop
 8004d9e:	e002      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004da0:	bf00      	nop
 8004da2:	e000      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004da4:	bf00      	nop
  }

}
 8004da6:	37e8      	adds	r7, #232	@ 0xe8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b92      	ldr	r3, [pc, #584]	@ (8005060 <UART_SetConfig+0x274>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a80      	ldr	r2, [pc, #512]	@ (8005064 <UART_SetConfig+0x278>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d120      	bne.n	8004eaa <UART_SetConfig+0xbe>
 8004e68:	4b7f      	ldr	r3, [pc, #508]	@ (8005068 <UART_SetConfig+0x27c>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d817      	bhi.n	8004ea4 <UART_SetConfig+0xb8>
 8004e74:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <UART_SetConfig+0x90>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e99 	.word	0x08004e99
 8004e84:	08004e9f 	.word	0x08004e9f
 8004e88:	08004e93 	.word	0x08004e93
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e0b5      	b.n	8004ffe <UART_SetConfig+0x212>
 8004e92:	2302      	movs	r3, #2
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e0b2      	b.n	8004ffe <UART_SetConfig+0x212>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e0af      	b.n	8004ffe <UART_SetConfig+0x212>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e0ac      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e0a9      	b.n	8004ffe <UART_SetConfig+0x212>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	@ (800506c <UART_SetConfig+0x280>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d124      	bne.n	8004efe <UART_SetConfig+0x112>
 8004eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8005068 <UART_SetConfig+0x27c>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec0:	d011      	beq.n	8004ee6 <UART_SetConfig+0xfa>
 8004ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec6:	d817      	bhi.n	8004ef8 <UART_SetConfig+0x10c>
 8004ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ecc:	d011      	beq.n	8004ef2 <UART_SetConfig+0x106>
 8004ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ed2:	d811      	bhi.n	8004ef8 <UART_SetConfig+0x10c>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0xf4>
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x100>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x10c>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e08b      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e088      	b.n	8004ffe <UART_SetConfig+0x212>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e085      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e082      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e07f      	b.n	8004ffe <UART_SetConfig+0x212>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5b      	ldr	r2, [pc, #364]	@ (8005070 <UART_SetConfig+0x284>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d124      	bne.n	8004f52 <UART_SetConfig+0x166>
 8004f08:	4b57      	ldr	r3, [pc, #348]	@ (8005068 <UART_SetConfig+0x27c>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f14:	d011      	beq.n	8004f3a <UART_SetConfig+0x14e>
 8004f16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f1a:	d817      	bhi.n	8004f4c <UART_SetConfig+0x160>
 8004f1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f20:	d011      	beq.n	8004f46 <UART_SetConfig+0x15a>
 8004f22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f26:	d811      	bhi.n	8004f4c <UART_SetConfig+0x160>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x148>
 8004f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f30:	d006      	beq.n	8004f40 <UART_SetConfig+0x154>
 8004f32:	e00b      	b.n	8004f4c <UART_SetConfig+0x160>
 8004f34:	2300      	movs	r3, #0
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e061      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e05e      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f40:	2304      	movs	r3, #4
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e05b      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f46:	2308      	movs	r3, #8
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e058      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e055      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a47      	ldr	r2, [pc, #284]	@ (8005074 <UART_SetConfig+0x288>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d124      	bne.n	8004fa6 <UART_SetConfig+0x1ba>
 8004f5c:	4b42      	ldr	r3, [pc, #264]	@ (8005068 <UART_SetConfig+0x27c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f68:	d011      	beq.n	8004f8e <UART_SetConfig+0x1a2>
 8004f6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f6e:	d817      	bhi.n	8004fa0 <UART_SetConfig+0x1b4>
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f74:	d011      	beq.n	8004f9a <UART_SetConfig+0x1ae>
 8004f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f7a:	d811      	bhi.n	8004fa0 <UART_SetConfig+0x1b4>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0x19c>
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f84:	d006      	beq.n	8004f94 <UART_SetConfig+0x1a8>
 8004f86:	e00b      	b.n	8004fa0 <UART_SetConfig+0x1b4>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e037      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e034      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e031      	b.n	8004ffe <UART_SetConfig+0x212>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e02e      	b.n	8004ffe <UART_SetConfig+0x212>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e02b      	b.n	8004ffe <UART_SetConfig+0x212>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a33      	ldr	r2, [pc, #204]	@ (8005078 <UART_SetConfig+0x28c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d124      	bne.n	8004ffa <UART_SetConfig+0x20e>
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <UART_SetConfig+0x27c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004fb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fbc:	d011      	beq.n	8004fe2 <UART_SetConfig+0x1f6>
 8004fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fc2:	d817      	bhi.n	8004ff4 <UART_SetConfig+0x208>
 8004fc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fc8:	d011      	beq.n	8004fee <UART_SetConfig+0x202>
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fce:	d811      	bhi.n	8004ff4 <UART_SetConfig+0x208>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x1f0>
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd8:	d006      	beq.n	8004fe8 <UART_SetConfig+0x1fc>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x208>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e00d      	b.n	8004ffe <UART_SetConfig+0x212>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e00a      	b.n	8004ffe <UART_SetConfig+0x212>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e007      	b.n	8004ffe <UART_SetConfig+0x212>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e004      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e001      	b.n	8004ffe <UART_SetConfig+0x212>
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d16b      	bne.n	80050e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d838      	bhi.n	8005080 <UART_SetConfig+0x294>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <UART_SetConfig+0x228>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	08005081 	.word	0x08005081
 8005024:	0800504f 	.word	0x0800504f
 8005028:	08005081 	.word	0x08005081
 800502c:	08005081 	.word	0x08005081
 8005030:	08005081 	.word	0x08005081
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fd ffb4 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e024      	b.n	800508a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7fd ffd2 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8005044:	61b8      	str	r0, [r7, #24]
        break;
 8005046:	e020      	b.n	800508a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <UART_SetConfig+0x290>)
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e01d      	b.n	800508a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7fd ff33 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8005052:	61b8      	str	r0, [r7, #24]
        break;
 8005054:	e019      	b.n	800508a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e015      	b.n	800508a <UART_SetConfig+0x29e>
 800505e:	bf00      	nop
 8005060:	efff69f3 	.word	0xefff69f3
 8005064:	40013800 	.word	0x40013800
 8005068:	40021000 	.word	0x40021000
 800506c:	40004400 	.word	0x40004400
 8005070:	40004800 	.word	0x40004800
 8005074:	40004c00 	.word	0x40004c00
 8005078:	40005000 	.word	0x40005000
 800507c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	77bb      	strb	r3, [r7, #30]
        break;
 8005088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d073      	beq.n	8005178 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	005a      	lsls	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b0f      	cmp	r3, #15
 80050aa:	d916      	bls.n	80050da <UART_SetConfig+0x2ee>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b2:	d212      	bcs.n	80050da <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f023 030f 	bic.w	r3, r3, #15
 80050bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	89fa      	ldrh	r2, [r7, #14]
 80050d6:	60da      	str	r2, [r3, #12]
 80050d8:	e04e      	b.n	8005178 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77bb      	strb	r3, [r7, #30]
 80050de:	e04b      	b.n	8005178 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050e0:	7ffb      	ldrb	r3, [r7, #31]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d827      	bhi.n	8005136 <UART_SetConfig+0x34a>
 80050e6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x300>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fd ff48 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e013      	b.n	8005140 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7fd ff66 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 800511c:	61b8      	str	r0, [r7, #24]
        break;
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <UART_SetConfig+0x3a4>)
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e00c      	b.n	8005140 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fd fec7 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800512a:	61b8      	str	r0, [r7, #24]
        break;
 800512c:	e008      	b.n	8005140 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005132:	61bb      	str	r3, [r7, #24]
        break;
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77bb      	strb	r3, [r7, #30]
        break;
 800513e:	bf00      	nop
    }

    if (pclk != 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085a      	lsrs	r2, r3, #1
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	441a      	add	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d909      	bls.n	8005174 <UART_SetConfig+0x388>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005166:	d205      	bcs.n	8005174 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e001      	b.n	8005178 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005184:	7fbb      	ldrb	r3, [r7, #30]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	007a1200 	.word	0x007a1200

08005194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01a      	beq.n	80052aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005292:	d10a      	bne.n	80052aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b098      	sub	sp, #96	@ 0x60
 80052dc:	af02      	add	r7, sp, #8
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e8:	f7fc f8ae 	bl	8001448 <HAL_GetTick>
 80052ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d12e      	bne.n	800535a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005304:	2200      	movs	r2, #0
 8005306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f88c 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d021      	beq.n	800535a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800532a:	653b      	str	r3, [r7, #80]	@ 0x50
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005334:	647b      	str	r3, [r7, #68]	@ 0x44
 8005336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800533a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e062      	b.n	8005420 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b04      	cmp	r3, #4
 8005366:	d149      	bne.n	80053fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f856 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03c      	beq.n	80053fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	623b      	str	r3, [r7, #32]
   return(result);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3308      	adds	r3, #8
 80053d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e011      	b.n	8005420 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3758      	adds	r7, #88	@ 0x58
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	e049      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d045      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fc f801 	bl	8001448 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x30>
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e048      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d031      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d110      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2208      	movs	r2, #8
 800547e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f8ff 	bl	8005684 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2208      	movs	r2, #8
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e029      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a8:	d111      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f8e5 	bl	8005684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00f      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d0a6      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b097      	sub	sp, #92	@ 0x5c
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552a:	d10e      	bne.n	800554a <UART_Start_Receive_IT+0x52>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <UART_Start_Receive_IT+0x48>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800553a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800553e:	e02d      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	22ff      	movs	r2, #255	@ 0xff
 8005544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005548:	e028      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10d      	bne.n	800556e <UART_Start_Receive_IT+0x76>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <UART_Start_Receive_IT+0x6c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	22ff      	movs	r2, #255	@ 0xff
 800555e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005562:	e01b      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	227f      	movs	r2, #127	@ 0x7f
 8005568:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800556c:	e016      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005576:	d10d      	bne.n	8005594 <UART_Start_Receive_IT+0x9c>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <UART_Start_Receive_IT+0x92>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	227f      	movs	r2, #127	@ 0x7f
 8005584:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005588:	e008      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	223f      	movs	r2, #63	@ 0x3f
 800558e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005592:	e003      	b.n	800559c <UART_Start_Receive_IT+0xa4>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2222      	movs	r2, #34	@ 0x22
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80055da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e8:	d107      	bne.n	80055fa <UART_Start_Receive_IT+0x102>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a21      	ldr	r2, [pc, #132]	@ (800567c <UART_Start_Receive_IT+0x184>)
 80055f6:	669a      	str	r2, [r3, #104]	@ 0x68
 80055f8:	e002      	b.n	8005600 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a20      	ldr	r2, [pc, #128]	@ (8005680 <UART_Start_Receive_IT+0x188>)
 80055fe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800561c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
 8005628:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800562c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_Start_Receive_IT+0x110>
 800563a:	e018      	b.n	800566e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f043 0320 	orr.w	r3, r3, #32
 8005650:	653b      	str	r3, [r7, #80]	@ 0x50
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	69f9      	ldr	r1, [r7, #28]
 8005660:	6a3a      	ldr	r2, [r7, #32]
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	61bb      	str	r3, [r7, #24]
   return(result);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e6      	bne.n	800563c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	375c      	adds	r7, #92	@ 0x5c
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	08005975 	.word	0x08005975
 8005680:	080057cd 	.word	0x080057cd

08005684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b095      	sub	sp, #84	@ 0x54
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d118      	bne.n	800572c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60bb      	str	r3, [r7, #8]
   return(result);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	613b      	str	r3, [r7, #16]
   return(result);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005740:	bf00      	nop
 8005742:	3754      	adds	r7, #84	@ 0x54
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fb28 	bl	8004dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	60bb      	str	r3, [r7, #8]
   return(result);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	613b      	str	r3, [r7, #16]
   return(result);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff faf4 	bl	8004dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b09c      	sub	sp, #112	@ 0x70
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e4:	2b22      	cmp	r3, #34	@ 0x22
 80057e6:	f040 80b9 	bne.w	800595c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80057f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057f8:	b2d9      	uxtb	r1, r3
 80057fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005804:	400a      	ands	r2, r1
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 809c 	bne.w	800596c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	667b      	str	r3, [r7, #100]	@ 0x64
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005886:	647a      	str	r2, [r7, #68]	@ 0x44
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800588c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d018      	beq.n	80058ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058da:	633b      	str	r3, [r7, #48]	@ 0x30
 80058dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e6      	bne.n	80058bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d12e      	bne.n	8005954 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	60fb      	str	r3, [r7, #12]
   return(result);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	69b9      	ldr	r1, [r7, #24]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	617b      	str	r3, [r7, #20]
   return(result);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b10      	cmp	r3, #16
 800593a:	d103      	bne.n	8005944 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2210      	movs	r2, #16
 8005942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fa41 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005952:	e00b      	b.n	800596c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fa ff59 	bl	800080c <HAL_UART_RxCpltCallback>
}
 800595a:	e007      	b.n	800596c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	619a      	str	r2, [r3, #24]
}
 800596c:	bf00      	nop
 800596e:	3770      	adds	r7, #112	@ 0x70
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b09c      	sub	sp, #112	@ 0x70
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005982:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598c:	2b22      	cmp	r3, #34	@ 0x22
 800598e:	f040 80b9 	bne.w	8005b04 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005998:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80059a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80059a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059aa:	4013      	ands	r3, r2
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 809c 	bne.w	8005b14 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80059ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80059fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d018      	beq.n	8005a96 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d12e      	bne.n	8005afc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6979      	ldr	r1, [r7, #20]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e6      	bne.n	8005aa4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d103      	bne.n	8005aec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2210      	movs	r2, #16
 8005aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff f96d 	bl	8004dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005afa:	e00b      	b.n	8005b14 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fa fe85 	bl	800080c <HAL_UART_RxCpltCallback>
}
 8005b02:	e007      	b.n	8005b14 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	3770      	adds	r7, #112	@ 0x70
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <memset>:
 8005b30:	4402      	add	r2, r0
 8005b32:	4603      	mov	r3, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <__libc_init_array>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4d0d      	ldr	r5, [pc, #52]	@ (8005b78 <__libc_init_array+0x38>)
 8005b44:	4c0d      	ldr	r4, [pc, #52]	@ (8005b7c <__libc_init_array+0x3c>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	2600      	movs	r6, #0
 8005b4c:	42a6      	cmp	r6, r4
 8005b4e:	d109      	bne.n	8005b64 <__libc_init_array+0x24>
 8005b50:	4d0b      	ldr	r5, [pc, #44]	@ (8005b80 <__libc_init_array+0x40>)
 8005b52:	4c0c      	ldr	r4, [pc, #48]	@ (8005b84 <__libc_init_array+0x44>)
 8005b54:	f000 f818 	bl	8005b88 <_init>
 8005b58:	1b64      	subs	r4, r4, r5
 8005b5a:	10a4      	asrs	r4, r4, #2
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	42a6      	cmp	r6, r4
 8005b60:	d105      	bne.n	8005b6e <__libc_init_array+0x2e>
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b68:	4798      	blx	r3
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7ee      	b.n	8005b4c <__libc_init_array+0xc>
 8005b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b72:	4798      	blx	r3
 8005b74:	3601      	adds	r6, #1
 8005b76:	e7f2      	b.n	8005b5e <__libc_init_array+0x1e>
 8005b78:	08005bd8 	.word	0x08005bd8
 8005b7c:	08005bd8 	.word	0x08005bd8
 8005b80:	08005bd8 	.word	0x08005bd8
 8005b84:	08005bdc 	.word	0x08005bdc

08005b88 <_init>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr

08005b94 <_fini>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr
