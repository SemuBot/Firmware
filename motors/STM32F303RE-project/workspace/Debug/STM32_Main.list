
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fbc  08006fbc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006fbc  08006fbc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fbc  08006fbc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000368  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011174  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028a6  00000000  00000000  0003124f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e58  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b1f  00000000  00000000  00034950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002218a  00000000  00000000  0003546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013b37  00000000  00000000  000575f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc1b5  00000000  00000000  0006b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046c0  00000000  00000000  001372e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d44 	.word	0x08006d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006d44 	.word	0x08006d44

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <moveMotor>:
#include "motors.h"

void moveMotor(struct Motors* motor)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]


if (motor->STEPS > 0){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	dd35      	ble.n	800032c <moveMotor+0x7c>
	  //HAL_GPIO_WritePin(GPIOC, motor->dirPin, GPIO_PIN_RESET); // Set DIR high for one direction
	  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_RESET); // Set EN high to enable the driver
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	481a      	ldr	r0, [pc, #104]	; (8000334 <moveMotor+0x84>)
 80002cc:	f001 f9dc 	bl	8001688 <HAL_GPIO_WritePin>
	  motor->TIMER-> CCR1 = clamp(motor->SPEED,1,200);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	22c8      	movs	r2, #200	; 0xc8
 80002d6:	2101      	movs	r1, #1
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f82d 	bl	8000338 <clamp>
 80002de:	4602      	mov	r2, r0
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34

	  // Wait for the specified duration
	  HAL_Delay(MOVE_DURATION);
 80002e6:	200a      	movs	r0, #10
 80002e8:	f000 fe98 	bl	800101c <HAL_Delay>

	  // Stop the motor
	  motor->TIMER-> CCR1 = 0;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	2200      	movs	r2, #0
 80002f2:	635a      	str	r2, [r3, #52]	; 0x34

	  // Wait for a moment
	  HAL_Delay(MOVE_DURATION);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 fe91 	bl	800101c <HAL_Delay>


	  // Disable the motor
	  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_SET);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <moveMotor+0x84>)
 8000306:	f001 f9bf 	bl	8001688 <HAL_GPIO_WritePin>
	  motor->STEPS--;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	1e5a      	subs	r2, r3, #1
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	611a      	str	r2, [r3, #16]
	  if(motor->STEPS == 0){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d107      	bne.n	800032c <moveMotor+0x7c>
		  HAL_GPIO_WritePin(GPIOC, motor->EN_PIN, GPIO_PIN_SET);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	b29b      	uxth	r3, r3
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	4803      	ldr	r0, [pc, #12]	; (8000334 <moveMotor+0x84>)
 8000328:	f001 f9ae 	bl	8001688 <HAL_GPIO_WritePin>
	  }
}
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	48000800 	.word	0x48000800

08000338 <clamp>:

// Function to clamp values for the duty cycle/ speed
int clamp(int value, int min, int max) {
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8000344:	68fa      	ldr	r2, [r7, #12]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da01      	bge.n	8000350 <clamp+0x18>
        return min;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	e006      	b.n	800035e <clamp+0x26>
    } else if (value > max) {
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dd01      	ble.n	800035c <clamp+0x24>
        return max;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	e000      	b.n	800035e <clamp+0x26>
    } else {
        return value;
 800035c:	68fb      	ldr	r3, [r7, #12]
    }
}
 800035e:	4618      	mov	r0, r3
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b39      	ldr	r3, [pc, #228]	; (8000468 <MX_GPIO_Init+0xfc>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a38      	ldr	r2, [pc, #224]	; (8000468 <MX_GPIO_Init+0xfc>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b36      	ldr	r3, [pc, #216]	; (8000468 <MX_GPIO_Init+0xfc>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b33      	ldr	r3, [pc, #204]	; (8000468 <MX_GPIO_Init+0xfc>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a32      	ldr	r2, [pc, #200]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b30      	ldr	r3, [pc, #192]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a26      	ldr	r2, [pc, #152]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_GPIO_Init+0xfc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	210c      	movs	r1, #12
 80003e6:	4821      	ldr	r0, [pc, #132]	; (800046c <MX_GPIO_Init+0x100>)
 80003e8:	f001 f94e 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f001 f948 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	4619      	mov	r1, r3
 800040e:	4817      	ldr	r0, [pc, #92]	; (800046c <MX_GPIO_Init+0x100>)
 8000410:	f000 ffb0 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 8000414:	230c      	movs	r3, #12
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4619      	mov	r1, r3
 800042a:	4810      	ldr	r0, [pc, #64]	; (800046c <MX_GPIO_Init+0x100>)
 800042c:	f000 ffa2 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000430:	2320      	movs	r3, #32
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4619      	mov	r1, r3
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 ff93 	bl	8001374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	2028      	movs	r0, #40	; 0x28
 8000454:	f000 fee1 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000458:	2028      	movs	r0, #40	; 0x28
 800045a:	f000 fefa 	bl	8001252 <HAL_NVIC_EnableIRQ>

}
 800045e:	bf00      	nop
 8000460:	3728      	adds	r7, #40	; 0x28
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	48000800 	.word	0x48000800

08000470 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d103      	bne.n	800048a <HAL_TIM_PeriodElapsedCallback+0x1a>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8000482:	2120      	movs	r1, #32
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000486:	f001 f917 	bl	80016b8 <HAL_GPIO_TogglePin>
  }
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40000400 	.word	0x40000400
 8000498:	48000c00 	.word	0x48000c00

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fd56 	bl	8000f50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f848 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f7ff ff60 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 fc72 	bl	8000d94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004b0:	f000 fc40 	bl	8000d34 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80004b4:	f000 fb3c 	bl	8000b30 <MX_TIM3_Init>
  MX_TIM1_Init();
 80004b8:	f000 faaa 	bl	8000a10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	4816      	ldr	r0, [pc, #88]	; (800051c <main+0x80>)
 80004c4:	f001 f8e0 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80004c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004cc:	f000 f91a 	bl	8000704 <HAL_GPIO_EXTI_Callback>

  HAL_TIM_Base_Start_IT(&htim3);
 80004d0:	4813      	ldr	r0, [pc, #76]	; (8000520 <main+0x84>)
 80004d2:	f002 fdcb 	bl	800306c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 80004d6:	2100      	movs	r1, #0
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <main+0x88>)
 80004da:	f002 fe8f 	bl	80031fc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 80004de:	2232      	movs	r2, #50	; 0x32
 80004e0:	4911      	ldr	r1, [pc, #68]	; (8000528 <main+0x8c>)
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <main+0x90>)
 80004e4:	f003 ffc4 	bl	8004470 <HAL_UART_Receive_IT>


  motor1.DIR_PIN = MOTOR1_DIR_PIN;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <main+0x94>)
 80004ea:	2204      	movs	r2, #4
 80004ec:	601a      	str	r2, [r3, #0]
  motor1.STEP_PIN = MOTOR1_STEP_PIN;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x94>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	605a      	str	r2, [r3, #4]
  motor1.EN_PIN = MOTOR1_EN_PIN;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <main+0x94>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	609a      	str	r2, [r3, #8]
  motor1.SPEED = 100;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <main+0x94>)
 80004fc:	2264      	movs	r2, #100	; 0x64
 80004fe:	60da      	str	r2, [r3, #12]
  motor1.STEPS = 200;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <main+0x94>)
 8000502:	22c8      	movs	r2, #200	; 0xc8
 8000504:	611a      	str	r2, [r3, #16]
  motor1.TIMER = TIM1;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x94>)
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <main+0x98>)
 800050a:	615a      	str	r2, [r3, #20]

  moveMotor(&motor1);
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x94>)
 800050e:	f7ff fecf 	bl	80002b0 <moveMotor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  moveMotor(&motor1);
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x94>)
 8000514:	f7ff fecc 	bl	80002b0 <moveMotor>
 8000518:	e7fb      	b.n	8000512 <main+0x76>
 800051a:	bf00      	nop
 800051c:	48000800 	.word	0x48000800
 8000520:	20000124 	.word	0x20000124
 8000524:	200000d8 	.word	0x200000d8
 8000528:	20000084 	.word	0x20000084
 800052c:	200001f8 	.word	0x200001f8
 8000530:	200000b8 	.word	0x200000b8
 8000534:	40012c00 	.word	0x40012c00

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0a6      	sub	sp, #152	; 0x98
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fb45 	bl	8005bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2258      	movs	r2, #88	; 0x58
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fb37 	bl	8005bd6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000584:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f8c0 	bl	800171c <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f8cf 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f8fe 	bl	80027c4 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f8b9 	bl	8000744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SystemClock_Config+0xc8>)
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005de:	2300      	movs	r3, #0
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fb21 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f8a6 	bl	8000744 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3798      	adds	r7, #152	; 0x98
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	00201003 	.word	0x00201003

08000604 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b092      	sub	sp, #72	; 0x48
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800060c:	2120      	movs	r1, #32
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 f851 	bl	80016b8 <HAL_GPIO_TogglePin>

    if (huart == &huart2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <HAL_UART_RxCpltCallback+0xe4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d160      	bne.n	80006e0 <HAL_UART_RxCpltCallback+0xdc>
    {
        if (UART2_rxBuffer[0] != '\0')
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <HAL_UART_RxCpltCallback+0xe8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d052      	beq.n	80006cc <HAL_UART_RxCpltCallback+0xc8>
        {
            char *token = strtok((char *)UART2_rxBuffer, "_"); // Split the received data by underscore
 8000626:	4932      	ldr	r1, [pc, #200]	; (80006f0 <HAL_UART_RxCpltCallback+0xec>)
 8000628:	4830      	ldr	r0, [pc, #192]	; (80006ec <HAL_UART_RxCpltCallback+0xe8>)
 800062a:	f005 fadd 	bl	8005be8 <strtok>
 800062e:	4603      	mov	r3, r0
 8000630:	647b      	str	r3, [r7, #68]	; 0x44

            if (strcmp(token, MOTOR1_COMMAND) == 0)
 8000632:	4930      	ldr	r1, [pc, #192]	; (80006f4 <HAL_UART_RxCpltCallback+0xf0>)
 8000634:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000636:	f7ff fdd3 	bl	80001e0 <strcmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d145      	bne.n	80006cc <HAL_UART_RxCpltCallback+0xc8>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000640:	492b      	ldr	r1, [pc, #172]	; (80006f0 <HAL_UART_RxCpltCallback+0xec>)
 8000642:	2000      	movs	r0, #0
 8000644:	f005 fad0 	bl	8005be8 <strtok>
 8000648:	4603      	mov	r3, r0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
                if (token != NULL)
 800064c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <HAL_UART_RxCpltCallback+0x5c>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000652:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000654:	f005 f8f8 	bl	8005848 <atoi>
 8000658:	6438      	str	r0, [r7, #64]	; 0x40
                    motor1.SPEED = speed;
 800065a:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <HAL_UART_RxCpltCallback+0xf4>)
 800065c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800065e:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 8000660:	4923      	ldr	r1, [pc, #140]	; (80006f0 <HAL_UART_RxCpltCallback+0xec>)
 8000662:	2000      	movs	r0, #0
 8000664:	f005 fac0 	bl	8005be8 <strtok>
 8000668:	4603      	mov	r3, r0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
                if (token != NULL)
 800066c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <HAL_UART_RxCpltCallback+0x7c>
                {
                    int steps = atoi(token); // Convert steps string to integer
 8000672:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000674:	f005 f8e8 	bl	8005848 <atoi>
 8000678:	63f8      	str	r0, [r7, #60]	; 0x3c
                    motor1.STEPS = steps;
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <HAL_UART_RxCpltCallback+0xf4>)
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	222e      	movs	r2, #46	; 0x2e
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 faa2 	bl	8005bd6 <memset>
                sprintf(uartTxBuffer, "Motor1 Settings: Speed=%d, Steps=%d\r\n", motor1.SPEED, motor1.STEPS);
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <HAL_UART_RxCpltCallback+0xf4>)
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_UART_RxCpltCallback+0xf4>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	f107 0008 	add.w	r0, r7, #8
 800069e:	4917      	ldr	r1, [pc, #92]	; (80006fc <HAL_UART_RxCpltCallback+0xf8>)
 80006a0:	f005 fa36 	bl	8005b10 <siprintf>
                printf("Transmitting: %s\n", uartTxBuffer); // Debugging
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4619      	mov	r1, r3
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <HAL_UART_RxCpltCallback+0xfc>)
 80006ac:	f005 fa1e 	bl	8005aec <iprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd9d 	bl	80001f4 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f107 0108 	add.w	r1, r7, #8
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <HAL_UART_RxCpltCallback+0xe4>)
 80006c8:	f003 fe48 	bl	800435c <HAL_UART_Transmit>
            }
        }

        // Clear the receive buffer
        memset(UART2_rxBuffer, 0, sizeof(UART2_rxBuffer));
 80006cc:	2232      	movs	r2, #50	; 0x32
 80006ce:	2100      	movs	r1, #0
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <HAL_UART_RxCpltCallback+0xe8>)
 80006d2:	f005 fa80 	bl	8005bd6 <memset>

        // Restart UART receive interrupt
        HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 80006d6:	2232      	movs	r2, #50	; 0x32
 80006d8:	4904      	ldr	r1, [pc, #16]	; (80006ec <HAL_UART_RxCpltCallback+0xe8>)
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <HAL_UART_RxCpltCallback+0xe4>)
 80006dc:	f003 fec8 	bl	8004470 <HAL_UART_Receive_IT>
    }
}
 80006e0:	bf00      	nop
 80006e2:	3748      	adds	r7, #72	; 0x48
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001f8 	.word	0x200001f8
 80006ec:	20000084 	.word	0x20000084
 80006f0:	08006d5c 	.word	0x08006d5c
 80006f4:	08006d60 	.word	0x08006d60
 80006f8:	200000b8 	.word	0x200000b8
 80006fc:	08006d64 	.word	0x08006d64
 8000700:	08006d8c 	.word	0x08006d8c

08000704 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000714:	d10e      	bne.n	8000734 <HAL_GPIO_EXTI_Callback+0x30>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000716:	2120      	movs	r1, #32
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f000 ffcc 	bl	80016b8 <HAL_GPIO_TogglePin>
	    motor1.STEPS = 200;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_GPIO_EXTI_Callback+0x38>)
 8000722:	22c8      	movs	r2, #200	; 0xc8
 8000724:	611a      	str	r2, [r3, #16]
	    motor1.SPEED = 10;
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_GPIO_EXTI_Callback+0x38>)
 8000728:	220a      	movs	r2, #10
 800072a:	60da      	str	r2, [r3, #12]

    // Change motor direction
    HAL_GPIO_TogglePin(MOTOR1_DIR_PORT, MOTOR1_DIR_PIN); // Toggle direction pin
 800072c:	2104      	movs	r1, #4
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000730:	f000 ffc2 	bl	80016b8 <HAL_GPIO_TogglePin>
  }
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000b8 	.word	0x200000b8
 8000740:	48000800 	.word	0x48000800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000786:	2007      	movs	r0, #7
 8000788:	f000 fd3c 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 fbfa 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80007f2:	f002 fe0f 	bl	8003414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000d8 	.word	0x200000d8

08000800 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000806:	f002 fe05 	bl	8003414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000d8 	.word	0x200000d8

08000814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM3_IRQHandler+0x10>)
 800081a:	f002 fdfb 	bl	8003414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000124 	.word	0x20000124

08000828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <USART1_IRQHandler+0x10>)
 800082e:	f003 fe63 	bl	80044f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000170 	.word	0x20000170

0800083c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <USART2_IRQHandler+0x10>)
 8000842:	f003 fe59 	bl	80044f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001f8 	.word	0x200001f8

08000850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000858:	f000 ff48 	bl	80016ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return 1;
 8000864:	2301      	movs	r3, #1
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_kill>:

int _kill(int pid, int sig)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800087a:	f005 fa57 	bl	8005d2c <__errno>
 800087e:	4603      	mov	r3, r0
 8000880:	2216      	movs	r2, #22
 8000882:	601a      	str	r2, [r3, #0]
  return -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_exit>:

void _exit (int status)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ffe7 	bl	8000870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008a2:	e7fe      	b.n	80008a2 <_exit+0x12>

080008a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b6:	f3af 8000 	nop.w
 80008ba:	4601      	mov	r1, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <_read+0x12>
  }

  return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e009      	b.n	8000904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf1      	blt.n	80008f0 <_write+0x12>
  }
  return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_close>:

int _close(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
  return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f005 f9bc 	bl	8005d2c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20010000 	.word	0x20010000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	200003d0 	.word	0x200003d0

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b096      	sub	sp, #88	; 0x58
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	222c      	movs	r2, #44	; 0x2c
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f8ca 	bl	8005bd6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a44:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <MX_TIM1_Init+0x11c>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a4a:	f240 12df 	movw	r2, #479	; 0x1df
 8000a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a56:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a58:	2263      	movs	r2, #99	; 0x63
 8000a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a6e:	482e      	ldr	r0, [pc, #184]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a70:	f002 fb6c 	bl	800314c <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f7ff fe63 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4825      	ldr	r0, [pc, #148]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000a92:	f003 fae5 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f7ff fe52 	bl	8000744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000ac6:	f002 fdc5 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ad0:	f7ff fe38 	bl	8000744 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000b0a:	f003 fb35 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b14:	f7ff fe16 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM1_Init+0x118>)
 8000b1a:	f000 f8af 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3758      	adds	r7, #88	; 0x58
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40012c00 	.word	0x40012c00

08000b30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_TIM3_Init+0xb4>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b5c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3569;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b6a:	f640 52f1 	movw	r2, #3569	; 0xdf1
 8000b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b7e:	f002 fae5 	bl	800314c <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f7ff fddc 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000b9c:	f003 fa60 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000ba6:	f7ff fdcd 	bl	8000744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000bc2:	f002 fd47 	bl	8003654 <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000bcc:	f7ff fdba 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM3_Init+0xb0>)
 8000bd2:	f000 f853 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000124 	.word	0x20000124
 8000be4:	40000400 	.word	0x40000400

08000be8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_TIM_PWM_MspInit+0x88>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d11c      	bne.n	8000c34 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2018      	movs	r0, #24
 8000c18:	f000 faff 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c1c:	2018      	movs	r0, #24
 8000c1e:	f000 fb18 	bl	8001252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 faf7 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c2c:	2019      	movs	r0, #25
 8000c2e:	f000 fb10 	bl	8001252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c32:	e018      	b.n	8000c66 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_TIM_PWM_MspInit+0x90>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d113      	bne.n	8000c66 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201d      	movs	r0, #29
 8000c5c:	f000 fadd 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c60:	201d      	movs	r0, #29
 8000c62:	f000 faf6 	bl	8001252 <HAL_NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40000400 	.word	0x40000400

08000c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_TIM_MspPostInit+0xa8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11c      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4816      	ldr	r0, [pc, #88]	; (8000d2c <HAL_TIM_MspPostInit+0xb0>)
 8000cd2:	f000 fb4f 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cd6:	e021      	b.n	8000d1c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d11c      	bne.n	8000d1c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_TIM_MspPostInit+0xac>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 fb2c 	bl	8001374 <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	40000400 	.word	0x40000400

08000d34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_USART1_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d78:	f003 faa2 	bl	80042c0 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f7ff fcdf 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000170 	.word	0x20000170
 8000d90:	40013800 	.word	0x40013800

08000d94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART2_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd8:	f003 fa72 	bl	80042c0 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f7ff fcaf 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001f8 	.word	0x200001f8
 8000df0:	40004400 	.word	0x40004400

08000df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a36      	ldr	r2, [pc, #216]	; (8000eec <HAL_UART_MspInit+0xf8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d130      	bne.n	8000e78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e46:	2330      	movs	r3, #48	; 0x30
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e56:	2307      	movs	r3, #7
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <HAL_UART_MspInit+0x100>)
 8000e62:	f000 fa87 	bl	8001374 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 f9d5 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 f9ee 	bl	8001252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e76:	e035      	b.n	8000ee4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_UART_MspInit+0x104>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d130      	bne.n	8000ee4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 fa50 	bl	8001374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f000 f99e 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ede:	2026      	movs	r0, #38	; 0x26
 8000ee0:	f000 f9b7 	bl	8001252 <HAL_NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	40004400 	.word	0x40004400

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff fd74 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f004 ff05 	bl	8005d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff fab5 	bl	800049c <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f40:	08006fc4 	.word	0x08006fc4
  ldr r2, =_sbss
 8000f44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f48:	200003d0 	.word	0x200003d0

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f94f 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fbf0 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f967 	bl	800126e <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f92f 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000280 	.word	0x20000280

08001004 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;  
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000280 	.word	0x20000280

0800101c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff3e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff31 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e020      	b.n	80012ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 020e 	bic.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130a:	2b02      	cmp	r3, #2
 800130c:	d005      	beq.n	800131a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2204      	movs	r2, #4
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e027      	b.n	800136a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 020e 	bic.w	r2, r2, #14
 8001328:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f202 	lsl.w	r2, r1, r2
 8001348:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	4798      	blx	r3
    } 
  }
  return status;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e160      	b.n	8001646 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8152 	beq.w	8001640 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <HAL_GPIO_Init+0x40>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d130      	bne.n	8001416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 0201 	and.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b03      	cmp	r3, #3
 8001420:	d017      	beq.n	8001452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d123      	bne.n	80014a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0203 	and.w	r2, r3, #3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80ac 	beq.w	8001640 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001500:	4a59      	ldr	r2, [pc, #356]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800152a:	d025      	beq.n	8001578 <HAL_GPIO_Init+0x204>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x2f8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d01f      	beq.n	8001574 <HAL_GPIO_Init+0x200>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_Init+0x2fc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d019      	beq.n	8001570 <HAL_GPIO_Init+0x1fc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x300>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_GPIO_Init+0x1f8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x304>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00d      	beq.n	8001568 <HAL_GPIO_Init+0x1f4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_GPIO_Init+0x308>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d007      	beq.n	8001564 <HAL_GPIO_Init+0x1f0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_GPIO_Init+0x30c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_GPIO_Init+0x1ec>
 800155c:	2306      	movs	r3, #6
 800155e:	e00c      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001560:	2307      	movs	r3, #7
 8001562:	e00a      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001564:	2305      	movs	r3, #5
 8001566:	e008      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001568:	2304      	movs	r3, #4
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x206>
 800156c:	2303      	movs	r3, #3
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_GPIO_Init+0x310>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_GPIO_Init+0x310>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae97 	bne.w	8001384 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	48001800 	.word	0x48001800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43d9      	mvns	r1, r3
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	400b      	ands	r3, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fffa 	bl	8000704 <HAL_GPIO_EXTI_Callback>
  }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001722:	af00      	add	r7, sp, #0
 8001724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001728:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800172c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f001 b83a 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 816f 	beq.w	8001a36 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001758:	4bb5      	ldr	r3, [pc, #724]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00c      	beq.n	800177e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001764:	4bb2      	ldr	r3, [pc, #712]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d15c      	bne.n	800182a <HAL_RCC_OscConfig+0x10e>
 8001770:	4baf      	ldr	r3, [pc, #700]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d155      	bne.n	800182a <HAL_RCC_OscConfig+0x10e>
 800177e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001782:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x94>
 80017aa:	4ba1      	ldr	r3, [pc, #644]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e015      	b.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017d8:	4b95      	ldr	r3, [pc, #596]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80017e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80017e8:	fa92 f2a2 	rbit	r2, r2
 80017ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80017f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f002 021f 	and.w	r2, r2, #31
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8111 	beq.w	8001a34 <HAL_RCC_OscConfig+0x318>
 8001812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001816:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8108 	bne.w	8001a34 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	f000 bfc6 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x12e>
 800183c:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7b      	ldr	r2, [pc, #492]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e036      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 800184a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x158>
 800185a:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a74      	ldr	r2, [pc, #464]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e021      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 8001874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001878:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x184>
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a66      	ldr	r2, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a62      	ldr	r2, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a5f      	ldr	r2, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d059      	beq.n	800197c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb9c 	bl	8001004 <HAL_GetTick>
 80018cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fb97 	bl	8001004 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d902      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f000 bf67 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80018fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x1fe>
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x22a>
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800192e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001932:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001936:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800194a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800194e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800195a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f002 021f 	and.w	r2, r2, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0ab      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1b6>
 800197a:	e05c      	b.n	8001a36 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb42 	bl	8001004 <HAL_GetTick>
 8001980:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001986:	f7ff fb3d 	bl	8001004 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d902      	bls.n	800199c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	f000 bf0d 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 800199c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80019b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x2b2>
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x2de>
 80019ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80019e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_RCC_OscConfig+0x314>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019fe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a02:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a06:	fa92 f2a2 	rbit	r2, r2
 8001a0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a12:	fab2 f282 	clz	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ab      	bne.n	8001986 <HAL_RCC_OscConfig+0x26a>
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_OscConfig+0x31a>
 8001a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 817f 	beq.w	8001d4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a4c:	4ba7      	ldr	r3, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a58:	4ba4      	ldr	r3, [pc, #656]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d173      	bne.n	8001b4c <HAL_RCC_OscConfig+0x430>
 8001a64:	4ba1      	ldr	r3, [pc, #644]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a70:	d16c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x430>
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x386>
 8001a9c:	4b93      	ldr	r3, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0x3ae>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001aba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2202      	movs	r2, #2
 8001acc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ad0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001adc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3f6>
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d002      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f000 be52 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	21f8      	movs	r1, #248	; 0xf8
 8001b28:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b30:	fa91 f1a1 	rbit	r1, r1
 8001b34:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b38:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b3c:	fab1 f181 	clz	r1, r1
 8001b40:	b2c9      	uxtb	r1, r1
 8001b42:	408b      	lsls	r3, r1
 8001b44:	4969      	ldr	r1, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e0fe      	b.n	8001d4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8088 	beq.w	8001c6e <HAL_RCC_OscConfig+0x552>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fa3b 	bl	8001004 <HAL_GetTick>
 8001b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fa36 	bl	8001004 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d902      	bls.n	8001baa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f000 be06 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001bbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_OscConfig+0x4be>
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e013      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bf2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2202      	movs	r2, #2
 8001c04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c0c:	fa92 f2a2 	rbit	r2, r2
 8001c10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	f002 021f 	and.w	r2, r2, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0af      	beq.n	8001b94 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	21f8      	movs	r1, #248	; 0xf8
 8001c4a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c52:	fa91 f1a1 	rbit	r1, r1
 8001c56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c5e:	fab1 f181 	clz	r1, r1
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	408b      	lsls	r3, r1
 8001c66:	4921      	ldr	r1, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e06d      	b.n	8001d4a <HAL_RCC_OscConfig+0x62e>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	461a      	mov	r2, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f9b3 	bl	8001004 <HAL_GetTick>
 8001c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f9ae 	bl	8001004 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bd7e 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5d4>
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	e016      	b.n	8001d18 <HAL_RCC_OscConfig+0x5fc>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d14:	4bbf      	ldr	r3, [pc, #764]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ac      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8113 	beq.w	8001f86 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d07c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x74e>
 8001d70:	2301      	movs	r3, #1
 8001d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4ba2      	ldr	r3, [pc, #648]	; (8002018 <HAL_RCC_OscConfig+0x8fc>)
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	461a      	mov	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f933 	bl	8001004 <HAL_GetTick>
 8001d9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff f92e 	bl	8001004 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bcfe 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dda:	2202      	movs	r2, #2
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e26:	2102      	movs	r1, #2
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f1a3 	rbit	r1, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e40:	6019      	str	r1, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d09d      	beq.n	8001da4 <HAL_RCC_OscConfig+0x688>
 8001e68:	e08d      	b.n	8001f86 <HAL_RCC_OscConfig+0x86a>
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e8c:	601a      	str	r2, [r3, #0]
  return result;
 8001e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x8fc>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff f8aa 	bl	8001004 <HAL_GetTick>
 8001eb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f8a5 	bl	8001004 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bc75 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f44:	2102      	movs	r1, #2
 8001f46:	6019      	str	r1, [r3, #0]
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f1a3 	rbit	r1, r3
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f5e:	6019      	str	r1, [r3, #0]
  return result;
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d197      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 81a5 	beq.w	80022e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_RCC_OscConfig+0x900>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d121      	bne.n	800202c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x900>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x900>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f806 	bl	8001004 <HAL_GetTick>
 8001ff8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e010      	b.n	8002020 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f801 	bl	8001004 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d908      	bls.n	8002020 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e3d1      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	10908120 	.word	0x10908120
 800201c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b8d      	ldr	r3, [pc, #564]	; (8002258 <HAL_RCC_OscConfig+0xb3c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0e8      	beq.n	8001ffe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x92e>
 800203c:	4b87      	ldr	r3, [pc, #540]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a86      	ldr	r2, [pc, #536]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e035      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x958>
 800205a:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b7d      	ldr	r3, [pc, #500]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a7c      	ldr	r2, [pc, #496]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	e020      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x982>
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a74      	ldr	r2, [pc, #464]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a6b      	ldr	r2, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8081 	beq.w	80021ca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7fe ff9c 	bl	8001004 <HAL_GetTick>
 80020cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe ff97 	bl	8001004 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e365      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002130:	601a      	str	r2, [r3, #0]
  return result;
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800213a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0xa3a>
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	e013      	b.n	800217e <HAL_RCC_OscConfig+0xa62>
 8002156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002182:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002186:	2102      	movs	r1, #2
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800218e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800219c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021a0:	6011      	str	r1, [r2, #0]
  return result;
 80021a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d084      	beq.n	80020d2 <HAL_RCC_OscConfig+0x9b6>
 80021c8:	e083      	b.n	80022d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff1b 	bl	8001004 <HAL_GetTick>
 80021ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe ff16 	bl	8001004 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e2e4      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021f4:	2202      	movs	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002220:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002232:	601a      	str	r2, [r3, #0]
  return result;
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800223c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0xb44>
 8002252:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_OscConfig+0xb40>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	e017      	b.n	8002288 <HAL_RCC_OscConfig+0xb6c>
 8002258:	40007000 	.word	0x40007000
 800225c:	40021000 	.word	0x40021000
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800228c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002290:	2102      	movs	r1, #2
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002298:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	fa92 f1a2 	rbit	r1, r2
 80022a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022aa:	6011      	str	r1, [r2, #0]
  return result;
 80022ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d180      	bne.n	80021d4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a9d      	ldr	r2, [pc, #628]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 825e 	beq.w	80027b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b96      	ldr	r3, [pc, #600]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	f000 821f 	beq.w	8002744 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 8170 	bne.w	80025f8 <HAL_RCC_OscConfig+0xedc>
 8002318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002346:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	461a      	mov	r2, r3
 800235a:	2300      	movs	r3, #0
 800235c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fe51 	bl	8001004 <HAL_GetTick>
 8002362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fe4c 	bl	8001004 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e21c      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023a0:	601a      	str	r2, [r3, #0]
  return result;
 80023a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0xcaa>
 80023c0:	4b64      	ldr	r3, [pc, #400]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e027      	b.n	8002416 <HAL_RCC_OscConfig+0xcfa>
 80023c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800241a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800241e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002428:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fa92 f1a2 	rbit	r1, r2
 8002432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002436:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800243a:	6011      	str	r1, [r2, #0]
  return result;
 800243c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002440:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d182      	bne.n	8002368 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	4937      	ldr	r1, [pc, #220]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002488:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a19      	ldr	r1, [r3, #32]
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	430b      	orrs	r3, r1
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2301      	movs	r3, #1
 80024e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fd8b 	bl	8001004 <HAL_GetTick>
 80024ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f2:	e009      	b.n	8002508 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fd86 	bl	8001004 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e156      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800252c:	601a      	str	r2, [r3, #0]
  return result;
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0xe3c>
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <HAL_RCC_OscConfig+0xe38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e02a      	b.n	80025a8 <HAL_RCC_OscConfig+0xe8c>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002582:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002590:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0220 	orr.w	r2, r2, #32
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f43f af7f 	beq.w	80024f4 <HAL_RCC_OscConfig+0xdd8>
 80025f6:	e0dd      	b.n	80027b4 <HAL_RCC_OscConfig+0x1098>
 80025f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002626:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002632:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2300      	movs	r3, #0
 800263c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fce1 	bl	8001004 <HAL_GetTick>
 8002642:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	e009      	b.n	800265c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fcdc 	bl	8001004 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ac      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 800265c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002660:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002680:	601a      	str	r2, [r3, #0]
  return result;
 8002682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002686:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800268a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0xf8a>
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e027      	b.n	80026f6 <HAL_RCC_OscConfig+0xfda>
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002702:	6011      	str	r1, [r2, #0]
 8002704:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002708:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	fa92 f1a2 	rbit	r1, r2
 8002712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002716:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800271a:	6011      	str	r1, [r2, #0]
  return result;
 800271c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002720:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d182      	bne.n	8002648 <HAL_RCC_OscConfig+0xf2c>
 8002742:	e037      	b.n	80027b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02e      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800276c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002774:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	429a      	cmp	r2, r3
 800277e:	d117      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002780:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002784:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002794:	429a      	cmp	r2, r3
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b09e      	sub	sp, #120	; 0x78
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e162      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	498b      	ldr	r1, [pc, #556]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e14a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	497f      	ldr	r1, [pc, #508]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80dc 	beq.w	80029f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d13c      	bne.n	80028ba <HAL_RCC_ClockConfig+0xf6>
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_ClockConfig+0xa6>
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e00f      	b.n	800288a <HAL_RCC_ClockConfig+0xc6>
 800286a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	663b      	str	r3, [r7, #96]	; 0x60
 800287e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800288e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f002 021f 	and.w	r2, r2, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d17b      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0f3      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d13c      	bne.n	800293c <HAL_RCC_ClockConfig+0x178>
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_ClockConfig+0x128>
 80028e6:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e00f      	b.n	800290c <HAL_RCC_ClockConfig+0x148>
 80028ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	63ba      	str	r2, [r7, #56]	; 0x38
 8002912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002914:	fa92 f2a2 	rbit	r2, r2
 8002918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800291a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13a      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b2      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 800293c:	2302      	movs	r3, #2
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_ClockConfig+0x1a0>
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e00d      	b.n	8002980 <HAL_RCC_ClockConfig+0x1bc>
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	61ba      	str	r2, [r7, #24]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	617a      	str	r2, [r7, #20]
  return result;
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e079      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fb20 	bl	8001004 <HAL_GetTick>
 80029c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fb1c 	bl	8001004 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e061      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d214      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4906      	ldr	r1, [pc, #24]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e040      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	491a      	ldr	r1, [pc, #104]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4912      	ldr	r1, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a66:	f000 f829 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	22f0      	movs	r2, #240	; 0xf0
 8002a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fa6e 	bl	8000f7c <HAL_InitTick>
  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3778      	adds	r7, #120	; 0x78
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08006da0 	.word	0x08006da0
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e03f      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aee:	623b      	str	r3, [r7, #32]
      break;
 8002af0:	e03f      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002af8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002afc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	fa92 f2a2 	rbit	r2, r2
 8002b04:	607a      	str	r2, [r7, #4]
  return result;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	40d3      	lsrs	r3, r2
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	220f      	movs	r2, #15
 8002b20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	60fa      	str	r2, [r7, #12]
  return result;
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	40d3      	lsrs	r3, r2
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b44:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e007      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b56:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	623b      	str	r3, [r7, #32]
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	372c      	adds	r7, #44	; 0x2c
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000
 8002b84:	007a1200 	.word	0x007a1200
 8002b88:	08006db8 	.word	0x08006db8
 8002b8c:	08006dc8 	.word	0x08006dc8

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bae:	f7ff ffef 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	fa92 f2a2 	rbit	r2, r2
 8002bc8:	603a      	str	r2, [r7, #0]
  return result;
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	40d3      	lsrs	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08006db0 	.word	0x08006db0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bf2:	f7ff ffcd 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	603a      	str	r2, [r7, #0]
  return result;
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	40d3      	lsrs	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08006db0 	.word	0x08006db0

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b092      	sub	sp, #72	; 0x48
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80d4 	beq.w	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c54:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10e      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a4a      	ldr	r2, [pc, #296]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b42      	ldr	r3, [pc, #264]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a41      	ldr	r2, [pc, #260]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe f9b5 	bl	8001004 <HAL_GetTick>
 8002c9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe f9b1 	bl	8001004 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1d6      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8084 	beq.w	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d07c      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	2301      	movs	r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04b      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f961 	bl	8001004 <HAL_GetTick>
 8002d42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe f95d 	bl	8001004 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e180      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	61fb      	str	r3, [r7, #28]
  return result;
 8002d74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d108      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d8a:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	e00d      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
 8002d98:	10908100 	.word	0x10908100
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	4b9a      	ldr	r3, [pc, #616]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2202      	movs	r2, #2
 8002dae:	613a      	str	r2, [r7, #16]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	fa92 f2a2 	rbit	r2, r2
 8002db6:	60fa      	str	r2, [r7, #12]
  return result;
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0b7      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dd6:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	498c      	ldr	r1, [pc, #560]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e08:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f023 0203 	bic.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	497f      	ldr	r1, [pc, #508]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e26:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	4978      	ldr	r1, [pc, #480]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4970      	ldr	r1, [pc, #448]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e62:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f023 0210 	bic.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4969      	ldr	r1, [pc, #420]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e80:	4b64      	ldr	r3, [pc, #400]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	4961      	ldr	r1, [pc, #388]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f023 0220 	bic.w	r2, r3, #32
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	495a      	ldr	r1, [pc, #360]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ebc:	4b55      	ldr	r3, [pc, #340]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	4952      	ldr	r1, [pc, #328]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eda:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	494b      	ldr	r1, [pc, #300]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4943      	ldr	r1, [pc, #268]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	493c      	ldr	r1, [pc, #240]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f34:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	492d      	ldr	r1, [pc, #180]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	4925      	ldr	r1, [pc, #148]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	491e      	ldr	r1, [pc, #120]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	490f      	ldr	r1, [pc, #60]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003006:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	4913      	ldr	r1, [pc, #76]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800301c:	4313      	orrs	r3, r2
 800301e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003038:	490b      	ldr	r1, [pc, #44]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800303a:	4313      	orrs	r3, r2
 800303c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003058:	4313      	orrs	r3, r2
 800305a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3748      	adds	r7, #72	; 0x48
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d001      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04f      	b.n	8003124 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <HAL_TIM_Base_Start_IT+0xc4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d018      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_TIM_Base_Start_IT+0xc8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_TIM_Base_Start_IT+0xcc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_TIM_Base_Start_IT+0xd0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_TIM_Base_Start_IT+0xd4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIM_Base_Start_IT+0x76>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_TIM_Base_Start_IT+0xd8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d115      	bne.n	800310e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d015      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fa:	d011      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	e008      	b.n	8003120 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e000      	b.n	8003122 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	40015000 	.word	0x40015000
 8003148:	00010007 	.word	0x00010007

0800314c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e049      	b.n	80031f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fd38 	bl	8000be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 fb9e 	bl	80038cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x24>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e03c      	b.n	800329a <HAL_TIM_PWM_Start+0x9e>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start+0x3e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e02f      	b.n	800329a <HAL_TIM_PWM_Start+0x9e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x58>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e022      	b.n	800329a <HAL_TIM_PWM_Start+0x9e>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d109      	bne.n	800326e <HAL_TIM_PWM_Start+0x72>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e015      	b.n	800329a <HAL_TIM_PWM_Start+0x9e>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b10      	cmp	r3, #16
 8003272:	d109      	bne.n	8003288 <HAL_TIM_PWM_Start+0x8c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e008      	b.n	800329a <HAL_TIM_PWM_Start+0x9e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0a1      	b.n	80033e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0xb6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	e023      	b.n	80032fa <HAL_TIM_PWM_Start+0xfe>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xc6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	e01b      	b.n	80032fa <HAL_TIM_PWM_Start+0xfe>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0xd6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	e013      	b.n	80032fa <HAL_TIM_PWM_Start+0xfe>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_PWM_Start+0xe6>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e0:	e00b      	b.n	80032fa <HAL_TIM_PWM_Start+0xfe>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_PWM_Start+0xf6>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f0:	e003      	b.n	80032fa <HAL_TIM_PWM_Start+0xfe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fe86 	bl	8004014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <HAL_TIM_PWM_Start+0x1f4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d018      	beq.n	8003344 <HAL_TIM_PWM_Start+0x148>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <HAL_TIM_PWM_Start+0x1f8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <HAL_TIM_PWM_Start+0x148>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a35      	ldr	r2, [pc, #212]	; (80033f8 <HAL_TIM_PWM_Start+0x1fc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00e      	beq.n	8003344 <HAL_TIM_PWM_Start+0x148>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_TIM_PWM_Start+0x200>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_TIM_PWM_Start+0x148>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a32      	ldr	r2, [pc, #200]	; (8003400 <HAL_TIM_PWM_Start+0x204>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_TIM_PWM_Start+0x148>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a31      	ldr	r2, [pc, #196]	; (8003404 <HAL_TIM_PWM_Start+0x208>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_TIM_PWM_Start+0x14c>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_TIM_PWM_Start+0x14e>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_TIM_PWM_Start+0x1f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_TIM_PWM_Start+0x20c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_TIM_PWM_Start+0x210>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_TIM_PWM_Start+0x1f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_TIM_PWM_Start+0x1fc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x1a8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_TIM_PWM_Start+0x208>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d115      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_TIM_PWM_Start+0x214>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d015      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x1e6>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d011      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	e008      	b.n	80033e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e000      	b.n	80033e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800
 8003404:	40015000 	.word	0x40015000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	00010007 	.word	0x00010007

08003414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0202 	mvn.w	r2, #2
 8003440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa1a 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa0c 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa1d 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0204 	mvn.w	r2, #4
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9f0 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9e2 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9f3 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0208 	mvn.w	r2, #8
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9c6 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9b8 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9c9 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b10      	cmp	r3, #16
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0210 	mvn.w	r2, #16
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f99c 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f98e 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f99f 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0201 	mvn.w	r2, #1
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fc ff6c 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fe6a 	bl	8004298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d2:	d10e      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fe5d 	bl	80042ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d10e      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d107      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f94d 	bl	80038b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b20      	cmp	r3, #32
 800362a:	d10e      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	d107      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f06f 0220 	mvn.w	r2, #32
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fe1d 	bl	8004284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800366e:	2302      	movs	r3, #2
 8003670:	e0ff      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b14      	cmp	r3, #20
 800367e:	f200 80f0 	bhi.w	8003862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003863 	.word	0x08003863
 8003690:	08003863 	.word	0x08003863
 8003694:	08003863 	.word	0x08003863
 8003698:	0800371d 	.word	0x0800371d
 800369c:	08003863 	.word	0x08003863
 80036a0:	08003863 	.word	0x08003863
 80036a4:	08003863 	.word	0x08003863
 80036a8:	0800375f 	.word	0x0800375f
 80036ac:	08003863 	.word	0x08003863
 80036b0:	08003863 	.word	0x08003863
 80036b4:	08003863 	.word	0x08003863
 80036b8:	0800379f 	.word	0x0800379f
 80036bc:	08003863 	.word	0x08003863
 80036c0:	08003863 	.word	0x08003863
 80036c4:	08003863 	.word	0x08003863
 80036c8:	080037e1 	.word	0x080037e1
 80036cc:	08003863 	.word	0x08003863
 80036d0:	08003863 	.word	0x08003863
 80036d4:	08003863 	.word	0x08003863
 80036d8:	08003821 	.word	0x08003821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f990 	bl	8003a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0208 	orr.w	r2, r2, #8
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0204 	bic.w	r2, r2, #4
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	619a      	str	r2, [r3, #24]
      break;
 800371a:	e0a5      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa0a 	bl	8003b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	021a      	lsls	r2, r3, #8
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	619a      	str	r2, [r3, #24]
      break;
 800375c:	e084      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fa7d 	bl	8003c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0208 	orr.w	r2, r2, #8
 8003778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0204 	bic.w	r2, r2, #4
 8003788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
      break;
 800379c:	e064      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 faef 	bl	8003d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	61da      	str	r2, [r3, #28]
      break;
 80037de:	e043      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fb3e 	bl	8003e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800381e:	e023      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fb88 	bl	8003f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	021a      	lsls	r2, r3, #8
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003860:	e002      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
      break;
 8003866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop

0800387c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <TIM_Base_SetConfig+0x11c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d00f      	beq.n	800390c <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <TIM_Base_SetConfig+0x120>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3e      	ldr	r2, [pc, #248]	; (80039f0 <TIM_Base_SetConfig+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <TIM_Base_SetConfig+0x128>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <TIM_Base_SetConfig+0x12c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d108      	bne.n	800391e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <TIM_Base_SetConfig+0x11c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d01b      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <TIM_Base_SetConfig+0x120>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d017      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <TIM_Base_SetConfig+0x124>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <TIM_Base_SetConfig+0x128>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <TIM_Base_SetConfig+0x130>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <TIM_Base_SetConfig+0x134>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <TIM_Base_SetConfig+0x138>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <TIM_Base_SetConfig+0x12c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <TIM_Base_SetConfig+0x11c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x100>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <TIM_Base_SetConfig+0x128>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x100>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <TIM_Base_SetConfig+0x130>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x100>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <TIM_Base_SetConfig+0x134>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x100>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <TIM_Base_SetConfig+0x138>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x100>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <TIM_Base_SetConfig+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40013400 	.word	0x40013400
 80039f8:	40015000 	.word	0x40015000
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800

08003a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f023 0302 	bic.w	r3, r3, #2
 8003a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <TIM_OC1_SetConfig+0x11c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <TIM_OC1_SetConfig+0x88>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <TIM_OC1_SetConfig+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00f      	beq.n	8003a90 <TIM_OC1_SetConfig+0x88>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <TIM_OC1_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_OC1_SetConfig+0x88>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a2d      	ldr	r2, [pc, #180]	; (8003b30 <TIM_OC1_SetConfig+0x128>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_OC1_SetConfig+0x88>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <TIM_OC1_SetConfig+0x12c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC1_SetConfig+0x88>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <TIM_OC1_SetConfig+0x130>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10c      	bne.n	8003aaa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0308 	bic.w	r3, r3, #8
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <TIM_OC1_SetConfig+0x11c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_OC1_SetConfig+0xd2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <TIM_OC1_SetConfig+0x120>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_OC1_SetConfig+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <TIM_OC1_SetConfig+0x124>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_OC1_SetConfig+0xd2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <TIM_OC1_SetConfig+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_OC1_SetConfig+0xd2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <TIM_OC1_SetConfig+0x12c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_OC1_SetConfig+0xd2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <TIM_OC1_SetConfig+0x130>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d111      	bne.n	8003afe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40013400 	.word	0x40013400
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800
 8003b38:	40015000 	.word	0x40015000

08003b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0210 	bic.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0320 	bic.w	r3, r3, #32
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <TIM_OC2_SetConfig+0x110>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC2_SetConfig+0x74>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <TIM_OC2_SetConfig+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC2_SetConfig+0x74>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <TIM_OC2_SetConfig+0x118>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10d      	bne.n	8003bcc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <TIM_OC2_SetConfig+0x110>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <TIM_OC2_SetConfig+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <TIM_OC2_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_OC2_SetConfig+0xc0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <TIM_OC2_SetConfig+0x11c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_OC2_SetConfig+0xc0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <TIM_OC2_SetConfig+0x120>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_OC2_SetConfig+0xc0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <TIM_OC2_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC2_SetConfig+0xc0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <TIM_OC2_SetConfig+0x118>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40015000 	.word	0x40015000
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800

08003c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <TIM_OC3_SetConfig+0x10c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_OC3_SetConfig+0x72>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <TIM_OC3_SetConfig+0x110>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_OC3_SetConfig+0x72>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <TIM_OC3_SetConfig+0x114>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10d      	bne.n	8003cf2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <TIM_OC3_SetConfig+0x10c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <TIM_OC3_SetConfig+0xbe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <TIM_OC3_SetConfig+0x110>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00f      	beq.n	8003d22 <TIM_OC3_SetConfig+0xbe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <TIM_OC3_SetConfig+0x118>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <TIM_OC3_SetConfig+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <TIM_OC3_SetConfig+0x11c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <TIM_OC3_SetConfig+0xbe>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <TIM_OC3_SetConfig+0x120>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_OC3_SetConfig+0xbe>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <TIM_OC3_SetConfig+0x114>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d113      	bne.n	8003d4a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40013400 	.word	0x40013400
 8003d78:	40015000 	.word	0x40015000
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	031b      	lsls	r3, r3, #12
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <TIM_OC4_SetConfig+0xc8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <TIM_OC4_SetConfig+0x8c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <TIM_OC4_SetConfig+0xcc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00f      	beq.n	8003e14 <TIM_OC4_SetConfig+0x8c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <TIM_OC4_SetConfig+0xd0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_OC4_SetConfig+0x8c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <TIM_OC4_SetConfig+0xd4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_OC4_SetConfig+0x8c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <TIM_OC4_SetConfig+0xd8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_OC4_SetConfig+0x8c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <TIM_OC4_SetConfig+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d109      	bne.n	8003e28 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800
 8003e64:	40015000 	.word	0x40015000

08003e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <TIM_OC5_SetConfig+0xbc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <TIM_OC5_SetConfig+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <TIM_OC5_SetConfig+0xc0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00f      	beq.n	8003eea <TIM_OC5_SetConfig+0x82>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <TIM_OC5_SetConfig+0xc4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_OC5_SetConfig+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <TIM_OC5_SetConfig+0xc8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_OC5_SetConfig+0x82>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <TIM_OC5_SetConfig+0xcc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC5_SetConfig+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <TIM_OC5_SetConfig+0xd0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d109      	bne.n	8003efe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	621a      	str	r2, [r3, #32]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800
 8003f38:	40015000 	.word	0x40015000

08003f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	051b      	lsls	r3, r3, #20
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <TIM_OC6_SetConfig+0xc0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <TIM_OC6_SetConfig+0x84>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <TIM_OC6_SetConfig+0xc4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_OC6_SetConfig+0x84>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <TIM_OC6_SetConfig+0xc8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_OC6_SetConfig+0x84>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <TIM_OC6_SetConfig+0xcc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_OC6_SetConfig+0x84>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <TIM_OC6_SetConfig+0xd0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_OC6_SetConfig+0x84>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <TIM_OC6_SetConfig+0xd4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d109      	bne.n	8003fd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	029b      	lsls	r3, r3, #10
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40013400 	.word	0x40013400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40015000 	.word	0x40015000

08004014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2201      	movs	r2, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1a      	ldr	r2, [r3, #32]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	43db      	mvns	r3, r3
 8004036:	401a      	ands	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e06d      	b.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a30      	ldr	r2, [pc, #192]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2d      	ldr	r2, [pc, #180]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d01d      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d018      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a11      	ldr	r2, [pc, #68]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10c      	bne.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40013400 	.word	0x40013400
 8004168:	40015000 	.word	0x40015000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e06a      	b.n	800426a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d115      	bne.n	8004258 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	051b      	lsls	r3, r3, #20
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40013400 	.word	0x40013400
 8004280:	40015000 	.word	0x40015000

08004284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e040      	b.n	8004354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fd86 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fc00 	bl	8004b04 <UART_SetConfig>
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e022      	b.n	8004354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fdc8 	bl	8004eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fe4f 	bl	8004ff0 <UART_CheckIdleState>
 8004352:	4603      	mov	r3, r0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004370:	2b20      	cmp	r3, #32
 8004372:	d178      	bne.n	8004466 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Transmit+0x24>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e071      	b.n	8004468 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2221      	movs	r2, #33	; 0x21
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fc fe37 	bl	8001004 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x68>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043cc:	e030      	b.n	8004430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 feb1 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e03c      	b.n	8004468 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	b292      	uxth	r2, r2
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	3302      	adds	r3, #2
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	e008      	b.n	800441e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b292      	uxth	r2, r2
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1c8      	bne.n	80043ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2200      	movs	r2, #0
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fe7a 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e005      	b.n	8004468 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004484:	2b20      	cmp	r3, #32
 8004486:	d132      	bne.n	80044ee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Receive_IT+0x24>
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e02b      	b.n	80044f0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d018      	beq.n	80044de <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	69f9      	ldr	r1, [r7, #28]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fe93 	bl	8005210 <UART_Start_Receive_IT>
 80044ea:	4603      	mov	r3, r0
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0ba      	sub	sp, #232	; 0xe8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800451e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004522:	f640 030f 	movw	r3, #2063	; 0x80f
 8004526:	4013      	ands	r3, r2
 8004528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800452c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00f      	beq.n	8004560 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 82ab 	beq.w	8004aac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
      }
      return;
 800455e:	e2a5      	b.n	8004aac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8117 	beq.w	8004798 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004576:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800457a:	4b85      	ldr	r3, [pc, #532]	; (8004790 <HAL_UART_IRQHandler+0x298>)
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 810a 	beq.w	8004798 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <HAL_UART_IRQHandler+0xbc>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0xec>
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2202      	movs	r2, #2
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d011      	beq.n	8004614 <HAL_UART_IRQHandler+0x11c>
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2204      	movs	r2, #4
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004630:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <HAL_UART_IRQHandler+0x18a>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8211 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04f      	beq.n	800477a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fe5e 	bl	800539c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d141      	bne.n	8004772 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800471a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1d9      	bne.n	80046ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_UART_IRQHandler+0x29c>)
 8004748:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc fdd2 	bl	80012f8 <HAL_DMA_Abort_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	e00f      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9b4 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	e00b      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f9b0 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e007      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9ac 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004788:	e192      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	bf00      	nop
    return;
 800478c:	e190      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5b8>
 800478e:	bf00      	nop
 8004790:	04000120 	.word	0x04000120
 8004794:	08005465 	.word	0x08005465

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 814b 	bne.w	8004a38 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8144 	beq.w	8004a38 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 813d 	beq.w	8004a38 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2210      	movs	r2, #16
 80047c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	f040 80b5 	bne.w	8004940 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8164 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047f6:	429a      	cmp	r2, r3
 80047f8:	f080 815c 	bcs.w	8004ab4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b20      	cmp	r3, #32
 800480e:	f000 8086 	beq.w	800491e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800483c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004840:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004848:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1da      	bne.n	8004812 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800486c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004880:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004884:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004888:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e1      	bne.n	800485c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e3      	bne.n	8004898 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	f023 0310 	bic.w	r3, r3, #16
 80048f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004900:	65bb      	str	r3, [r7, #88]	; 0x58
 8004902:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800490e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e4      	bne.n	80048de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	4618      	mov	r0, r3
 800491a:	f7fc fcb4 	bl	8001286 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004930:	b29b      	uxth	r3, r3
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	b29b      	uxth	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8d7 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800493e:	e0b9      	b.n	8004ab4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800494c:	b29b      	uxth	r3, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80ab 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80a6 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800498e:	647b      	str	r3, [r7, #68]	; 0x44
 8004990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e4      	bne.n	800496c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	623b      	str	r3, [r7, #32]
   return(result);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049c6:	633a      	str	r2, [r7, #48]	; 0x30
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e4      	bne.n	80049ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f85b 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a36:	e03f      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_UART_IRQHandler+0x56a>
 8004a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 feea 	bl	8005834 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a60:	e02d      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00e      	beq.n	8004a8c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01c      	beq.n	8004abc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
    }
    return;
 8004a8a:	e017      	b.n	8004abc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_UART_IRQHandler+0x5c6>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fcf3 	bl	8005490 <UART_EndTransmit_IT>
    return;
 8004aaa:	e008      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004aac:	bf00      	nop
 8004aae:	e006      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004abc:	bf00      	nop
  }

}
 8004abe:	37e8      	adds	r7, #232	; 0xe8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b92      	ldr	r3, [pc, #584]	; (8004d78 <UART_SetConfig+0x274>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a80      	ldr	r2, [pc, #512]	; (8004d7c <UART_SetConfig+0x278>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d120      	bne.n	8004bc2 <UART_SetConfig+0xbe>
 8004b80:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <UART_SetConfig+0x27c>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d817      	bhi.n	8004bbc <UART_SetConfig+0xb8>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0x90>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb1 	.word	0x08004bb1
 8004b9c:	08004bb7 	.word	0x08004bb7
 8004ba0:	08004bab 	.word	0x08004bab
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0b5      	b.n	8004d16 <UART_SetConfig+0x212>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e0b2      	b.n	8004d16 <UART_SetConfig+0x212>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e0af      	b.n	8004d16 <UART_SetConfig+0x212>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e0ac      	b.n	8004d16 <UART_SetConfig+0x212>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0a9      	b.n	8004d16 <UART_SetConfig+0x212>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6f      	ldr	r2, [pc, #444]	; (8004d84 <UART_SetConfig+0x280>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d124      	bne.n	8004c16 <UART_SetConfig+0x112>
 8004bcc:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <UART_SetConfig+0x27c>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd8:	d011      	beq.n	8004bfe <UART_SetConfig+0xfa>
 8004bda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bde:	d817      	bhi.n	8004c10 <UART_SetConfig+0x10c>
 8004be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be4:	d011      	beq.n	8004c0a <UART_SetConfig+0x106>
 8004be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bea:	d811      	bhi.n	8004c10 <UART_SetConfig+0x10c>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <UART_SetConfig+0xf4>
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf4:	d006      	beq.n	8004c04 <UART_SetConfig+0x100>
 8004bf6:	e00b      	b.n	8004c10 <UART_SetConfig+0x10c>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e08b      	b.n	8004d16 <UART_SetConfig+0x212>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e088      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c04:	2304      	movs	r3, #4
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e085      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e082      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e07f      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5b      	ldr	r2, [pc, #364]	; (8004d88 <UART_SetConfig+0x284>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d124      	bne.n	8004c6a <UART_SetConfig+0x166>
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <UART_SetConfig+0x27c>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c2c:	d011      	beq.n	8004c52 <UART_SetConfig+0x14e>
 8004c2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c32:	d817      	bhi.n	8004c64 <UART_SetConfig+0x160>
 8004c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c38:	d011      	beq.n	8004c5e <UART_SetConfig+0x15a>
 8004c3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c3e:	d811      	bhi.n	8004c64 <UART_SetConfig+0x160>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <UART_SetConfig+0x148>
 8004c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c48:	d006      	beq.n	8004c58 <UART_SetConfig+0x154>
 8004c4a:	e00b      	b.n	8004c64 <UART_SetConfig+0x160>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e061      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e05e      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e05b      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e058      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c64:	2310      	movs	r3, #16
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e055      	b.n	8004d16 <UART_SetConfig+0x212>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a47      	ldr	r2, [pc, #284]	; (8004d8c <UART_SetConfig+0x288>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d124      	bne.n	8004cbe <UART_SetConfig+0x1ba>
 8004c74:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <UART_SetConfig+0x27c>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c80:	d011      	beq.n	8004ca6 <UART_SetConfig+0x1a2>
 8004c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c86:	d817      	bhi.n	8004cb8 <UART_SetConfig+0x1b4>
 8004c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8c:	d011      	beq.n	8004cb2 <UART_SetConfig+0x1ae>
 8004c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c92:	d811      	bhi.n	8004cb8 <UART_SetConfig+0x1b4>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <UART_SetConfig+0x19c>
 8004c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9c:	d006      	beq.n	8004cac <UART_SetConfig+0x1a8>
 8004c9e:	e00b      	b.n	8004cb8 <UART_SetConfig+0x1b4>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e037      	b.n	8004d16 <UART_SetConfig+0x212>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e034      	b.n	8004d16 <UART_SetConfig+0x212>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e031      	b.n	8004d16 <UART_SetConfig+0x212>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e02e      	b.n	8004d16 <UART_SetConfig+0x212>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e02b      	b.n	8004d16 <UART_SetConfig+0x212>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <UART_SetConfig+0x28c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d124      	bne.n	8004d12 <UART_SetConfig+0x20e>
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <UART_SetConfig+0x27c>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd4:	d011      	beq.n	8004cfa <UART_SetConfig+0x1f6>
 8004cd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cda:	d817      	bhi.n	8004d0c <UART_SetConfig+0x208>
 8004cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce0:	d011      	beq.n	8004d06 <UART_SetConfig+0x202>
 8004ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce6:	d811      	bhi.n	8004d0c <UART_SetConfig+0x208>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <UART_SetConfig+0x1f0>
 8004cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf0:	d006      	beq.n	8004d00 <UART_SetConfig+0x1fc>
 8004cf2:	e00b      	b.n	8004d0c <UART_SetConfig+0x208>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e00d      	b.n	8004d16 <UART_SetConfig+0x212>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e00a      	b.n	8004d16 <UART_SetConfig+0x212>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e007      	b.n	8004d16 <UART_SetConfig+0x212>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e004      	b.n	8004d16 <UART_SetConfig+0x212>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e001      	b.n	8004d16 <UART_SetConfig+0x212>
 8004d12:	2310      	movs	r3, #16
 8004d14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1e:	d16b      	bne.n	8004df8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004d20:	7ffb      	ldrb	r3, [r7, #31]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d838      	bhi.n	8004d98 <UART_SetConfig+0x294>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0x228>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d99 	.word	0x08004d99
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d99 	.word	0x08004d99
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004d99 	.word	0x08004d99
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fd ff2a 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e024      	b.n	8004da2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fd ff48 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61b8      	str	r0, [r7, #24]
        break;
 8004d5e:	e020      	b.n	8004da2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <UART_SetConfig+0x290>)
 8004d62:	61bb      	str	r3, [r7, #24]
        break;
 8004d64:	e01d      	b.n	8004da2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fd fea9 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8004d6a:	61b8      	str	r0, [r7, #24]
        break;
 8004d6c:	e019      	b.n	8004da2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e015      	b.n	8004da2 <UART_SetConfig+0x29e>
 8004d76:	bf00      	nop
 8004d78:	efff69f3 	.word	0xefff69f3
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40004400 	.word	0x40004400
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	40004c00 	.word	0x40004c00
 8004d90:	40005000 	.word	0x40005000
 8004d94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77bb      	strb	r3, [r7, #30]
        break;
 8004da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d073      	beq.n	8004e90 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	005a      	lsls	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d916      	bls.n	8004df2 <UART_SetConfig+0x2ee>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d212      	bcs.n	8004df2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	89fb      	ldrh	r3, [r7, #14]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	89fa      	ldrh	r2, [r7, #14]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e04e      	b.n	8004e90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	77bb      	strb	r3, [r7, #30]
 8004df6:	e04b      	b.n	8004e90 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d827      	bhi.n	8004e4e <UART_SetConfig+0x34a>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x300>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fd febe 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	61b8      	str	r0, [r7, #24]
        break;
 8004e2e:	e013      	b.n	8004e58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fd fedc 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004e34:	61b8      	str	r0, [r7, #24]
        break;
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <UART_SetConfig+0x3a4>)
 8004e3a:	61bb      	str	r3, [r7, #24]
        break;
 8004e3c:	e00c      	b.n	8004e58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fd fe3d 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8004e42:	61b8      	str	r0, [r7, #24]
        break;
 8004e44:	e008      	b.n	8004e58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e004      	b.n	8004e58 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	77bb      	strb	r3, [r7, #30]
        break;
 8004e56:	bf00      	nop
    }

    if (pclk != 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085a      	lsrs	r2, r3, #1
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d909      	bls.n	8004e8c <UART_SetConfig+0x388>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d205      	bcs.n	8004e8c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e001      	b.n	8004e90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d10a      	bne.n	8004fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b098      	sub	sp, #96	; 0x60
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005000:	f7fc f800 	bl	8001004 <HAL_GetTick>
 8005004:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d12e      	bne.n	8005072 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f88c 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d021      	beq.n	8005072 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005042:	653b      	str	r3, [r7, #80]	; 0x50
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504c:	647b      	str	r3, [r7, #68]	; 0x44
 800504e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e062      	b.n	8005138 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b04      	cmp	r3, #4
 800507e:	d149      	bne.n	8005114 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005088:	2200      	movs	r2, #0
 800508a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f856 	bl	8005140 <UART_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03c      	beq.n	8005114 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	623b      	str	r3, [r7, #32]
   return(result);
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60fb      	str	r3, [r7, #12]
   return(result);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ec:	61fa      	str	r2, [r7, #28]
 80050ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	617b      	str	r3, [r7, #20]
   return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e011      	b.n	8005138 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3758      	adds	r7, #88	; 0x58
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	e049      	b.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d045      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515a:	f7fb ff53 	bl	8001004 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <UART_WaitOnFlagUntilTimeout+0x30>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e048      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d031      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b08      	cmp	r3, #8
 800518e:	d110      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2208      	movs	r2, #8
 8005196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f8ff 	bl	800539c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2208      	movs	r2, #8
 80051a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e029      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d111      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f8e5 	bl	800539c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e00f      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	429a      	cmp	r2, r3
 8005202:	d0a6      	beq.n	8005152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005210:	b480      	push	{r7}
 8005212:	b097      	sub	sp, #92	; 0x5c
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d10e      	bne.n	8005262 <UART_Start_Receive_IT+0x52>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <UART_Start_Receive_IT+0x48>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005252:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005256:	e02d      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	22ff      	movs	r2, #255	; 0xff
 800525c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005260:	e028      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <UART_Start_Receive_IT+0x76>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <UART_Start_Receive_IT+0x6c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800527a:	e01b      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	227f      	movs	r2, #127	; 0x7f
 8005280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005284:	e016      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800528e:	d10d      	bne.n	80052ac <UART_Start_Receive_IT+0x9c>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <UART_Start_Receive_IT+0x92>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	227f      	movs	r2, #127	; 0x7f
 800529c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052a0:	e008      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	223f      	movs	r2, #63	; 0x3f
 80052a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052aa:	e003      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2222      	movs	r2, #34	; 0x22
 80052c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	657b      	str	r3, [r7, #84]	; 0x54
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	d107      	bne.n	8005312 <UART_Start_Receive_IT+0x102>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a21      	ldr	r2, [pc, #132]	; (8005394 <UART_Start_Receive_IT+0x184>)
 800530e:	669a      	str	r2, [r3, #104]	; 0x68
 8005310:	e002      	b.n	8005318 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <UART_Start_Receive_IT+0x188>)
 8005316:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d019      	beq.n	8005354 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e6      	bne.n	8005320 <UART_Start_Receive_IT+0x110>
 8005352:	e018      	b.n	8005386 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f043 0320 	orr.w	r3, r3, #32
 8005368:	653b      	str	r3, [r7, #80]	; 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	375c      	adds	r7, #92	; 0x5c
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	0800568d 	.word	0x0800568d
 8005398:	080054e5 	.word	0x080054e5

0800539c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b095      	sub	sp, #84	; 0x54
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	643b      	str	r3, [r7, #64]	; 0x40
 80053c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	2b01      	cmp	r3, #1
 8005410:	d118      	bne.n	8005444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005458:	bf00      	nop
 800545a:	3754      	adds	r7, #84	; 0x54
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fb28 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	613b      	str	r3, [r7, #16]
   return(result);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff faf4 	bl	8004ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054dc:	bf00      	nop
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b09c      	sub	sp, #112	; 0x70
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fc:	2b22      	cmp	r3, #34	; 0x22
 80054fe:	f040 80b9 	bne.w	8005674 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005508:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800550c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005510:	b2d9      	uxtb	r1, r3
 8005512:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	400a      	ands	r2, r1
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 809c 	bne.w	8005684 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800555a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005560:	66bb      	str	r3, [r7, #104]	; 0x68
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556a:	65bb      	str	r3, [r7, #88]	; 0x58
 800556c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	667b      	str	r3, [r7, #100]	; 0x64
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800559e:	647a      	str	r2, [r7, #68]	; 0x44
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055e8:	663b      	str	r3, [r7, #96]	; 0x60
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
 80055f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560a:	2b01      	cmp	r3, #1
 800560c:	d12e      	bne.n	800566c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	617b      	str	r3, [r7, #20]
   return(result);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d103      	bne.n	800565c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fa41 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800566a:	e00b      	b.n	8005684 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fa ffc9 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8005672:	e007      	b.n	8005684 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	3770      	adds	r7, #112	; 0x70
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b09c      	sub	sp, #112	; 0x70
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800569a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a4:	2b22      	cmp	r3, #34	; 0x22
 80056a6:	f040 80b9 	bne.w	800581c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80056be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056c2:	4013      	ands	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 809c 	bne.w	800582c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005708:	667b      	str	r3, [r7, #100]	; 0x64
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005712:	657b      	str	r3, [r7, #84]	; 0x54
 8005714:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	663b      	str	r3, [r7, #96]	; 0x60
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005746:	643a      	str	r2, [r7, #64]	; 0x40
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800574c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d018      	beq.n	80057ae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	61fb      	str	r3, [r7, #28]
   return(result);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d12e      	bne.n	8005814 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0310 	bic.w	r3, r3, #16
 80057d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	613b      	str	r3, [r7, #16]
   return(result);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e6      	bne.n	80057bc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d103      	bne.n	8005804 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff f96d 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005812:	e00b      	b.n	800582c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fa fef5 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 800581a:	e007      	b.n	800582c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0208 	orr.w	r2, r2, #8
 800582a:	619a      	str	r2, [r3, #24]
}
 800582c:	bf00      	nop
 800582e:	3770      	adds	r7, #112	; 0x70
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <atoi>:
 8005848:	220a      	movs	r2, #10
 800584a:	2100      	movs	r1, #0
 800584c:	f000 b882 	b.w	8005954 <strtol>

08005850 <_strtol_l.constprop.0>:
 8005850:	2b01      	cmp	r3, #1
 8005852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005856:	d001      	beq.n	800585c <_strtol_l.constprop.0+0xc>
 8005858:	2b24      	cmp	r3, #36	; 0x24
 800585a:	d906      	bls.n	800586a <_strtol_l.constprop.0+0x1a>
 800585c:	f000 fa66 	bl	8005d2c <__errno>
 8005860:	2316      	movs	r3, #22
 8005862:	6003      	str	r3, [r0, #0]
 8005864:	2000      	movs	r0, #0
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005950 <_strtol_l.constprop.0+0x100>
 800586e:	460d      	mov	r5, r1
 8005870:	462e      	mov	r6, r5
 8005872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005876:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800587a:	f017 0708 	ands.w	r7, r7, #8
 800587e:	d1f7      	bne.n	8005870 <_strtol_l.constprop.0+0x20>
 8005880:	2c2d      	cmp	r4, #45	; 0x2d
 8005882:	d132      	bne.n	80058ea <_strtol_l.constprop.0+0x9a>
 8005884:	782c      	ldrb	r4, [r5, #0]
 8005886:	2701      	movs	r7, #1
 8005888:	1cb5      	adds	r5, r6, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d05b      	beq.n	8005946 <_strtol_l.constprop.0+0xf6>
 800588e:	2b10      	cmp	r3, #16
 8005890:	d109      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005892:	2c30      	cmp	r4, #48	; 0x30
 8005894:	d107      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005896:	782c      	ldrb	r4, [r5, #0]
 8005898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800589c:	2c58      	cmp	r4, #88	; 0x58
 800589e:	d14d      	bne.n	800593c <_strtol_l.constprop.0+0xec>
 80058a0:	786c      	ldrb	r4, [r5, #1]
 80058a2:	2310      	movs	r3, #16
 80058a4:	3502      	adds	r5, #2
 80058a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80058aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80058ae:	f04f 0e00 	mov.w	lr, #0
 80058b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80058b6:	4676      	mov	r6, lr
 80058b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80058bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80058c0:	f1bc 0f09 	cmp.w	ip, #9
 80058c4:	d816      	bhi.n	80058f4 <_strtol_l.constprop.0+0xa4>
 80058c6:	4664      	mov	r4, ip
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	dd24      	ble.n	8005916 <_strtol_l.constprop.0+0xc6>
 80058cc:	f1be 3fff 	cmp.w	lr, #4294967295
 80058d0:	d008      	beq.n	80058e4 <_strtol_l.constprop.0+0x94>
 80058d2:	45b1      	cmp	r9, r6
 80058d4:	d31c      	bcc.n	8005910 <_strtol_l.constprop.0+0xc0>
 80058d6:	d101      	bne.n	80058dc <_strtol_l.constprop.0+0x8c>
 80058d8:	45a2      	cmp	sl, r4
 80058da:	db19      	blt.n	8005910 <_strtol_l.constprop.0+0xc0>
 80058dc:	fb06 4603 	mla	r6, r6, r3, r4
 80058e0:	f04f 0e01 	mov.w	lr, #1
 80058e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058e8:	e7e8      	b.n	80058bc <_strtol_l.constprop.0+0x6c>
 80058ea:	2c2b      	cmp	r4, #43	; 0x2b
 80058ec:	bf04      	itt	eq
 80058ee:	782c      	ldrbeq	r4, [r5, #0]
 80058f0:	1cb5      	addeq	r5, r6, #2
 80058f2:	e7ca      	b.n	800588a <_strtol_l.constprop.0+0x3a>
 80058f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80058f8:	f1bc 0f19 	cmp.w	ip, #25
 80058fc:	d801      	bhi.n	8005902 <_strtol_l.constprop.0+0xb2>
 80058fe:	3c37      	subs	r4, #55	; 0x37
 8005900:	e7e2      	b.n	80058c8 <_strtol_l.constprop.0+0x78>
 8005902:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005906:	f1bc 0f19 	cmp.w	ip, #25
 800590a:	d804      	bhi.n	8005916 <_strtol_l.constprop.0+0xc6>
 800590c:	3c57      	subs	r4, #87	; 0x57
 800590e:	e7db      	b.n	80058c8 <_strtol_l.constprop.0+0x78>
 8005910:	f04f 3eff 	mov.w	lr, #4294967295
 8005914:	e7e6      	b.n	80058e4 <_strtol_l.constprop.0+0x94>
 8005916:	f1be 3fff 	cmp.w	lr, #4294967295
 800591a:	d105      	bne.n	8005928 <_strtol_l.constprop.0+0xd8>
 800591c:	2322      	movs	r3, #34	; 0x22
 800591e:	6003      	str	r3, [r0, #0]
 8005920:	4646      	mov	r6, r8
 8005922:	b942      	cbnz	r2, 8005936 <_strtol_l.constprop.0+0xe6>
 8005924:	4630      	mov	r0, r6
 8005926:	e79e      	b.n	8005866 <_strtol_l.constprop.0+0x16>
 8005928:	b107      	cbz	r7, 800592c <_strtol_l.constprop.0+0xdc>
 800592a:	4276      	negs	r6, r6
 800592c:	2a00      	cmp	r2, #0
 800592e:	d0f9      	beq.n	8005924 <_strtol_l.constprop.0+0xd4>
 8005930:	f1be 0f00 	cmp.w	lr, #0
 8005934:	d000      	beq.n	8005938 <_strtol_l.constprop.0+0xe8>
 8005936:	1e69      	subs	r1, r5, #1
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	e7f3      	b.n	8005924 <_strtol_l.constprop.0+0xd4>
 800593c:	2430      	movs	r4, #48	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1b1      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005942:	2308      	movs	r3, #8
 8005944:	e7af      	b.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005946:	2c30      	cmp	r4, #48	; 0x30
 8005948:	d0a5      	beq.n	8005896 <_strtol_l.constprop.0+0x46>
 800594a:	230a      	movs	r3, #10
 800594c:	e7ab      	b.n	80058a6 <_strtol_l.constprop.0+0x56>
 800594e:	bf00      	nop
 8005950:	08006dd9 	.word	0x08006dd9

08005954 <strtol>:
 8005954:	4613      	mov	r3, r2
 8005956:	460a      	mov	r2, r1
 8005958:	4601      	mov	r1, r0
 800595a:	4802      	ldr	r0, [pc, #8]	; (8005964 <strtol+0x10>)
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f7ff bf77 	b.w	8005850 <_strtol_l.constprop.0>
 8005962:	bf00      	nop
 8005964:	20000064 	.word	0x20000064

08005968 <std>:
 8005968:	2300      	movs	r3, #0
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	e9c0 3300 	strd	r3, r3, [r0]
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005976:	6083      	str	r3, [r0, #8]
 8005978:	8181      	strh	r1, [r0, #12]
 800597a:	6643      	str	r3, [r0, #100]	; 0x64
 800597c:	81c2      	strh	r2, [r0, #14]
 800597e:	6183      	str	r3, [r0, #24]
 8005980:	4619      	mov	r1, r3
 8005982:	2208      	movs	r2, #8
 8005984:	305c      	adds	r0, #92	; 0x5c
 8005986:	f000 f926 	bl	8005bd6 <memset>
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <std+0x58>)
 800598c:	6263      	str	r3, [r4, #36]	; 0x24
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <std+0x5c>)
 8005990:	62a3      	str	r3, [r4, #40]	; 0x28
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <std+0x60>)
 8005994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <std+0x64>)
 8005998:	6323      	str	r3, [r4, #48]	; 0x30
 800599a:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <std+0x68>)
 800599c:	6224      	str	r4, [r4, #32]
 800599e:	429c      	cmp	r4, r3
 80059a0:	d006      	beq.n	80059b0 <std+0x48>
 80059a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d002      	beq.n	80059b0 <std+0x48>
 80059aa:	33d0      	adds	r3, #208	; 0xd0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d105      	bne.n	80059bc <std+0x54>
 80059b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f000 b9e2 	b.w	8005d80 <__retarget_lock_init_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005b51 	.word	0x08005b51
 80059c4:	08005b73 	.word	0x08005b73
 80059c8:	08005bab 	.word	0x08005bab
 80059cc:	08005bcf 	.word	0x08005bcf
 80059d0:	20000284 	.word	0x20000284

080059d4 <stdio_exit_handler>:
 80059d4:	4a02      	ldr	r2, [pc, #8]	; (80059e0 <stdio_exit_handler+0xc>)
 80059d6:	4903      	ldr	r1, [pc, #12]	; (80059e4 <stdio_exit_handler+0x10>)
 80059d8:	4803      	ldr	r0, [pc, #12]	; (80059e8 <stdio_exit_handler+0x14>)
 80059da:	f000 b869 	b.w	8005ab0 <_fwalk_sglue>
 80059de:	bf00      	nop
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	08006929 	.word	0x08006929
 80059e8:	20000018 	.word	0x20000018

080059ec <cleanup_stdio>:
 80059ec:	6841      	ldr	r1, [r0, #4]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <cleanup_stdio+0x34>)
 80059f0:	4299      	cmp	r1, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	d001      	beq.n	80059fc <cleanup_stdio+0x10>
 80059f8:	f000 ff96 	bl	8006928 <_fflush_r>
 80059fc:	68a1      	ldr	r1, [r4, #8]
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <cleanup_stdio+0x38>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <cleanup_stdio+0x1e>
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 ff8f 	bl	8006928 <_fflush_r>
 8005a0a:	68e1      	ldr	r1, [r4, #12]
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <cleanup_stdio+0x3c>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d004      	beq.n	8005a1c <cleanup_stdio+0x30>
 8005a12:	4620      	mov	r0, r4
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f000 bf86 	b.w	8006928 <_fflush_r>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000284 	.word	0x20000284
 8005a24:	200002ec 	.word	0x200002ec
 8005a28:	20000354 	.word	0x20000354

08005a2c <global_stdio_init.part.0>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <global_stdio_init.part.0+0x30>)
 8005a30:	4c0b      	ldr	r4, [pc, #44]	; (8005a60 <global_stdio_init.part.0+0x34>)
 8005a32:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <global_stdio_init.part.0+0x38>)
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	f7ff ff94 	bl	8005968 <std>
 8005a40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a44:	2201      	movs	r2, #1
 8005a46:	2109      	movs	r1, #9
 8005a48:	f7ff ff8e 	bl	8005968 <std>
 8005a4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a50:	2202      	movs	r2, #2
 8005a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a56:	2112      	movs	r1, #18
 8005a58:	f7ff bf86 	b.w	8005968 <std>
 8005a5c:	200003bc 	.word	0x200003bc
 8005a60:	20000284 	.word	0x20000284
 8005a64:	080059d5 	.word	0x080059d5

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 b98a 	b.w	8005d82 <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	200003c5 	.word	0x200003c5

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b985 	b.w	8005d84 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	200003c5 	.word	0x200003c5

08005a80 <__sinit>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7ff fff0 	bl	8005a68 <__sfp_lock_acquire>
 8005a88:	6a23      	ldr	r3, [r4, #32]
 8005a8a:	b11b      	cbz	r3, 8005a94 <__sinit+0x14>
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7ff bff0 	b.w	8005a74 <__sfp_lock_release>
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <__sinit+0x28>)
 8005a96:	6223      	str	r3, [r4, #32]
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <__sinit+0x2c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f5      	bne.n	8005a8c <__sinit+0xc>
 8005aa0:	f7ff ffc4 	bl	8005a2c <global_stdio_init.part.0>
 8005aa4:	e7f2      	b.n	8005a8c <__sinit+0xc>
 8005aa6:	bf00      	nop
 8005aa8:	080059ed 	.word	0x080059ed
 8005aac:	200003bc 	.word	0x200003bc

08005ab0 <_fwalk_sglue>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	2600      	movs	r6, #0
 8005abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac4:	d505      	bpl.n	8005ad2 <_fwalk_sglue+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f7      	bne.n	8005abc <_fwalk_sglue+0xc>
 8005acc:	4630      	mov	r0, r6
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_sglue+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_sglue+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	; 0x68
 8005aea:	e7e9      	b.n	8005ac0 <_fwalk_sglue+0x10>

08005aec <iprintf>:
 8005aec:	b40f      	push	{r0, r1, r2, r3}
 8005aee:	b507      	push	{r0, r1, r2, lr}
 8005af0:	4906      	ldr	r1, [pc, #24]	; (8005b0c <iprintf+0x20>)
 8005af2:	ab04      	add	r3, sp, #16
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afa:	6881      	ldr	r1, [r0, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f000 fbe3 	bl	80062c8 <_vfiprintf_r>
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	b004      	add	sp, #16
 8005b0a:	4770      	bx	lr
 8005b0c:	20000064 	.word	0x20000064

08005b10 <siprintf>:
 8005b10:	b40e      	push	{r1, r2, r3}
 8005b12:	b500      	push	{lr}
 8005b14:	b09c      	sub	sp, #112	; 0x70
 8005b16:	ab1d      	add	r3, sp, #116	; 0x74
 8005b18:	9002      	str	r0, [sp, #8]
 8005b1a:	9006      	str	r0, [sp, #24]
 8005b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b20:	4809      	ldr	r0, [pc, #36]	; (8005b48 <siprintf+0x38>)
 8005b22:	9107      	str	r1, [sp, #28]
 8005b24:	9104      	str	r1, [sp, #16]
 8005b26:	4909      	ldr	r1, [pc, #36]	; (8005b4c <siprintf+0x3c>)
 8005b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2c:	9105      	str	r1, [sp, #20]
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	a902      	add	r1, sp, #8
 8005b34:	f000 faa0 	bl	8006078 <_svfiprintf_r>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	b01c      	add	sp, #112	; 0x70
 8005b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b44:	b003      	add	sp, #12
 8005b46:	4770      	bx	lr
 8005b48:	20000064 	.word	0x20000064
 8005b4c:	ffff0208 	.word	0xffff0208

08005b50 <__sread>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	f000 f8c4 	bl	8005ce4 <_read_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	bfab      	itete	ge
 8005b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b62:	89a3      	ldrhlt	r3, [r4, #12]
 8005b64:	181b      	addge	r3, r3, r0
 8005b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b6a:	bfac      	ite	ge
 8005b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b6e:	81a3      	strhlt	r3, [r4, #12]
 8005b70:	bd10      	pop	{r4, pc}

08005b72 <__swrite>:
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	461f      	mov	r7, r3
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	05db      	lsls	r3, r3, #23
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4616      	mov	r6, r2
 8005b82:	d505      	bpl.n	8005b90 <__swrite+0x1e>
 8005b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f000 f898 	bl	8005cc0 <_lseek_r>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	f000 b8af 	b.w	8005d08 <_write_r>

08005baa <__sseek>:
 8005baa:	b510      	push	{r4, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 f885 	bl	8005cc0 <_lseek_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	bf15      	itete	ne
 8005bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bc6:	81a3      	strheq	r3, [r4, #12]
 8005bc8:	bf18      	it	ne
 8005bca:	81a3      	strhne	r3, [r4, #12]
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <__sclose>:
 8005bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd2:	f000 b865 	b.w	8005ca0 <_close_r>

08005bd6 <memset>:
 8005bd6:	4402      	add	r2, r0
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d100      	bne.n	8005be0 <memset+0xa>
 8005bde:	4770      	bx	lr
 8005be0:	f803 1b01 	strb.w	r1, [r3], #1
 8005be4:	e7f9      	b.n	8005bda <memset+0x4>
	...

08005be8 <strtok>:
 8005be8:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <strtok+0x5c>)
 8005bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bec:	681e      	ldr	r6, [r3, #0]
 8005bee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	b9fc      	cbnz	r4, 8005c34 <strtok+0x4c>
 8005bf4:	2050      	movs	r0, #80	; 0x50
 8005bf6:	9101      	str	r1, [sp, #4]
 8005bf8:	f000 f930 	bl	8005e5c <malloc>
 8005bfc:	9901      	ldr	r1, [sp, #4]
 8005bfe:	6470      	str	r0, [r6, #68]	; 0x44
 8005c00:	4602      	mov	r2, r0
 8005c02:	b920      	cbnz	r0, 8005c0e <strtok+0x26>
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <strtok+0x60>)
 8005c06:	4811      	ldr	r0, [pc, #68]	; (8005c4c <strtok+0x64>)
 8005c08:	215b      	movs	r1, #91	; 0x5b
 8005c0a:	f000 f8bd 	bl	8005d88 <__assert_func>
 8005c0e:	e9c0 4400 	strd	r4, r4, [r0]
 8005c12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c2e:	6184      	str	r4, [r0, #24]
 8005c30:	7704      	strb	r4, [r0, #28]
 8005c32:	6244      	str	r4, [r0, #36]	; 0x24
 8005c34:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005c36:	2301      	movs	r3, #1
 8005c38:	4628      	mov	r0, r5
 8005c3a:	b002      	add	sp, #8
 8005c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c40:	f000 b806 	b.w	8005c50 <__strtok_r>
 8005c44:	20000064 	.word	0x20000064
 8005c48:	08006ed9 	.word	0x08006ed9
 8005c4c:	08006ef0 	.word	0x08006ef0

08005c50 <__strtok_r>:
 8005c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c52:	b908      	cbnz	r0, 8005c58 <__strtok_r+0x8>
 8005c54:	6810      	ldr	r0, [r2, #0]
 8005c56:	b188      	cbz	r0, 8005c7c <__strtok_r+0x2c>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c60:	460f      	mov	r7, r1
 8005c62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c66:	b91e      	cbnz	r6, 8005c70 <__strtok_r+0x20>
 8005c68:	b965      	cbnz	r5, 8005c84 <__strtok_r+0x34>
 8005c6a:	6015      	str	r5, [r2, #0]
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e005      	b.n	8005c7c <__strtok_r+0x2c>
 8005c70:	42b5      	cmp	r5, r6
 8005c72:	d1f6      	bne.n	8005c62 <__strtok_r+0x12>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <__strtok_r+0xa>
 8005c78:	6014      	str	r4, [r2, #0]
 8005c7a:	7003      	strb	r3, [r0, #0]
 8005c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7e:	461c      	mov	r4, r3
 8005c80:	e00c      	b.n	8005c9c <__strtok_r+0x4c>
 8005c82:	b915      	cbnz	r5, 8005c8a <__strtok_r+0x3a>
 8005c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c88:	460e      	mov	r6, r1
 8005c8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c8e:	42ab      	cmp	r3, r5
 8005c90:	d1f7      	bne.n	8005c82 <__strtok_r+0x32>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f3      	beq.n	8005c7e <__strtok_r+0x2e>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c9c:	6014      	str	r4, [r2, #0]
 8005c9e:	e7ed      	b.n	8005c7c <__strtok_r+0x2c>

08005ca0 <_close_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d06      	ldr	r5, [pc, #24]	; (8005cbc <_close_r+0x1c>)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fa fe33 	bl	8000916 <_close>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_close_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_close_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	200003c0 	.word	0x200003c0

08005cc0 <_lseek_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d07      	ldr	r5, [pc, #28]	; (8005ce0 <_lseek_r+0x20>)
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	4611      	mov	r1, r2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	602a      	str	r2, [r5, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f7fa fe48 	bl	8000964 <_lseek>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_lseek_r+0x1e>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_lseek_r+0x1e>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	200003c0 	.word	0x200003c0

08005ce4 <_read_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	; (8005d04 <_read_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fa fdd6 	bl	80008a4 <_read>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_read_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_read_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200003c0 	.word	0x200003c0

08005d08 <_write_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_write_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fa fde1 	bl	80008de <_write>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_write_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_write_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200003c0 	.word	0x200003c0

08005d2c <__errno>:
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <__errno+0x8>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000064 	.word	0x20000064

08005d38 <__libc_init_array>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4d0d      	ldr	r5, [pc, #52]	; (8005d70 <__libc_init_array+0x38>)
 8005d3c:	4c0d      	ldr	r4, [pc, #52]	; (8005d74 <__libc_init_array+0x3c>)
 8005d3e:	1b64      	subs	r4, r4, r5
 8005d40:	10a4      	asrs	r4, r4, #2
 8005d42:	2600      	movs	r6, #0
 8005d44:	42a6      	cmp	r6, r4
 8005d46:	d109      	bne.n	8005d5c <__libc_init_array+0x24>
 8005d48:	4d0b      	ldr	r5, [pc, #44]	; (8005d78 <__libc_init_array+0x40>)
 8005d4a:	4c0c      	ldr	r4, [pc, #48]	; (8005d7c <__libc_init_array+0x44>)
 8005d4c:	f000 fffa 	bl	8006d44 <_init>
 8005d50:	1b64      	subs	r4, r4, r5
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	2600      	movs	r6, #0
 8005d56:	42a6      	cmp	r6, r4
 8005d58:	d105      	bne.n	8005d66 <__libc_init_array+0x2e>
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d60:	4798      	blx	r3
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7ee      	b.n	8005d44 <__libc_init_array+0xc>
 8005d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6a:	4798      	blx	r3
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	e7f2      	b.n	8005d56 <__libc_init_array+0x1e>
 8005d70:	08006fbc 	.word	0x08006fbc
 8005d74:	08006fbc 	.word	0x08006fbc
 8005d78:	08006fbc 	.word	0x08006fbc
 8005d7c:	08006fc0 	.word	0x08006fc0

08005d80 <__retarget_lock_init_recursive>:
 8005d80:	4770      	bx	lr

08005d82 <__retarget_lock_acquire_recursive>:
 8005d82:	4770      	bx	lr

08005d84 <__retarget_lock_release_recursive>:
 8005d84:	4770      	bx	lr
	...

08005d88 <__assert_func>:
 8005d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <__assert_func+0x2c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4605      	mov	r5, r0
 8005d94:	68d8      	ldr	r0, [r3, #12]
 8005d96:	b14c      	cbz	r4, 8005dac <__assert_func+0x24>
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <__assert_func+0x30>)
 8005d9a:	9100      	str	r1, [sp, #0]
 8005d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <__assert_func+0x34>)
 8005da2:	462b      	mov	r3, r5
 8005da4:	f000 fde8 	bl	8006978 <fiprintf>
 8005da8:	f000 fec6 	bl	8006b38 <abort>
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <__assert_func+0x38>)
 8005dae:	461c      	mov	r4, r3
 8005db0:	e7f3      	b.n	8005d9a <__assert_func+0x12>
 8005db2:	bf00      	nop
 8005db4:	20000064 	.word	0x20000064
 8005db8:	08006f4a 	.word	0x08006f4a
 8005dbc:	08006f57 	.word	0x08006f57
 8005dc0:	08006f85 	.word	0x08006f85

08005dc4 <_free_r>:
 8005dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	d044      	beq.n	8005e54 <_free_r+0x90>
 8005dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dce:	9001      	str	r0, [sp, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005dd6:	bfb8      	it	lt
 8005dd8:	18e4      	addlt	r4, r4, r3
 8005dda:	f000 f8e7 	bl	8005fac <__malloc_lock>
 8005dde:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <_free_r+0x94>)
 8005de0:	9801      	ldr	r0, [sp, #4]
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	b933      	cbnz	r3, 8005df4 <_free_r+0x30>
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	6014      	str	r4, [r2, #0]
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005df0:	f000 b8e2 	b.w	8005fb8 <__malloc_unlock>
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	d908      	bls.n	8005e0a <_free_r+0x46>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf01      	itttt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	1949      	addeq	r1, r1, r5
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	e7ed      	b.n	8005de6 <_free_r+0x22>
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b10b      	cbz	r3, 8005e14 <_free_r+0x50>
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d9fa      	bls.n	8005e0a <_free_r+0x46>
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	1855      	adds	r5, r2, r1
 8005e18:	42a5      	cmp	r5, r4
 8005e1a:	d10b      	bne.n	8005e34 <_free_r+0x70>
 8005e1c:	6824      	ldr	r4, [r4, #0]
 8005e1e:	4421      	add	r1, r4
 8005e20:	1854      	adds	r4, r2, r1
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	d1e0      	bne.n	8005dea <_free_r+0x26>
 8005e28:	681c      	ldr	r4, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	6053      	str	r3, [r2, #4]
 8005e2e:	440c      	add	r4, r1
 8005e30:	6014      	str	r4, [r2, #0]
 8005e32:	e7da      	b.n	8005dea <_free_r+0x26>
 8005e34:	d902      	bls.n	8005e3c <_free_r+0x78>
 8005e36:	230c      	movs	r3, #12
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	e7d6      	b.n	8005dea <_free_r+0x26>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf04      	itt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	bf04      	itt	eq
 8005e4c:	1949      	addeq	r1, r1, r5
 8005e4e:	6021      	streq	r1, [r4, #0]
 8005e50:	6054      	str	r4, [r2, #4]
 8005e52:	e7ca      	b.n	8005dea <_free_r+0x26>
 8005e54:	b003      	add	sp, #12
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	200003c8 	.word	0x200003c8

08005e5c <malloc>:
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <malloc+0xc>)
 8005e5e:	4601      	mov	r1, r0
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f000 b823 	b.w	8005eac <_malloc_r>
 8005e66:	bf00      	nop
 8005e68:	20000064 	.word	0x20000064

08005e6c <sbrk_aligned>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0e      	ldr	r6, [pc, #56]	; (8005ea8 <sbrk_aligned+0x3c>)
 8005e70:	460c      	mov	r4, r1
 8005e72:	6831      	ldr	r1, [r6, #0]
 8005e74:	4605      	mov	r5, r0
 8005e76:	b911      	cbnz	r1, 8005e7e <sbrk_aligned+0x12>
 8005e78:	f000 fe40 	bl	8006afc <_sbrk_r>
 8005e7c:	6030      	str	r0, [r6, #0]
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 fe3b 	bl	8006afc <_sbrk_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d00a      	beq.n	8005ea0 <sbrk_aligned+0x34>
 8005e8a:	1cc4      	adds	r4, r0, #3
 8005e8c:	f024 0403 	bic.w	r4, r4, #3
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d007      	beq.n	8005ea4 <sbrk_aligned+0x38>
 8005e94:	1a21      	subs	r1, r4, r0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 fe30 	bl	8006afc <_sbrk_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d101      	bne.n	8005ea4 <sbrk_aligned+0x38>
 8005ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	200003cc 	.word	0x200003cc

08005eac <_malloc_r>:
 8005eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb0:	1ccd      	adds	r5, r1, #3
 8005eb2:	f025 0503 	bic.w	r5, r5, #3
 8005eb6:	3508      	adds	r5, #8
 8005eb8:	2d0c      	cmp	r5, #12
 8005eba:	bf38      	it	cc
 8005ebc:	250c      	movcc	r5, #12
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	db01      	blt.n	8005ec8 <_malloc_r+0x1c>
 8005ec4:	42a9      	cmp	r1, r5
 8005ec6:	d905      	bls.n	8005ed4 <_malloc_r+0x28>
 8005ec8:	230c      	movs	r3, #12
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	2600      	movs	r6, #0
 8005ece:	4630      	mov	r0, r6
 8005ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fa8 <_malloc_r+0xfc>
 8005ed8:	f000 f868 	bl	8005fac <__malloc_lock>
 8005edc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee0:	461c      	mov	r4, r3
 8005ee2:	bb5c      	cbnz	r4, 8005f3c <_malloc_r+0x90>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	f7ff ffc0 	bl	8005e6c <sbrk_aligned>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	4604      	mov	r4, r0
 8005ef0:	d155      	bne.n	8005f9e <_malloc_r+0xf2>
 8005ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef6:	4626      	mov	r6, r4
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d145      	bne.n	8005f88 <_malloc_r+0xdc>
 8005efc:	2c00      	cmp	r4, #0
 8005efe:	d048      	beq.n	8005f92 <_malloc_r+0xe6>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	4631      	mov	r1, r6
 8005f04:	4638      	mov	r0, r7
 8005f06:	eb04 0903 	add.w	r9, r4, r3
 8005f0a:	f000 fdf7 	bl	8006afc <_sbrk_r>
 8005f0e:	4581      	cmp	r9, r0
 8005f10:	d13f      	bne.n	8005f92 <_malloc_r+0xe6>
 8005f12:	6821      	ldr	r1, [r4, #0]
 8005f14:	1a6d      	subs	r5, r5, r1
 8005f16:	4629      	mov	r1, r5
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7ff ffa7 	bl	8005e6c <sbrk_aligned>
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d037      	beq.n	8005f92 <_malloc_r+0xe6>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	442b      	add	r3, r5
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	f8d8 3000 	ldr.w	r3, [r8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d038      	beq.n	8005fa2 <_malloc_r+0xf6>
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	42a2      	cmp	r2, r4
 8005f34:	d12b      	bne.n	8005f8e <_malloc_r+0xe2>
 8005f36:	2200      	movs	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	e00f      	b.n	8005f5c <_malloc_r+0xb0>
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	1b52      	subs	r2, r2, r5
 8005f40:	d41f      	bmi.n	8005f82 <_malloc_r+0xd6>
 8005f42:	2a0b      	cmp	r2, #11
 8005f44:	d917      	bls.n	8005f76 <_malloc_r+0xca>
 8005f46:	1961      	adds	r1, r4, r5
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	6025      	str	r5, [r4, #0]
 8005f4c:	bf18      	it	ne
 8005f4e:	6059      	strne	r1, [r3, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	bf08      	it	eq
 8005f54:	f8c8 1000 	streq.w	r1, [r8]
 8005f58:	5162      	str	r2, [r4, r5]
 8005f5a:	604b      	str	r3, [r1, #4]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f104 060b 	add.w	r6, r4, #11
 8005f62:	f000 f829 	bl	8005fb8 <__malloc_unlock>
 8005f66:	f026 0607 	bic.w	r6, r6, #7
 8005f6a:	1d23      	adds	r3, r4, #4
 8005f6c:	1af2      	subs	r2, r6, r3
 8005f6e:	d0ae      	beq.n	8005ece <_malloc_r+0x22>
 8005f70:	1b9b      	subs	r3, r3, r6
 8005f72:	50a3      	str	r3, [r4, r2]
 8005f74:	e7ab      	b.n	8005ece <_malloc_r+0x22>
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6862      	ldr	r2, [r4, #4]
 8005f7a:	d1dd      	bne.n	8005f38 <_malloc_r+0x8c>
 8005f7c:	f8c8 2000 	str.w	r2, [r8]
 8005f80:	e7ec      	b.n	8005f5c <_malloc_r+0xb0>
 8005f82:	4623      	mov	r3, r4
 8005f84:	6864      	ldr	r4, [r4, #4]
 8005f86:	e7ac      	b.n	8005ee2 <_malloc_r+0x36>
 8005f88:	4634      	mov	r4, r6
 8005f8a:	6876      	ldr	r6, [r6, #4]
 8005f8c:	e7b4      	b.n	8005ef8 <_malloc_r+0x4c>
 8005f8e:	4613      	mov	r3, r2
 8005f90:	e7cc      	b.n	8005f2c <_malloc_r+0x80>
 8005f92:	230c      	movs	r3, #12
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4638      	mov	r0, r7
 8005f98:	f000 f80e 	bl	8005fb8 <__malloc_unlock>
 8005f9c:	e797      	b.n	8005ece <_malloc_r+0x22>
 8005f9e:	6025      	str	r5, [r4, #0]
 8005fa0:	e7dc      	b.n	8005f5c <_malloc_r+0xb0>
 8005fa2:	605b      	str	r3, [r3, #4]
 8005fa4:	deff      	udf	#255	; 0xff
 8005fa6:	bf00      	nop
 8005fa8:	200003c8 	.word	0x200003c8

08005fac <__malloc_lock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_lock+0x8>)
 8005fae:	f7ff bee8 	b.w	8005d82 <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	200003c4 	.word	0x200003c4

08005fb8 <__malloc_unlock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_unlock+0x8>)
 8005fba:	f7ff bee3 	b.w	8005d84 <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200003c4 	.word	0x200003c4

08005fc4 <__ssputs_r>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	688e      	ldr	r6, [r1, #8]
 8005fca:	461f      	mov	r7, r3
 8005fcc:	42be      	cmp	r6, r7
 8005fce:	680b      	ldr	r3, [r1, #0]
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	d82c      	bhi.n	8006032 <__ssputs_r+0x6e>
 8005fd8:	898a      	ldrh	r2, [r1, #12]
 8005fda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fde:	d026      	beq.n	800602e <__ssputs_r+0x6a>
 8005fe0:	6965      	ldr	r5, [r4, #20]
 8005fe2:	6909      	ldr	r1, [r1, #16]
 8005fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe8:	eba3 0901 	sub.w	r9, r3, r1
 8005fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff0:	1c7b      	adds	r3, r7, #1
 8005ff2:	444b      	add	r3, r9
 8005ff4:	106d      	asrs	r5, r5, #1
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	bf38      	it	cc
 8005ffa:	461d      	movcc	r5, r3
 8005ffc:	0553      	lsls	r3, r2, #21
 8005ffe:	d527      	bpl.n	8006050 <__ssputs_r+0x8c>
 8006000:	4629      	mov	r1, r5
 8006002:	f7ff ff53 	bl	8005eac <_malloc_r>
 8006006:	4606      	mov	r6, r0
 8006008:	b360      	cbz	r0, 8006064 <__ssputs_r+0xa0>
 800600a:	6921      	ldr	r1, [r4, #16]
 800600c:	464a      	mov	r2, r9
 800600e:	f000 fd85 	bl	8006b1c <memcpy>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	6126      	str	r6, [r4, #16]
 8006020:	6165      	str	r5, [r4, #20]
 8006022:	444e      	add	r6, r9
 8006024:	eba5 0509 	sub.w	r5, r5, r9
 8006028:	6026      	str	r6, [r4, #0]
 800602a:	60a5      	str	r5, [r4, #8]
 800602c:	463e      	mov	r6, r7
 800602e:	42be      	cmp	r6, r7
 8006030:	d900      	bls.n	8006034 <__ssputs_r+0x70>
 8006032:	463e      	mov	r6, r7
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	4632      	mov	r2, r6
 8006038:	4641      	mov	r1, r8
 800603a:	f000 fd45 	bl	8006ac8 <memmove>
 800603e:	68a3      	ldr	r3, [r4, #8]
 8006040:	1b9b      	subs	r3, r3, r6
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	4433      	add	r3, r6
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	2000      	movs	r0, #0
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	462a      	mov	r2, r5
 8006052:	f000 fd78 	bl	8006b46 <_realloc_r>
 8006056:	4606      	mov	r6, r0
 8006058:	2800      	cmp	r0, #0
 800605a:	d1e0      	bne.n	800601e <__ssputs_r+0x5a>
 800605c:	6921      	ldr	r1, [r4, #16]
 800605e:	4650      	mov	r0, sl
 8006060:	f7ff feb0 	bl	8005dc4 <_free_r>
 8006064:	230c      	movs	r3, #12
 8006066:	f8ca 3000 	str.w	r3, [sl]
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	e7e9      	b.n	800604c <__ssputs_r+0x88>

08006078 <_svfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4698      	mov	r8, r3
 800607e:	898b      	ldrh	r3, [r1, #12]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	b09d      	sub	sp, #116	; 0x74
 8006084:	4607      	mov	r7, r0
 8006086:	460d      	mov	r5, r1
 8006088:	4614      	mov	r4, r2
 800608a:	d50e      	bpl.n	80060aa <_svfiprintf_r+0x32>
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	b963      	cbnz	r3, 80060aa <_svfiprintf_r+0x32>
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	f7ff ff0b 	bl	8005eac <_malloc_r>
 8006096:	6028      	str	r0, [r5, #0]
 8006098:	6128      	str	r0, [r5, #16]
 800609a:	b920      	cbnz	r0, 80060a6 <_svfiprintf_r+0x2e>
 800609c:	230c      	movs	r3, #12
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e0d0      	b.n	8006248 <_svfiprintf_r+0x1d0>
 80060a6:	2340      	movs	r3, #64	; 0x40
 80060a8:	616b      	str	r3, [r5, #20]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9309      	str	r3, [sp, #36]	; 0x24
 80060ae:	2320      	movs	r3, #32
 80060b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b8:	2330      	movs	r3, #48	; 0x30
 80060ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006260 <_svfiprintf_r+0x1e8>
 80060be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c2:	f04f 0901 	mov.w	r9, #1
 80060c6:	4623      	mov	r3, r4
 80060c8:	469a      	mov	sl, r3
 80060ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ce:	b10a      	cbz	r2, 80060d4 <_svfiprintf_r+0x5c>
 80060d0:	2a25      	cmp	r2, #37	; 0x25
 80060d2:	d1f9      	bne.n	80060c8 <_svfiprintf_r+0x50>
 80060d4:	ebba 0b04 	subs.w	fp, sl, r4
 80060d8:	d00b      	beq.n	80060f2 <_svfiprintf_r+0x7a>
 80060da:	465b      	mov	r3, fp
 80060dc:	4622      	mov	r2, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ff6f 	bl	8005fc4 <__ssputs_r>
 80060e6:	3001      	adds	r0, #1
 80060e8:	f000 80a9 	beq.w	800623e <_svfiprintf_r+0x1c6>
 80060ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ee:	445a      	add	r2, fp
 80060f0:	9209      	str	r2, [sp, #36]	; 0x24
 80060f2:	f89a 3000 	ldrb.w	r3, [sl]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80a1 	beq.w	800623e <_svfiprintf_r+0x1c6>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006106:	f10a 0a01 	add.w	sl, sl, #1
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	9307      	str	r3, [sp, #28]
 800610e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006112:	931a      	str	r3, [sp, #104]	; 0x68
 8006114:	4654      	mov	r4, sl
 8006116:	2205      	movs	r2, #5
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	4850      	ldr	r0, [pc, #320]	; (8006260 <_svfiprintf_r+0x1e8>)
 800611e:	f7fa f877 	bl	8000210 <memchr>
 8006122:	9a04      	ldr	r2, [sp, #16]
 8006124:	b9d8      	cbnz	r0, 800615e <_svfiprintf_r+0xe6>
 8006126:	06d0      	lsls	r0, r2, #27
 8006128:	bf44      	itt	mi
 800612a:	2320      	movmi	r3, #32
 800612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006130:	0711      	lsls	r1, r2, #28
 8006132:	bf44      	itt	mi
 8006134:	232b      	movmi	r3, #43	; 0x2b
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	f89a 3000 	ldrb.w	r3, [sl]
 800613e:	2b2a      	cmp	r3, #42	; 0x2a
 8006140:	d015      	beq.n	800616e <_svfiprintf_r+0xf6>
 8006142:	9a07      	ldr	r2, [sp, #28]
 8006144:	4654      	mov	r4, sl
 8006146:	2000      	movs	r0, #0
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4621      	mov	r1, r4
 800614e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006152:	3b30      	subs	r3, #48	; 0x30
 8006154:	2b09      	cmp	r3, #9
 8006156:	d94d      	bls.n	80061f4 <_svfiprintf_r+0x17c>
 8006158:	b1b0      	cbz	r0, 8006188 <_svfiprintf_r+0x110>
 800615a:	9207      	str	r2, [sp, #28]
 800615c:	e014      	b.n	8006188 <_svfiprintf_r+0x110>
 800615e:	eba0 0308 	sub.w	r3, r0, r8
 8006162:	fa09 f303 	lsl.w	r3, r9, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	46a2      	mov	sl, r4
 800616c:	e7d2      	b.n	8006114 <_svfiprintf_r+0x9c>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d19      	adds	r1, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9103      	str	r1, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbb      	ittet	lt
 800617a:	425b      	neglt	r3, r3
 800617c:	f042 0202 	orrlt.w	r2, r2, #2
 8006180:	9307      	strge	r3, [sp, #28]
 8006182:	9307      	strlt	r3, [sp, #28]
 8006184:	bfb8      	it	lt
 8006186:	9204      	strlt	r2, [sp, #16]
 8006188:	7823      	ldrb	r3, [r4, #0]
 800618a:	2b2e      	cmp	r3, #46	; 0x2e
 800618c:	d10c      	bne.n	80061a8 <_svfiprintf_r+0x130>
 800618e:	7863      	ldrb	r3, [r4, #1]
 8006190:	2b2a      	cmp	r3, #42	; 0x2a
 8006192:	d134      	bne.n	80061fe <_svfiprintf_r+0x186>
 8006194:	9b03      	ldr	r3, [sp, #12]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	9203      	str	r2, [sp, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	bfb8      	it	lt
 80061a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a4:	3402      	adds	r4, #2
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006270 <_svfiprintf_r+0x1f8>
 80061ac:	7821      	ldrb	r1, [r4, #0]
 80061ae:	2203      	movs	r2, #3
 80061b0:	4650      	mov	r0, sl
 80061b2:	f7fa f82d 	bl	8000210 <memchr>
 80061b6:	b138      	cbz	r0, 80061c8 <_svfiprintf_r+0x150>
 80061b8:	9b04      	ldr	r3, [sp, #16]
 80061ba:	eba0 000a 	sub.w	r0, r0, sl
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	4082      	lsls	r2, r0
 80061c2:	4313      	orrs	r3, r2
 80061c4:	3401      	adds	r4, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061cc:	4825      	ldr	r0, [pc, #148]	; (8006264 <_svfiprintf_r+0x1ec>)
 80061ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d2:	2206      	movs	r2, #6
 80061d4:	f7fa f81c 	bl	8000210 <memchr>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d038      	beq.n	800624e <_svfiprintf_r+0x1d6>
 80061dc:	4b22      	ldr	r3, [pc, #136]	; (8006268 <_svfiprintf_r+0x1f0>)
 80061de:	bb1b      	cbnz	r3, 8006228 <_svfiprintf_r+0x1b0>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	3307      	adds	r3, #7
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	3308      	adds	r3, #8
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	4433      	add	r3, r6
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	e768      	b.n	80060c6 <_svfiprintf_r+0x4e>
 80061f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f8:	460c      	mov	r4, r1
 80061fa:	2001      	movs	r0, #1
 80061fc:	e7a6      	b.n	800614c <_svfiprintf_r+0xd4>
 80061fe:	2300      	movs	r3, #0
 8006200:	3401      	adds	r4, #1
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 0c0a 	mov.w	ip, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006210:	3a30      	subs	r2, #48	; 0x30
 8006212:	2a09      	cmp	r2, #9
 8006214:	d903      	bls.n	800621e <_svfiprintf_r+0x1a6>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0c6      	beq.n	80061a8 <_svfiprintf_r+0x130>
 800621a:	9105      	str	r1, [sp, #20]
 800621c:	e7c4      	b.n	80061a8 <_svfiprintf_r+0x130>
 800621e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006222:	4604      	mov	r4, r0
 8006224:	2301      	movs	r3, #1
 8006226:	e7f0      	b.n	800620a <_svfiprintf_r+0x192>
 8006228:	ab03      	add	r3, sp, #12
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	462a      	mov	r2, r5
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <_svfiprintf_r+0x1f4>)
 8006230:	a904      	add	r1, sp, #16
 8006232:	4638      	mov	r0, r7
 8006234:	f3af 8000 	nop.w
 8006238:	1c42      	adds	r2, r0, #1
 800623a:	4606      	mov	r6, r0
 800623c:	d1d6      	bne.n	80061ec <_svfiprintf_r+0x174>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	065b      	lsls	r3, r3, #25
 8006242:	f53f af2d 	bmi.w	80060a0 <_svfiprintf_r+0x28>
 8006246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006248:	b01d      	add	sp, #116	; 0x74
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	ab03      	add	r3, sp, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	462a      	mov	r2, r5
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <_svfiprintf_r+0x1f4>)
 8006256:	a904      	add	r1, sp, #16
 8006258:	4638      	mov	r0, r7
 800625a:	f000 f9bd 	bl	80065d8 <_printf_i>
 800625e:	e7eb      	b.n	8006238 <_svfiprintf_r+0x1c0>
 8006260:	08006f86 	.word	0x08006f86
 8006264:	08006f90 	.word	0x08006f90
 8006268:	00000000 	.word	0x00000000
 800626c:	08005fc5 	.word	0x08005fc5
 8006270:	08006f8c 	.word	0x08006f8c

08006274 <__sfputc_r>:
 8006274:	6893      	ldr	r3, [r2, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	b410      	push	{r4}
 800627c:	6093      	str	r3, [r2, #8]
 800627e:	da08      	bge.n	8006292 <__sfputc_r+0x1e>
 8006280:	6994      	ldr	r4, [r2, #24]
 8006282:	42a3      	cmp	r3, r4
 8006284:	db01      	blt.n	800628a <__sfputc_r+0x16>
 8006286:	290a      	cmp	r1, #10
 8006288:	d103      	bne.n	8006292 <__sfputc_r+0x1e>
 800628a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628e:	f000 bb85 	b.w	800699c <__swbuf_r>
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	1c58      	adds	r0, r3, #1
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	7019      	strb	r1, [r3, #0]
 800629a:	4608      	mov	r0, r1
 800629c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <__sfputs_r>:
 80062a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a4:	4606      	mov	r6, r0
 80062a6:	460f      	mov	r7, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	18d5      	adds	r5, r2, r3
 80062ac:	42ac      	cmp	r4, r5
 80062ae:	d101      	bne.n	80062b4 <__sfputs_r+0x12>
 80062b0:	2000      	movs	r0, #0
 80062b2:	e007      	b.n	80062c4 <__sfputs_r+0x22>
 80062b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b8:	463a      	mov	r2, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ffda 	bl	8006274 <__sfputc_r>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d1f3      	bne.n	80062ac <__sfputs_r+0xa>
 80062c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c8 <_vfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	460d      	mov	r5, r1
 80062ce:	b09d      	sub	sp, #116	; 0x74
 80062d0:	4614      	mov	r4, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	4606      	mov	r6, r0
 80062d6:	b118      	cbz	r0, 80062e0 <_vfiprintf_r+0x18>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <_vfiprintf_r+0x18>
 80062dc:	f7ff fbd0 	bl	8005a80 <__sinit>
 80062e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e2:	07d9      	lsls	r1, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_vfiprintf_r+0x2a>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_vfiprintf_r+0x2a>
 80062ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ee:	f7ff fd48 	bl	8005d82 <__retarget_lock_acquire_recursive>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	071b      	lsls	r3, r3, #28
 80062f6:	d501      	bpl.n	80062fc <_vfiprintf_r+0x34>
 80062f8:	692b      	ldr	r3, [r5, #16]
 80062fa:	b99b      	cbnz	r3, 8006324 <_vfiprintf_r+0x5c>
 80062fc:	4629      	mov	r1, r5
 80062fe:	4630      	mov	r0, r6
 8006300:	f000 fb8a 	bl	8006a18 <__swsetup_r>
 8006304:	b170      	cbz	r0, 8006324 <_vfiprintf_r+0x5c>
 8006306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006308:	07dc      	lsls	r4, r3, #31
 800630a:	d504      	bpl.n	8006316 <_vfiprintf_r+0x4e>
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	b01d      	add	sp, #116	; 0x74
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	0598      	lsls	r0, r3, #22
 800631a:	d4f7      	bmi.n	800630c <_vfiprintf_r+0x44>
 800631c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800631e:	f7ff fd31 	bl	8005d84 <__retarget_lock_release_recursive>
 8006322:	e7f3      	b.n	800630c <_vfiprintf_r+0x44>
 8006324:	2300      	movs	r3, #0
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	2320      	movs	r3, #32
 800632a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800632e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006332:	2330      	movs	r3, #48	; 0x30
 8006334:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80064e8 <_vfiprintf_r+0x220>
 8006338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800633c:	f04f 0901 	mov.w	r9, #1
 8006340:	4623      	mov	r3, r4
 8006342:	469a      	mov	sl, r3
 8006344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006348:	b10a      	cbz	r2, 800634e <_vfiprintf_r+0x86>
 800634a:	2a25      	cmp	r2, #37	; 0x25
 800634c:	d1f9      	bne.n	8006342 <_vfiprintf_r+0x7a>
 800634e:	ebba 0b04 	subs.w	fp, sl, r4
 8006352:	d00b      	beq.n	800636c <_vfiprintf_r+0xa4>
 8006354:	465b      	mov	r3, fp
 8006356:	4622      	mov	r2, r4
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f7ff ffa1 	bl	80062a2 <__sfputs_r>
 8006360:	3001      	adds	r0, #1
 8006362:	f000 80a9 	beq.w	80064b8 <_vfiprintf_r+0x1f0>
 8006366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006368:	445a      	add	r2, fp
 800636a:	9209      	str	r2, [sp, #36]	; 0x24
 800636c:	f89a 3000 	ldrb.w	r3, [sl]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80a1 	beq.w	80064b8 <_vfiprintf_r+0x1f0>
 8006376:	2300      	movs	r3, #0
 8006378:	f04f 32ff 	mov.w	r2, #4294967295
 800637c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006380:	f10a 0a01 	add.w	sl, sl, #1
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800638c:	931a      	str	r3, [sp, #104]	; 0x68
 800638e:	4654      	mov	r4, sl
 8006390:	2205      	movs	r2, #5
 8006392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006396:	4854      	ldr	r0, [pc, #336]	; (80064e8 <_vfiprintf_r+0x220>)
 8006398:	f7f9 ff3a 	bl	8000210 <memchr>
 800639c:	9a04      	ldr	r2, [sp, #16]
 800639e:	b9d8      	cbnz	r0, 80063d8 <_vfiprintf_r+0x110>
 80063a0:	06d1      	lsls	r1, r2, #27
 80063a2:	bf44      	itt	mi
 80063a4:	2320      	movmi	r3, #32
 80063a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063aa:	0713      	lsls	r3, r2, #28
 80063ac:	bf44      	itt	mi
 80063ae:	232b      	movmi	r3, #43	; 0x2b
 80063b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b4:	f89a 3000 	ldrb.w	r3, [sl]
 80063b8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ba:	d015      	beq.n	80063e8 <_vfiprintf_r+0x120>
 80063bc:	9a07      	ldr	r2, [sp, #28]
 80063be:	4654      	mov	r4, sl
 80063c0:	2000      	movs	r0, #0
 80063c2:	f04f 0c0a 	mov.w	ip, #10
 80063c6:	4621      	mov	r1, r4
 80063c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063cc:	3b30      	subs	r3, #48	; 0x30
 80063ce:	2b09      	cmp	r3, #9
 80063d0:	d94d      	bls.n	800646e <_vfiprintf_r+0x1a6>
 80063d2:	b1b0      	cbz	r0, 8006402 <_vfiprintf_r+0x13a>
 80063d4:	9207      	str	r2, [sp, #28]
 80063d6:	e014      	b.n	8006402 <_vfiprintf_r+0x13a>
 80063d8:	eba0 0308 	sub.w	r3, r0, r8
 80063dc:	fa09 f303 	lsl.w	r3, r9, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	46a2      	mov	sl, r4
 80063e6:	e7d2      	b.n	800638e <_vfiprintf_r+0xc6>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	1d19      	adds	r1, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	9103      	str	r1, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bfbb      	ittet	lt
 80063f4:	425b      	neglt	r3, r3
 80063f6:	f042 0202 	orrlt.w	r2, r2, #2
 80063fa:	9307      	strge	r3, [sp, #28]
 80063fc:	9307      	strlt	r3, [sp, #28]
 80063fe:	bfb8      	it	lt
 8006400:	9204      	strlt	r2, [sp, #16]
 8006402:	7823      	ldrb	r3, [r4, #0]
 8006404:	2b2e      	cmp	r3, #46	; 0x2e
 8006406:	d10c      	bne.n	8006422 <_vfiprintf_r+0x15a>
 8006408:	7863      	ldrb	r3, [r4, #1]
 800640a:	2b2a      	cmp	r3, #42	; 0x2a
 800640c:	d134      	bne.n	8006478 <_vfiprintf_r+0x1b0>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	9203      	str	r2, [sp, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	bfb8      	it	lt
 800641a:	f04f 33ff 	movlt.w	r3, #4294967295
 800641e:	3402      	adds	r4, #2
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80064f8 <_vfiprintf_r+0x230>
 8006426:	7821      	ldrb	r1, [r4, #0]
 8006428:	2203      	movs	r2, #3
 800642a:	4650      	mov	r0, sl
 800642c:	f7f9 fef0 	bl	8000210 <memchr>
 8006430:	b138      	cbz	r0, 8006442 <_vfiprintf_r+0x17a>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	eba0 000a 	sub.w	r0, r0, sl
 8006438:	2240      	movs	r2, #64	; 0x40
 800643a:	4082      	lsls	r2, r0
 800643c:	4313      	orrs	r3, r2
 800643e:	3401      	adds	r4, #1
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006446:	4829      	ldr	r0, [pc, #164]	; (80064ec <_vfiprintf_r+0x224>)
 8006448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800644c:	2206      	movs	r2, #6
 800644e:	f7f9 fedf 	bl	8000210 <memchr>
 8006452:	2800      	cmp	r0, #0
 8006454:	d03f      	beq.n	80064d6 <_vfiprintf_r+0x20e>
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <_vfiprintf_r+0x228>)
 8006458:	bb1b      	cbnz	r3, 80064a2 <_vfiprintf_r+0x1da>
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	3307      	adds	r3, #7
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	3308      	adds	r3, #8
 8006464:	9303      	str	r3, [sp, #12]
 8006466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006468:	443b      	add	r3, r7
 800646a:	9309      	str	r3, [sp, #36]	; 0x24
 800646c:	e768      	b.n	8006340 <_vfiprintf_r+0x78>
 800646e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006472:	460c      	mov	r4, r1
 8006474:	2001      	movs	r0, #1
 8006476:	e7a6      	b.n	80063c6 <_vfiprintf_r+0xfe>
 8006478:	2300      	movs	r3, #0
 800647a:	3401      	adds	r4, #1
 800647c:	9305      	str	r3, [sp, #20]
 800647e:	4619      	mov	r1, r3
 8006480:	f04f 0c0a 	mov.w	ip, #10
 8006484:	4620      	mov	r0, r4
 8006486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800648a:	3a30      	subs	r2, #48	; 0x30
 800648c:	2a09      	cmp	r2, #9
 800648e:	d903      	bls.n	8006498 <_vfiprintf_r+0x1d0>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0c6      	beq.n	8006422 <_vfiprintf_r+0x15a>
 8006494:	9105      	str	r1, [sp, #20]
 8006496:	e7c4      	b.n	8006422 <_vfiprintf_r+0x15a>
 8006498:	fb0c 2101 	mla	r1, ip, r1, r2
 800649c:	4604      	mov	r4, r0
 800649e:	2301      	movs	r3, #1
 80064a0:	e7f0      	b.n	8006484 <_vfiprintf_r+0x1bc>
 80064a2:	ab03      	add	r3, sp, #12
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	462a      	mov	r2, r5
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <_vfiprintf_r+0x22c>)
 80064aa:	a904      	add	r1, sp, #16
 80064ac:	4630      	mov	r0, r6
 80064ae:	f3af 8000 	nop.w
 80064b2:	4607      	mov	r7, r0
 80064b4:	1c78      	adds	r0, r7, #1
 80064b6:	d1d6      	bne.n	8006466 <_vfiprintf_r+0x19e>
 80064b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ba:	07d9      	lsls	r1, r3, #31
 80064bc:	d405      	bmi.n	80064ca <_vfiprintf_r+0x202>
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	059a      	lsls	r2, r3, #22
 80064c2:	d402      	bmi.n	80064ca <_vfiprintf_r+0x202>
 80064c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c6:	f7ff fc5d 	bl	8005d84 <__retarget_lock_release_recursive>
 80064ca:	89ab      	ldrh	r3, [r5, #12]
 80064cc:	065b      	lsls	r3, r3, #25
 80064ce:	f53f af1d 	bmi.w	800630c <_vfiprintf_r+0x44>
 80064d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064d4:	e71c      	b.n	8006310 <_vfiprintf_r+0x48>
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	462a      	mov	r2, r5
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <_vfiprintf_r+0x22c>)
 80064de:	a904      	add	r1, sp, #16
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f879 	bl	80065d8 <_printf_i>
 80064e6:	e7e4      	b.n	80064b2 <_vfiprintf_r+0x1ea>
 80064e8:	08006f86 	.word	0x08006f86
 80064ec:	08006f90 	.word	0x08006f90
 80064f0:	00000000 	.word	0x00000000
 80064f4:	080062a3 	.word	0x080062a3
 80064f8:	08006f8c 	.word	0x08006f8c

080064fc <_printf_common>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4616      	mov	r6, r2
 8006502:	4699      	mov	r9, r3
 8006504:	688a      	ldr	r2, [r1, #8]
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800650c:	4293      	cmp	r3, r2
 800650e:	bfb8      	it	lt
 8006510:	4613      	movlt	r3, r2
 8006512:	6033      	str	r3, [r6, #0]
 8006514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006518:	4607      	mov	r7, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b10a      	cbz	r2, 8006522 <_printf_common+0x26>
 800651e:	3301      	adds	r3, #1
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	0699      	lsls	r1, r3, #26
 8006526:	bf42      	ittt	mi
 8006528:	6833      	ldrmi	r3, [r6, #0]
 800652a:	3302      	addmi	r3, #2
 800652c:	6033      	strmi	r3, [r6, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	f015 0506 	ands.w	r5, r5, #6
 8006534:	d106      	bne.n	8006544 <_printf_common+0x48>
 8006536:	f104 0a19 	add.w	sl, r4, #25
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	6832      	ldr	r2, [r6, #0]
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	42ab      	cmp	r3, r5
 8006542:	dc26      	bgt.n	8006592 <_printf_common+0x96>
 8006544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006548:	1e13      	subs	r3, r2, #0
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	bf18      	it	ne
 800654e:	2301      	movne	r3, #1
 8006550:	0692      	lsls	r2, r2, #26
 8006552:	d42b      	bmi.n	80065ac <_printf_common+0xb0>
 8006554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006558:	4649      	mov	r1, r9
 800655a:	4638      	mov	r0, r7
 800655c:	47c0      	blx	r8
 800655e:	3001      	adds	r0, #1
 8006560:	d01e      	beq.n	80065a0 <_printf_common+0xa4>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	6922      	ldr	r2, [r4, #16]
 8006566:	f003 0306 	and.w	r3, r3, #6
 800656a:	2b04      	cmp	r3, #4
 800656c:	bf02      	ittt	eq
 800656e:	68e5      	ldreq	r5, [r4, #12]
 8006570:	6833      	ldreq	r3, [r6, #0]
 8006572:	1aed      	subeq	r5, r5, r3
 8006574:	68a3      	ldr	r3, [r4, #8]
 8006576:	bf0c      	ite	eq
 8006578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800657c:	2500      	movne	r5, #0
 800657e:	4293      	cmp	r3, r2
 8006580:	bfc4      	itt	gt
 8006582:	1a9b      	subgt	r3, r3, r2
 8006584:	18ed      	addgt	r5, r5, r3
 8006586:	2600      	movs	r6, #0
 8006588:	341a      	adds	r4, #26
 800658a:	42b5      	cmp	r5, r6
 800658c:	d11a      	bne.n	80065c4 <_printf_common+0xc8>
 800658e:	2000      	movs	r0, #0
 8006590:	e008      	b.n	80065a4 <_printf_common+0xa8>
 8006592:	2301      	movs	r3, #1
 8006594:	4652      	mov	r2, sl
 8006596:	4649      	mov	r1, r9
 8006598:	4638      	mov	r0, r7
 800659a:	47c0      	blx	r8
 800659c:	3001      	adds	r0, #1
 800659e:	d103      	bne.n	80065a8 <_printf_common+0xac>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	3501      	adds	r5, #1
 80065aa:	e7c6      	b.n	800653a <_printf_common+0x3e>
 80065ac:	18e1      	adds	r1, r4, r3
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	2030      	movs	r0, #48	; 0x30
 80065b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065b6:	4422      	add	r2, r4
 80065b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c0:	3302      	adds	r3, #2
 80065c2:	e7c7      	b.n	8006554 <_printf_common+0x58>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4622      	mov	r2, r4
 80065c8:	4649      	mov	r1, r9
 80065ca:	4638      	mov	r0, r7
 80065cc:	47c0      	blx	r8
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0e6      	beq.n	80065a0 <_printf_common+0xa4>
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7d9      	b.n	800658a <_printf_common+0x8e>
	...

080065d8 <_printf_i>:
 80065d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	7e0f      	ldrb	r7, [r1, #24]
 80065de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065e0:	2f78      	cmp	r7, #120	; 0x78
 80065e2:	4691      	mov	r9, r2
 80065e4:	4680      	mov	r8, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	469a      	mov	sl, r3
 80065ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ee:	d807      	bhi.n	8006600 <_printf_i+0x28>
 80065f0:	2f62      	cmp	r7, #98	; 0x62
 80065f2:	d80a      	bhi.n	800660a <_printf_i+0x32>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	f000 80d4 	beq.w	80067a2 <_printf_i+0x1ca>
 80065fa:	2f58      	cmp	r7, #88	; 0x58
 80065fc:	f000 80c0 	beq.w	8006780 <_printf_i+0x1a8>
 8006600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006608:	e03a      	b.n	8006680 <_printf_i+0xa8>
 800660a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d8f6      	bhi.n	8006600 <_printf_i+0x28>
 8006612:	a101      	add	r1, pc, #4	; (adr r1, 8006618 <_printf_i+0x40>)
 8006614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006618:	08006671 	.word	0x08006671
 800661c:	08006685 	.word	0x08006685
 8006620:	08006601 	.word	0x08006601
 8006624:	08006601 	.word	0x08006601
 8006628:	08006601 	.word	0x08006601
 800662c:	08006601 	.word	0x08006601
 8006630:	08006685 	.word	0x08006685
 8006634:	08006601 	.word	0x08006601
 8006638:	08006601 	.word	0x08006601
 800663c:	08006601 	.word	0x08006601
 8006640:	08006601 	.word	0x08006601
 8006644:	08006789 	.word	0x08006789
 8006648:	080066b1 	.word	0x080066b1
 800664c:	08006743 	.word	0x08006743
 8006650:	08006601 	.word	0x08006601
 8006654:	08006601 	.word	0x08006601
 8006658:	080067ab 	.word	0x080067ab
 800665c:	08006601 	.word	0x08006601
 8006660:	080066b1 	.word	0x080066b1
 8006664:	08006601 	.word	0x08006601
 8006668:	08006601 	.word	0x08006601
 800666c:	0800674b 	.word	0x0800674b
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	602a      	str	r2, [r5, #0]
 8006678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800667c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006680:	2301      	movs	r3, #1
 8006682:	e09f      	b.n	80067c4 <_printf_i+0x1ec>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	0607      	lsls	r7, r0, #24
 800668a:	f103 0104 	add.w	r1, r3, #4
 800668e:	6029      	str	r1, [r5, #0]
 8006690:	d501      	bpl.n	8006696 <_printf_i+0xbe>
 8006692:	681e      	ldr	r6, [r3, #0]
 8006694:	e003      	b.n	800669e <_printf_i+0xc6>
 8006696:	0646      	lsls	r6, r0, #25
 8006698:	d5fb      	bpl.n	8006692 <_printf_i+0xba>
 800669a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800669e:	2e00      	cmp	r6, #0
 80066a0:	da03      	bge.n	80066aa <_printf_i+0xd2>
 80066a2:	232d      	movs	r3, #45	; 0x2d
 80066a4:	4276      	negs	r6, r6
 80066a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066aa:	485a      	ldr	r0, [pc, #360]	; (8006814 <_printf_i+0x23c>)
 80066ac:	230a      	movs	r3, #10
 80066ae:	e012      	b.n	80066d6 <_printf_i+0xfe>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6029      	str	r1, [r5, #0]
 80066b8:	0605      	lsls	r5, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xe8>
 80066bc:	681e      	ldr	r6, [r3, #0]
 80066be:	e002      	b.n	80066c6 <_printf_i+0xee>
 80066c0:	0641      	lsls	r1, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xe4>
 80066c4:	881e      	ldrh	r6, [r3, #0]
 80066c6:	4853      	ldr	r0, [pc, #332]	; (8006814 <_printf_i+0x23c>)
 80066c8:	2f6f      	cmp	r7, #111	; 0x6f
 80066ca:	bf0c      	ite	eq
 80066cc:	2308      	moveq	r3, #8
 80066ce:	230a      	movne	r3, #10
 80066d0:	2100      	movs	r1, #0
 80066d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066d6:	6865      	ldr	r5, [r4, #4]
 80066d8:	60a5      	str	r5, [r4, #8]
 80066da:	2d00      	cmp	r5, #0
 80066dc:	bfa2      	ittt	ge
 80066de:	6821      	ldrge	r1, [r4, #0]
 80066e0:	f021 0104 	bicge.w	r1, r1, #4
 80066e4:	6021      	strge	r1, [r4, #0]
 80066e6:	b90e      	cbnz	r6, 80066ec <_printf_i+0x114>
 80066e8:	2d00      	cmp	r5, #0
 80066ea:	d04b      	beq.n	8006784 <_printf_i+0x1ac>
 80066ec:	4615      	mov	r5, r2
 80066ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80066f2:	fb03 6711 	mls	r7, r3, r1, r6
 80066f6:	5dc7      	ldrb	r7, [r0, r7]
 80066f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066fc:	4637      	mov	r7, r6
 80066fe:	42bb      	cmp	r3, r7
 8006700:	460e      	mov	r6, r1
 8006702:	d9f4      	bls.n	80066ee <_printf_i+0x116>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10b      	bne.n	8006720 <_printf_i+0x148>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	07de      	lsls	r6, r3, #31
 800670c:	d508      	bpl.n	8006720 <_printf_i+0x148>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6861      	ldr	r1, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	bfde      	ittt	le
 8006716:	2330      	movle	r3, #48	; 0x30
 8006718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800671c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006720:	1b52      	subs	r2, r2, r5
 8006722:	6122      	str	r2, [r4, #16]
 8006724:	f8cd a000 	str.w	sl, [sp]
 8006728:	464b      	mov	r3, r9
 800672a:	aa03      	add	r2, sp, #12
 800672c:	4621      	mov	r1, r4
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fee4 	bl	80064fc <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	d14a      	bne.n	80067ce <_printf_i+0x1f6>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	4833      	ldr	r0, [pc, #204]	; (8006818 <_printf_i+0x240>)
 800674c:	2778      	movs	r7, #120	; 0x78
 800674e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6829      	ldr	r1, [r5, #0]
 8006756:	061f      	lsls	r7, r3, #24
 8006758:	f851 6b04 	ldr.w	r6, [r1], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0x18c>
 800675e:	065f      	lsls	r7, r3, #25
 8006760:	bf48      	it	mi
 8006762:	b2b6      	uxthmi	r6, r6
 8006764:	07df      	lsls	r7, r3, #31
 8006766:	bf48      	it	mi
 8006768:	f043 0320 	orrmi.w	r3, r3, #32
 800676c:	6029      	str	r1, [r5, #0]
 800676e:	bf48      	it	mi
 8006770:	6023      	strmi	r3, [r4, #0]
 8006772:	b91e      	cbnz	r6, 800677c <_printf_i+0x1a4>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	f023 0320 	bic.w	r3, r3, #32
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	2310      	movs	r3, #16
 800677e:	e7a7      	b.n	80066d0 <_printf_i+0xf8>
 8006780:	4824      	ldr	r0, [pc, #144]	; (8006814 <_printf_i+0x23c>)
 8006782:	e7e4      	b.n	800674e <_printf_i+0x176>
 8006784:	4615      	mov	r5, r2
 8006786:	e7bd      	b.n	8006704 <_printf_i+0x12c>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	6826      	ldr	r6, [r4, #0]
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	1d18      	adds	r0, r3, #4
 8006790:	6028      	str	r0, [r5, #0]
 8006792:	0635      	lsls	r5, r6, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	d501      	bpl.n	800679c <_printf_i+0x1c4>
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0x1ca>
 800679c:	0670      	lsls	r0, r6, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0x1c0>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4615      	mov	r5, r2
 80067a8:	e7bc      	b.n	8006724 <_printf_i+0x14c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7f9 fd2a 	bl	8000210 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1ea>
 80067be:	1b40      	subs	r0, r0, r5
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067cc:	e7aa      	b.n	8006724 <_printf_i+0x14c>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	47d0      	blx	sl
 80067d8:	3001      	adds	r0, #1
 80067da:	d0ad      	beq.n	8006738 <_printf_i+0x160>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d413      	bmi.n	800680a <_printf_i+0x232>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e7a6      	b.n	800673c <_printf_i+0x164>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d09d      	beq.n	8006738 <_printf_i+0x160>
 80067fc:	3501      	adds	r5, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	42ab      	cmp	r3, r5
 8006806:	dcf2      	bgt.n	80067ee <_printf_i+0x216>
 8006808:	e7eb      	b.n	80067e2 <_printf_i+0x20a>
 800680a:	2500      	movs	r5, #0
 800680c:	f104 0619 	add.w	r6, r4, #25
 8006810:	e7f5      	b.n	80067fe <_printf_i+0x226>
 8006812:	bf00      	nop
 8006814:	08006f97 	.word	0x08006f97
 8006818:	08006fa8 	.word	0x08006fa8

0800681c <__sflush_r>:
 800681c:	898a      	ldrh	r2, [r1, #12]
 800681e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	4605      	mov	r5, r0
 8006824:	0710      	lsls	r0, r2, #28
 8006826:	460c      	mov	r4, r1
 8006828:	d458      	bmi.n	80068dc <__sflush_r+0xc0>
 800682a:	684b      	ldr	r3, [r1, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc05      	bgt.n	800683c <__sflush_r+0x20>
 8006830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	dc02      	bgt.n	800683c <__sflush_r+0x20>
 8006836:	2000      	movs	r0, #0
 8006838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800683c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800683e:	2e00      	cmp	r6, #0
 8006840:	d0f9      	beq.n	8006836 <__sflush_r+0x1a>
 8006842:	2300      	movs	r3, #0
 8006844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006848:	682f      	ldr	r7, [r5, #0]
 800684a:	6a21      	ldr	r1, [r4, #32]
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	d032      	beq.n	80068b6 <__sflush_r+0x9a>
 8006850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	075a      	lsls	r2, r3, #29
 8006856:	d505      	bpl.n	8006864 <__sflush_r+0x48>
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	1ac0      	subs	r0, r0, r3
 800685c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800685e:	b10b      	cbz	r3, 8006864 <__sflush_r+0x48>
 8006860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006862:	1ac0      	subs	r0, r0, r3
 8006864:	2300      	movs	r3, #0
 8006866:	4602      	mov	r2, r0
 8006868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800686a:	6a21      	ldr	r1, [r4, #32]
 800686c:	4628      	mov	r0, r5
 800686e:	47b0      	blx	r6
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	d106      	bne.n	8006884 <__sflush_r+0x68>
 8006876:	6829      	ldr	r1, [r5, #0]
 8006878:	291d      	cmp	r1, #29
 800687a:	d82b      	bhi.n	80068d4 <__sflush_r+0xb8>
 800687c:	4a29      	ldr	r2, [pc, #164]	; (8006924 <__sflush_r+0x108>)
 800687e:	410a      	asrs	r2, r1
 8006880:	07d6      	lsls	r6, r2, #31
 8006882:	d427      	bmi.n	80068d4 <__sflush_r+0xb8>
 8006884:	2200      	movs	r2, #0
 8006886:	6062      	str	r2, [r4, #4]
 8006888:	04d9      	lsls	r1, r3, #19
 800688a:	6922      	ldr	r2, [r4, #16]
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	d504      	bpl.n	800689a <__sflush_r+0x7e>
 8006890:	1c42      	adds	r2, r0, #1
 8006892:	d101      	bne.n	8006898 <__sflush_r+0x7c>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b903      	cbnz	r3, 800689a <__sflush_r+0x7e>
 8006898:	6560      	str	r0, [r4, #84]	; 0x54
 800689a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689c:	602f      	str	r7, [r5, #0]
 800689e:	2900      	cmp	r1, #0
 80068a0:	d0c9      	beq.n	8006836 <__sflush_r+0x1a>
 80068a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d002      	beq.n	80068b0 <__sflush_r+0x94>
 80068aa:	4628      	mov	r0, r5
 80068ac:	f7ff fa8a 	bl	8005dc4 <_free_r>
 80068b0:	2000      	movs	r0, #0
 80068b2:	6360      	str	r0, [r4, #52]	; 0x34
 80068b4:	e7c0      	b.n	8006838 <__sflush_r+0x1c>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b0      	blx	r6
 80068bc:	1c41      	adds	r1, r0, #1
 80068be:	d1c8      	bne.n	8006852 <__sflush_r+0x36>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0c5      	beq.n	8006852 <__sflush_r+0x36>
 80068c6:	2b1d      	cmp	r3, #29
 80068c8:	d001      	beq.n	80068ce <__sflush_r+0xb2>
 80068ca:	2b16      	cmp	r3, #22
 80068cc:	d101      	bne.n	80068d2 <__sflush_r+0xb6>
 80068ce:	602f      	str	r7, [r5, #0]
 80068d0:	e7b1      	b.n	8006836 <__sflush_r+0x1a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	e7ad      	b.n	8006838 <__sflush_r+0x1c>
 80068dc:	690f      	ldr	r7, [r1, #16]
 80068de:	2f00      	cmp	r7, #0
 80068e0:	d0a9      	beq.n	8006836 <__sflush_r+0x1a>
 80068e2:	0793      	lsls	r3, r2, #30
 80068e4:	680e      	ldr	r6, [r1, #0]
 80068e6:	bf08      	it	eq
 80068e8:	694b      	ldreq	r3, [r1, #20]
 80068ea:	600f      	str	r7, [r1, #0]
 80068ec:	bf18      	it	ne
 80068ee:	2300      	movne	r3, #0
 80068f0:	eba6 0807 	sub.w	r8, r6, r7
 80068f4:	608b      	str	r3, [r1, #8]
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	dd9c      	ble.n	8006836 <__sflush_r+0x1a>
 80068fc:	6a21      	ldr	r1, [r4, #32]
 80068fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006900:	4643      	mov	r3, r8
 8006902:	463a      	mov	r2, r7
 8006904:	4628      	mov	r0, r5
 8006906:	47b0      	blx	r6
 8006908:	2800      	cmp	r0, #0
 800690a:	dc06      	bgt.n	800691a <__sflush_r+0xfe>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	e78e      	b.n	8006838 <__sflush_r+0x1c>
 800691a:	4407      	add	r7, r0
 800691c:	eba8 0800 	sub.w	r8, r8, r0
 8006920:	e7e9      	b.n	80068f6 <__sflush_r+0xda>
 8006922:	bf00      	nop
 8006924:	dfbffffe 	.word	0xdfbffffe

08006928 <_fflush_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	690b      	ldr	r3, [r1, #16]
 800692c:	4605      	mov	r5, r0
 800692e:	460c      	mov	r4, r1
 8006930:	b913      	cbnz	r3, 8006938 <_fflush_r+0x10>
 8006932:	2500      	movs	r5, #0
 8006934:	4628      	mov	r0, r5
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	b118      	cbz	r0, 8006942 <_fflush_r+0x1a>
 800693a:	6a03      	ldr	r3, [r0, #32]
 800693c:	b90b      	cbnz	r3, 8006942 <_fflush_r+0x1a>
 800693e:	f7ff f89f 	bl	8005a80 <__sinit>
 8006942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f3      	beq.n	8006932 <_fflush_r+0xa>
 800694a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800694c:	07d0      	lsls	r0, r2, #31
 800694e:	d404      	bmi.n	800695a <_fflush_r+0x32>
 8006950:	0599      	lsls	r1, r3, #22
 8006952:	d402      	bmi.n	800695a <_fflush_r+0x32>
 8006954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006956:	f7ff fa14 	bl	8005d82 <__retarget_lock_acquire_recursive>
 800695a:	4628      	mov	r0, r5
 800695c:	4621      	mov	r1, r4
 800695e:	f7ff ff5d 	bl	800681c <__sflush_r>
 8006962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006964:	07da      	lsls	r2, r3, #31
 8006966:	4605      	mov	r5, r0
 8006968:	d4e4      	bmi.n	8006934 <_fflush_r+0xc>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	d4e1      	bmi.n	8006934 <_fflush_r+0xc>
 8006970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006972:	f7ff fa07 	bl	8005d84 <__retarget_lock_release_recursive>
 8006976:	e7dd      	b.n	8006934 <_fflush_r+0xc>

08006978 <fiprintf>:
 8006978:	b40e      	push	{r1, r2, r3}
 800697a:	b503      	push	{r0, r1, lr}
 800697c:	4601      	mov	r1, r0
 800697e:	ab03      	add	r3, sp, #12
 8006980:	4805      	ldr	r0, [pc, #20]	; (8006998 <fiprintf+0x20>)
 8006982:	f853 2b04 	ldr.w	r2, [r3], #4
 8006986:	6800      	ldr	r0, [r0, #0]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	f7ff fc9d 	bl	80062c8 <_vfiprintf_r>
 800698e:	b002      	add	sp, #8
 8006990:	f85d eb04 	ldr.w	lr, [sp], #4
 8006994:	b003      	add	sp, #12
 8006996:	4770      	bx	lr
 8006998:	20000064 	.word	0x20000064

0800699c <__swbuf_r>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	460e      	mov	r6, r1
 80069a0:	4614      	mov	r4, r2
 80069a2:	4605      	mov	r5, r0
 80069a4:	b118      	cbz	r0, 80069ae <__swbuf_r+0x12>
 80069a6:	6a03      	ldr	r3, [r0, #32]
 80069a8:	b90b      	cbnz	r3, 80069ae <__swbuf_r+0x12>
 80069aa:	f7ff f869 	bl	8005a80 <__sinit>
 80069ae:	69a3      	ldr	r3, [r4, #24]
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	071a      	lsls	r2, r3, #28
 80069b6:	d525      	bpl.n	8006a04 <__swbuf_r+0x68>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	b31b      	cbz	r3, 8006a04 <__swbuf_r+0x68>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	1a98      	subs	r0, r3, r2
 80069c2:	6963      	ldr	r3, [r4, #20]
 80069c4:	b2f6      	uxtb	r6, r6
 80069c6:	4283      	cmp	r3, r0
 80069c8:	4637      	mov	r7, r6
 80069ca:	dc04      	bgt.n	80069d6 <__swbuf_r+0x3a>
 80069cc:	4621      	mov	r1, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	f7ff ffaa 	bl	8006928 <_fflush_r>
 80069d4:	b9e0      	cbnz	r0, 8006a10 <__swbuf_r+0x74>
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	3b01      	subs	r3, #1
 80069da:	60a3      	str	r3, [r4, #8]
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	701e      	strb	r6, [r3, #0]
 80069e4:	6962      	ldr	r2, [r4, #20]
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d004      	beq.n	80069f6 <__swbuf_r+0x5a>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d506      	bpl.n	8006a00 <__swbuf_r+0x64>
 80069f2:	2e0a      	cmp	r6, #10
 80069f4:	d104      	bne.n	8006a00 <__swbuf_r+0x64>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7ff ff95 	bl	8006928 <_fflush_r>
 80069fe:	b938      	cbnz	r0, 8006a10 <__swbuf_r+0x74>
 8006a00:	4638      	mov	r0, r7
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	4621      	mov	r1, r4
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 f806 	bl	8006a18 <__swsetup_r>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d0d5      	beq.n	80069bc <__swbuf_r+0x20>
 8006a10:	f04f 37ff 	mov.w	r7, #4294967295
 8006a14:	e7f4      	b.n	8006a00 <__swbuf_r+0x64>
	...

08006a18 <__swsetup_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <__swsetup_r+0xac>)
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	460c      	mov	r4, r1
 8006a22:	b118      	cbz	r0, 8006a2c <__swsetup_r+0x14>
 8006a24:	6a03      	ldr	r3, [r0, #32]
 8006a26:	b90b      	cbnz	r3, 8006a2c <__swsetup_r+0x14>
 8006a28:	f7ff f82a 	bl	8005a80 <__sinit>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a32:	0718      	lsls	r0, r3, #28
 8006a34:	d422      	bmi.n	8006a7c <__swsetup_r+0x64>
 8006a36:	06d9      	lsls	r1, r3, #27
 8006a38:	d407      	bmi.n	8006a4a <__swsetup_r+0x32>
 8006a3a:	2309      	movs	r3, #9
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e034      	b.n	8006ab4 <__swsetup_r+0x9c>
 8006a4a:	0758      	lsls	r0, r3, #29
 8006a4c:	d512      	bpl.n	8006a74 <__swsetup_r+0x5c>
 8006a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a50:	b141      	cbz	r1, 8006a64 <__swsetup_r+0x4c>
 8006a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a56:	4299      	cmp	r1, r3
 8006a58:	d002      	beq.n	8006a60 <__swsetup_r+0x48>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7ff f9b2 	bl	8005dc4 <_free_r>
 8006a60:	2300      	movs	r3, #0
 8006a62:	6363      	str	r3, [r4, #52]	; 0x34
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	6063      	str	r3, [r4, #4]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f043 0308 	orr.w	r3, r3, #8
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	b94b      	cbnz	r3, 8006a94 <__swsetup_r+0x7c>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8a:	d003      	beq.n	8006a94 <__swsetup_r+0x7c>
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f8ae 	bl	8006bf0 <__smakebuf_r>
 8006a94:	89a0      	ldrh	r0, [r4, #12]
 8006a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a9a:	f010 0301 	ands.w	r3, r0, #1
 8006a9e:	d00a      	beq.n	8006ab6 <__swsetup_r+0x9e>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60a3      	str	r3, [r4, #8]
 8006aa4:	6963      	ldr	r3, [r4, #20]
 8006aa6:	425b      	negs	r3, r3
 8006aa8:	61a3      	str	r3, [r4, #24]
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	b943      	cbnz	r3, 8006ac0 <__swsetup_r+0xa8>
 8006aae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ab2:	d1c4      	bne.n	8006a3e <__swsetup_r+0x26>
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	0781      	lsls	r1, r0, #30
 8006ab8:	bf58      	it	pl
 8006aba:	6963      	ldrpl	r3, [r4, #20]
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	e7f4      	b.n	8006aaa <__swsetup_r+0x92>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7f7      	b.n	8006ab4 <__swsetup_r+0x9c>
 8006ac4:	20000064 	.word	0x20000064

08006ac8 <memmove>:
 8006ac8:	4288      	cmp	r0, r1
 8006aca:	b510      	push	{r4, lr}
 8006acc:	eb01 0402 	add.w	r4, r1, r2
 8006ad0:	d902      	bls.n	8006ad8 <memmove+0x10>
 8006ad2:	4284      	cmp	r4, r0
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	d807      	bhi.n	8006ae8 <memmove+0x20>
 8006ad8:	1e43      	subs	r3, r0, #1
 8006ada:	42a1      	cmp	r1, r4
 8006adc:	d008      	beq.n	8006af0 <memmove+0x28>
 8006ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ae6:	e7f8      	b.n	8006ada <memmove+0x12>
 8006ae8:	4402      	add	r2, r0
 8006aea:	4601      	mov	r1, r0
 8006aec:	428a      	cmp	r2, r1
 8006aee:	d100      	bne.n	8006af2 <memmove+0x2a>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006afa:	e7f7      	b.n	8006aec <memmove+0x24>

08006afc <_sbrk_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	; (8006b18 <_sbrk_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7f9 ff3a 	bl	8000980 <_sbrk>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_sbrk_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_sbrk_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	200003c0 	.word	0x200003c0

08006b1c <memcpy>:
 8006b1c:	440a      	add	r2, r1
 8006b1e:	4291      	cmp	r1, r2
 8006b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b24:	d100      	bne.n	8006b28 <memcpy+0xc>
 8006b26:	4770      	bx	lr
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b32:	4291      	cmp	r1, r2
 8006b34:	d1f9      	bne.n	8006b2a <memcpy+0xe>
 8006b36:	bd10      	pop	{r4, pc}

08006b38 <abort>:
 8006b38:	b508      	push	{r3, lr}
 8006b3a:	2006      	movs	r0, #6
 8006b3c:	f000 f8bc 	bl	8006cb8 <raise>
 8006b40:	2001      	movs	r0, #1
 8006b42:	f7f9 fea5 	bl	8000890 <_exit>

08006b46 <_realloc_r>:
 8006b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	460e      	mov	r6, r1
 8006b50:	b921      	cbnz	r1, 8006b5c <_realloc_r+0x16>
 8006b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b56:	4611      	mov	r1, r2
 8006b58:	f7ff b9a8 	b.w	8005eac <_malloc_r>
 8006b5c:	b92a      	cbnz	r2, 8006b6a <_realloc_r+0x24>
 8006b5e:	f7ff f931 	bl	8005dc4 <_free_r>
 8006b62:	4625      	mov	r5, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6a:	f000 f8e3 	bl	8006d34 <_malloc_usable_size_r>
 8006b6e:	4284      	cmp	r4, r0
 8006b70:	4607      	mov	r7, r0
 8006b72:	d802      	bhi.n	8006b7a <_realloc_r+0x34>
 8006b74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b78:	d812      	bhi.n	8006ba0 <_realloc_r+0x5a>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	f7ff f995 	bl	8005eac <_malloc_r>
 8006b82:	4605      	mov	r5, r0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d0ed      	beq.n	8006b64 <_realloc_r+0x1e>
 8006b88:	42bc      	cmp	r4, r7
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	bf28      	it	cs
 8006b90:	463a      	movcs	r2, r7
 8006b92:	f7ff ffc3 	bl	8006b1c <memcpy>
 8006b96:	4631      	mov	r1, r6
 8006b98:	4640      	mov	r0, r8
 8006b9a:	f7ff f913 	bl	8005dc4 <_free_r>
 8006b9e:	e7e1      	b.n	8006b64 <_realloc_r+0x1e>
 8006ba0:	4635      	mov	r5, r6
 8006ba2:	e7df      	b.n	8006b64 <_realloc_r+0x1e>

08006ba4 <__swhatbuf_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	2900      	cmp	r1, #0
 8006bae:	b096      	sub	sp, #88	; 0x58
 8006bb0:	4615      	mov	r5, r2
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	da0d      	bge.n	8006bd2 <__swhatbuf_r+0x2e>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bbc:	f04f 0100 	mov.w	r1, #0
 8006bc0:	bf0c      	ite	eq
 8006bc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006bc6:	2340      	movne	r3, #64	; 0x40
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6031      	str	r1, [r6, #0]
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	b016      	add	sp, #88	; 0x58
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	466a      	mov	r2, sp
 8006bd4:	f000 f878 	bl	8006cc8 <_fstat_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dbec      	blt.n	8006bb6 <__swhatbuf_r+0x12>
 8006bdc:	9901      	ldr	r1, [sp, #4]
 8006bde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006be2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006be6:	4259      	negs	r1, r3
 8006be8:	4159      	adcs	r1, r3
 8006bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bee:	e7eb      	b.n	8006bc8 <__swhatbuf_r+0x24>

08006bf0 <__smakebuf_r>:
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bf4:	079d      	lsls	r5, r3, #30
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	d507      	bpl.n	8006c0c <__smakebuf_r+0x1c>
 8006bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	2301      	movs	r3, #1
 8006c06:	6163      	str	r3, [r4, #20]
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	ab01      	add	r3, sp, #4
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f7ff ffc8 	bl	8006ba4 <__swhatbuf_r>
 8006c14:	9900      	ldr	r1, [sp, #0]
 8006c16:	4605      	mov	r5, r0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff f947 	bl	8005eac <_malloc_r>
 8006c1e:	b948      	cbnz	r0, 8006c34 <__smakebuf_r+0x44>
 8006c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d4ef      	bmi.n	8006c08 <__smakebuf_r+0x18>
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7e3      	b.n	8006bfc <__smakebuf_r+0xc>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	6020      	str	r0, [r4, #0]
 8006c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	9b00      	ldr	r3, [sp, #0]
 8006c40:	6163      	str	r3, [r4, #20]
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	6120      	str	r0, [r4, #16]
 8006c46:	b15b      	cbz	r3, 8006c60 <__smakebuf_r+0x70>
 8006c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f000 f84d 	bl	8006cec <_isatty_r>
 8006c52:	b128      	cbz	r0, 8006c60 <__smakebuf_r+0x70>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	431d      	orrs	r5, r3
 8006c64:	81a5      	strh	r5, [r4, #12]
 8006c66:	e7cf      	b.n	8006c08 <__smakebuf_r+0x18>

08006c68 <_raise_r>:
 8006c68:	291f      	cmp	r1, #31
 8006c6a:	b538      	push	{r3, r4, r5, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	d904      	bls.n	8006c7c <_raise_r+0x14>
 8006c72:	2316      	movs	r3, #22
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c7e:	b112      	cbz	r2, 8006c86 <_raise_r+0x1e>
 8006c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c84:	b94b      	cbnz	r3, 8006c9a <_raise_r+0x32>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f852 	bl	8006d30 <_getpid_r>
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	4601      	mov	r1, r0
 8006c90:	4620      	mov	r0, r4
 8006c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c96:	f000 b839 	b.w	8006d0c <_kill_r>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d00a      	beq.n	8006cb4 <_raise_r+0x4c>
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	d103      	bne.n	8006caa <_raise_r+0x42>
 8006ca2:	2316      	movs	r3, #22
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e7e7      	b.n	8006c7a <_raise_r+0x12>
 8006caa:	2400      	movs	r4, #0
 8006cac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	4798      	blx	r3
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e7e0      	b.n	8006c7a <_raise_r+0x12>

08006cb8 <raise>:
 8006cb8:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <raise+0xc>)
 8006cba:	4601      	mov	r1, r0
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	f7ff bfd3 	b.w	8006c68 <_raise_r>
 8006cc2:	bf00      	nop
 8006cc4:	20000064 	.word	0x20000064

08006cc8 <_fstat_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4d07      	ldr	r5, [pc, #28]	; (8006ce8 <_fstat_r+0x20>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	f7f9 fe2a 	bl	800092e <_fstat>
 8006cda:	1c43      	adds	r3, r0, #1
 8006cdc:	d102      	bne.n	8006ce4 <_fstat_r+0x1c>
 8006cde:	682b      	ldr	r3, [r5, #0]
 8006ce0:	b103      	cbz	r3, 8006ce4 <_fstat_r+0x1c>
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200003c0 	.word	0x200003c0

08006cec <_isatty_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <_isatty_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7f9 fe29 	bl	800094e <_isatty>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_isatty_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_isatty_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	200003c0 	.word	0x200003c0

08006d0c <_kill_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d07      	ldr	r5, [pc, #28]	; (8006d2c <_kill_r+0x20>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f7f9 fda9 	bl	8000870 <_kill>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d102      	bne.n	8006d28 <_kill_r+0x1c>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	b103      	cbz	r3, 8006d28 <_kill_r+0x1c>
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200003c0 	.word	0x200003c0

08006d30 <_getpid_r>:
 8006d30:	f7f9 bd96 	b.w	8000860 <_getpid>

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
