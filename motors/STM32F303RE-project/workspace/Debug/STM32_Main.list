
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007704  08007704  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007704  08007704  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007704  08007704  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000004bc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001116d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000276a  00000000  00000000  00031248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e68  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b33  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003b60  00000000  00000000  00035353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013854  00000000  00000000  00038eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc463  00000000  00000000  0004c707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046d8  00000000  00000000  00118b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073f0 	.word	0x080073f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080073f0 	.word	0x080073f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c6:	4b44      	ldr	r3, [pc, #272]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a43      	ldr	r2, [pc, #268]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b41      	ldr	r3, [pc, #260]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002da:	613b      	str	r3, [r7, #16]
 80002dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002de:	4b3e      	ldr	r3, [pc, #248]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a3d      	ldr	r2, [pc, #244]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b3b      	ldr	r3, [pc, #236]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b38      	ldr	r3, [pc, #224]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a37      	ldr	r2, [pc, #220]	; (80003d8 <MX_GPIO_Init+0x128>)
 80002fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b35      	ldr	r3, [pc, #212]	; (80003d8 <MX_GPIO_Init+0x128>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <MX_GPIO_Init+0x128>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a31      	ldr	r2, [pc, #196]	; (80003d8 <MX_GPIO_Init+0x128>)
 8000314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <MX_GPIO_Init+0x128>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2106      	movs	r1, #6
 800032a:	482c      	ldr	r0, [pc, #176]	; (80003dc <MX_GPIO_Init+0x12c>)
 800032c:	f001 fd14 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 8000330:	2200      	movs	r2, #0
 8000332:	f243 01b2 	movw	r1, #12466	; 0x30b2
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f001 fd0d 	bl	8001d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|MOTOR4_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f24d 0140 	movw	r1, #53312	; 0xd040
 8000344:	4826      	ldr	r0, [pc, #152]	; (80003e0 <MX_GPIO_Init+0x130>)
 8000346:	f001 fd07 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800034a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	481e      	ldr	r0, [pc, #120]	; (80003dc <MX_GPIO_Init+0x12c>)
 8000362:	f001 fb6f 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin;
 8000366:	2306      	movs	r3, #6
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000372:	2300      	movs	r3, #0
 8000374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	4619      	mov	r1, r3
 800037c:	4817      	ldr	r0, [pc, #92]	; (80003dc <MX_GPIO_Init+0x12c>)
 800037e:	f001 fb61 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA12 PAPin */
  GPIO_InitStruct.Pin = MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 8000382:	f243 03b2 	movw	r3, #12466	; 0x30b2
 8000386:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|MOTOR4_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	4619      	mov	r1, r3
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f001 fb51 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin|MOTOR3_DIR_Pin;
 80003a2:	f24d 0340 	movw	r3, #53312	; 0xd040
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	4619      	mov	r1, r3
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <MX_GPIO_Init+0x130>)
 80003bc:	f001 fb42 	bl	8001a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2100      	movs	r1, #0
 80003c4:	2028      	movs	r0, #40	; 0x28
 80003c6:	f001 fa90 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ca:	2028      	movs	r0, #40	; 0x28
 80003cc:	f001 faa9 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 80003d0:	bf00      	nop
 80003d2:	3728      	adds	r7, #40	; 0x28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000800 	.word	0x48000800
 80003e0:	48000400 	.word	0x48000400

080003e4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a05      	ldr	r2, [pc, #20]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d103      	bne.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x1a>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5); // GPIOA is right
 80003f6:	2120      	movs	r1, #32
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fa:	f001 fcc5 	bl	8001d88 <HAL_GPIO_TogglePin>
  }
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40000400 	.word	0x40000400
 800040c:	48000c00 	.word	0x48000c00

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f001 f928 	bl	8001668 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f8ba 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f7ff ff48 	bl	80002b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000420:	f001 f844 	bl	80014ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000424:	f001 f812 	bl	800144c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000428:	f000 fd5e 	bl	8000ee8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800042c:	f000 fc72 	bl	8000d14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000430:	f000 fd00 	bl	8000e34 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000434:	f000 fdb2 	bl	8000f9c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000438:	f000 fe0a 	bl	8001050 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Blue button
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	4842      	ldr	r0, [pc, #264]	; (800054c <main+0x13c>)
 8000444:	f001 fc88 	bl	8001d58 <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8000448:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800044c:	f000 fab4 	bl	80009b8 <HAL_GPIO_EXTI_Callback>

  HAL_TIM_Base_Start_IT(&htim3);
 8000450:	483f      	ldr	r0, [pc, #252]	; (8000550 <main+0x140>)
 8000452:	f003 f973 	bl	800373c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start timer
 8000456:	2100      	movs	r1, #0
 8000458:	483e      	ldr	r0, [pc, #248]	; (8000554 <main+0x144>)
 800045a:	f003 fa37 	bl	80038cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start timer
 800045e:	2100      	movs	r1, #0
 8000460:	483d      	ldr	r0, [pc, #244]	; (8000558 <main+0x148>)
 8000462:	f003 fa33 	bl	80038cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Start timer
 8000466:	2100      	movs	r1, #0
 8000468:	4839      	ldr	r0, [pc, #228]	; (8000550 <main+0x140>)
 800046a:	f003 fa2f 	bl	80038cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start timer
 800046e:	2100      	movs	r1, #0
 8000470:	483a      	ldr	r0, [pc, #232]	; (800055c <main+0x14c>)
 8000472:	f003 fa2b 	bl	80038cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //Start timer
 8000476:	2100      	movs	r1, #0
 8000478:	4839      	ldr	r0, [pc, #228]	; (8000560 <main+0x150>)
 800047a:	f003 fa27 	bl	80038cc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 800047e:	2232      	movs	r2, #50	; 0x32
 8000480:	4938      	ldr	r1, [pc, #224]	; (8000564 <main+0x154>)
 8000482:	4839      	ldr	r0, [pc, #228]	; (8000568 <main+0x158>)
 8000484:	f004 fb5c 	bl	8004b40 <HAL_UART_Receive_IT>


  // Motor 1 initialization
  motor1.DIR_PIN = MOTOR1_DIR_Pin;
 8000488:	4b38      	ldr	r3, [pc, #224]	; (800056c <main+0x15c>)
 800048a:	2202      	movs	r2, #2
 800048c:	601a      	str	r2, [r3, #0]
  motor1.STEP_PIN = MOTOR1_PUL_Pin;
 800048e:	4b37      	ldr	r3, [pc, #220]	; (800056c <main+0x15c>)
 8000490:	2201      	movs	r2, #1
 8000492:	605a      	str	r2, [r3, #4]
  motor1.EN_PIN = MOTOR1_EN_Pin;
 8000494:	4b35      	ldr	r3, [pc, #212]	; (800056c <main+0x15c>)
 8000496:	2204      	movs	r2, #4
 8000498:	609a      	str	r2, [r3, #8]
  motor1.SPEED = 100;
 800049a:	4b34      	ldr	r3, [pc, #208]	; (800056c <main+0x15c>)
 800049c:	2264      	movs	r2, #100	; 0x64
 800049e:	60da      	str	r2, [r3, #12]
  motor1.STEPS = 200;
 80004a0:	4b32      	ldr	r3, [pc, #200]	; (800056c <main+0x15c>)
 80004a2:	22c8      	movs	r2, #200	; 0xc8
 80004a4:	611a      	str	r2, [r3, #16]
  motor1.TIMER = TIM1;
 80004a6:	4b31      	ldr	r3, [pc, #196]	; (800056c <main+0x15c>)
 80004a8:	4a31      	ldr	r2, [pc, #196]	; (8000570 <main+0x160>)
 80004aa:	615a      	str	r2, [r3, #20]

  // Motor 2 initialization
  motor2.DIR_PIN = MOTOR2_DIR_Pin;
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <main+0x164>)
 80004ae:	2210      	movs	r2, #16
 80004b0:	601a      	str	r2, [r3, #0]
  motor2.STEP_PIN = MOTOR2_PUL_Pin;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <main+0x164>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  motor2.EN_PIN = MOTOR2_EN_Pin;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <main+0x164>)
 80004ba:	2202      	movs	r2, #2
 80004bc:	609a      	str	r2, [r3, #8]
  motor2.SPEED = 100;
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <main+0x164>)
 80004c0:	2264      	movs	r2, #100	; 0x64
 80004c2:	60da      	str	r2, [r3, #12]
  motor2.STEPS = 200;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <main+0x164>)
 80004c6:	22c8      	movs	r2, #200	; 0xc8
 80004c8:	611a      	str	r2, [r3, #16]
  motor2.TIMER = TIM2;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <main+0x164>)
 80004cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d0:	615a      	str	r2, [r3, #20]

  // Motor 3 initialization
  motor3.DIR_PIN = MOTOR3_DIR_Pin;
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <main+0x168>)
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	601a      	str	r2, [r3, #0]
  motor3.STEP_PIN = MOTOR3_PUL_Pin;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <main+0x168>)
 80004da:	2240      	movs	r2, #64	; 0x40
 80004dc:	605a      	str	r2, [r3, #4]
  motor3.EN_PIN = MOTOR3_EN_Pin;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <main+0x168>)
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	609a      	str	r2, [r3, #8]
  motor3.SPEED = 100;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0x168>)
 80004e6:	2264      	movs	r2, #100	; 0x64
 80004e8:	60da      	str	r2, [r3, #12]
  motor3.STEPS = 200;
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <main+0x168>)
 80004ec:	22c8      	movs	r2, #200	; 0xc8
 80004ee:	611a      	str	r2, [r3, #16]
  motor3.TIMER = TIM3;
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <main+0x168>)
 80004f2:	4a22      	ldr	r2, [pc, #136]	; (800057c <main+0x16c>)
 80004f4:	615a      	str	r2, [r3, #20]

  // Motor 4 initialization
  motor4.DIR_PIN = MOTOR4_DIR_Pin;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <main+0x170>)
 80004f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004fc:	601a      	str	r2, [r3, #0]
  motor4.STEP_PIN = MOTOR4_PUL_Pin;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <main+0x170>)
 8000500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000504:	605a      	str	r2, [r3, #4]
  motor4.EN_PIN = MOTOR4_EN_Pin;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <main+0x170>)
 8000508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800050c:	609a      	str	r2, [r3, #8]
  motor4.SPEED = 100;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0x170>)
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	60da      	str	r2, [r3, #12]
  motor4.STEPS = 200;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <main+0x170>)
 8000516:	22c8      	movs	r2, #200	; 0xc8
 8000518:	611a      	str	r2, [r3, #16]
  motor4.TIMER = TIM4;
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <main+0x170>)
 800051c:	4a19      	ldr	r2, [pc, #100]	; (8000584 <main+0x174>)
 800051e:	615a      	str	r2, [r3, #20]

  // Motor 5 initialization
  motor5.DIR_PIN = MOTOR5_DIR_Pin;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <main+0x178>)
 8000522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000526:	601a      	str	r2, [r3, #0]
  motor5.STEP_PIN = MOTOR5_PUL_Pin;
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0x178>)
 800052a:	2240      	movs	r2, #64	; 0x40
 800052c:	605a      	str	r2, [r3, #4]
  motor5.EN_PIN = MOTOR5_EN_Pin;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0x178>)
 8000530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000534:	609a      	str	r2, [r3, #8]
  motor5.SPEED = 100;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x178>)
 8000538:	2264      	movs	r2, #100	; 0x64
 800053a:	60da      	str	r2, [r3, #12]
  motor5.STEPS = 200;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0x178>)
 800053e:	22c8      	movs	r2, #200	; 0xc8
 8000540:	611a      	str	r2, [r3, #16]
  motor5.TIMER = TIM8;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0x178>)
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <main+0x17c>)
 8000546:	615a      	str	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x138>
 800054a:	bf00      	nop
 800054c:	48000800 	.word	0x48000800
 8000550:	200001e0 	.word	0x200001e0
 8000554:	20000148 	.word	0x20000148
 8000558:	20000194 	.word	0x20000194
 800055c:	2000022c 	.word	0x2000022c
 8000560:	20000278 	.word	0x20000278
 8000564:	20000084 	.word	0x20000084
 8000568:	2000034c 	.word	0x2000034c
 800056c:	200000b8 	.word	0x200000b8
 8000570:	40012c00 	.word	0x40012c00
 8000574:	200000d4 	.word	0x200000d4
 8000578:	200000f0 	.word	0x200000f0
 800057c:	40000400 	.word	0x40000400
 8000580:	2000010c 	.word	0x2000010c
 8000584:	40000800 	.word	0x40000800
 8000588:	20000128 	.word	0x20000128
 800058c:	40013400 	.word	0x40013400

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b0a6      	sub	sp, #152	; 0x98
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800059a:	2228      	movs	r2, #40	; 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fe6f 	bl	8006282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2258      	movs	r2, #88	; 0x58
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fe61 	bl	8006282 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fbfc 	bl	8001dec <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f9fd 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fc3a 	bl	8002e94 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000626:	f000 f9e7 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <SystemClock_Config+0xd0>)
 800062c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000636:	2300      	movs	r3, #0
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800063a:	2300      	movs	r3, #0
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fe59 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000654:	f000 f9d0 	bl	80009f8 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3798      	adds	r7, #152	; 0x98
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	00303003 	.word	0x00303003

08000664 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	; 0x68
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a93      	ldr	r2, [pc, #588]	; (80008bc <HAL_UART_RxCpltCallback+0x258>)
 8000670:	4293      	cmp	r3, r2
 8000672:	f040 8190 	bne.w	8000996 <HAL_UART_RxCpltCallback+0x332>
    {
        if (UART2_rxBuffer[0] != '\0')
 8000676:	4b92      	ldr	r3, [pc, #584]	; (80008c0 <HAL_UART_RxCpltCallback+0x25c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	f000 8181 	beq.w	8000982 <HAL_UART_RxCpltCallback+0x31e>
        {
            char *token = strtok((char *)UART2_rxBuffer, "_");
 8000680:	4990      	ldr	r1, [pc, #576]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 8000682:	488f      	ldr	r0, [pc, #572]	; (80008c0 <HAL_UART_RxCpltCallback+0x25c>)
 8000684:	f005 fe06 	bl	8006294 <strtok>
 8000688:	6678      	str	r0, [r7, #100]	; 0x64

            // Check the command for motor 1
            if (strcmp(token, MOTOR1_COMMAND) == 0)
 800068a:	498f      	ldr	r1, [pc, #572]	; (80008c8 <HAL_UART_RxCpltCallback+0x264>)
 800068c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800068e:	f7ff fda7 	bl	80001e0 <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d13e      	bne.n	8000716 <HAL_UART_RxCpltCallback+0xb2>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000698:	498a      	ldr	r1, [pc, #552]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 800069a:	2000      	movs	r0, #0
 800069c:	f005 fdfa 	bl	8006294 <strtok>
 80006a0:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 80006a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <HAL_UART_RxCpltCallback+0x52>
                {
                    int speed = atoi(token); // Convert speed string to integer
 80006a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80006aa:	f005 fc35 	bl	8005f18 <atoi>
 80006ae:	6438      	str	r0, [r7, #64]	; 0x40
                    motor1.SPEED = speed;
 80006b0:	4a86      	ldr	r2, [pc, #536]	; (80008cc <HAL_UART_RxCpltCallback+0x268>)
 80006b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006b4:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 80006b6:	4983      	ldr	r1, [pc, #524]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f005 fdeb 	bl	8006294 <strtok>
 80006be:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 80006c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <HAL_UART_RxCpltCallback+0x70>
                {
                    int steps = atoi(token); // Convert steps string to integer
 80006c6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80006c8:	f005 fc26 	bl	8005f18 <atoi>
 80006cc:	63f8      	str	r0, [r7, #60]	; 0x3c
                    motor1.STEPS = steps;
 80006ce:	4a7f      	ldr	r2, [pc, #508]	; (80008cc <HAL_UART_RxCpltCallback+0x268>)
 80006d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d2:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	222e      	movs	r2, #46	; 0x2e
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f005 fdce 	bl	8006282 <memset>
                sprintf(uartTxBuffer, "Motor1 Settings: Speed=%d, Steps=%d\r\n", motor1.SPEED, motor1.STEPS);
 80006e6:	4b79      	ldr	r3, [pc, #484]	; (80008cc <HAL_UART_RxCpltCallback+0x268>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	4b78      	ldr	r3, [pc, #480]	; (80008cc <HAL_UART_RxCpltCallback+0x268>)
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	f107 0008 	add.w	r0, r7, #8
 80006f2:	4977      	ldr	r1, [pc, #476]	; (80008d0 <HAL_UART_RxCpltCallback+0x26c>)
 80006f4:	f005 fd62 	bl	80061bc <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd79 	bl	80001f4 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	f107 0108 	add.w	r1, r7, #8
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	486b      	ldr	r0, [pc, #428]	; (80008bc <HAL_UART_RxCpltCallback+0x258>)
 8000710:	f004 f98c 	bl	8004a2c <HAL_UART_Transmit>
 8000714:	e135      	b.n	8000982 <HAL_UART_RxCpltCallback+0x31e>
            }

            // Check the command for motor 2
            else if (strcmp(token, MOTOR2_COMMAND) == 0)
 8000716:	496f      	ldr	r1, [pc, #444]	; (80008d4 <HAL_UART_RxCpltCallback+0x270>)
 8000718:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800071a:	f7ff fd61 	bl	80001e0 <strcmp>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d13e      	bne.n	80007a2 <HAL_UART_RxCpltCallback+0x13e>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000724:	4967      	ldr	r1, [pc, #412]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 8000726:	2000      	movs	r0, #0
 8000728:	f005 fdb4 	bl	8006294 <strtok>
 800072c:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 800072e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <HAL_UART_RxCpltCallback+0xde>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000734:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000736:	f005 fbef 	bl	8005f18 <atoi>
 800073a:	64b8      	str	r0, [r7, #72]	; 0x48
                    motor2.SPEED = speed;
 800073c:	4a66      	ldr	r2, [pc, #408]	; (80008d8 <HAL_UART_RxCpltCallback+0x274>)
 800073e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000740:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 8000742:	4960      	ldr	r1, [pc, #384]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 8000744:	2000      	movs	r0, #0
 8000746:	f005 fda5 	bl	8006294 <strtok>
 800074a:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 800074c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <HAL_UART_RxCpltCallback+0xfc>
                {
                    int steps = atoi(token); // Convert steps string to integer
 8000752:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000754:	f005 fbe0 	bl	8005f18 <atoi>
 8000758:	6478      	str	r0, [r7, #68]	; 0x44
                    motor2.STEPS = steps;
 800075a:	4a5f      	ldr	r2, [pc, #380]	; (80008d8 <HAL_UART_RxCpltCallback+0x274>)
 800075c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800075e:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	222e      	movs	r2, #46	; 0x2e
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fd88 	bl	8006282 <memset>
                sprintf(uartTxBuffer, "Motor2 Settings: Speed=%d, Steps=%d\r\n", motor2.SPEED, motor2.STEPS);
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <HAL_UART_RxCpltCallback+0x274>)
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <HAL_UART_RxCpltCallback+0x274>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	f107 0008 	add.w	r0, r7, #8
 800077e:	4957      	ldr	r1, [pc, #348]	; (80008dc <HAL_UART_RxCpltCallback+0x278>)
 8000780:	f005 fd1c 	bl	80061bc <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd33 	bl	80001f4 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	4848      	ldr	r0, [pc, #288]	; (80008bc <HAL_UART_RxCpltCallback+0x258>)
 800079c:	f004 f946 	bl	8004a2c <HAL_UART_Transmit>
 80007a0:	e0ef      	b.n	8000982 <HAL_UART_RxCpltCallback+0x31e>
            }

            // Check the command for motor 3
            else if (strcmp(token, MOTOR3_COMMAND) == 0)
 80007a2:	494f      	ldr	r1, [pc, #316]	; (80008e0 <HAL_UART_RxCpltCallback+0x27c>)
 80007a4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80007a6:	f7ff fd1b 	bl	80001e0 <strcmp>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d13e      	bne.n	800082e <HAL_UART_RxCpltCallback+0x1ca>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 80007b0:	4944      	ldr	r1, [pc, #272]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f005 fd6e 	bl	8006294 <strtok>
 80007b8:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 80007ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d006      	beq.n	80007ce <HAL_UART_RxCpltCallback+0x16a>
                {
                    int speed = atoi(token); // Convert speed string to integer
 80007c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80007c2:	f005 fba9 	bl	8005f18 <atoi>
 80007c6:	6538      	str	r0, [r7, #80]	; 0x50
                    motor3.SPEED = speed;
 80007c8:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <HAL_UART_RxCpltCallback+0x280>)
 80007ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007cc:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 80007ce:	493d      	ldr	r1, [pc, #244]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f005 fd5f 	bl	8006294 <strtok>
 80007d6:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 80007d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d006      	beq.n	80007ec <HAL_UART_RxCpltCallback+0x188>
                {
                    int steps = atoi(token); // Convert steps string to integer
 80007de:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80007e0:	f005 fb9a 	bl	8005f18 <atoi>
 80007e4:	64f8      	str	r0, [r7, #76]	; 0x4c
                    motor3.STEPS = steps;
 80007e6:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <HAL_UART_RxCpltCallback+0x280>)
 80007e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007ea:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	222e      	movs	r2, #46	; 0x2e
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 fd42 	bl	8006282 <memset>
                sprintf(uartTxBuffer, "Motor3 Settings: Speed=%d, Steps=%d\r\n", motor3.SPEED, motor3.STEPS);
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <HAL_UART_RxCpltCallback+0x280>)
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <HAL_UART_RxCpltCallback+0x280>)
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	f107 0008 	add.w	r0, r7, #8
 800080a:	4937      	ldr	r1, [pc, #220]	; (80008e8 <HAL_UART_RxCpltCallback+0x284>)
 800080c:	f005 fcd6 	bl	80061bc <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fced 	bl	80001f4 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0108 	add.w	r1, r7, #8
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <HAL_UART_RxCpltCallback+0x258>)
 8000828:	f004 f900 	bl	8004a2c <HAL_UART_Transmit>
 800082c:	e0a9      	b.n	8000982 <HAL_UART_RxCpltCallback+0x31e>
            }

            // Check the command for motor 4
            else if (strcmp(token, MOTOR4_COMMAND) == 0)
 800082e:	492f      	ldr	r1, [pc, #188]	; (80008ec <HAL_UART_RxCpltCallback+0x288>)
 8000830:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000832:	f7ff fcd5 	bl	80001e0 <strcmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d15d      	bne.n	80008f8 <HAL_UART_RxCpltCallback+0x294>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 800083c:	4921      	ldr	r1, [pc, #132]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 800083e:	2000      	movs	r0, #0
 8000840:	f005 fd28 	bl	8006294 <strtok>
 8000844:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 8000846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <HAL_UART_RxCpltCallback+0x1f6>
                {
                    int speed = atoi(token); // Convert speed string to integer
 800084c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800084e:	f005 fb63 	bl	8005f18 <atoi>
 8000852:	65b8      	str	r0, [r7, #88]	; 0x58
                    motor4.SPEED = speed;
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <HAL_UART_RxCpltCallback+0x28c>)
 8000856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000858:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 800085a:	491a      	ldr	r1, [pc, #104]	; (80008c4 <HAL_UART_RxCpltCallback+0x260>)
 800085c:	2000      	movs	r0, #0
 800085e:	f005 fd19 	bl	8006294 <strtok>
 8000862:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 8000864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000866:	2b00      	cmp	r3, #0
 8000868:	d006      	beq.n	8000878 <HAL_UART_RxCpltCallback+0x214>
                {
                    int steps = atoi(token); // Convert steps string to integer
 800086a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800086c:	f005 fb54 	bl	8005f18 <atoi>
 8000870:	6578      	str	r0, [r7, #84]	; 0x54
                    motor4.STEPS = steps;
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <HAL_UART_RxCpltCallback+0x28c>)
 8000874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000876:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	222e      	movs	r2, #46	; 0x2e
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f005 fcfc 	bl	8006282 <memset>
                sprintf(uartTxBuffer, "Motor4 Settings: Speed=%d, Steps=%d\r\n", motor4.SPEED, motor4.STEPS);
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_UART_RxCpltCallback+0x28c>)
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_UART_RxCpltCallback+0x28c>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f107 0008 	add.w	r0, r7, #8
 8000896:	4917      	ldr	r1, [pc, #92]	; (80008f4 <HAL_UART_RxCpltCallback+0x290>)
 8000898:	f005 fc90 	bl	80061bc <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fca7 	bl	80001f4 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 0108 	add.w	r1, r7, #8
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	4802      	ldr	r0, [pc, #8]	; (80008bc <HAL_UART_RxCpltCallback+0x258>)
 80008b4:	f004 f8ba 	bl	8004a2c <HAL_UART_Transmit>
 80008b8:	e063      	b.n	8000982 <HAL_UART_RxCpltCallback+0x31e>
 80008ba:	bf00      	nop
 80008bc:	2000034c 	.word	0x2000034c
 80008c0:	20000084 	.word	0x20000084
 80008c4:	08007408 	.word	0x08007408
 80008c8:	0800740c 	.word	0x0800740c
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	08007410 	.word	0x08007410
 80008d4:	08007438 	.word	0x08007438
 80008d8:	200000d4 	.word	0x200000d4
 80008dc:	0800743c 	.word	0x0800743c
 80008e0:	08007464 	.word	0x08007464
 80008e4:	200000f0 	.word	0x200000f0
 80008e8:	08007468 	.word	0x08007468
 80008ec:	08007490 	.word	0x08007490
 80008f0:	2000010c 	.word	0x2000010c
 80008f4:	08007494 	.word	0x08007494
            }

            // Check the command for motor 5
            else if (strcmp(token, MOTOR5_COMMAND) == 0)
 80008f8:	4929      	ldr	r1, [pc, #164]	; (80009a0 <HAL_UART_RxCpltCallback+0x33c>)
 80008fa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80008fc:	f7ff fc70 	bl	80001e0 <strcmp>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d13d      	bne.n	8000982 <HAL_UART_RxCpltCallback+0x31e>
            {
                token = strtok(NULL, "_"); // Get the next token (speed)
 8000906:	4927      	ldr	r1, [pc, #156]	; (80009a4 <HAL_UART_RxCpltCallback+0x340>)
 8000908:	2000      	movs	r0, #0
 800090a:	f005 fcc3 	bl	8006294 <strtok>
 800090e:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 8000910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000912:	2b00      	cmp	r3, #0
 8000914:	d006      	beq.n	8000924 <HAL_UART_RxCpltCallback+0x2c0>
                {
                    int speed = atoi(token); // Convert speed string to integer
 8000916:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000918:	f005 fafe 	bl	8005f18 <atoi>
 800091c:	6638      	str	r0, [r7, #96]	; 0x60
                    motor5.SPEED = speed;
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_UART_RxCpltCallback+0x344>)
 8000920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000922:	60d3      	str	r3, [r2, #12]
                }

                token = strtok(NULL, "_"); // Get the next token (steps)
 8000924:	491f      	ldr	r1, [pc, #124]	; (80009a4 <HAL_UART_RxCpltCallback+0x340>)
 8000926:	2000      	movs	r0, #0
 8000928:	f005 fcb4 	bl	8006294 <strtok>
 800092c:	6678      	str	r0, [r7, #100]	; 0x64
                if (token != NULL)
 800092e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <HAL_UART_RxCpltCallback+0x2de>
                {
                    int steps = atoi(token); // Convert steps string to integer
 8000934:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000936:	f005 faef 	bl	8005f18 <atoi>
 800093a:	65f8      	str	r0, [r7, #92]	; 0x5c
                    motor5.STEPS = steps;
 800093c:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <HAL_UART_RxCpltCallback+0x344>)
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	6113      	str	r3, [r2, #16]
                }

                // Send back the updated settings over UART
                char uartTxBuffer[MAX_COMMAND_LENGTH] = {0};
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	222e      	movs	r2, #46	; 0x2e
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fc97 	bl	8006282 <memset>
                sprintf(uartTxBuffer, "Motor5 Settings: Speed=%d, Steps=%d\r\n", motor5.SPEED, motor5.STEPS);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_UART_RxCpltCallback+0x344>)
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_UART_RxCpltCallback+0x344>)
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	f107 0008 	add.w	r0, r7, #8
 8000960:	4912      	ldr	r1, [pc, #72]	; (80009ac <HAL_UART_RxCpltCallback+0x348>)
 8000962:	f005 fc2b 	bl	80061bc <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc42 	bl	80001f4 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_UART_RxCpltCallback+0x34c>)
 800097e:	f004 f855 	bl	8004a2c <HAL_UART_Transmit>
            }
        }

        // Clear the receive buffer
        memset(UART2_rxBuffer, 0, sizeof(UART2_rxBuffer));
 8000982:	2232      	movs	r2, #50	; 0x32
 8000984:	2100      	movs	r1, #0
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_UART_RxCpltCallback+0x350>)
 8000988:	f005 fc7b 	bl	8006282 <memset>

        // Restart UART receive interrupt
        HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, MAX_COMMAND_LENGTH);
 800098c:	2232      	movs	r2, #50	; 0x32
 800098e:	4909      	ldr	r1, [pc, #36]	; (80009b4 <HAL_UART_RxCpltCallback+0x350>)
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <HAL_UART_RxCpltCallback+0x34c>)
 8000992:	f004 f8d5 	bl	8004b40 <HAL_UART_Receive_IT>
    }
}
 8000996:	bf00      	nop
 8000998:	3768      	adds	r7, #104	; 0x68
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	080074bc 	.word	0x080074bc
 80009a4:	08007408 	.word	0x08007408
 80009a8:	20000128 	.word	0x20000128
 80009ac:	080074c0 	.word	0x080074c0
 80009b0:	2000034c 	.word	0x2000034c
 80009b4:	20000084 	.word	0x20000084

080009b8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
  // Check if the button (PC13) is pressed
  if (GPIO_Pin == GPIO_PIN_13)
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c8:	d10e      	bne.n	80009e8 <HAL_GPIO_EXTI_Callback+0x30>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009ca:	2120      	movs	r1, #32
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f001 f9da 	bl	8001d88 <HAL_GPIO_TogglePin>
	    motor1.STEPS = 200;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80009d6:	22c8      	movs	r2, #200	; 0xc8
 80009d8:	611a      	str	r2, [r3, #16]
	    motor1.SPEED = 10;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80009dc:	220a      	movs	r2, #10
 80009de:	60da      	str	r2, [r3, #12]

    // Change motor direction
    HAL_GPIO_TogglePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin); // Toggle direction pin
 80009e0:	2102      	movs	r1, #2
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009e4:	f001 f9d0 	bl	8001d88 <HAL_GPIO_TogglePin>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	48000800 	.word	0x48000800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 ff4a 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 fe2c 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000aa6:	f003 f81d 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000148 	.word	0x20000148

08000ab4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aba:	f003 f813 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000148 	.word	0x20000148

08000ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM2_IRQHandler+0x10>)
 8000ace:	f003 f809 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000194 	.word	0x20000194

08000adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM3_IRQHandler+0x10>)
 8000ae2:	f002 ffff 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200001e0 	.word	0x200001e0

08000af0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM4_IRQHandler+0x10>)
 8000af6:	f002 fff5 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000022c 	.word	0x2000022c

08000b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART1_IRQHandler+0x10>)
 8000b0a:	f004 f85d 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200002c4 	.word	0x200002c4

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART2_IRQHandler+0x10>)
 8000b1e:	f004 f853 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000034c 	.word	0x2000034c

08000b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b34:	f001 f942 	bl	8001dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM8_BRK_IRQHandler+0x10>)
 8000b42:	f002 ffcf 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000278 	.word	0x20000278

08000b50 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM8_UP_IRQHandler+0x10>)
 8000b56:	f002 ffc5 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000278 	.word	0x20000278

08000b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_kill>:

int _kill(int pid, int sig)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b7e:	f005 fc2b 	bl	80063d8 <__errno>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2216      	movs	r2, #22
 8000b86:	601a      	str	r2, [r3, #0]
  return -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <_exit>:

void _exit (int status)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffe7 	bl	8000b74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ba6:	e7fe      	b.n	8000ba6 <_exit+0x12>

08000ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e00a      	b.n	8000bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bba:	f3af 8000 	nop.w
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	b2ca      	uxtb	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf0      	blt.n	8000bba <_read+0x12>
  }

  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e009      	b.n	8000c08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf1      	blt.n	8000bf4 <_write+0x12>
  }
  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_close>:

int _close(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c42:	605a      	str	r2, [r3, #4]
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_isatty>:

int _isatty(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f005 fb90 	bl	80063d8 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20010000 	.word	0x20010000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	20000144 	.word	0x20000144
 8000cec:	20000528 	.word	0x20000528

08000cf0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	222c      	movs	r2, #44	; 0x2c
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fa9e 	bl	8006282 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d48:	4a39      	ldr	r2, [pc, #228]	; (8000e30 <MX_TIM1_Init+0x11c>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d4e:	f240 12df 	movw	r2, #479	; 0x1df
 8000d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d5c:	2263      	movs	r2, #99	; 0x63
 8000d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d72:	482e      	ldr	r0, [pc, #184]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d74:	f002 fd52 	bl	800381c <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f7ff fe3b 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d96:	f003 fccb 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da0:	f7ff fe2a 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000dca:	f002 ffab 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dd4:	f7ff fe10 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000e0e:	f003 fd1b 	bl	8004848 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000e18:	f7ff fdee 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000e1e:	f000 fa4b 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3758      	adds	r7, #88	; 0x58
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000148 	.word	0x20000148
 8000e30:	40012c00 	.word	0x40012c00

08000e34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e62:	f240 12df 	movw	r2, #479	; 0x1df
 8000e66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000e84:	f002 fcca 	bl	800381c <HAL_TIM_PWM_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f7ff fdb3 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000ea2:	f003 fc45 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f7ff fda4 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb0:	2360      	movs	r3, #96	; 0x60
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000ec8:	f002 ff2c 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000ed2:	f7ff fd91 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM2_Init+0xb0>)
 8000ed8:	f000 f9ee 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000194 	.word	0x20000194

08000ee8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <MX_TIM3_Init+0xb0>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f14:	f240 12df 	movw	r2, #479	; 0x1df
 8000f18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f22:	2263      	movs	r2, #99	; 0x63
 8000f24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f34:	f002 fc72 	bl	800381c <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f7ff fd5b 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f52:	f003 fbed 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f5c:	f7ff fd4c 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f78:	f002 fed4 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f82:	f7ff fd39 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM3_Init+0xac>)
 8000f88:	f000 f996 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001e0 	.word	0x200001e0
 8000f98:	40000400 	.word	0x40000400

08000f9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <MX_TIM4_Init+0xb0>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fc8:	f240 12df 	movw	r2, #479	; 0x1df
 8000fcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fd6:	2263      	movs	r2, #99	; 0x63
 8000fd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM4_Init+0xac>)
 8000fe8:	f002 fc18 	bl	800381c <HAL_TIM_PWM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ff2:	f7ff fd01 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <MX_TIM4_Init+0xac>)
 8001006:	f003 fb93 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001010:	f7ff fcf2 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	2360      	movs	r3, #96	; 0x60
 8001016:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM4_Init+0xac>)
 800102c:	f002 fe7a 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001036:	f7ff fcdf 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM4_Init+0xac>)
 800103c:	f000 f93c 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000022c 	.word	0x2000022c
 800104c:	40000800 	.word	0x40000800

08001050 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	; 0x58
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001056:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	222c      	movs	r2, #44	; 0x2c
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f005 f900 	bl	8006282 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <MX_TIM8_Init+0x118>)
 8001084:	4a39      	ldr	r2, [pc, #228]	; (800116c <MX_TIM8_Init+0x11c>)
 8001086:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 480-1;
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <MX_TIM8_Init+0x118>)
 800108a:	f240 12df 	movw	r2, #479	; 0x1df
 800108e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_TIM8_Init+0x118>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <MX_TIM8_Init+0x118>)
 8001098:	2263      	movs	r2, #99	; 0x63
 800109a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <MX_TIM8_Init+0x118>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM8_Init+0x118>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_TIM8_Init+0x118>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010ae:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_TIM8_Init+0x118>)
 80010b0:	f002 fbb4 	bl	800381c <HAL_TIM_PWM_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f7ff fc9d 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_TIM8_Init+0x118>)
 80010d2:	f003 fb2d 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80010dc:	f7ff fc8c 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e0:	2360      	movs	r3, #96	; 0x60
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <MX_TIM8_Init+0x118>)
 8001106:	f002 fe0d 	bl	8003d24 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001110:	f7ff fc72 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM8_Init+0x118>)
 800114a:	f003 fb7d 	bl	8004848 <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001154:	f7ff fc50 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM8_Init+0x118>)
 800115a:	f000 f8ad 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	; 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000278 	.word	0x20000278
 800116c:	40013400 	.word	0x40013400

08001170 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_TIM_PWM_MspInit+0x134>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11c      	bne.n	80011bc <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2018      	movs	r0, #24
 80011a0:	f000 fba3 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80011a4:	2018      	movs	r0, #24
 80011a6:	f000 fbbc 	bl	8001922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2019      	movs	r0, #25
 80011b0:	f000 fb9b 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011b4:	2019      	movs	r0, #25
 80011b6:	f000 fbb4 	bl	8001922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80011ba:	e06e      	b.n	800129a <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d114      	bne.n	80011f0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	201c      	movs	r0, #28
 80011e4:	f000 fb81 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fb9a 	bl	8001922 <HAL_NVIC_EnableIRQ>
}
 80011ee:	e054      	b.n	800129a <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <HAL_TIM_PWM_MspInit+0x13c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d114      	bne.n	8001224 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201d      	movs	r0, #29
 8001218:	f000 fb67 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800121c:	201d      	movs	r0, #29
 800121e:	f000 fb80 	bl	8001922 <HAL_NVIC_EnableIRQ>
}
 8001222:	e03a      	b.n	800129a <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM4)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_TIM_PWM_MspInit+0x140>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d114      	bne.n	8001258 <HAL_TIM_PWM_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201e      	movs	r0, #30
 800124c:	f000 fb4d 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001250:	201e      	movs	r0, #30
 8001252:	f000 fb66 	bl	8001922 <HAL_NVIC_EnableIRQ>
}
 8001256:	e020      	b.n	800129a <HAL_TIM_PWM_MspInit+0x12a>
  else if(tim_pwmHandle->Instance==TIM8)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <HAL_TIM_PWM_MspInit+0x144>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11b      	bne.n	800129a <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_TIM_PWM_MspInit+0x138>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	202b      	movs	r0, #43	; 0x2b
 8001280:	f000 fb33 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8001284:	202b      	movs	r0, #43	; 0x2b
 8001286:	f000 fb4c 	bl	8001922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	202c      	movs	r0, #44	; 0x2c
 8001290:	f000 fb2b 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001294:	202c      	movs	r0, #44	; 0x2c
 8001296:	f000 fb44 	bl	8001922 <HAL_NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40013400 	.word	0x40013400

080012b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_TIM_MspPostInit+0x17c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11c      	bne.n	8001314 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b57      	ldr	r3, [pc, #348]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a56      	ldr	r2, [pc, #344]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80012e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b54      	ldr	r3, [pc, #336]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001302:	2302      	movs	r3, #2
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	484b      	ldr	r0, [pc, #300]	; (800143c <HAL_TIM_MspPostInit+0x184>)
 800130e:	f000 fb99 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001312:	e08a      	b.n	800142a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d11d      	bne.n	800135a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR2_PUL_Pin;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001346:	2301      	movs	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR2_PUL_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f000 fb76 	bl	8001a44 <HAL_GPIO_Init>
}
 8001358:	e067      	b.n	800142a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a38      	ldr	r2, [pc, #224]	; (8001440 <HAL_TIM_MspPostInit+0x188>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d11d      	bne.n	80013a0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 800136a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136e:	6153      	str	r3, [r2, #20]
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR3_PUL_Pin;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800138c:	2302      	movs	r3, #2
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR3_PUL_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f000 fb53 	bl	8001a44 <HAL_GPIO_Init>
}
 800139e:	e044      	b.n	800142a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_TIM_MspPostInit+0x18c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11e      	bne.n	80013e8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_PUL_Pin;
 80013c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80013d4:	230a      	movs	r3, #10
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR4_PUL_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f000 fb2f 	bl	8001a44 <HAL_GPIO_Init>
}
 80013e6:	e020      	b.n	800142a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM8)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <HAL_TIM_MspPostInit+0x190>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11b      	bne.n	800142a <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 80013f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_MspPostInit+0x180>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR5_PUL_Pin;
 800140a:	2340      	movs	r3, #64	; 0x40
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800141a:	2304      	movs	r3, #4
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR5_PUL_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_MspPostInit+0x184>)
 8001426:	f000 fb0d 	bl	8001a44 <HAL_GPIO_Init>
}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40012c00 	.word	0x40012c00
 8001438:	40021000 	.word	0x40021000
 800143c:	48000800 	.word	0x48000800
 8001440:	40000400 	.word	0x40000400
 8001444:	40000800 	.word	0x40000800
 8001448:	40013400 	.word	0x40013400

0800144c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_USART1_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART1_UART_Init+0x58>)
 8001490:	f003 fa7e 	bl	8004990 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f7ff faad 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002c4 	.word	0x200002c4
 80014a8:	40013800 	.word	0x40013800

080014ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <MX_USART2_UART_Init+0x5c>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART2_UART_Init+0x58>)
 80014f0:	f003 fa4e 	bl	8004990 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014fa:	f7ff fa7d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000034c 	.word	0x2000034c
 8001508:	40004400 	.word	0x40004400

0800150c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a36      	ldr	r2, [pc, #216]	; (8001604 <HAL_UART_MspInit+0xf8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d130      	bne.n	8001590 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_UART_MspInit+0xfc>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_UART_MspInit+0xfc>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_UART_MspInit+0xfc>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_UART_MspInit+0xfc>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_UART_MspInit+0xfc>)
 800154c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_UART_MspInit+0xfc>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800156e:	2307      	movs	r3, #7
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4824      	ldr	r0, [pc, #144]	; (800160c <HAL_UART_MspInit+0x100>)
 800157a:	f000 fa63 	bl	8001a44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2025      	movs	r0, #37	; 0x25
 8001584:	f000 f9b1 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001588:	2025      	movs	r0, #37	; 0x25
 800158a:	f000 f9ca 	bl	8001922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800158e:	e035      	b.n	80015fc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_UART_MspInit+0x104>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d130      	bne.n	80015fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_UART_MspInit+0xfc>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_UART_MspInit+0xfc>)
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_UART_MspInit+0xfc>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0xfc>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_UART_MspInit+0xfc>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_UART_MspInit+0xfc>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ca:	230c      	movs	r3, #12
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015da:	2307      	movs	r3, #7
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f000 fa2c 	bl	8001a44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2026      	movs	r0, #38	; 0x26
 80015f2:	f000 f97a 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f6:	2026      	movs	r0, #38	; 0x26
 80015f8:	f000 f993 	bl	8001922 <HAL_NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40013800 	.word	0x40013800
 8001608:	40021000 	.word	0x40021000
 800160c:	48000800 	.word	0x48000800
 8001610:	40004400 	.word	0x40004400

08001614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001618:	f7ff fb6a 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <LoopForever+0x6>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <LoopForever+0xe>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <LoopForever+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f004 fecf 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001646:	f7fe fee3 	bl	8000410 <main>

0800164a <LoopForever>:

LoopForever:
    b LoopForever
 800164a:	e7fe      	b.n	800164a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800164c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001658:	0800770c 	.word	0x0800770c
  ldr r2, =_sbss
 800165c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001660:	20000524 	.word	0x20000524

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x28>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f92b 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff f9be 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40022000 	.word	0x40022000

08001694 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f943 	bl	800193e <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f90b 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	200003d4 	.word	0x200003d4

0800171c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200003d4 	.word	0x200003d4

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001964:	2b02      	cmp	r3, #2
 8001966:	d008      	beq.n	800197a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e020      	b.n	80019bc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 020e 	bic.w	r2, r2, #14
 8001988:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d005      	beq.n	80019ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2204      	movs	r2, #4
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e027      	b.n	8001a3a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 020e 	bic.w	r2, r2, #14
 80019f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
    } 
  }
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e160      	b.n	8001d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8152 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80ac 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd0:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d025      	beq.n	8001c48 <HAL_GPIO_Init+0x204>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x1fc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1f0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4a      	ldr	r2, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1ec>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00c      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c30:	2307      	movs	r3, #7
 8001c32:	e00a      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c34:	2305      	movs	r3, #5
 8001c36:	e008      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5a:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ae97 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48001800 	.word	0x48001800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43d9      	mvns	r1, r3
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	400b      	ands	r3, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fdec 	bl	80009b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f001 b83a 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 816f 	beq.w	8002106 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e28:	4bb5      	ldr	r3, [pc, #724]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4bb2      	ldr	r3, [pc, #712]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d15c      	bne.n	8001efa <HAL_RCC_OscConfig+0x10e>
 8001e40:	4baf      	ldr	r3, [pc, #700]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d155      	bne.n	8001efa <HAL_RCC_OscConfig+0x10e>
 8001e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0x94>
 8001e7a:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e015      	b.n	8001eac <HAL_RCC_OscConfig+0xc0>
 8001e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e9c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001eb4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001eb8:	fa92 f2a2 	rbit	r2, r2
 8001ebc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ec0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8111 	beq.w	8002104 <HAL_RCC_OscConfig+0x318>
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8108 	bne.w	8002104 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f000 bfc6 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12e>
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7b      	ldr	r2, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e036      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x158>
 8001f2a:	4b75      	ldr	r3, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a74      	ldr	r2, [pc, #464]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e021      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x184>
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f70:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d059      	beq.n	800204c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fbc0 	bl	800171c <HAL_GetTick>
 8001f9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa2:	f7ff fbbb 	bl	800171c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d902      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f000 bf67 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 8001fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001fcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0x1fe>
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x22a>
 8001fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002002:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002006:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800201e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800202a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800202e:	fab2 f282 	clz	r2, r2
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f042 0220 	orr.w	r2, r2, #32
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	f002 021f 	and.w	r2, r2, #31
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f202 	lsl.w	r2, r1, r2
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ab      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b6>
 800204a:	e05c      	b.n	8002106 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fb66 	bl	800171c <HAL_GetTick>
 8002050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002056:	f7ff fb61 	bl	800171c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d902      	bls.n	800206c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	f000 bf0d 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 800206c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002070:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002080:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_RCC_OscConfig+0x2b2>
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x2de>
 800209e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80020b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCC_OscConfig+0x314>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80020d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80020de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ab      	bne.n	8002056 <HAL_RCC_OscConfig+0x26a>
 80020fe:	e002      	b.n	8002106 <HAL_RCC_OscConfig+0x31a>
 8002100:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 817f 	beq.w	800241a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800211c:	4ba7      	ldr	r3, [pc, #668]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002128:	4ba4      	ldr	r3, [pc, #656]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d173      	bne.n	800221c <HAL_RCC_OscConfig+0x430>
 8002134:	4ba1      	ldr	r3, [pc, #644]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800213c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002140:	d16c      	bne.n	800221c <HAL_RCC_OscConfig+0x430>
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002154:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <HAL_RCC_OscConfig+0x386>
 800216c:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e013      	b.n	800219a <HAL_RCC_OscConfig+0x3ae>
 8002172:	2302      	movs	r3, #2
 8002174:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800218a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2202      	movs	r2, #2
 800219c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80021a0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80021ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f202 	lsl.w	r2, r1, r2
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3f6>
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d002      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f000 be52 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	21f8      	movs	r1, #248	; 0xf8
 80021f8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002200:	fa91 f1a1 	rbit	r1, r1
 8002204:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002208:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800220c:	fab1 f181 	clz	r1, r1
 8002210:	b2c9      	uxtb	r1, r1
 8002212:	408b      	lsls	r3, r1
 8002214:	4969      	ldr	r1, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e0fe      	b.n	800241a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8088 	beq.w	800233e <HAL_RCC_OscConfig+0x552>
 800222e:	2301      	movs	r3, #1
 8002230:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002240:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	2301      	movs	r3, #1
 8002258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fa5f 	bl	800171c <HAL_GetTick>
 800225e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff fa5a 	bl	800171c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d902      	bls.n	800227a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	f000 be06 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800228c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x4be>
 80022a4:	4b45      	ldr	r3, [pc, #276]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e013      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2202      	movs	r2, #2
 80022d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80022d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80022e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f002 021f 	and.w	r2, r2, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0af      	beq.n	8002264 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	21f8      	movs	r1, #248	; 0xf8
 800231a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002322:	fa91 f1a1 	rbit	r1, r1
 8002326:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800232a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800232e:	fab1 f181 	clz	r1, r1
 8002332:	b2c9      	uxtb	r1, r1
 8002334:	408b      	lsls	r3, r1
 8002336:	4921      	ldr	r1, [pc, #132]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e06d      	b.n	800241a <HAL_RCC_OscConfig+0x62e>
 800233e:	2301      	movs	r3, #1
 8002340:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002350:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800235e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff f9d7 	bl	800171c <HAL_GetTick>
 800236e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff f9d2 	bl	800171c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d902      	bls.n	800238a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	f000 bd7e 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800239c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5d4>
 80023b4:	4b01      	ldr	r3, [pc, #4]	; (80023bc <HAL_RCC_OscConfig+0x5d0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e016      	b.n	80023e8 <HAL_RCC_OscConfig+0x5fc>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	2302      	movs	r3, #2
 80023c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023e4:	4bbf      	ldr	r3, [pc, #764]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2202      	movs	r2, #2
 80023ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80023ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023f2:	fa92 f2a2 	rbit	r2, r2
 80023f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80023fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f042 0220 	orr.w	r2, r2, #32
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f002 021f 	and.w	r2, r2, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f202 	lsl.w	r2, r1, r2
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ac      	bne.n	8002374 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8113 	beq.w	8002656 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07c      	beq.n	800253a <HAL_RCC_OscConfig+0x74e>
 8002440:	2301      	movs	r3, #1
 8002442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4ba2      	ldr	r3, [pc, #648]	; (80026e8 <HAL_RCC_OscConfig+0x8fc>)
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	461a      	mov	r2, r3
 8002466:	2301      	movs	r3, #1
 8002468:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff f957 	bl	800171c <HAL_GetTick>
 800246e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff f952 	bl	800171c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d902      	bls.n	800248a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	f000 bcfe 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b7e      	ldr	r3, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 80024ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024f6:	2102      	movs	r1, #2
 80024f8:	6019      	str	r1, [r3, #0]
 80024fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f1a3 	rbit	r1, r3
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002510:	6019      	str	r1, [r3, #0]
  return result;
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d09d      	beq.n	8002474 <HAL_RCC_OscConfig+0x688>
 8002538:	e08d      	b.n	8002656 <HAL_RCC_OscConfig+0x86a>
 800253a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002566:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x8fc>)
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	461a      	mov	r2, r3
 8002578:	2300      	movs	r3, #0
 800257a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7ff f8ce 	bl	800171c <HAL_GetTick>
 8002580:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7ff f8c9 	bl	800171c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d902      	bls.n	800259c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	f000 bc75 	b.w	8002e86 <HAL_RCC_OscConfig+0x109a>
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025a4:	2202      	movs	r2, #2
 80025a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002606:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 800260a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002610:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002614:	2102      	movs	r1, #2
 8002616:	6019      	str	r1, [r3, #0]
 8002618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f1a3 	rbit	r1, r3
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800262e:	6019      	str	r1, [r3, #0]
  return result;
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d197      	bne.n	8002586 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 81a5 	beq.w	80029b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_RCC_OscConfig+0x8f8>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCC_OscConfig+0x900>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCC_OscConfig+0x900>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x900>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c4:	f7ff f82a 	bl	800171c <HAL_GetTick>
 80026c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e010      	b.n	80026f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff f825 	bl	800171c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d908      	bls.n	80026f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e3d1      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	10908120 	.word	0x10908120
 80026ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCC_OscConfig+0xb3c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0e8      	beq.n	80026ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002700:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x92e>
 800270c:	4b87      	ldr	r3, [pc, #540]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a86      	ldr	r2, [pc, #536]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e035      	b.n	8002786 <HAL_RCC_OscConfig+0x99a>
 800271a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x958>
 800272a:	4b80      	ldr	r3, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a7f      	ldr	r2, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e020      	b.n	8002786 <HAL_RCC_OscConfig+0x99a>
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x982>
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a74      	ldr	r2, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0x99a>
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a6b      	ldr	r2, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8081 	beq.w	800289a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe ffc0 	bl	800171c <HAL_GetTick>
 800279c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe ffbb 	bl	800171c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e365      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 80027ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027e6:	2202      	movs	r2, #2
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002800:	601a      	str	r2, [r3, #0]
  return result;
 8002802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002806:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800280a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0xa3a>
 8002820:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	e013      	b.n	800284e <HAL_RCC_OscConfig+0xa62>
 8002826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002836:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002852:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002856:	2102      	movs	r1, #2
 8002858:	6011      	str	r1, [r2, #0]
 800285a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800285e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	fa92 f1a2 	rbit	r1, r2
 8002868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800286c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002870:	6011      	str	r1, [r2, #0]
  return result;
 8002872:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002876:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d084      	beq.n	80027a2 <HAL_RCC_OscConfig+0x9b6>
 8002898:	e083      	b.n	80029a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe ff3f 	bl	800171c <HAL_GetTick>
 800289e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe ff3a 	bl	800171c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e2e4      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028e8:	2202      	movs	r2, #2
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002902:	601a      	str	r2, [r3, #0]
  return result;
 8002904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002908:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800290c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0xb44>
 8002922:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_RCC_OscConfig+0xb40>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	e017      	b.n	8002958 <HAL_RCC_OscConfig+0xb6c>
 8002928:	40007000 	.word	0x40007000
 800292c:	40021000 	.word	0x40021000
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002938:	2202      	movs	r2, #2
 800293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4bb3      	ldr	r3, [pc, #716]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800295c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002960:	2102      	movs	r1, #2
 8002962:	6011      	str	r1, [r2, #0]
 8002964:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002968:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	fa92 f1a2 	rbit	r1, r2
 8002972:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002976:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800297a:	6011      	str	r1, [r2, #0]
  return result;
 800297c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002980:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d180      	bne.n	80028a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a9d      	ldr	r2, [pc, #628]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 825e 	beq.w	8002e84 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	4b96      	ldr	r3, [pc, #600]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	f000 821f 	beq.w	8002e14 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	f040 8170 	bne.w	8002cc8 <HAL_RCC_OscConfig+0xedc>
 80029e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a0c:	601a      	str	r2, [r3, #0]
  return result;
 8002a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a16:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fe75 	bl	800171c <HAL_GetTick>
 8002a32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	e009      	b.n	8002a4c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fe70 	bl	800171c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e21c      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 8002a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a70:	601a      	str	r2, [r3, #0]
  return result;
 8002a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_OscConfig+0xcaa>
 8002a90:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e027      	b.n	8002ae6 <HAL_RCC_OscConfig+0xcfa>
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f2a3 	rbit	r2, r3
 8002ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002adc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002af2:	6011      	str	r1, [r2, #0]
 8002af4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002af8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	fa92 f1a2 	rbit	r1, r2
 8002b02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b06:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002b0a:	6011      	str	r1, [r2, #0]
  return result;
 8002b0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b10:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	fab2 f282 	clz	r2, r2
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f042 0220 	orr.w	r2, r2, #32
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f002 021f 	and.w	r2, r2, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d182      	bne.n	8002a38 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f023 020f 	bic.w	r2, r3, #15
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	4937      	ldr	r1, [pc, #220]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a19      	ldr	r1, [r3, #32]
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	492d      	ldr	r1, [pc, #180]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
 8002b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b98:	601a      	str	r2, [r3, #0]
  return result;
 8002b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ba2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fe fdaf 	bl	800171c <HAL_GetTick>
 8002bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc2:	e009      	b.n	8002bd8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fdaa 	bl	800171c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e156      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 8002bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bdc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	fa93 f2a3 	rbit	r2, r3
 8002bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bfc:	601a      	str	r2, [r3, #0]
  return result;
 8002bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0xe3c>
 8002c1c:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <HAL_RCC_OscConfig+0xe38>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	e02a      	b.n	8002c78 <HAL_RCC_OscConfig+0xe8c>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c60:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	4b86      	ldr	r3, [pc, #536]	; (8002e90 <HAL_RCC_OscConfig+0x10a4>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c84:	6011      	str	r1, [r2, #0]
 8002c86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	fa92 f1a2 	rbit	r1, r2
 8002c94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c98:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002c9c:	6011      	str	r1, [r2, #0]
  return result;
 8002c9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ca2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f43f af7f 	beq.w	8002bc4 <HAL_RCC_OscConfig+0xdd8>
 8002cc6:	e0dd      	b.n	8002e84 <HAL_RCC_OscConfig+0x1098>
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cda:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cec:	601a      	str	r2, [r3, #0]
  return result;
 8002cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cf6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fd05 	bl	800171c <HAL_GetTick>
 8002d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d16:	e009      	b.n	8002d2c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fd00 	bl	800171c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0ac      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0xf8a>
 8002d70:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_OscConfig+0x10a4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e027      	b.n	8002dc6 <HAL_RCC_OscConfig+0xfda>
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x10a4>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dd8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fa92 f1a2 	rbit	r1, r2
 8002de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002de6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002dea:	6011      	str	r1, [r2, #0]
  return result;
 8002dec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002df0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d182      	bne.n	8002d18 <HAL_RCC_OscConfig+0xf2c>
 8002e12:	e037      	b.n	8002e84 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e02e      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_OscConfig+0x10a4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCC_OscConfig+0x10a4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e3c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d117      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e54:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b09e      	sub	sp, #120	; 0x78
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e162      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	498b      	ldr	r1, [pc, #556]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e14a      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	497f      	ldr	r1, [pc, #508]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80dc 	beq.w	80030c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d13c      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xf6>
 8002f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xa6>
 8002f34:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e00f      	b.n	8002f5a <HAL_RCC_ClockConfig+0xc6>
 8002f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	667b      	str	r3, [r7, #100]	; 0x64
 8002f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f042 0220 	orr.w	r2, r2, #32
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	f002 021f 	and.w	r2, r2, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d17b      	bne.n	800307e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0f3      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d13c      	bne.n	800300c <HAL_RCC_ClockConfig+0x178>
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x128>
 8002fb6:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e00f      	b.n	8002fdc <HAL_RCC_ClockConfig+0x148>
 8002fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd8:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe4:	fa92 f2a2 	rbit	r2, r2
 8002fe8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fec:	fab2 f282 	clz	r2, r2
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d13a      	bne.n	800307e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b2      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
 800300c:	2302      	movs	r3, #2
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1a0>
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	e00d      	b.n	8003050 <HAL_RCC_ClockConfig+0x1bc>
 8003034:	2302      	movs	r3, #2
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
 8003040:	2302      	movs	r3, #2
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2202      	movs	r2, #2
 8003052:	61ba      	str	r2, [r7, #24]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	617a      	str	r2, [r7, #20]
  return result;
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e079      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	491a      	ldr	r1, [pc, #104]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fe fb44 	bl	800171c <HAL_GetTick>
 8003094:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fe fb40 	bl	800171c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e061      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d214      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4906      	ldr	r1, [pc, #24]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_RCC_ClockConfig+0x25c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e040      	b.n	8003172 <HAL_RCC_ClockConfig+0x2de>
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_ClockConfig+0x2e8>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	491a      	ldr	r1, [pc, #104]	; (800317c <HAL_RCC_ClockConfig+0x2e8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_RCC_ClockConfig+0x2e8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4912      	ldr	r1, [pc, #72]	; (800317c <HAL_RCC_ClockConfig+0x2e8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003136:	f000 f829 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800313a:	4601      	mov	r1, r0
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCC_ClockConfig+0x2e8>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003144:	22f0      	movs	r2, #240	; 0xf0
 8003146:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	60fa      	str	r2, [r7, #12]
  return result;
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	40d3      	lsrs	r3, r2
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x2ec>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	fa21 f303 	lsr.w	r3, r1, r3
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <HAL_RCC_ClockConfig+0x2f0>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_ClockConfig+0x2f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fa92 	bl	8001694 <HAL_InitTick>
  
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3778      	adds	r7, #120	; 0x78
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	080074e8 	.word	0x080074e8
 8003184:	20000000 	.word	0x20000000
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x30>
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ba:	e03f      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031be:	623b      	str	r3, [r7, #32]
      break;
 80031c0:	e03f      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	fa92 f2a2 	rbit	r2, r2
 80031d4:	607a      	str	r2, [r7, #4]
  return result;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	40d3      	lsrs	r3, r2
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	220f      	movs	r2, #15
 80031f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	fa92 f2a2 	rbit	r2, r2
 80031f8:	60fa      	str	r2, [r7, #12]
  return result;
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	40d3      	lsrs	r3, r2
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e007      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fbb2 f2f3 	udiv	r2, r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	623b      	str	r3, [r7, #32]
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc8>)
 800323e:	623b      	str	r3, [r7, #32]
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6a3b      	ldr	r3, [r7, #32]
}
 8003244:	4618      	mov	r0, r3
 8003246:	372c      	adds	r7, #44	; 0x2c
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	007a1200 	.word	0x007a1200
 8003258:	08007500 	.word	0x08007500
 800325c:	08007510 	.word	0x08007510

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800327e:	f7ff ffef 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800328c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003290:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	fa92 f2a2 	rbit	r2, r2
 8003298:	603a      	str	r2, [r7, #0]
  return result;
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	40d3      	lsrs	r3, r2
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	080074f8 	.word	0x080074f8

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032c2:	f7ff ffcd 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032c6:	4601      	mov	r1, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80032d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	fa92 f2a2 	rbit	r2, r2
 80032dc:	603a      	str	r2, [r7, #0]
  return result;
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	40d3      	lsrs	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	080074f8 	.word	0x080074f8

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b092      	sub	sp, #72	; 0x48
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80d4 	beq.w	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003324:	4b4e      	ldr	r3, [pc, #312]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10e      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b45      	ldr	r3, [pc, #276]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a41      	ldr	r2, [pc, #260]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe f9d9 	bl	800171c <HAL_GetTick>
 800336a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe f9d5 	bl	800171c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1d6      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8084 	beq.w	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d07c      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	2301      	movs	r3, #1
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d04b      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe f985 	bl	800171c <HAL_GetTick>
 8003412:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fe f981 	bl	800171c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e180      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800342c:	2302      	movs	r3, #2
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	2302      	movs	r3, #2
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	61fb      	str	r3, [r7, #28]
  return result;
 8003444:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d108      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800345a:	4b01      	ldr	r3, [pc, #4]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	e00d      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	10908100 	.word	0x10908100
 800346c:	2302      	movs	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	4b9a      	ldr	r3, [pc, #616]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2202      	movs	r2, #2
 800347e:	613a      	str	r2, [r7, #16]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	60fa      	str	r2, [r7, #12]
  return result;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f002 021f 	and.w	r2, r2, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0b7      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034a6:	4b8f      	ldr	r3, [pc, #572]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	498c      	ldr	r1, [pc, #560]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4a87      	ldr	r2, [pc, #540]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d8:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f023 0203 	bic.w	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	497f      	ldr	r1, [pc, #508]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f6:	4b7b      	ldr	r3, [pc, #492]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4978      	ldr	r1, [pc, #480]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4970      	ldr	r1, [pc, #448]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003532:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f023 0210 	bic.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4969      	ldr	r1, [pc, #420]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003550:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	4961      	ldr	r1, [pc, #388]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f023 0220 	bic.w	r2, r3, #32
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	495a      	ldr	r1, [pc, #360]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800358c:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	4952      	ldr	r1, [pc, #328]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	494b      	ldr	r1, [pc, #300]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4943      	ldr	r1, [pc, #268]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	493c      	ldr	r1, [pc, #240]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	492d      	ldr	r1, [pc, #180]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	4925      	ldr	r1, [pc, #148]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	491e      	ldr	r1, [pc, #120]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	4916      	ldr	r1, [pc, #88]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	490f      	ldr	r1, [pc, #60]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80036d6:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	4913      	ldr	r1, [pc, #76]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003708:	490b      	ldr	r1, [pc, #44]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	4904      	ldr	r1, [pc, #16]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003728:	4313      	orrs	r3, r2
 800372a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3748      	adds	r7, #72	; 0x48
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e04f      	b.n	80037f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_TIM_Base_Start_IT+0xc4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01d      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d018      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_TIM_Base_Start_IT+0xc8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <HAL_TIM_Base_Start_IT+0xcc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIM_Base_Start_IT+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIM_Base_Start_IT+0xd4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIM_Base_Start_IT+0x76>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d115      	bne.n	80037de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_TIM_Base_Start_IT+0xdc>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d015      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d011      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	e008      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40013400 	.word	0x40013400
 8003810:	40014000 	.word	0x40014000
 8003814:	40015000 	.word	0x40015000
 8003818:	00010007 	.word	0x00010007

0800381c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e049      	b.n	80038c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fc94 	bl	8001170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fb9e 	bl	8003f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_TIM_PWM_Start+0x24>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e03c      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d109      	bne.n	800390a <HAL_TIM_PWM_Start+0x3e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e02f      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d109      	bne.n	8003924 <HAL_TIM_PWM_Start+0x58>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e022      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d109      	bne.n	800393e <HAL_TIM_PWM_Start+0x72>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e015      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d109      	bne.n	8003958 <HAL_TIM_PWM_Start+0x8c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e008      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0a1      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start+0xb6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	e023      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start+0xc6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	e01b      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0xd6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	e013      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0xe6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0xf6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	e003      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fe86 	bl	80046e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <HAL_TIM_PWM_Start+0x1f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_PWM_Start+0x148>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_TIM_PWM_Start+0x1f8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_PWM_Start+0x148>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a35      	ldr	r2, [pc, #212]	; (8003ac8 <HAL_TIM_PWM_Start+0x1fc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_PWM_Start+0x148>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <HAL_TIM_PWM_Start+0x200>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_PWM_Start+0x148>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <HAL_TIM_PWM_Start+0x204>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_PWM_Start+0x148>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <HAL_TIM_PWM_Start+0x208>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_PWM_Start+0x14c>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_PWM_Start+0x14e>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_TIM_PWM_Start+0x1f4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01d      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d018      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_TIM_PWM_Start+0x20c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_TIM_PWM_Start+0x210>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1a8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_TIM_PWM_Start+0x208>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d115      	bne.n	8003aa0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_TIM_PWM_Start+0x214>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d015      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x1e6>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d011      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e008      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800
 8003ad4:	40015000 	.word	0x40015000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	00010007 	.word	0x00010007

08003ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0202 	mvn.w	r2, #2
 8003b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa1a 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa0c 	bl	8003f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fa1d 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0204 	mvn.w	r2, #4
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9f0 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9e2 	bl	8003f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f9f3 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d122      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0208 	mvn.w	r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9c6 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9b8 	bl	8003f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9c9 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0210 	mvn.w	r2, #16
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2208      	movs	r2, #8
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f99c 	bl	8003f60 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f98e 	bl	8003f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f99f 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0201 	mvn.w	r2, #1
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fbbe 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fe6a 	bl	8004968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fe5d 	bl	800497c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f94d 	bl	8003f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0220 	mvn.w	r2, #32
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fe1d 	bl	8004954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0ff      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b14      	cmp	r3, #20
 8003d4e:	f200 80f0 	bhi.w	8003f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003f33 	.word	0x08003f33
 8003d60:	08003f33 	.word	0x08003f33
 8003d64:	08003f33 	.word	0x08003f33
 8003d68:	08003ded 	.word	0x08003ded
 8003d6c:	08003f33 	.word	0x08003f33
 8003d70:	08003f33 	.word	0x08003f33
 8003d74:	08003f33 	.word	0x08003f33
 8003d78:	08003e2f 	.word	0x08003e2f
 8003d7c:	08003f33 	.word	0x08003f33
 8003d80:	08003f33 	.word	0x08003f33
 8003d84:	08003f33 	.word	0x08003f33
 8003d88:	08003e6f 	.word	0x08003e6f
 8003d8c:	08003f33 	.word	0x08003f33
 8003d90:	08003f33 	.word	0x08003f33
 8003d94:	08003f33 	.word	0x08003f33
 8003d98:	08003eb1 	.word	0x08003eb1
 8003d9c:	08003f33 	.word	0x08003f33
 8003da0:	08003f33 	.word	0x08003f33
 8003da4:	08003f33 	.word	0x08003f33
 8003da8:	08003ef1 	.word	0x08003ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f990 	bl	80040d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0208 	orr.w	r2, r2, #8
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0204 	bic.w	r2, r2, #4
 8003dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	619a      	str	r2, [r3, #24]
      break;
 8003dea:	e0a5      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fa0a 	bl	800420c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	619a      	str	r2, [r3, #24]
      break;
 8003e2c:	e084      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fa7d 	bl	8004334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0208 	orr.w	r2, r2, #8
 8003e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0204 	bic.w	r2, r2, #4
 8003e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69d9      	ldr	r1, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]
      break;
 8003e6c:	e064      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 faef 	bl	8004458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	61da      	str	r2, [r3, #28]
      break;
 8003eae:	e043      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb3e 	bl	8004538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eee:	e023      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fb88 	bl	800460c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f30:	e002      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
      break;
 8003f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop

08003f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a42      	ldr	r2, [pc, #264]	; (80040b8 <TIM_Base_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d00f      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3f      	ldr	r2, [pc, #252]	; (80040bc <TIM_Base_SetConfig+0x120>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3e      	ldr	r2, [pc, #248]	; (80040c0 <TIM_Base_SetConfig+0x124>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3d      	ldr	r2, [pc, #244]	; (80040c4 <TIM_Base_SetConfig+0x128>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <TIM_Base_SetConfig+0x12c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <TIM_Base_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d01b      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <TIM_Base_SetConfig+0x120>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d017      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <TIM_Base_SetConfig+0x124>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <TIM_Base_SetConfig+0x128>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x130>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x134>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x138>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <TIM_Base_SetConfig+0x11c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <TIM_Base_SetConfig+0x100>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <TIM_Base_SetConfig+0x128>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00f      	beq.n	800409c <TIM_Base_SetConfig+0x100>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <TIM_Base_SetConfig+0x130>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0x100>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <TIM_Base_SetConfig+0x134>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0x100>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <TIM_Base_SetConfig+0x138>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x100>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <TIM_Base_SetConfig+0x12c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40013400 	.word	0x40013400
 80040c8:	40015000 	.word	0x40015000
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800

080040d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 0302 	bic.w	r3, r3, #2
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <TIM_OC1_SetConfig+0x11c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <TIM_OC1_SetConfig+0x88>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_OC1_SetConfig+0x120>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <TIM_OC1_SetConfig+0x88>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <TIM_OC1_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_OC1_SetConfig+0x88>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <TIM_OC1_SetConfig+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_OC1_SetConfig+0x88>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_OC1_SetConfig+0x12c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC1_SetConfig+0x88>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_OC1_SetConfig+0x130>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <TIM_OC1_SetConfig+0x11c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <TIM_OC1_SetConfig+0xd2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <TIM_OC1_SetConfig+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00f      	beq.n	80041aa <TIM_OC1_SetConfig+0xd2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <TIM_OC1_SetConfig+0x124>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <TIM_OC1_SetConfig+0xd2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <TIM_OC1_SetConfig+0x128>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <TIM_OC1_SetConfig+0xd2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <TIM_OC1_SetConfig+0x12c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_OC1_SetConfig+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <TIM_OC1_SetConfig+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d111      	bne.n	80041ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40013400 	.word	0x40013400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	40015000 	.word	0x40015000

0800420c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0210 	bic.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_OC2_SetConfig+0x110>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_OC2_SetConfig+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_OC2_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC2_SetConfig+0x74>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_OC2_SetConfig+0x118>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10d      	bne.n	800429c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <TIM_OC2_SetConfig+0x110>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_OC2_SetConfig+0xc0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <TIM_OC2_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_OC2_SetConfig+0xc0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <TIM_OC2_SetConfig+0x11c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_OC2_SetConfig+0xc0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <TIM_OC2_SetConfig+0x120>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_OC2_SetConfig+0xc0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_OC2_SetConfig+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC2_SetConfig+0xc0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <TIM_OC2_SetConfig+0x118>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d113      	bne.n	80042f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40015000 	.word	0x40015000
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <TIM_OC3_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_OC3_SetConfig+0x72>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <TIM_OC3_SetConfig+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_OC3_SetConfig+0x72>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a29      	ldr	r2, [pc, #164]	; (8004448 <TIM_OC3_SetConfig+0x114>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10d      	bne.n	80043c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <TIM_OC3_SetConfig+0x10c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_OC3_SetConfig+0xbe>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <TIM_OC3_SetConfig+0x110>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_OC3_SetConfig+0xbe>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <TIM_OC3_SetConfig+0x118>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_OC3_SetConfig+0xbe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <TIM_OC3_SetConfig+0x11c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_OC3_SetConfig+0xbe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <TIM_OC3_SetConfig+0x120>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC3_SetConfig+0xbe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <TIM_OC3_SetConfig+0x114>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d113      	bne.n	800441a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40015000 	.word	0x40015000
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800

08004458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	031b      	lsls	r3, r3, #12
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <TIM_OC4_SetConfig+0xc8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <TIM_OC4_SetConfig+0x8c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <TIM_OC4_SetConfig+0xcc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00f      	beq.n	80044e4 <TIM_OC4_SetConfig+0x8c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a18      	ldr	r2, [pc, #96]	; (8004528 <TIM_OC4_SetConfig+0xd0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_OC4_SetConfig+0x8c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a17      	ldr	r2, [pc, #92]	; (800452c <TIM_OC4_SetConfig+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_OC4_SetConfig+0x8c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <TIM_OC4_SetConfig+0xd8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC4_SetConfig+0x8c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <TIM_OC4_SetConfig+0xdc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d109      	bne.n	80044f8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	019b      	lsls	r3, r3, #6
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40013400 	.word	0x40013400
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800
 8004534:	40015000 	.word	0x40015000

08004538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800457c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <TIM_OC5_SetConfig+0xbc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <TIM_OC5_SetConfig+0x82>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <TIM_OC5_SetConfig+0xc0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_OC5_SetConfig+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a17      	ldr	r2, [pc, #92]	; (80045fc <TIM_OC5_SetConfig+0xc4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_OC5_SetConfig+0x82>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <TIM_OC5_SetConfig+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC5_SetConfig+0x82>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <TIM_OC5_SetConfig+0xcc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC5_SetConfig+0x82>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC5_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d109      	bne.n	80045ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800
 8004608:	40015000 	.word	0x40015000

0800460c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	051b      	lsls	r3, r3, #20
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <TIM_OC6_SetConfig+0xc0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <TIM_OC6_SetConfig+0x84>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <TIM_OC6_SetConfig+0xc4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00f      	beq.n	8004690 <TIM_OC6_SetConfig+0x84>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <TIM_OC6_SetConfig+0xc8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_OC6_SetConfig+0x84>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <TIM_OC6_SetConfig+0xcc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x84>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <TIM_OC6_SetConfig+0xd0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x84>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <TIM_OC6_SetConfig+0xd4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	40015000 	.word	0x40015000

080046e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	43db      	mvns	r3, r3
 8004706:	401a      	ands	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e06d      	b.n	8004824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a30      	ldr	r2, [pc, #192]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800478c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d018      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40015000 	.word	0x40015000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40014000 	.word	0x40014000

08004848 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004860:	2302      	movs	r3, #2
 8004862:	e06a      	b.n	800493a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a17      	ldr	r2, [pc, #92]	; (800494c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a16      	ldr	r2, [pc, #88]	; (8004950 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d115      	bne.n	8004928 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	051b      	lsls	r3, r3, #20
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40013400 	.word	0x40013400
 8004950:	40015000 	.word	0x40015000

08004954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e040      	b.n	8004a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fdaa 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fc00 	bl	80051d4 <UART_SetConfig>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e022      	b.n	8004a24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fdc8 	bl	800557c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fe4f 	bl	80056c0 <UART_CheckIdleState>
 8004a22:	4603      	mov	r3, r0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d178      	bne.n	8004b36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Transmit+0x24>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e071      	b.n	8004b38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2221      	movs	r2, #33	; 0x21
 8004a60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a62:	f7fc fe5b 	bl	800171c <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d108      	bne.n	8004a94 <HAL_UART_Transmit+0x68>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e003      	b.n	8004a9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a9c:	e030      	b.n	8004b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 feb1 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e03c      	b.n	8004b38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e008      	b.n	8004aee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	3301      	adds	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1c8      	bne.n	8004a9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fe7a 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e005      	b.n	8004b38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d132      	bne.n	8004bbe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Receive_IT+0x24>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e02b      	b.n	8004bc0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d018      	beq.n	8004bae <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e6      	bne.n	8004b7c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fe93 	bl	80058e0 <UART_Start_Receive_IT>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	e000      	b.n	8004bc0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b0ba      	sub	sp, #232	; 0xe8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004bf2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00f      	beq.n	8004c30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 82ab 	beq.w	800517c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
      }
      return;
 8004c2e:	e2a5      	b.n	800517c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8117 	beq.w	8004e68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c4a:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <HAL_UART_IRQHandler+0x298>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 810a 	beq.w	8004e68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d011      	beq.n	8004c84 <HAL_UART_IRQHandler+0xbc>
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d011      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xec>
 8004c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d011      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x11c>
 8004cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	f043 0202 	orr.w	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d16:	f043 0208 	orr.w	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_UART_IRQHandler+0x18a>
 8004d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8211 	beq.w	8005180 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d005      	beq.n	8004daa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04f      	beq.n	8004e4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fe5e 	bl	8005a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d141      	bne.n	8004e42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1d9      	bne.n	8004dbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e16:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <HAL_UART_IRQHandler+0x29c>)
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc fdd2 	bl	80019c8 <HAL_DMA_Abort_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e34:	4610      	mov	r0, r2
 8004e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	e00f      	b.n	8004e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9b4 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	e00b      	b.n	8004e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9b0 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e007      	b.n	8004e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9ac 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004e58:	e192      	b.n	8005180 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5a:	bf00      	nop
    return;
 8004e5c:	e190      	b.n	8005180 <HAL_UART_IRQHandler+0x5b8>
 8004e5e:	bf00      	nop
 8004e60:	04000120 	.word	0x04000120
 8004e64:	08005b35 	.word	0x08005b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	f040 814b 	bne.w	8005108 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8144 	beq.w	8005108 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 813d 	beq.w	8005108 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2210      	movs	r2, #16
 8004e94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	f040 80b5 	bne.w	8005010 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8164 	beq.w	8005184 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	f080 815c 	bcs.w	8005184 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f000 8086 	beq.w	8004fee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1da      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e1      	bne.n	8004f2c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e3      	bne.n	8004f68 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	f023 0310 	bic.w	r3, r3, #16
 8004fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fd2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e4      	bne.n	8004fae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fc fcb4 	bl	8001956 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005000:	b29b      	uxth	r3, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8d7 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800500e:	e0b9      	b.n	8005184 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800501c:	b29b      	uxth	r3, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80ab 	beq.w	8005188 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a6 	beq.w	8005188 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e4      	bne.n	800503c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	623b      	str	r3, [r7, #32]
   return(result);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005096:	633a      	str	r2, [r7, #48]	; 0x30
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0310 	bic.w	r3, r3, #16
 80050d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	617b      	str	r3, [r7, #20]
   return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e4      	bne.n	80050be <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f85b 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005106:	e03f      	b.n	8005188 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00e      	beq.n	8005132 <HAL_UART_IRQHandler+0x56a>
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 feea 	bl	8005f04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005130:	e02d      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800513e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01c      	beq.n	800518c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
    }
    return;
 800515a:	e017      	b.n	800518c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <HAL_UART_IRQHandler+0x5c6>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fcf3 	bl	8005b60 <UART_EndTransmit_IT>
    return;
 800517a:	e008      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
      return;
 800517c:	bf00      	nop
 800517e:	e006      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005180:	bf00      	nop
 8005182:	e004      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005184:	bf00      	nop
 8005186:	e002      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005188:	bf00      	nop
 800518a:	e000      	b.n	800518e <HAL_UART_IRQHandler+0x5c6>
    return;
 800518c:	bf00      	nop
  }

}
 800518e:	37e8      	adds	r7, #232	; 0xe8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b92      	ldr	r3, [pc, #584]	; (8005448 <UART_SetConfig+0x274>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	430b      	orrs	r3, r1
 800520a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a80      	ldr	r2, [pc, #512]	; (800544c <UART_SetConfig+0x278>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d120      	bne.n	8005292 <UART_SetConfig+0xbe>
 8005250:	4b7f      	ldr	r3, [pc, #508]	; (8005450 <UART_SetConfig+0x27c>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d817      	bhi.n	800528c <UART_SetConfig+0xb8>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x90>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005275 	.word	0x08005275
 8005268:	08005281 	.word	0x08005281
 800526c:	08005287 	.word	0x08005287
 8005270:	0800527b 	.word	0x0800527b
 8005274:	2301      	movs	r3, #1
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e0b5      	b.n	80053e6 <UART_SetConfig+0x212>
 800527a:	2302      	movs	r3, #2
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e0b2      	b.n	80053e6 <UART_SetConfig+0x212>
 8005280:	2304      	movs	r3, #4
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e0af      	b.n	80053e6 <UART_SetConfig+0x212>
 8005286:	2308      	movs	r3, #8
 8005288:	77fb      	strb	r3, [r7, #31]
 800528a:	e0ac      	b.n	80053e6 <UART_SetConfig+0x212>
 800528c:	2310      	movs	r3, #16
 800528e:	77fb      	strb	r3, [r7, #31]
 8005290:	e0a9      	b.n	80053e6 <UART_SetConfig+0x212>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a6f      	ldr	r2, [pc, #444]	; (8005454 <UART_SetConfig+0x280>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d124      	bne.n	80052e6 <UART_SetConfig+0x112>
 800529c:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <UART_SetConfig+0x27c>)
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052a8:	d011      	beq.n	80052ce <UART_SetConfig+0xfa>
 80052aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052ae:	d817      	bhi.n	80052e0 <UART_SetConfig+0x10c>
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b4:	d011      	beq.n	80052da <UART_SetConfig+0x106>
 80052b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ba:	d811      	bhi.n	80052e0 <UART_SetConfig+0x10c>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <UART_SetConfig+0xf4>
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d006      	beq.n	80052d4 <UART_SetConfig+0x100>
 80052c6:	e00b      	b.n	80052e0 <UART_SetConfig+0x10c>
 80052c8:	2300      	movs	r3, #0
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e08b      	b.n	80053e6 <UART_SetConfig+0x212>
 80052ce:	2302      	movs	r3, #2
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e088      	b.n	80053e6 <UART_SetConfig+0x212>
 80052d4:	2304      	movs	r3, #4
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e085      	b.n	80053e6 <UART_SetConfig+0x212>
 80052da:	2308      	movs	r3, #8
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e082      	b.n	80053e6 <UART_SetConfig+0x212>
 80052e0:	2310      	movs	r3, #16
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e07f      	b.n	80053e6 <UART_SetConfig+0x212>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a5b      	ldr	r2, [pc, #364]	; (8005458 <UART_SetConfig+0x284>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d124      	bne.n	800533a <UART_SetConfig+0x166>
 80052f0:	4b57      	ldr	r3, [pc, #348]	; (8005450 <UART_SetConfig+0x27c>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80052f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052fc:	d011      	beq.n	8005322 <UART_SetConfig+0x14e>
 80052fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005302:	d817      	bhi.n	8005334 <UART_SetConfig+0x160>
 8005304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005308:	d011      	beq.n	800532e <UART_SetConfig+0x15a>
 800530a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800530e:	d811      	bhi.n	8005334 <UART_SetConfig+0x160>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <UART_SetConfig+0x148>
 8005314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005318:	d006      	beq.n	8005328 <UART_SetConfig+0x154>
 800531a:	e00b      	b.n	8005334 <UART_SetConfig+0x160>
 800531c:	2300      	movs	r3, #0
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e061      	b.n	80053e6 <UART_SetConfig+0x212>
 8005322:	2302      	movs	r3, #2
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e05e      	b.n	80053e6 <UART_SetConfig+0x212>
 8005328:	2304      	movs	r3, #4
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e05b      	b.n	80053e6 <UART_SetConfig+0x212>
 800532e:	2308      	movs	r3, #8
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e058      	b.n	80053e6 <UART_SetConfig+0x212>
 8005334:	2310      	movs	r3, #16
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e055      	b.n	80053e6 <UART_SetConfig+0x212>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a47      	ldr	r2, [pc, #284]	; (800545c <UART_SetConfig+0x288>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d124      	bne.n	800538e <UART_SetConfig+0x1ba>
 8005344:	4b42      	ldr	r3, [pc, #264]	; (8005450 <UART_SetConfig+0x27c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800534c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005350:	d011      	beq.n	8005376 <UART_SetConfig+0x1a2>
 8005352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005356:	d817      	bhi.n	8005388 <UART_SetConfig+0x1b4>
 8005358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800535c:	d011      	beq.n	8005382 <UART_SetConfig+0x1ae>
 800535e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005362:	d811      	bhi.n	8005388 <UART_SetConfig+0x1b4>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <UART_SetConfig+0x19c>
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536c:	d006      	beq.n	800537c <UART_SetConfig+0x1a8>
 800536e:	e00b      	b.n	8005388 <UART_SetConfig+0x1b4>
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e037      	b.n	80053e6 <UART_SetConfig+0x212>
 8005376:	2302      	movs	r3, #2
 8005378:	77fb      	strb	r3, [r7, #31]
 800537a:	e034      	b.n	80053e6 <UART_SetConfig+0x212>
 800537c:	2304      	movs	r3, #4
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e031      	b.n	80053e6 <UART_SetConfig+0x212>
 8005382:	2308      	movs	r3, #8
 8005384:	77fb      	strb	r3, [r7, #31]
 8005386:	e02e      	b.n	80053e6 <UART_SetConfig+0x212>
 8005388:	2310      	movs	r3, #16
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e02b      	b.n	80053e6 <UART_SetConfig+0x212>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a33      	ldr	r2, [pc, #204]	; (8005460 <UART_SetConfig+0x28c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d124      	bne.n	80053e2 <UART_SetConfig+0x20e>
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <UART_SetConfig+0x27c>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80053a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053a4:	d011      	beq.n	80053ca <UART_SetConfig+0x1f6>
 80053a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053aa:	d817      	bhi.n	80053dc <UART_SetConfig+0x208>
 80053ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b0:	d011      	beq.n	80053d6 <UART_SetConfig+0x202>
 80053b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b6:	d811      	bhi.n	80053dc <UART_SetConfig+0x208>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <UART_SetConfig+0x1f0>
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c0:	d006      	beq.n	80053d0 <UART_SetConfig+0x1fc>
 80053c2:	e00b      	b.n	80053dc <UART_SetConfig+0x208>
 80053c4:	2300      	movs	r3, #0
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x212>
 80053ca:	2302      	movs	r3, #2
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e00a      	b.n	80053e6 <UART_SetConfig+0x212>
 80053d0:	2304      	movs	r3, #4
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e007      	b.n	80053e6 <UART_SetConfig+0x212>
 80053d6:	2308      	movs	r3, #8
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e004      	b.n	80053e6 <UART_SetConfig+0x212>
 80053dc:	2310      	movs	r3, #16
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e001      	b.n	80053e6 <UART_SetConfig+0x212>
 80053e2:	2310      	movs	r3, #16
 80053e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d16b      	bne.n	80054c8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d838      	bhi.n	8005468 <UART_SetConfig+0x294>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x228>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005469 	.word	0x08005469
 800540c:	08005437 	.word	0x08005437
 8005410:	08005469 	.word	0x08005469
 8005414:	08005469 	.word	0x08005469
 8005418:	08005469 	.word	0x08005469
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fd ff2a 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8005424:	61b8      	str	r0, [r7, #24]
        break;
 8005426:	e024      	b.n	8005472 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fd ff48 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 800542c:	61b8      	str	r0, [r7, #24]
        break;
 800542e:	e020      	b.n	8005472 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <UART_SetConfig+0x290>)
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e01d      	b.n	8005472 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fd fea9 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800543a:	61b8      	str	r0, [r7, #24]
        break;
 800543c:	e019      	b.n	8005472 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	61bb      	str	r3, [r7, #24]
        break;
 8005444:	e015      	b.n	8005472 <UART_SetConfig+0x29e>
 8005446:	bf00      	nop
 8005448:	efff69f3 	.word	0xefff69f3
 800544c:	40013800 	.word	0x40013800
 8005450:	40021000 	.word	0x40021000
 8005454:	40004400 	.word	0x40004400
 8005458:	40004800 	.word	0x40004800
 800545c:	40004c00 	.word	0x40004c00
 8005460:	40005000 	.word	0x40005000
 8005464:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77bb      	strb	r3, [r7, #30]
        break;
 8005470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d073      	beq.n	8005560 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	005a      	lsls	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	441a      	add	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d916      	bls.n	80054c2 <UART_SetConfig+0x2ee>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549a:	d212      	bcs.n	80054c2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f023 030f 	bic.w	r3, r3, #15
 80054a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	89fa      	ldrh	r2, [r7, #14]
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	e04e      	b.n	8005560 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	77bb      	strb	r3, [r7, #30]
 80054c6:	e04b      	b.n	8005560 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d827      	bhi.n	800551e <UART_SetConfig+0x34a>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0x300>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005509 	.word	0x08005509
 80054e0:	0800551f 	.word	0x0800551f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	0800551f 	.word	0x0800551f
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	08005517 	.word	0x08005517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fd febe 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80054fc:	61b8      	str	r0, [r7, #24]
        break;
 80054fe:	e013      	b.n	8005528 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fd fedc 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8005504:	61b8      	str	r0, [r7, #24]
        break;
 8005506:	e00f      	b.n	8005528 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <UART_SetConfig+0x3a4>)
 800550a:	61bb      	str	r3, [r7, #24]
        break;
 800550c:	e00c      	b.n	8005528 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550e:	f7fd fe3d 	bl	800318c <HAL_RCC_GetSysClockFreq>
 8005512:	61b8      	str	r0, [r7, #24]
        break;
 8005514:	e008      	b.n	8005528 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551a:	61bb      	str	r3, [r7, #24]
        break;
 800551c:	e004      	b.n	8005528 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	77bb      	strb	r3, [r7, #30]
        break;
 8005526:	bf00      	nop
    }

    if (pclk != 0U)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085a      	lsrs	r2, r3, #1
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	441a      	add	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d909      	bls.n	800555c <UART_SetConfig+0x388>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d205      	bcs.n	800555c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e001      	b.n	8005560 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800556c:	7fbb      	ldrb	r3, [r7, #30]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	007a1200 	.word	0x007a1200

0800557c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01a      	beq.n	8005692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567a:	d10a      	bne.n	8005692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b098      	sub	sp, #96	; 0x60
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d0:	f7fc f824 	bl	800171c <HAL_GetTick>
 80056d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d12e      	bne.n	8005742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ec:	2200      	movs	r2, #0
 80056ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f88c 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d021      	beq.n	8005742 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	647b      	str	r3, [r7, #68]	; 0x44
 800571e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e062      	b.n	8005808 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d149      	bne.n	80057e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f856 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03c      	beq.n	80057e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	623b      	str	r3, [r7, #32]
   return(result);
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
 800578a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800578e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057bc:	61fa      	str	r2, [r7, #28]
 80057be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e011      	b.n	8005808 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3758      	adds	r7, #88	; 0x58
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	e049      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d045      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fb ff77 	bl	800171c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <UART_WaitOnFlagUntilTimeout+0x30>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e048      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d031      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d110      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2208      	movs	r2, #8
 8005866:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f8ff 	bl	8005a6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2208      	movs	r2, #8
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e029      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005890:	d111      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800589a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f8e5 	bl	8005a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e00f      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d0a6      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b097      	sub	sp, #92	; 0x5c
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	d10e      	bne.n	8005932 <UART_Start_Receive_IT+0x52>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <UART_Start_Receive_IT+0x48>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005926:	e02d      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005930:	e028      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <UART_Start_Receive_IT+0x76>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <UART_Start_Receive_IT+0x6c>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800594a:	e01b      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	227f      	movs	r2, #127	; 0x7f
 8005950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005954:	e016      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800595e:	d10d      	bne.n	800597c <UART_Start_Receive_IT+0x9c>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <UART_Start_Receive_IT+0x92>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	227f      	movs	r2, #127	; 0x7f
 800596c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005970:	e008      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	223f      	movs	r2, #63	; 0x3f
 8005976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800597a:	e003      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2222      	movs	r2, #34	; 0x22
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d107      	bne.n	80059e2 <UART_Start_Receive_IT+0x102>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <UART_Start_Receive_IT+0x184>)
 80059de:	669a      	str	r2, [r3, #104]	; 0x68
 80059e0:	e002      	b.n	80059e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <UART_Start_Receive_IT+0x188>)
 80059e6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d019      	beq.n	8005a24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e6      	bne.n	80059f0 <UART_Start_Receive_IT+0x110>
 8005a22:	e018      	b.n	8005a56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f043 0320 	orr.w	r3, r3, #32
 8005a38:	653b      	str	r3, [r7, #80]	; 0x50
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e6      	bne.n	8005a24 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	375c      	adds	r7, #92	; 0x5c
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	08005d5d 	.word	0x08005d5d
 8005a68:	08005bb5 	.word	0x08005bb5

08005a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b095      	sub	sp, #84	; 0x54
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a92:	643b      	str	r3, [r7, #64]	; 0x40
 8005a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e6      	bne.n	8005a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d118      	bne.n	8005b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0310 	bic.w	r3, r3, #16
 8005af6:	647b      	str	r3, [r7, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b28:	bf00      	nop
 8005b2a:	3754      	adds	r7, #84	; 0x54
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fb28 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	613b      	str	r3, [r7, #16]
   return(result);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e6      	bne.n	8005b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff faf4 	bl	8005194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bac:	bf00      	nop
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b09c      	sub	sp, #112	; 0x70
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bcc:	2b22      	cmp	r3, #34	; 0x22
 8005bce:	f040 80b9 	bne.w	8005d44 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005be0:	b2d9      	uxtb	r1, r3
 8005be2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	400a      	ands	r2, r1
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 809c 	bne.w	8005d54 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e6      	bne.n	8005c1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	667b      	str	r3, [r7, #100]	; 0x64
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e5      	bne.n	8005c4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d018      	beq.n	8005cd6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e6      	bne.n	8005ca4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d12e      	bne.n	8005d3c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0310 	bic.w	r3, r3, #16
 8005cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e6      	bne.n	8005ce4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d103      	bne.n	8005d2c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fa41 	bl	80051bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d3a:	e00b      	b.n	8005d54 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fa fc91 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8005d42:	e007      	b.n	8005d54 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0208 	orr.w	r2, r2, #8
 8005d52:	619a      	str	r2, [r3, #24]
}
 8005d54:	bf00      	nop
 8005d56:	3770      	adds	r7, #112	; 0x70
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b09c      	sub	sp, #112	; 0x70
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d74:	2b22      	cmp	r3, #34	; 0x22
 8005d76:	f040 80b9 	bne.w	8005eec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d88:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005d8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d92:	4013      	ands	r3, r2
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 809c 	bne.w	8005efc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de2:	657b      	str	r3, [r7, #84]	; 0x54
 8005de4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e6      	bne.n	8005dc4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e16:	643a      	str	r2, [r7, #64]	; 0x40
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d018      	beq.n	8005e7e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e6      	bne.n	8005e4c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d12e      	bne.n	8005ee4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f023 0310 	bic.w	r3, r3, #16
 8005ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6979      	ldr	r1, [r7, #20]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e6      	bne.n	8005e8c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d103      	bne.n	8005ed4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff f96d 	bl	80051bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ee2:	e00b      	b.n	8005efc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fa fbbd 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8005eea:	e007      	b.n	8005efc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]
}
 8005efc:	bf00      	nop
 8005efe:	3770      	adds	r7, #112	; 0x70
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <atoi>:
 8005f18:	220a      	movs	r2, #10
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f000 b882 	b.w	8006024 <strtol>

08005f20 <_strtol_l.constprop.0>:
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f26:	d001      	beq.n	8005f2c <_strtol_l.constprop.0+0xc>
 8005f28:	2b24      	cmp	r3, #36	; 0x24
 8005f2a:	d906      	bls.n	8005f3a <_strtol_l.constprop.0+0x1a>
 8005f2c:	f000 fa54 	bl	80063d8 <__errno>
 8005f30:	2316      	movs	r3, #22
 8005f32:	6003      	str	r3, [r0, #0]
 8005f34:	2000      	movs	r0, #0
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006020 <_strtol_l.constprop.0+0x100>
 8005f3e:	460d      	mov	r5, r1
 8005f40:	462e      	mov	r6, r5
 8005f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f46:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005f4a:	f017 0708 	ands.w	r7, r7, #8
 8005f4e:	d1f7      	bne.n	8005f40 <_strtol_l.constprop.0+0x20>
 8005f50:	2c2d      	cmp	r4, #45	; 0x2d
 8005f52:	d132      	bne.n	8005fba <_strtol_l.constprop.0+0x9a>
 8005f54:	782c      	ldrb	r4, [r5, #0]
 8005f56:	2701      	movs	r7, #1
 8005f58:	1cb5      	adds	r5, r6, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d05b      	beq.n	8006016 <_strtol_l.constprop.0+0xf6>
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d109      	bne.n	8005f76 <_strtol_l.constprop.0+0x56>
 8005f62:	2c30      	cmp	r4, #48	; 0x30
 8005f64:	d107      	bne.n	8005f76 <_strtol_l.constprop.0+0x56>
 8005f66:	782c      	ldrb	r4, [r5, #0]
 8005f68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f6c:	2c58      	cmp	r4, #88	; 0x58
 8005f6e:	d14d      	bne.n	800600c <_strtol_l.constprop.0+0xec>
 8005f70:	786c      	ldrb	r4, [r5, #1]
 8005f72:	2310      	movs	r3, #16
 8005f74:	3502      	adds	r5, #2
 8005f76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f7e:	f04f 0e00 	mov.w	lr, #0
 8005f82:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f86:	4676      	mov	r6, lr
 8005f88:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f8c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005f90:	f1bc 0f09 	cmp.w	ip, #9
 8005f94:	d816      	bhi.n	8005fc4 <_strtol_l.constprop.0+0xa4>
 8005f96:	4664      	mov	r4, ip
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	dd24      	ble.n	8005fe6 <_strtol_l.constprop.0+0xc6>
 8005f9c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005fa0:	d008      	beq.n	8005fb4 <_strtol_l.constprop.0+0x94>
 8005fa2:	45b1      	cmp	r9, r6
 8005fa4:	d31c      	bcc.n	8005fe0 <_strtol_l.constprop.0+0xc0>
 8005fa6:	d101      	bne.n	8005fac <_strtol_l.constprop.0+0x8c>
 8005fa8:	45a2      	cmp	sl, r4
 8005faa:	db19      	blt.n	8005fe0 <_strtol_l.constprop.0+0xc0>
 8005fac:	fb06 4603 	mla	r6, r6, r3, r4
 8005fb0:	f04f 0e01 	mov.w	lr, #1
 8005fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fb8:	e7e8      	b.n	8005f8c <_strtol_l.constprop.0+0x6c>
 8005fba:	2c2b      	cmp	r4, #43	; 0x2b
 8005fbc:	bf04      	itt	eq
 8005fbe:	782c      	ldrbeq	r4, [r5, #0]
 8005fc0:	1cb5      	addeq	r5, r6, #2
 8005fc2:	e7ca      	b.n	8005f5a <_strtol_l.constprop.0+0x3a>
 8005fc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005fc8:	f1bc 0f19 	cmp.w	ip, #25
 8005fcc:	d801      	bhi.n	8005fd2 <_strtol_l.constprop.0+0xb2>
 8005fce:	3c37      	subs	r4, #55	; 0x37
 8005fd0:	e7e2      	b.n	8005f98 <_strtol_l.constprop.0+0x78>
 8005fd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005fd6:	f1bc 0f19 	cmp.w	ip, #25
 8005fda:	d804      	bhi.n	8005fe6 <_strtol_l.constprop.0+0xc6>
 8005fdc:	3c57      	subs	r4, #87	; 0x57
 8005fde:	e7db      	b.n	8005f98 <_strtol_l.constprop.0+0x78>
 8005fe0:	f04f 3eff 	mov.w	lr, #4294967295
 8005fe4:	e7e6      	b.n	8005fb4 <_strtol_l.constprop.0+0x94>
 8005fe6:	f1be 3fff 	cmp.w	lr, #4294967295
 8005fea:	d105      	bne.n	8005ff8 <_strtol_l.constprop.0+0xd8>
 8005fec:	2322      	movs	r3, #34	; 0x22
 8005fee:	6003      	str	r3, [r0, #0]
 8005ff0:	4646      	mov	r6, r8
 8005ff2:	b942      	cbnz	r2, 8006006 <_strtol_l.constprop.0+0xe6>
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	e79e      	b.n	8005f36 <_strtol_l.constprop.0+0x16>
 8005ff8:	b107      	cbz	r7, 8005ffc <_strtol_l.constprop.0+0xdc>
 8005ffa:	4276      	negs	r6, r6
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d0f9      	beq.n	8005ff4 <_strtol_l.constprop.0+0xd4>
 8006000:	f1be 0f00 	cmp.w	lr, #0
 8006004:	d000      	beq.n	8006008 <_strtol_l.constprop.0+0xe8>
 8006006:	1e69      	subs	r1, r5, #1
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	e7f3      	b.n	8005ff4 <_strtol_l.constprop.0+0xd4>
 800600c:	2430      	movs	r4, #48	; 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1b1      	bne.n	8005f76 <_strtol_l.constprop.0+0x56>
 8006012:	2308      	movs	r3, #8
 8006014:	e7af      	b.n	8005f76 <_strtol_l.constprop.0+0x56>
 8006016:	2c30      	cmp	r4, #48	; 0x30
 8006018:	d0a5      	beq.n	8005f66 <_strtol_l.constprop.0+0x46>
 800601a:	230a      	movs	r3, #10
 800601c:	e7ab      	b.n	8005f76 <_strtol_l.constprop.0+0x56>
 800601e:	bf00      	nop
 8006020:	08007521 	.word	0x08007521

08006024 <strtol>:
 8006024:	4613      	mov	r3, r2
 8006026:	460a      	mov	r2, r1
 8006028:	4601      	mov	r1, r0
 800602a:	4802      	ldr	r0, [pc, #8]	; (8006034 <strtol+0x10>)
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f7ff bf77 	b.w	8005f20 <_strtol_l.constprop.0>
 8006032:	bf00      	nop
 8006034:	20000064 	.word	0x20000064

08006038 <std>:
 8006038:	2300      	movs	r3, #0
 800603a:	b510      	push	{r4, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	e9c0 3300 	strd	r3, r3, [r0]
 8006042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006046:	6083      	str	r3, [r0, #8]
 8006048:	8181      	strh	r1, [r0, #12]
 800604a:	6643      	str	r3, [r0, #100]	; 0x64
 800604c:	81c2      	strh	r2, [r0, #14]
 800604e:	6183      	str	r3, [r0, #24]
 8006050:	4619      	mov	r1, r3
 8006052:	2208      	movs	r2, #8
 8006054:	305c      	adds	r0, #92	; 0x5c
 8006056:	f000 f914 	bl	8006282 <memset>
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <std+0x58>)
 800605c:	6263      	str	r3, [r4, #36]	; 0x24
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <std+0x5c>)
 8006060:	62a3      	str	r3, [r4, #40]	; 0x28
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <std+0x60>)
 8006064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <std+0x64>)
 8006068:	6323      	str	r3, [r4, #48]	; 0x30
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <std+0x68>)
 800606c:	6224      	str	r4, [r4, #32]
 800606e:	429c      	cmp	r4, r3
 8006070:	d006      	beq.n	8006080 <std+0x48>
 8006072:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006076:	4294      	cmp	r4, r2
 8006078:	d002      	beq.n	8006080 <std+0x48>
 800607a:	33d0      	adds	r3, #208	; 0xd0
 800607c:	429c      	cmp	r4, r3
 800607e:	d105      	bne.n	800608c <std+0x54>
 8006080:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006088:	f000 b9d0 	b.w	800642c <__retarget_lock_init_recursive>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	080061fd 	.word	0x080061fd
 8006094:	0800621f 	.word	0x0800621f
 8006098:	08006257 	.word	0x08006257
 800609c:	0800627b 	.word	0x0800627b
 80060a0:	200003d8 	.word	0x200003d8

080060a4 <stdio_exit_handler>:
 80060a4:	4a02      	ldr	r2, [pc, #8]	; (80060b0 <stdio_exit_handler+0xc>)
 80060a6:	4903      	ldr	r1, [pc, #12]	; (80060b4 <stdio_exit_handler+0x10>)
 80060a8:	4803      	ldr	r0, [pc, #12]	; (80060b8 <stdio_exit_handler+0x14>)
 80060aa:	f000 b869 	b.w	8006180 <_fwalk_sglue>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c
 80060b4:	08006d4d 	.word	0x08006d4d
 80060b8:	20000018 	.word	0x20000018

080060bc <cleanup_stdio>:
 80060bc:	6841      	ldr	r1, [r0, #4]
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <cleanup_stdio+0x34>)
 80060c0:	4299      	cmp	r1, r3
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	d001      	beq.n	80060cc <cleanup_stdio+0x10>
 80060c8:	f000 fe40 	bl	8006d4c <_fflush_r>
 80060cc:	68a1      	ldr	r1, [r4, #8]
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <cleanup_stdio+0x38>)
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <cleanup_stdio+0x1e>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fe39 	bl	8006d4c <_fflush_r>
 80060da:	68e1      	ldr	r1, [r4, #12]
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <cleanup_stdio+0x3c>)
 80060de:	4299      	cmp	r1, r3
 80060e0:	d004      	beq.n	80060ec <cleanup_stdio+0x30>
 80060e2:	4620      	mov	r0, r4
 80060e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e8:	f000 be30 	b.w	8006d4c <_fflush_r>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop
 80060f0:	200003d8 	.word	0x200003d8
 80060f4:	20000440 	.word	0x20000440
 80060f8:	200004a8 	.word	0x200004a8

080060fc <global_stdio_init.part.0>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <global_stdio_init.part.0+0x30>)
 8006100:	4c0b      	ldr	r4, [pc, #44]	; (8006130 <global_stdio_init.part.0+0x34>)
 8006102:	4a0c      	ldr	r2, [pc, #48]	; (8006134 <global_stdio_init.part.0+0x38>)
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4620      	mov	r0, r4
 8006108:	2200      	movs	r2, #0
 800610a:	2104      	movs	r1, #4
 800610c:	f7ff ff94 	bl	8006038 <std>
 8006110:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006114:	2201      	movs	r2, #1
 8006116:	2109      	movs	r1, #9
 8006118:	f7ff ff8e 	bl	8006038 <std>
 800611c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006120:	2202      	movs	r2, #2
 8006122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006126:	2112      	movs	r1, #18
 8006128:	f7ff bf86 	b.w	8006038 <std>
 800612c:	20000510 	.word	0x20000510
 8006130:	200003d8 	.word	0x200003d8
 8006134:	080060a5 	.word	0x080060a5

08006138 <__sfp_lock_acquire>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__sfp_lock_acquire+0x8>)
 800613a:	f000 b978 	b.w	800642e <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	20000519 	.word	0x20000519

08006144 <__sfp_lock_release>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__sfp_lock_release+0x8>)
 8006146:	f000 b973 	b.w	8006430 <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	20000519 	.word	0x20000519

08006150 <__sinit>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	f7ff fff0 	bl	8006138 <__sfp_lock_acquire>
 8006158:	6a23      	ldr	r3, [r4, #32]
 800615a:	b11b      	cbz	r3, 8006164 <__sinit+0x14>
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f7ff bff0 	b.w	8006144 <__sfp_lock_release>
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <__sinit+0x28>)
 8006166:	6223      	str	r3, [r4, #32]
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__sinit+0x2c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f5      	bne.n	800615c <__sinit+0xc>
 8006170:	f7ff ffc4 	bl	80060fc <global_stdio_init.part.0>
 8006174:	e7f2      	b.n	800615c <__sinit+0xc>
 8006176:	bf00      	nop
 8006178:	080060bd 	.word	0x080060bd
 800617c:	20000510 	.word	0x20000510

08006180 <_fwalk_sglue>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4607      	mov	r7, r0
 8006186:	4688      	mov	r8, r1
 8006188:	4614      	mov	r4, r2
 800618a:	2600      	movs	r6, #0
 800618c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006190:	f1b9 0901 	subs.w	r9, r9, #1
 8006194:	d505      	bpl.n	80061a2 <_fwalk_sglue+0x22>
 8006196:	6824      	ldr	r4, [r4, #0]
 8006198:	2c00      	cmp	r4, #0
 800619a:	d1f7      	bne.n	800618c <_fwalk_sglue+0xc>
 800619c:	4630      	mov	r0, r6
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d907      	bls.n	80061b8 <_fwalk_sglue+0x38>
 80061a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ac:	3301      	adds	r3, #1
 80061ae:	d003      	beq.n	80061b8 <_fwalk_sglue+0x38>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	4306      	orrs	r6, r0
 80061b8:	3568      	adds	r5, #104	; 0x68
 80061ba:	e7e9      	b.n	8006190 <_fwalk_sglue+0x10>

080061bc <siprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b500      	push	{lr}
 80061c0:	b09c      	sub	sp, #112	; 0x70
 80061c2:	ab1d      	add	r3, sp, #116	; 0x74
 80061c4:	9002      	str	r0, [sp, #8]
 80061c6:	9006      	str	r0, [sp, #24]
 80061c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <siprintf+0x38>)
 80061ce:	9107      	str	r1, [sp, #28]
 80061d0:	9104      	str	r1, [sp, #16]
 80061d2:	4909      	ldr	r1, [pc, #36]	; (80061f8 <siprintf+0x3c>)
 80061d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	a902      	add	r1, sp, #8
 80061e0:	f000 faa0 	bl	8006724 <_svfiprintf_r>
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	20000064 	.word	0x20000064
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <__sread>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	460c      	mov	r4, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	f000 f8c4 	bl	8006390 <_read_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	bfab      	itete	ge
 800620c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800620e:	89a3      	ldrhlt	r3, [r4, #12]
 8006210:	181b      	addge	r3, r3, r0
 8006212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006216:	bfac      	ite	ge
 8006218:	6563      	strge	r3, [r4, #84]	; 0x54
 800621a:	81a3      	strhlt	r3, [r4, #12]
 800621c:	bd10      	pop	{r4, pc}

0800621e <__swrite>:
 800621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	461f      	mov	r7, r3
 8006224:	898b      	ldrh	r3, [r1, #12]
 8006226:	05db      	lsls	r3, r3, #23
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4616      	mov	r6, r2
 800622e:	d505      	bpl.n	800623c <__swrite+0x1e>
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	2302      	movs	r3, #2
 8006236:	2200      	movs	r2, #0
 8006238:	f000 f898 	bl	800636c <_lseek_r>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	4628      	mov	r0, r5
 800624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	f000 b8af 	b.w	80063b4 <_write_r>

08006256 <__sseek>:
 8006256:	b510      	push	{r4, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625e:	f000 f885 	bl	800636c <_lseek_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	bf15      	itete	ne
 8006268:	6560      	strne	r0, [r4, #84]	; 0x54
 800626a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800626e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006272:	81a3      	strheq	r3, [r4, #12]
 8006274:	bf18      	it	ne
 8006276:	81a3      	strhne	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__sclose>:
 800627a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627e:	f000 b865 	b.w	800634c <_close_r>

08006282 <memset>:
 8006282:	4402      	add	r2, r0
 8006284:	4603      	mov	r3, r0
 8006286:	4293      	cmp	r3, r2
 8006288:	d100      	bne.n	800628c <memset+0xa>
 800628a:	4770      	bx	lr
 800628c:	f803 1b01 	strb.w	r1, [r3], #1
 8006290:	e7f9      	b.n	8006286 <memset+0x4>
	...

08006294 <strtok>:
 8006294:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <strtok+0x5c>)
 8006296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006298:	681e      	ldr	r6, [r3, #0]
 800629a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800629c:	4605      	mov	r5, r0
 800629e:	b9fc      	cbnz	r4, 80062e0 <strtok+0x4c>
 80062a0:	2050      	movs	r0, #80	; 0x50
 80062a2:	9101      	str	r1, [sp, #4]
 80062a4:	f000 f930 	bl	8006508 <malloc>
 80062a8:	9901      	ldr	r1, [sp, #4]
 80062aa:	6470      	str	r0, [r6, #68]	; 0x44
 80062ac:	4602      	mov	r2, r0
 80062ae:	b920      	cbnz	r0, 80062ba <strtok+0x26>
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <strtok+0x60>)
 80062b2:	4811      	ldr	r0, [pc, #68]	; (80062f8 <strtok+0x64>)
 80062b4:	215b      	movs	r1, #91	; 0x5b
 80062b6:	f000 f8bd 	bl	8006434 <__assert_func>
 80062ba:	e9c0 4400 	strd	r4, r4, [r0]
 80062be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80062c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80062c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80062ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80062ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80062d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80062d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80062da:	6184      	str	r4, [r0, #24]
 80062dc:	7704      	strb	r4, [r0, #28]
 80062de:	6244      	str	r4, [r0, #36]	; 0x24
 80062e0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80062e2:	2301      	movs	r3, #1
 80062e4:	4628      	mov	r0, r5
 80062e6:	b002      	add	sp, #8
 80062e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062ec:	f000 b806 	b.w	80062fc <__strtok_r>
 80062f0:	20000064 	.word	0x20000064
 80062f4:	08007621 	.word	0x08007621
 80062f8:	08007638 	.word	0x08007638

080062fc <__strtok_r>:
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fe:	b908      	cbnz	r0, 8006304 <__strtok_r+0x8>
 8006300:	6810      	ldr	r0, [r2, #0]
 8006302:	b188      	cbz	r0, 8006328 <__strtok_r+0x2c>
 8006304:	4604      	mov	r4, r0
 8006306:	4620      	mov	r0, r4
 8006308:	f814 5b01 	ldrb.w	r5, [r4], #1
 800630c:	460f      	mov	r7, r1
 800630e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006312:	b91e      	cbnz	r6, 800631c <__strtok_r+0x20>
 8006314:	b965      	cbnz	r5, 8006330 <__strtok_r+0x34>
 8006316:	6015      	str	r5, [r2, #0]
 8006318:	4628      	mov	r0, r5
 800631a:	e005      	b.n	8006328 <__strtok_r+0x2c>
 800631c:	42b5      	cmp	r5, r6
 800631e:	d1f6      	bne.n	800630e <__strtok_r+0x12>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f0      	bne.n	8006306 <__strtok_r+0xa>
 8006324:	6014      	str	r4, [r2, #0]
 8006326:	7003      	strb	r3, [r0, #0]
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632a:	461c      	mov	r4, r3
 800632c:	e00c      	b.n	8006348 <__strtok_r+0x4c>
 800632e:	b915      	cbnz	r5, 8006336 <__strtok_r+0x3a>
 8006330:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006334:	460e      	mov	r6, r1
 8006336:	f816 5b01 	ldrb.w	r5, [r6], #1
 800633a:	42ab      	cmp	r3, r5
 800633c:	d1f7      	bne.n	800632e <__strtok_r+0x32>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f3      	beq.n	800632a <__strtok_r+0x2e>
 8006342:	2300      	movs	r3, #0
 8006344:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006348:	6014      	str	r4, [r2, #0]
 800634a:	e7ed      	b.n	8006328 <__strtok_r+0x2c>

0800634c <_close_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_close_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fa fc5f 	bl	8000c1a <_close>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_close_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_close_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20000514 	.word	0x20000514

0800636c <_lseek_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	; (800638c <_lseek_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fc74 	bl	8000c68 <_lseek>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_lseek_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_lseek_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000514 	.word	0x20000514

08006390 <_read_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_read_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa fc02 	bl	8000ba8 <_read>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_read_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_read_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000514 	.word	0x20000514

080063b4 <_write_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	; (80063d4 <_write_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fa fc0d 	bl	8000be2 <_write>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_write_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_write_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000514 	.word	0x20000514

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	; (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000064 	.word	0x20000064

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	; (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	; (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	; (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	; (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 fffa 	bl	80073f0 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	08007704 	.word	0x08007704
 8006420:	08007704 	.word	0x08007704
 8006424:	08007704 	.word	0x08007704
 8006428:	08007708 	.word	0x08007708

0800642c <__retarget_lock_init_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_acquire_recursive>:
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_release_recursive>:
 8006430:	4770      	bx	lr
	...

08006434 <__assert_func>:
 8006434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006436:	4614      	mov	r4, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <__assert_func+0x2c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4605      	mov	r5, r0
 8006440:	68d8      	ldr	r0, [r3, #12]
 8006442:	b14c      	cbz	r4, 8006458 <__assert_func+0x24>
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <__assert_func+0x30>)
 8006446:	9100      	str	r1, [sp, #0]
 8006448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800644c:	4906      	ldr	r1, [pc, #24]	; (8006468 <__assert_func+0x34>)
 800644e:	462b      	mov	r3, r5
 8006450:	f000 fca4 	bl	8006d9c <fiprintf>
 8006454:	f000 fcec 	bl	8006e30 <abort>
 8006458:	4b04      	ldr	r3, [pc, #16]	; (800646c <__assert_func+0x38>)
 800645a:	461c      	mov	r4, r3
 800645c:	e7f3      	b.n	8006446 <__assert_func+0x12>
 800645e:	bf00      	nop
 8006460:	20000064 	.word	0x20000064
 8006464:	08007692 	.word	0x08007692
 8006468:	0800769f 	.word	0x0800769f
 800646c:	080076cd 	.word	0x080076cd

08006470 <_free_r>:
 8006470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006472:	2900      	cmp	r1, #0
 8006474:	d044      	beq.n	8006500 <_free_r+0x90>
 8006476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f1a1 0404 	sub.w	r4, r1, #4
 8006482:	bfb8      	it	lt
 8006484:	18e4      	addlt	r4, r4, r3
 8006486:	f000 f8e7 	bl	8006658 <__malloc_lock>
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <_free_r+0x94>)
 800648c:	9801      	ldr	r0, [sp, #4]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	b933      	cbnz	r3, 80064a0 <_free_r+0x30>
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	b003      	add	sp, #12
 8006498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649c:	f000 b8e2 	b.w	8006664 <__malloc_unlock>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d908      	bls.n	80064b6 <_free_r+0x46>
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf01      	itttt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	e7ed      	b.n	8006492 <_free_r+0x22>
 80064b6:	461a      	mov	r2, r3
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b10b      	cbz	r3, 80064c0 <_free_r+0x50>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d9fa      	bls.n	80064b6 <_free_r+0x46>
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	1855      	adds	r5, r2, r1
 80064c4:	42a5      	cmp	r5, r4
 80064c6:	d10b      	bne.n	80064e0 <_free_r+0x70>
 80064c8:	6824      	ldr	r4, [r4, #0]
 80064ca:	4421      	add	r1, r4
 80064cc:	1854      	adds	r4, r2, r1
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	d1e0      	bne.n	8006496 <_free_r+0x26>
 80064d4:	681c      	ldr	r4, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	6053      	str	r3, [r2, #4]
 80064da:	440c      	add	r4, r1
 80064dc:	6014      	str	r4, [r2, #0]
 80064de:	e7da      	b.n	8006496 <_free_r+0x26>
 80064e0:	d902      	bls.n	80064e8 <_free_r+0x78>
 80064e2:	230c      	movs	r3, #12
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	e7d6      	b.n	8006496 <_free_r+0x26>
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	1961      	adds	r1, r4, r5
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf04      	itt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	bf04      	itt	eq
 80064f8:	1949      	addeq	r1, r1, r5
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	6054      	str	r4, [r2, #4]
 80064fe:	e7ca      	b.n	8006496 <_free_r+0x26>
 8006500:	b003      	add	sp, #12
 8006502:	bd30      	pop	{r4, r5, pc}
 8006504:	2000051c 	.word	0x2000051c

08006508 <malloc>:
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <malloc+0xc>)
 800650a:	4601      	mov	r1, r0
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f000 b823 	b.w	8006558 <_malloc_r>
 8006512:	bf00      	nop
 8006514:	20000064 	.word	0x20000064

08006518 <sbrk_aligned>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4e0e      	ldr	r6, [pc, #56]	; (8006554 <sbrk_aligned+0x3c>)
 800651c:	460c      	mov	r4, r1
 800651e:	6831      	ldr	r1, [r6, #0]
 8006520:	4605      	mov	r5, r0
 8006522:	b911      	cbnz	r1, 800652a <sbrk_aligned+0x12>
 8006524:	f000 fc66 	bl	8006df4 <_sbrk_r>
 8006528:	6030      	str	r0, [r6, #0]
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f000 fc61 	bl	8006df4 <_sbrk_r>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d00a      	beq.n	800654c <sbrk_aligned+0x34>
 8006536:	1cc4      	adds	r4, r0, #3
 8006538:	f024 0403 	bic.w	r4, r4, #3
 800653c:	42a0      	cmp	r0, r4
 800653e:	d007      	beq.n	8006550 <sbrk_aligned+0x38>
 8006540:	1a21      	subs	r1, r4, r0
 8006542:	4628      	mov	r0, r5
 8006544:	f000 fc56 	bl	8006df4 <_sbrk_r>
 8006548:	3001      	adds	r0, #1
 800654a:	d101      	bne.n	8006550 <sbrk_aligned+0x38>
 800654c:	f04f 34ff 	mov.w	r4, #4294967295
 8006550:	4620      	mov	r0, r4
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	20000520 	.word	0x20000520

08006558 <_malloc_r>:
 8006558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800655c:	1ccd      	adds	r5, r1, #3
 800655e:	f025 0503 	bic.w	r5, r5, #3
 8006562:	3508      	adds	r5, #8
 8006564:	2d0c      	cmp	r5, #12
 8006566:	bf38      	it	cc
 8006568:	250c      	movcc	r5, #12
 800656a:	2d00      	cmp	r5, #0
 800656c:	4607      	mov	r7, r0
 800656e:	db01      	blt.n	8006574 <_malloc_r+0x1c>
 8006570:	42a9      	cmp	r1, r5
 8006572:	d905      	bls.n	8006580 <_malloc_r+0x28>
 8006574:	230c      	movs	r3, #12
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	2600      	movs	r6, #0
 800657a:	4630      	mov	r0, r6
 800657c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006654 <_malloc_r+0xfc>
 8006584:	f000 f868 	bl	8006658 <__malloc_lock>
 8006588:	f8d8 3000 	ldr.w	r3, [r8]
 800658c:	461c      	mov	r4, r3
 800658e:	bb5c      	cbnz	r4, 80065e8 <_malloc_r+0x90>
 8006590:	4629      	mov	r1, r5
 8006592:	4638      	mov	r0, r7
 8006594:	f7ff ffc0 	bl	8006518 <sbrk_aligned>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	4604      	mov	r4, r0
 800659c:	d155      	bne.n	800664a <_malloc_r+0xf2>
 800659e:	f8d8 4000 	ldr.w	r4, [r8]
 80065a2:	4626      	mov	r6, r4
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	d145      	bne.n	8006634 <_malloc_r+0xdc>
 80065a8:	2c00      	cmp	r4, #0
 80065aa:	d048      	beq.n	800663e <_malloc_r+0xe6>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	4631      	mov	r1, r6
 80065b0:	4638      	mov	r0, r7
 80065b2:	eb04 0903 	add.w	r9, r4, r3
 80065b6:	f000 fc1d 	bl	8006df4 <_sbrk_r>
 80065ba:	4581      	cmp	r9, r0
 80065bc:	d13f      	bne.n	800663e <_malloc_r+0xe6>
 80065be:	6821      	ldr	r1, [r4, #0]
 80065c0:	1a6d      	subs	r5, r5, r1
 80065c2:	4629      	mov	r1, r5
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ffa7 	bl	8006518 <sbrk_aligned>
 80065ca:	3001      	adds	r0, #1
 80065cc:	d037      	beq.n	800663e <_malloc_r+0xe6>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	442b      	add	r3, r5
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	f8d8 3000 	ldr.w	r3, [r8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d038      	beq.n	800664e <_malloc_r+0xf6>
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	42a2      	cmp	r2, r4
 80065e0:	d12b      	bne.n	800663a <_malloc_r+0xe2>
 80065e2:	2200      	movs	r2, #0
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	e00f      	b.n	8006608 <_malloc_r+0xb0>
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	1b52      	subs	r2, r2, r5
 80065ec:	d41f      	bmi.n	800662e <_malloc_r+0xd6>
 80065ee:	2a0b      	cmp	r2, #11
 80065f0:	d917      	bls.n	8006622 <_malloc_r+0xca>
 80065f2:	1961      	adds	r1, r4, r5
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	6025      	str	r5, [r4, #0]
 80065f8:	bf18      	it	ne
 80065fa:	6059      	strne	r1, [r3, #4]
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	bf08      	it	eq
 8006600:	f8c8 1000 	streq.w	r1, [r8]
 8006604:	5162      	str	r2, [r4, r5]
 8006606:	604b      	str	r3, [r1, #4]
 8006608:	4638      	mov	r0, r7
 800660a:	f104 060b 	add.w	r6, r4, #11
 800660e:	f000 f829 	bl	8006664 <__malloc_unlock>
 8006612:	f026 0607 	bic.w	r6, r6, #7
 8006616:	1d23      	adds	r3, r4, #4
 8006618:	1af2      	subs	r2, r6, r3
 800661a:	d0ae      	beq.n	800657a <_malloc_r+0x22>
 800661c:	1b9b      	subs	r3, r3, r6
 800661e:	50a3      	str	r3, [r4, r2]
 8006620:	e7ab      	b.n	800657a <_malloc_r+0x22>
 8006622:	42a3      	cmp	r3, r4
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	d1dd      	bne.n	80065e4 <_malloc_r+0x8c>
 8006628:	f8c8 2000 	str.w	r2, [r8]
 800662c:	e7ec      	b.n	8006608 <_malloc_r+0xb0>
 800662e:	4623      	mov	r3, r4
 8006630:	6864      	ldr	r4, [r4, #4]
 8006632:	e7ac      	b.n	800658e <_malloc_r+0x36>
 8006634:	4634      	mov	r4, r6
 8006636:	6876      	ldr	r6, [r6, #4]
 8006638:	e7b4      	b.n	80065a4 <_malloc_r+0x4c>
 800663a:	4613      	mov	r3, r2
 800663c:	e7cc      	b.n	80065d8 <_malloc_r+0x80>
 800663e:	230c      	movs	r3, #12
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	4638      	mov	r0, r7
 8006644:	f000 f80e 	bl	8006664 <__malloc_unlock>
 8006648:	e797      	b.n	800657a <_malloc_r+0x22>
 800664a:	6025      	str	r5, [r4, #0]
 800664c:	e7dc      	b.n	8006608 <_malloc_r+0xb0>
 800664e:	605b      	str	r3, [r3, #4]
 8006650:	deff      	udf	#255	; 0xff
 8006652:	bf00      	nop
 8006654:	2000051c 	.word	0x2000051c

08006658 <__malloc_lock>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__malloc_lock+0x8>)
 800665a:	f7ff bee8 	b.w	800642e <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	20000518 	.word	0x20000518

08006664 <__malloc_unlock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_unlock+0x8>)
 8006666:	f7ff bee3 	b.w	8006430 <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	20000518 	.word	0x20000518

08006670 <__ssputs_r>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	688e      	ldr	r6, [r1, #8]
 8006676:	461f      	mov	r7, r3
 8006678:	42be      	cmp	r6, r7
 800667a:	680b      	ldr	r3, [r1, #0]
 800667c:	4682      	mov	sl, r0
 800667e:	460c      	mov	r4, r1
 8006680:	4690      	mov	r8, r2
 8006682:	d82c      	bhi.n	80066de <__ssputs_r+0x6e>
 8006684:	898a      	ldrh	r2, [r1, #12]
 8006686:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800668a:	d026      	beq.n	80066da <__ssputs_r+0x6a>
 800668c:	6965      	ldr	r5, [r4, #20]
 800668e:	6909      	ldr	r1, [r1, #16]
 8006690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006694:	eba3 0901 	sub.w	r9, r3, r1
 8006698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800669c:	1c7b      	adds	r3, r7, #1
 800669e:	444b      	add	r3, r9
 80066a0:	106d      	asrs	r5, r5, #1
 80066a2:	429d      	cmp	r5, r3
 80066a4:	bf38      	it	cc
 80066a6:	461d      	movcc	r5, r3
 80066a8:	0553      	lsls	r3, r2, #21
 80066aa:	d527      	bpl.n	80066fc <__ssputs_r+0x8c>
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7ff ff53 	bl	8006558 <_malloc_r>
 80066b2:	4606      	mov	r6, r0
 80066b4:	b360      	cbz	r0, 8006710 <__ssputs_r+0xa0>
 80066b6:	6921      	ldr	r1, [r4, #16]
 80066b8:	464a      	mov	r2, r9
 80066ba:	f000 fbab 	bl	8006e14 <memcpy>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	6126      	str	r6, [r4, #16]
 80066cc:	6165      	str	r5, [r4, #20]
 80066ce:	444e      	add	r6, r9
 80066d0:	eba5 0509 	sub.w	r5, r5, r9
 80066d4:	6026      	str	r6, [r4, #0]
 80066d6:	60a5      	str	r5, [r4, #8]
 80066d8:	463e      	mov	r6, r7
 80066da:	42be      	cmp	r6, r7
 80066dc:	d900      	bls.n	80066e0 <__ssputs_r+0x70>
 80066de:	463e      	mov	r6, r7
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	4632      	mov	r2, r6
 80066e4:	4641      	mov	r1, r8
 80066e6:	f000 fb6b 	bl	8006dc0 <memmove>
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	1b9b      	subs	r3, r3, r6
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	4433      	add	r3, r6
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	2000      	movs	r0, #0
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	462a      	mov	r2, r5
 80066fe:	f000 fb9e 	bl	8006e3e <_realloc_r>
 8006702:	4606      	mov	r6, r0
 8006704:	2800      	cmp	r0, #0
 8006706:	d1e0      	bne.n	80066ca <__ssputs_r+0x5a>
 8006708:	6921      	ldr	r1, [r4, #16]
 800670a:	4650      	mov	r0, sl
 800670c:	f7ff feb0 	bl	8006470 <_free_r>
 8006710:	230c      	movs	r3, #12
 8006712:	f8ca 3000 	str.w	r3, [sl]
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	e7e9      	b.n	80066f8 <__ssputs_r+0x88>

08006724 <_svfiprintf_r>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4698      	mov	r8, r3
 800672a:	898b      	ldrh	r3, [r1, #12]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	b09d      	sub	sp, #116	; 0x74
 8006730:	4607      	mov	r7, r0
 8006732:	460d      	mov	r5, r1
 8006734:	4614      	mov	r4, r2
 8006736:	d50e      	bpl.n	8006756 <_svfiprintf_r+0x32>
 8006738:	690b      	ldr	r3, [r1, #16]
 800673a:	b963      	cbnz	r3, 8006756 <_svfiprintf_r+0x32>
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	f7ff ff0b 	bl	8006558 <_malloc_r>
 8006742:	6028      	str	r0, [r5, #0]
 8006744:	6128      	str	r0, [r5, #16]
 8006746:	b920      	cbnz	r0, 8006752 <_svfiprintf_r+0x2e>
 8006748:	230c      	movs	r3, #12
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e0d0      	b.n	80068f4 <_svfiprintf_r+0x1d0>
 8006752:	2340      	movs	r3, #64	; 0x40
 8006754:	616b      	str	r3, [r5, #20]
 8006756:	2300      	movs	r3, #0
 8006758:	9309      	str	r3, [sp, #36]	; 0x24
 800675a:	2320      	movs	r3, #32
 800675c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006760:	f8cd 800c 	str.w	r8, [sp, #12]
 8006764:	2330      	movs	r3, #48	; 0x30
 8006766:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800690c <_svfiprintf_r+0x1e8>
 800676a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800676e:	f04f 0901 	mov.w	r9, #1
 8006772:	4623      	mov	r3, r4
 8006774:	469a      	mov	sl, r3
 8006776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800677a:	b10a      	cbz	r2, 8006780 <_svfiprintf_r+0x5c>
 800677c:	2a25      	cmp	r2, #37	; 0x25
 800677e:	d1f9      	bne.n	8006774 <_svfiprintf_r+0x50>
 8006780:	ebba 0b04 	subs.w	fp, sl, r4
 8006784:	d00b      	beq.n	800679e <_svfiprintf_r+0x7a>
 8006786:	465b      	mov	r3, fp
 8006788:	4622      	mov	r2, r4
 800678a:	4629      	mov	r1, r5
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff ff6f 	bl	8006670 <__ssputs_r>
 8006792:	3001      	adds	r0, #1
 8006794:	f000 80a9 	beq.w	80068ea <_svfiprintf_r+0x1c6>
 8006798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800679a:	445a      	add	r2, fp
 800679c:	9209      	str	r2, [sp, #36]	; 0x24
 800679e:	f89a 3000 	ldrb.w	r3, [sl]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80a1 	beq.w	80068ea <_svfiprintf_r+0x1c6>
 80067a8:	2300      	movs	r3, #0
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295
 80067ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b2:	f10a 0a01 	add.w	sl, sl, #1
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067be:	931a      	str	r3, [sp, #104]	; 0x68
 80067c0:	4654      	mov	r4, sl
 80067c2:	2205      	movs	r2, #5
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4850      	ldr	r0, [pc, #320]	; (800690c <_svfiprintf_r+0x1e8>)
 80067ca:	f7f9 fd21 	bl	8000210 <memchr>
 80067ce:	9a04      	ldr	r2, [sp, #16]
 80067d0:	b9d8      	cbnz	r0, 800680a <_svfiprintf_r+0xe6>
 80067d2:	06d0      	lsls	r0, r2, #27
 80067d4:	bf44      	itt	mi
 80067d6:	2320      	movmi	r3, #32
 80067d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067dc:	0711      	lsls	r1, r2, #28
 80067de:	bf44      	itt	mi
 80067e0:	232b      	movmi	r3, #43	; 0x2b
 80067e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e6:	f89a 3000 	ldrb.w	r3, [sl]
 80067ea:	2b2a      	cmp	r3, #42	; 0x2a
 80067ec:	d015      	beq.n	800681a <_svfiprintf_r+0xf6>
 80067ee:	9a07      	ldr	r2, [sp, #28]
 80067f0:	4654      	mov	r4, sl
 80067f2:	2000      	movs	r0, #0
 80067f4:	f04f 0c0a 	mov.w	ip, #10
 80067f8:	4621      	mov	r1, r4
 80067fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fe:	3b30      	subs	r3, #48	; 0x30
 8006800:	2b09      	cmp	r3, #9
 8006802:	d94d      	bls.n	80068a0 <_svfiprintf_r+0x17c>
 8006804:	b1b0      	cbz	r0, 8006834 <_svfiprintf_r+0x110>
 8006806:	9207      	str	r2, [sp, #28]
 8006808:	e014      	b.n	8006834 <_svfiprintf_r+0x110>
 800680a:	eba0 0308 	sub.w	r3, r0, r8
 800680e:	fa09 f303 	lsl.w	r3, r9, r3
 8006812:	4313      	orrs	r3, r2
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	46a2      	mov	sl, r4
 8006818:	e7d2      	b.n	80067c0 <_svfiprintf_r+0x9c>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	9103      	str	r1, [sp, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfbb      	ittet	lt
 8006826:	425b      	neglt	r3, r3
 8006828:	f042 0202 	orrlt.w	r2, r2, #2
 800682c:	9307      	strge	r3, [sp, #28]
 800682e:	9307      	strlt	r3, [sp, #28]
 8006830:	bfb8      	it	lt
 8006832:	9204      	strlt	r2, [sp, #16]
 8006834:	7823      	ldrb	r3, [r4, #0]
 8006836:	2b2e      	cmp	r3, #46	; 0x2e
 8006838:	d10c      	bne.n	8006854 <_svfiprintf_r+0x130>
 800683a:	7863      	ldrb	r3, [r4, #1]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d134      	bne.n	80068aa <_svfiprintf_r+0x186>
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	bfb8      	it	lt
 800684c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006850:	3402      	adds	r4, #2
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800691c <_svfiprintf_r+0x1f8>
 8006858:	7821      	ldrb	r1, [r4, #0]
 800685a:	2203      	movs	r2, #3
 800685c:	4650      	mov	r0, sl
 800685e:	f7f9 fcd7 	bl	8000210 <memchr>
 8006862:	b138      	cbz	r0, 8006874 <_svfiprintf_r+0x150>
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	eba0 000a 	sub.w	r0, r0, sl
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	4082      	lsls	r2, r0
 800686e:	4313      	orrs	r3, r2
 8006870:	3401      	adds	r4, #1
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006878:	4825      	ldr	r0, [pc, #148]	; (8006910 <_svfiprintf_r+0x1ec>)
 800687a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800687e:	2206      	movs	r2, #6
 8006880:	f7f9 fcc6 	bl	8000210 <memchr>
 8006884:	2800      	cmp	r0, #0
 8006886:	d038      	beq.n	80068fa <_svfiprintf_r+0x1d6>
 8006888:	4b22      	ldr	r3, [pc, #136]	; (8006914 <_svfiprintf_r+0x1f0>)
 800688a:	bb1b      	cbnz	r3, 80068d4 <_svfiprintf_r+0x1b0>
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	3307      	adds	r3, #7
 8006890:	f023 0307 	bic.w	r3, r3, #7
 8006894:	3308      	adds	r3, #8
 8006896:	9303      	str	r3, [sp, #12]
 8006898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689a:	4433      	add	r3, r6
 800689c:	9309      	str	r3, [sp, #36]	; 0x24
 800689e:	e768      	b.n	8006772 <_svfiprintf_r+0x4e>
 80068a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a4:	460c      	mov	r4, r1
 80068a6:	2001      	movs	r0, #1
 80068a8:	e7a6      	b.n	80067f8 <_svfiprintf_r+0xd4>
 80068aa:	2300      	movs	r3, #0
 80068ac:	3401      	adds	r4, #1
 80068ae:	9305      	str	r3, [sp, #20]
 80068b0:	4619      	mov	r1, r3
 80068b2:	f04f 0c0a 	mov.w	ip, #10
 80068b6:	4620      	mov	r0, r4
 80068b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068bc:	3a30      	subs	r2, #48	; 0x30
 80068be:	2a09      	cmp	r2, #9
 80068c0:	d903      	bls.n	80068ca <_svfiprintf_r+0x1a6>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0c6      	beq.n	8006854 <_svfiprintf_r+0x130>
 80068c6:	9105      	str	r1, [sp, #20]
 80068c8:	e7c4      	b.n	8006854 <_svfiprintf_r+0x130>
 80068ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ce:	4604      	mov	r4, r0
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7f0      	b.n	80068b6 <_svfiprintf_r+0x192>
 80068d4:	ab03      	add	r3, sp, #12
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	462a      	mov	r2, r5
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <_svfiprintf_r+0x1f4>)
 80068dc:	a904      	add	r1, sp, #16
 80068de:	4638      	mov	r0, r7
 80068e0:	f3af 8000 	nop.w
 80068e4:	1c42      	adds	r2, r0, #1
 80068e6:	4606      	mov	r6, r0
 80068e8:	d1d6      	bne.n	8006898 <_svfiprintf_r+0x174>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	065b      	lsls	r3, r3, #25
 80068ee:	f53f af2d 	bmi.w	800674c <_svfiprintf_r+0x28>
 80068f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f4:	b01d      	add	sp, #116	; 0x74
 80068f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fa:	ab03      	add	r3, sp, #12
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	462a      	mov	r2, r5
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <_svfiprintf_r+0x1f4>)
 8006902:	a904      	add	r1, sp, #16
 8006904:	4638      	mov	r0, r7
 8006906:	f000 f879 	bl	80069fc <_printf_i>
 800690a:	e7eb      	b.n	80068e4 <_svfiprintf_r+0x1c0>
 800690c:	080076ce 	.word	0x080076ce
 8006910:	080076d8 	.word	0x080076d8
 8006914:	00000000 	.word	0x00000000
 8006918:	08006671 	.word	0x08006671
 800691c:	080076d4 	.word	0x080076d4

08006920 <_printf_common>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	4616      	mov	r6, r2
 8006926:	4699      	mov	r9, r3
 8006928:	688a      	ldr	r2, [r1, #8]
 800692a:	690b      	ldr	r3, [r1, #16]
 800692c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006930:	4293      	cmp	r3, r2
 8006932:	bfb8      	it	lt
 8006934:	4613      	movlt	r3, r2
 8006936:	6033      	str	r3, [r6, #0]
 8006938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800693c:	4607      	mov	r7, r0
 800693e:	460c      	mov	r4, r1
 8006940:	b10a      	cbz	r2, 8006946 <_printf_common+0x26>
 8006942:	3301      	adds	r3, #1
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	0699      	lsls	r1, r3, #26
 800694a:	bf42      	ittt	mi
 800694c:	6833      	ldrmi	r3, [r6, #0]
 800694e:	3302      	addmi	r3, #2
 8006950:	6033      	strmi	r3, [r6, #0]
 8006952:	6825      	ldr	r5, [r4, #0]
 8006954:	f015 0506 	ands.w	r5, r5, #6
 8006958:	d106      	bne.n	8006968 <_printf_common+0x48>
 800695a:	f104 0a19 	add.w	sl, r4, #25
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	6832      	ldr	r2, [r6, #0]
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	42ab      	cmp	r3, r5
 8006966:	dc26      	bgt.n	80069b6 <_printf_common+0x96>
 8006968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800696c:	1e13      	subs	r3, r2, #0
 800696e:	6822      	ldr	r2, [r4, #0]
 8006970:	bf18      	it	ne
 8006972:	2301      	movne	r3, #1
 8006974:	0692      	lsls	r2, r2, #26
 8006976:	d42b      	bmi.n	80069d0 <_printf_common+0xb0>
 8006978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800697c:	4649      	mov	r1, r9
 800697e:	4638      	mov	r0, r7
 8006980:	47c0      	blx	r8
 8006982:	3001      	adds	r0, #1
 8006984:	d01e      	beq.n	80069c4 <_printf_common+0xa4>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	f003 0306 	and.w	r3, r3, #6
 800698e:	2b04      	cmp	r3, #4
 8006990:	bf02      	ittt	eq
 8006992:	68e5      	ldreq	r5, [r4, #12]
 8006994:	6833      	ldreq	r3, [r6, #0]
 8006996:	1aed      	subeq	r5, r5, r3
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	bf0c      	ite	eq
 800699c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a0:	2500      	movne	r5, #0
 80069a2:	4293      	cmp	r3, r2
 80069a4:	bfc4      	itt	gt
 80069a6:	1a9b      	subgt	r3, r3, r2
 80069a8:	18ed      	addgt	r5, r5, r3
 80069aa:	2600      	movs	r6, #0
 80069ac:	341a      	adds	r4, #26
 80069ae:	42b5      	cmp	r5, r6
 80069b0:	d11a      	bne.n	80069e8 <_printf_common+0xc8>
 80069b2:	2000      	movs	r0, #0
 80069b4:	e008      	b.n	80069c8 <_printf_common+0xa8>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4652      	mov	r2, sl
 80069ba:	4649      	mov	r1, r9
 80069bc:	4638      	mov	r0, r7
 80069be:	47c0      	blx	r8
 80069c0:	3001      	adds	r0, #1
 80069c2:	d103      	bne.n	80069cc <_printf_common+0xac>
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069cc:	3501      	adds	r5, #1
 80069ce:	e7c6      	b.n	800695e <_printf_common+0x3e>
 80069d0:	18e1      	adds	r1, r4, r3
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	2030      	movs	r0, #48	; 0x30
 80069d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069da:	4422      	add	r2, r4
 80069dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069e4:	3302      	adds	r3, #2
 80069e6:	e7c7      	b.n	8006978 <_printf_common+0x58>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4622      	mov	r2, r4
 80069ec:	4649      	mov	r1, r9
 80069ee:	4638      	mov	r0, r7
 80069f0:	47c0      	blx	r8
 80069f2:	3001      	adds	r0, #1
 80069f4:	d0e6      	beq.n	80069c4 <_printf_common+0xa4>
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7d9      	b.n	80069ae <_printf_common+0x8e>
	...

080069fc <_printf_i>:
 80069fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	7e0f      	ldrb	r7, [r1, #24]
 8006a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a04:	2f78      	cmp	r7, #120	; 0x78
 8006a06:	4691      	mov	r9, r2
 8006a08:	4680      	mov	r8, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	469a      	mov	sl, r3
 8006a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a12:	d807      	bhi.n	8006a24 <_printf_i+0x28>
 8006a14:	2f62      	cmp	r7, #98	; 0x62
 8006a16:	d80a      	bhi.n	8006a2e <_printf_i+0x32>
 8006a18:	2f00      	cmp	r7, #0
 8006a1a:	f000 80d4 	beq.w	8006bc6 <_printf_i+0x1ca>
 8006a1e:	2f58      	cmp	r7, #88	; 0x58
 8006a20:	f000 80c0 	beq.w	8006ba4 <_printf_i+0x1a8>
 8006a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a2c:	e03a      	b.n	8006aa4 <_printf_i+0xa8>
 8006a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a32:	2b15      	cmp	r3, #21
 8006a34:	d8f6      	bhi.n	8006a24 <_printf_i+0x28>
 8006a36:	a101      	add	r1, pc, #4	; (adr r1, 8006a3c <_printf_i+0x40>)
 8006a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006a25 	.word	0x08006a25
 8006a48:	08006a25 	.word	0x08006a25
 8006a4c:	08006a25 	.word	0x08006a25
 8006a50:	08006a25 	.word	0x08006a25
 8006a54:	08006aa9 	.word	0x08006aa9
 8006a58:	08006a25 	.word	0x08006a25
 8006a5c:	08006a25 	.word	0x08006a25
 8006a60:	08006a25 	.word	0x08006a25
 8006a64:	08006a25 	.word	0x08006a25
 8006a68:	08006bad 	.word	0x08006bad
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006b67 	.word	0x08006b67
 8006a74:	08006a25 	.word	0x08006a25
 8006a78:	08006a25 	.word	0x08006a25
 8006a7c:	08006bcf 	.word	0x08006bcf
 8006a80:	08006a25 	.word	0x08006a25
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006a25 	.word	0x08006a25
 8006a8c:	08006a25 	.word	0x08006a25
 8006a90:	08006b6f 	.word	0x08006b6f
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	1d1a      	adds	r2, r3, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	602a      	str	r2, [r5, #0]
 8006a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e09f      	b.n	8006be8 <_printf_i+0x1ec>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	0607      	lsls	r7, r0, #24
 8006aae:	f103 0104 	add.w	r1, r3, #4
 8006ab2:	6029      	str	r1, [r5, #0]
 8006ab4:	d501      	bpl.n	8006aba <_printf_i+0xbe>
 8006ab6:	681e      	ldr	r6, [r3, #0]
 8006ab8:	e003      	b.n	8006ac2 <_printf_i+0xc6>
 8006aba:	0646      	lsls	r6, r0, #25
 8006abc:	d5fb      	bpl.n	8006ab6 <_printf_i+0xba>
 8006abe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ac2:	2e00      	cmp	r6, #0
 8006ac4:	da03      	bge.n	8006ace <_printf_i+0xd2>
 8006ac6:	232d      	movs	r3, #45	; 0x2d
 8006ac8:	4276      	negs	r6, r6
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ace:	485a      	ldr	r0, [pc, #360]	; (8006c38 <_printf_i+0x23c>)
 8006ad0:	230a      	movs	r3, #10
 8006ad2:	e012      	b.n	8006afa <_printf_i+0xfe>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	6029      	str	r1, [r5, #0]
 8006adc:	0605      	lsls	r5, r0, #24
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0xe8>
 8006ae0:	681e      	ldr	r6, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0xee>
 8006ae4:	0641      	lsls	r1, r0, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0xe4>
 8006ae8:	881e      	ldrh	r6, [r3, #0]
 8006aea:	4853      	ldr	r0, [pc, #332]	; (8006c38 <_printf_i+0x23c>)
 8006aec:	2f6f      	cmp	r7, #111	; 0x6f
 8006aee:	bf0c      	ite	eq
 8006af0:	2308      	moveq	r3, #8
 8006af2:	230a      	movne	r3, #10
 8006af4:	2100      	movs	r1, #0
 8006af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006afa:	6865      	ldr	r5, [r4, #4]
 8006afc:	60a5      	str	r5, [r4, #8]
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	bfa2      	ittt	ge
 8006b02:	6821      	ldrge	r1, [r4, #0]
 8006b04:	f021 0104 	bicge.w	r1, r1, #4
 8006b08:	6021      	strge	r1, [r4, #0]
 8006b0a:	b90e      	cbnz	r6, 8006b10 <_printf_i+0x114>
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	d04b      	beq.n	8006ba8 <_printf_i+0x1ac>
 8006b10:	4615      	mov	r5, r2
 8006b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b16:	fb03 6711 	mls	r7, r3, r1, r6
 8006b1a:	5dc7      	ldrb	r7, [r0, r7]
 8006b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b20:	4637      	mov	r7, r6
 8006b22:	42bb      	cmp	r3, r7
 8006b24:	460e      	mov	r6, r1
 8006b26:	d9f4      	bls.n	8006b12 <_printf_i+0x116>
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d10b      	bne.n	8006b44 <_printf_i+0x148>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	07de      	lsls	r6, r3, #31
 8006b30:	d508      	bpl.n	8006b44 <_printf_i+0x148>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	6861      	ldr	r1, [r4, #4]
 8006b36:	4299      	cmp	r1, r3
 8006b38:	bfde      	ittt	le
 8006b3a:	2330      	movle	r3, #48	; 0x30
 8006b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b44:	1b52      	subs	r2, r2, r5
 8006b46:	6122      	str	r2, [r4, #16]
 8006b48:	f8cd a000 	str.w	sl, [sp]
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	aa03      	add	r2, sp, #12
 8006b50:	4621      	mov	r1, r4
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7ff fee4 	bl	8006920 <_printf_common>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d14a      	bne.n	8006bf2 <_printf_i+0x1f6>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	b004      	add	sp, #16
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	f043 0320 	orr.w	r3, r3, #32
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	4833      	ldr	r0, [pc, #204]	; (8006c3c <_printf_i+0x240>)
 8006b70:	2778      	movs	r7, #120	; 0x78
 8006b72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	061f      	lsls	r7, r3, #24
 8006b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b80:	d402      	bmi.n	8006b88 <_printf_i+0x18c>
 8006b82:	065f      	lsls	r7, r3, #25
 8006b84:	bf48      	it	mi
 8006b86:	b2b6      	uxthmi	r6, r6
 8006b88:	07df      	lsls	r7, r3, #31
 8006b8a:	bf48      	it	mi
 8006b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b90:	6029      	str	r1, [r5, #0]
 8006b92:	bf48      	it	mi
 8006b94:	6023      	strmi	r3, [r4, #0]
 8006b96:	b91e      	cbnz	r6, 8006ba0 <_printf_i+0x1a4>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	f023 0320 	bic.w	r3, r3, #32
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	e7a7      	b.n	8006af4 <_printf_i+0xf8>
 8006ba4:	4824      	ldr	r0, [pc, #144]	; (8006c38 <_printf_i+0x23c>)
 8006ba6:	e7e4      	b.n	8006b72 <_printf_i+0x176>
 8006ba8:	4615      	mov	r5, r2
 8006baa:	e7bd      	b.n	8006b28 <_printf_i+0x12c>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	6826      	ldr	r6, [r4, #0]
 8006bb0:	6961      	ldr	r1, [r4, #20]
 8006bb2:	1d18      	adds	r0, r3, #4
 8006bb4:	6028      	str	r0, [r5, #0]
 8006bb6:	0635      	lsls	r5, r6, #24
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0x1c4>
 8006bbc:	6019      	str	r1, [r3, #0]
 8006bbe:	e002      	b.n	8006bc6 <_printf_i+0x1ca>
 8006bc0:	0670      	lsls	r0, r6, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0x1c0>
 8006bc4:	8019      	strh	r1, [r3, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	4615      	mov	r5, r2
 8006bcc:	e7bc      	b.n	8006b48 <_printf_i+0x14c>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	602a      	str	r2, [r5, #0]
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7f9 fb18 	bl	8000210 <memchr>
 8006be0:	b108      	cbz	r0, 8006be6 <_printf_i+0x1ea>
 8006be2:	1b40      	subs	r0, r0, r5
 8006be4:	6060      	str	r0, [r4, #4]
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	6123      	str	r3, [r4, #16]
 8006bea:	2300      	movs	r3, #0
 8006bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf0:	e7aa      	b.n	8006b48 <_printf_i+0x14c>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	47d0      	blx	sl
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d0ad      	beq.n	8006b5c <_printf_i+0x160>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	079b      	lsls	r3, r3, #30
 8006c04:	d413      	bmi.n	8006c2e <_printf_i+0x232>
 8006c06:	68e0      	ldr	r0, [r4, #12]
 8006c08:	9b03      	ldr	r3, [sp, #12]
 8006c0a:	4298      	cmp	r0, r3
 8006c0c:	bfb8      	it	lt
 8006c0e:	4618      	movlt	r0, r3
 8006c10:	e7a6      	b.n	8006b60 <_printf_i+0x164>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4632      	mov	r2, r6
 8006c16:	4649      	mov	r1, r9
 8006c18:	4640      	mov	r0, r8
 8006c1a:	47d0      	blx	sl
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d09d      	beq.n	8006b5c <_printf_i+0x160>
 8006c20:	3501      	adds	r5, #1
 8006c22:	68e3      	ldr	r3, [r4, #12]
 8006c24:	9903      	ldr	r1, [sp, #12]
 8006c26:	1a5b      	subs	r3, r3, r1
 8006c28:	42ab      	cmp	r3, r5
 8006c2a:	dcf2      	bgt.n	8006c12 <_printf_i+0x216>
 8006c2c:	e7eb      	b.n	8006c06 <_printf_i+0x20a>
 8006c2e:	2500      	movs	r5, #0
 8006c30:	f104 0619 	add.w	r6, r4, #25
 8006c34:	e7f5      	b.n	8006c22 <_printf_i+0x226>
 8006c36:	bf00      	nop
 8006c38:	080076df 	.word	0x080076df
 8006c3c:	080076f0 	.word	0x080076f0

08006c40 <__sflush_r>:
 8006c40:	898a      	ldrh	r2, [r1, #12]
 8006c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	4605      	mov	r5, r0
 8006c48:	0710      	lsls	r0, r2, #28
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	d458      	bmi.n	8006d00 <__sflush_r+0xc0>
 8006c4e:	684b      	ldr	r3, [r1, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dc05      	bgt.n	8006c60 <__sflush_r+0x20>
 8006c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dc02      	bgt.n	8006c60 <__sflush_r+0x20>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d0f9      	beq.n	8006c5a <__sflush_r+0x1a>
 8006c66:	2300      	movs	r3, #0
 8006c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c6c:	682f      	ldr	r7, [r5, #0]
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	602b      	str	r3, [r5, #0]
 8006c72:	d032      	beq.n	8006cda <__sflush_r+0x9a>
 8006c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	075a      	lsls	r2, r3, #29
 8006c7a:	d505      	bpl.n	8006c88 <__sflush_r+0x48>
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	1ac0      	subs	r0, r0, r3
 8006c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c82:	b10b      	cbz	r3, 8006c88 <__sflush_r+0x48>
 8006c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c86:	1ac0      	subs	r0, r0, r3
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8e:	6a21      	ldr	r1, [r4, #32]
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b0      	blx	r6
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	d106      	bne.n	8006ca8 <__sflush_r+0x68>
 8006c9a:	6829      	ldr	r1, [r5, #0]
 8006c9c:	291d      	cmp	r1, #29
 8006c9e:	d82b      	bhi.n	8006cf8 <__sflush_r+0xb8>
 8006ca0:	4a29      	ldr	r2, [pc, #164]	; (8006d48 <__sflush_r+0x108>)
 8006ca2:	410a      	asrs	r2, r1
 8006ca4:	07d6      	lsls	r6, r2, #31
 8006ca6:	d427      	bmi.n	8006cf8 <__sflush_r+0xb8>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	6062      	str	r2, [r4, #4]
 8006cac:	04d9      	lsls	r1, r3, #19
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	6022      	str	r2, [r4, #0]
 8006cb2:	d504      	bpl.n	8006cbe <__sflush_r+0x7e>
 8006cb4:	1c42      	adds	r2, r0, #1
 8006cb6:	d101      	bne.n	8006cbc <__sflush_r+0x7c>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b903      	cbnz	r3, 8006cbe <__sflush_r+0x7e>
 8006cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8006cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cc0:	602f      	str	r7, [r5, #0]
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d0c9      	beq.n	8006c5a <__sflush_r+0x1a>
 8006cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	d002      	beq.n	8006cd4 <__sflush_r+0x94>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f7ff fbce 	bl	8006470 <_free_r>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8006cd8:	e7c0      	b.n	8006c5c <__sflush_r+0x1c>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b0      	blx	r6
 8006ce0:	1c41      	adds	r1, r0, #1
 8006ce2:	d1c8      	bne.n	8006c76 <__sflush_r+0x36>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0c5      	beq.n	8006c76 <__sflush_r+0x36>
 8006cea:	2b1d      	cmp	r3, #29
 8006cec:	d001      	beq.n	8006cf2 <__sflush_r+0xb2>
 8006cee:	2b16      	cmp	r3, #22
 8006cf0:	d101      	bne.n	8006cf6 <__sflush_r+0xb6>
 8006cf2:	602f      	str	r7, [r5, #0]
 8006cf4:	e7b1      	b.n	8006c5a <__sflush_r+0x1a>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	e7ad      	b.n	8006c5c <__sflush_r+0x1c>
 8006d00:	690f      	ldr	r7, [r1, #16]
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	d0a9      	beq.n	8006c5a <__sflush_r+0x1a>
 8006d06:	0793      	lsls	r3, r2, #30
 8006d08:	680e      	ldr	r6, [r1, #0]
 8006d0a:	bf08      	it	eq
 8006d0c:	694b      	ldreq	r3, [r1, #20]
 8006d0e:	600f      	str	r7, [r1, #0]
 8006d10:	bf18      	it	ne
 8006d12:	2300      	movne	r3, #0
 8006d14:	eba6 0807 	sub.w	r8, r6, r7
 8006d18:	608b      	str	r3, [r1, #8]
 8006d1a:	f1b8 0f00 	cmp.w	r8, #0
 8006d1e:	dd9c      	ble.n	8006c5a <__sflush_r+0x1a>
 8006d20:	6a21      	ldr	r1, [r4, #32]
 8006d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d24:	4643      	mov	r3, r8
 8006d26:	463a      	mov	r2, r7
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b0      	blx	r6
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dc06      	bgt.n	8006d3e <__sflush_r+0xfe>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e78e      	b.n	8006c5c <__sflush_r+0x1c>
 8006d3e:	4407      	add	r7, r0
 8006d40:	eba8 0800 	sub.w	r8, r8, r0
 8006d44:	e7e9      	b.n	8006d1a <__sflush_r+0xda>
 8006d46:	bf00      	nop
 8006d48:	dfbffffe 	.word	0xdfbffffe

08006d4c <_fflush_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	690b      	ldr	r3, [r1, #16]
 8006d50:	4605      	mov	r5, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	b913      	cbnz	r3, 8006d5c <_fflush_r+0x10>
 8006d56:	2500      	movs	r5, #0
 8006d58:	4628      	mov	r0, r5
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	b118      	cbz	r0, 8006d66 <_fflush_r+0x1a>
 8006d5e:	6a03      	ldr	r3, [r0, #32]
 8006d60:	b90b      	cbnz	r3, 8006d66 <_fflush_r+0x1a>
 8006d62:	f7ff f9f5 	bl	8006150 <__sinit>
 8006d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f3      	beq.n	8006d56 <_fflush_r+0xa>
 8006d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d70:	07d0      	lsls	r0, r2, #31
 8006d72:	d404      	bmi.n	8006d7e <_fflush_r+0x32>
 8006d74:	0599      	lsls	r1, r3, #22
 8006d76:	d402      	bmi.n	8006d7e <_fflush_r+0x32>
 8006d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7a:	f7ff fb58 	bl	800642e <__retarget_lock_acquire_recursive>
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4621      	mov	r1, r4
 8006d82:	f7ff ff5d 	bl	8006c40 <__sflush_r>
 8006d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	d4e4      	bmi.n	8006d58 <_fflush_r+0xc>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	059b      	lsls	r3, r3, #22
 8006d92:	d4e1      	bmi.n	8006d58 <_fflush_r+0xc>
 8006d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d96:	f7ff fb4b 	bl	8006430 <__retarget_lock_release_recursive>
 8006d9a:	e7dd      	b.n	8006d58 <_fflush_r+0xc>

08006d9c <fiprintf>:
 8006d9c:	b40e      	push	{r1, r2, r3}
 8006d9e:	b503      	push	{r0, r1, lr}
 8006da0:	4601      	mov	r1, r0
 8006da2:	ab03      	add	r3, sp, #12
 8006da4:	4805      	ldr	r0, [pc, #20]	; (8006dbc <fiprintf+0x20>)
 8006da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	f000 f89f 	bl	8006ef0 <_vfiprintf_r>
 8006db2:	b002      	add	sp, #8
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	20000064 	.word	0x20000064

08006dc0 <memmove>:
 8006dc0:	4288      	cmp	r0, r1
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	eb01 0402 	add.w	r4, r1, r2
 8006dc8:	d902      	bls.n	8006dd0 <memmove+0x10>
 8006dca:	4284      	cmp	r4, r0
 8006dcc:	4623      	mov	r3, r4
 8006dce:	d807      	bhi.n	8006de0 <memmove+0x20>
 8006dd0:	1e43      	subs	r3, r0, #1
 8006dd2:	42a1      	cmp	r1, r4
 8006dd4:	d008      	beq.n	8006de8 <memmove+0x28>
 8006dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dde:	e7f8      	b.n	8006dd2 <memmove+0x12>
 8006de0:	4402      	add	r2, r0
 8006de2:	4601      	mov	r1, r0
 8006de4:	428a      	cmp	r2, r1
 8006de6:	d100      	bne.n	8006dea <memmove+0x2a>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006df2:	e7f7      	b.n	8006de4 <memmove+0x24>

08006df4 <_sbrk_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d06      	ldr	r5, [pc, #24]	; (8006e10 <_sbrk_r+0x1c>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	f7f9 ff40 	bl	8000c84 <_sbrk>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_sbrk_r+0x1a>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_sbrk_r+0x1a>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000514 	.word	0x20000514

08006e14 <memcpy>:
 8006e14:	440a      	add	r2, r1
 8006e16:	4291      	cmp	r1, r2
 8006e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e1c:	d100      	bne.n	8006e20 <memcpy+0xc>
 8006e1e:	4770      	bx	lr
 8006e20:	b510      	push	{r4, lr}
 8006e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2a:	4291      	cmp	r1, r2
 8006e2c:	d1f9      	bne.n	8006e22 <memcpy+0xe>
 8006e2e:	bd10      	pop	{r4, pc}

08006e30 <abort>:
 8006e30:	b508      	push	{r3, lr}
 8006e32:	2006      	movs	r0, #6
 8006e34:	f000 fa34 	bl	80072a0 <raise>
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f7f9 feab 	bl	8000b94 <_exit>

08006e3e <_realloc_r>:
 8006e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e42:	4680      	mov	r8, r0
 8006e44:	4614      	mov	r4, r2
 8006e46:	460e      	mov	r6, r1
 8006e48:	b921      	cbnz	r1, 8006e54 <_realloc_r+0x16>
 8006e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4e:	4611      	mov	r1, r2
 8006e50:	f7ff bb82 	b.w	8006558 <_malloc_r>
 8006e54:	b92a      	cbnz	r2, 8006e62 <_realloc_r+0x24>
 8006e56:	f7ff fb0b 	bl	8006470 <_free_r>
 8006e5a:	4625      	mov	r5, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e62:	f000 fa39 	bl	80072d8 <_malloc_usable_size_r>
 8006e66:	4284      	cmp	r4, r0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	d802      	bhi.n	8006e72 <_realloc_r+0x34>
 8006e6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e70:	d812      	bhi.n	8006e98 <_realloc_r+0x5a>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4640      	mov	r0, r8
 8006e76:	f7ff fb6f 	bl	8006558 <_malloc_r>
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0ed      	beq.n	8006e5c <_realloc_r+0x1e>
 8006e80:	42bc      	cmp	r4, r7
 8006e82:	4622      	mov	r2, r4
 8006e84:	4631      	mov	r1, r6
 8006e86:	bf28      	it	cs
 8006e88:	463a      	movcs	r2, r7
 8006e8a:	f7ff ffc3 	bl	8006e14 <memcpy>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4640      	mov	r0, r8
 8006e92:	f7ff faed 	bl	8006470 <_free_r>
 8006e96:	e7e1      	b.n	8006e5c <_realloc_r+0x1e>
 8006e98:	4635      	mov	r5, r6
 8006e9a:	e7df      	b.n	8006e5c <_realloc_r+0x1e>

08006e9c <__sfputc_r>:
 8006e9c:	6893      	ldr	r3, [r2, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	b410      	push	{r4}
 8006ea4:	6093      	str	r3, [r2, #8]
 8006ea6:	da08      	bge.n	8006eba <__sfputc_r+0x1e>
 8006ea8:	6994      	ldr	r4, [r2, #24]
 8006eaa:	42a3      	cmp	r3, r4
 8006eac:	db01      	blt.n	8006eb2 <__sfputc_r+0x16>
 8006eae:	290a      	cmp	r1, #10
 8006eb0:	d103      	bne.n	8006eba <__sfputc_r+0x1e>
 8006eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb6:	f000 b935 	b.w	8007124 <__swbuf_r>
 8006eba:	6813      	ldr	r3, [r2, #0]
 8006ebc:	1c58      	adds	r0, r3, #1
 8006ebe:	6010      	str	r0, [r2, #0]
 8006ec0:	7019      	strb	r1, [r3, #0]
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <__sfputs_r>:
 8006eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460f      	mov	r7, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	18d5      	adds	r5, r2, r3
 8006ed4:	42ac      	cmp	r4, r5
 8006ed6:	d101      	bne.n	8006edc <__sfputs_r+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e007      	b.n	8006eec <__sfputs_r+0x22>
 8006edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee0:	463a      	mov	r2, r7
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ffda 	bl	8006e9c <__sfputc_r>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d1f3      	bne.n	8006ed4 <__sfputs_r+0xa>
 8006eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ef0 <_vfiprintf_r>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	b09d      	sub	sp, #116	; 0x74
 8006ef8:	4614      	mov	r4, r2
 8006efa:	4698      	mov	r8, r3
 8006efc:	4606      	mov	r6, r0
 8006efe:	b118      	cbz	r0, 8006f08 <_vfiprintf_r+0x18>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x18>
 8006f04:	f7ff f924 	bl	8006150 <__sinit>
 8006f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f0a:	07d9      	lsls	r1, r3, #31
 8006f0c:	d405      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	059a      	lsls	r2, r3, #22
 8006f12:	d402      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f16:	f7ff fa8a 	bl	800642e <__retarget_lock_acquire_recursive>
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	071b      	lsls	r3, r3, #28
 8006f1e:	d501      	bpl.n	8006f24 <_vfiprintf_r+0x34>
 8006f20:	692b      	ldr	r3, [r5, #16]
 8006f22:	b99b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x5c>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f93a 	bl	80071a0 <__swsetup_r>
 8006f2c:	b170      	cbz	r0, 8006f4c <_vfiprintf_r+0x5c>
 8006f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f30:	07dc      	lsls	r4, r3, #31
 8006f32:	d504      	bpl.n	8006f3e <_vfiprintf_r+0x4e>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b01d      	add	sp, #116	; 0x74
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d4f7      	bmi.n	8006f34 <_vfiprintf_r+0x44>
 8006f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f46:	f7ff fa73 	bl	8006430 <__retarget_lock_release_recursive>
 8006f4a:	e7f3      	b.n	8006f34 <_vfiprintf_r+0x44>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f50:	2320      	movs	r3, #32
 8006f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5a:	2330      	movs	r3, #48	; 0x30
 8006f5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007110 <_vfiprintf_r+0x220>
 8006f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f64:	f04f 0901 	mov.w	r9, #1
 8006f68:	4623      	mov	r3, r4
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f70:	b10a      	cbz	r2, 8006f76 <_vfiprintf_r+0x86>
 8006f72:	2a25      	cmp	r2, #37	; 0x25
 8006f74:	d1f9      	bne.n	8006f6a <_vfiprintf_r+0x7a>
 8006f76:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7a:	d00b      	beq.n	8006f94 <_vfiprintf_r+0xa4>
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ffa1 	bl	8006eca <__sfputs_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f000 80a9 	beq.w	80070e0 <_vfiprintf_r+0x1f0>
 8006f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f90:	445a      	add	r2, fp
 8006f92:	9209      	str	r2, [sp, #36]	; 0x24
 8006f94:	f89a 3000 	ldrb.w	r3, [sl]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80a1 	beq.w	80070e0 <_vfiprintf_r+0x1f0>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa8:	f10a 0a01 	add.w	sl, sl, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb6:	4654      	mov	r4, sl
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4854      	ldr	r0, [pc, #336]	; (8007110 <_vfiprintf_r+0x220>)
 8006fc0:	f7f9 f926 	bl	8000210 <memchr>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	b9d8      	cbnz	r0, 8007000 <_vfiprintf_r+0x110>
 8006fc8:	06d1      	lsls	r1, r2, #27
 8006fca:	bf44      	itt	mi
 8006fcc:	2320      	movmi	r3, #32
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd2:	0713      	lsls	r3, r2, #28
 8006fd4:	bf44      	itt	mi
 8006fd6:	232b      	movmi	r3, #43	; 0x2b
 8006fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe2:	d015      	beq.n	8007010 <_vfiprintf_r+0x120>
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f04f 0c0a 	mov.w	ip, #10
 8006fee:	4621      	mov	r1, r4
 8006ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff4:	3b30      	subs	r3, #48	; 0x30
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d94d      	bls.n	8007096 <_vfiprintf_r+0x1a6>
 8006ffa:	b1b0      	cbz	r0, 800702a <_vfiprintf_r+0x13a>
 8006ffc:	9207      	str	r2, [sp, #28]
 8006ffe:	e014      	b.n	800702a <_vfiprintf_r+0x13a>
 8007000:	eba0 0308 	sub.w	r3, r0, r8
 8007004:	fa09 f303 	lsl.w	r3, r9, r3
 8007008:	4313      	orrs	r3, r2
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	46a2      	mov	sl, r4
 800700e:	e7d2      	b.n	8006fb6 <_vfiprintf_r+0xc6>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfbb      	ittet	lt
 800701c:	425b      	neglt	r3, r3
 800701e:	f042 0202 	orrlt.w	r2, r2, #2
 8007022:	9307      	strge	r3, [sp, #28]
 8007024:	9307      	strlt	r3, [sp, #28]
 8007026:	bfb8      	it	lt
 8007028:	9204      	strlt	r2, [sp, #16]
 800702a:	7823      	ldrb	r3, [r4, #0]
 800702c:	2b2e      	cmp	r3, #46	; 0x2e
 800702e:	d10c      	bne.n	800704a <_vfiprintf_r+0x15a>
 8007030:	7863      	ldrb	r3, [r4, #1]
 8007032:	2b2a      	cmp	r3, #42	; 0x2a
 8007034:	d134      	bne.n	80070a0 <_vfiprintf_r+0x1b0>
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	bfb8      	it	lt
 8007042:	f04f 33ff 	movlt.w	r3, #4294967295
 8007046:	3402      	adds	r4, #2
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007120 <_vfiprintf_r+0x230>
 800704e:	7821      	ldrb	r1, [r4, #0]
 8007050:	2203      	movs	r2, #3
 8007052:	4650      	mov	r0, sl
 8007054:	f7f9 f8dc 	bl	8000210 <memchr>
 8007058:	b138      	cbz	r0, 800706a <_vfiprintf_r+0x17a>
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	eba0 000a 	sub.w	r0, r0, sl
 8007060:	2240      	movs	r2, #64	; 0x40
 8007062:	4082      	lsls	r2, r0
 8007064:	4313      	orrs	r3, r2
 8007066:	3401      	adds	r4, #1
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706e:	4829      	ldr	r0, [pc, #164]	; (8007114 <_vfiprintf_r+0x224>)
 8007070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007074:	2206      	movs	r2, #6
 8007076:	f7f9 f8cb 	bl	8000210 <memchr>
 800707a:	2800      	cmp	r0, #0
 800707c:	d03f      	beq.n	80070fe <_vfiprintf_r+0x20e>
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <_vfiprintf_r+0x228>)
 8007080:	bb1b      	cbnz	r3, 80070ca <_vfiprintf_r+0x1da>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	3307      	adds	r3, #7
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	3308      	adds	r3, #8
 800708c:	9303      	str	r3, [sp, #12]
 800708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007090:	443b      	add	r3, r7
 8007092:	9309      	str	r3, [sp, #36]	; 0x24
 8007094:	e768      	b.n	8006f68 <_vfiprintf_r+0x78>
 8007096:	fb0c 3202 	mla	r2, ip, r2, r3
 800709a:	460c      	mov	r4, r1
 800709c:	2001      	movs	r0, #1
 800709e:	e7a6      	b.n	8006fee <_vfiprintf_r+0xfe>
 80070a0:	2300      	movs	r3, #0
 80070a2:	3401      	adds	r4, #1
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	4619      	mov	r1, r3
 80070a8:	f04f 0c0a 	mov.w	ip, #10
 80070ac:	4620      	mov	r0, r4
 80070ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b2:	3a30      	subs	r2, #48	; 0x30
 80070b4:	2a09      	cmp	r2, #9
 80070b6:	d903      	bls.n	80070c0 <_vfiprintf_r+0x1d0>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0c6      	beq.n	800704a <_vfiprintf_r+0x15a>
 80070bc:	9105      	str	r1, [sp, #20]
 80070be:	e7c4      	b.n	800704a <_vfiprintf_r+0x15a>
 80070c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c4:	4604      	mov	r4, r0
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7f0      	b.n	80070ac <_vfiprintf_r+0x1bc>
 80070ca:	ab03      	add	r3, sp, #12
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	462a      	mov	r2, r5
 80070d0:	4b12      	ldr	r3, [pc, #72]	; (800711c <_vfiprintf_r+0x22c>)
 80070d2:	a904      	add	r1, sp, #16
 80070d4:	4630      	mov	r0, r6
 80070d6:	f3af 8000 	nop.w
 80070da:	4607      	mov	r7, r0
 80070dc:	1c78      	adds	r0, r7, #1
 80070de:	d1d6      	bne.n	800708e <_vfiprintf_r+0x19e>
 80070e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	d405      	bmi.n	80070f2 <_vfiprintf_r+0x202>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	059a      	lsls	r2, r3, #22
 80070ea:	d402      	bmi.n	80070f2 <_vfiprintf_r+0x202>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f7ff f99f 	bl	8006430 <__retarget_lock_release_recursive>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	065b      	lsls	r3, r3, #25
 80070f6:	f53f af1d 	bmi.w	8006f34 <_vfiprintf_r+0x44>
 80070fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070fc:	e71c      	b.n	8006f38 <_vfiprintf_r+0x48>
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	462a      	mov	r2, r5
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <_vfiprintf_r+0x22c>)
 8007106:	a904      	add	r1, sp, #16
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff fc77 	bl	80069fc <_printf_i>
 800710e:	e7e4      	b.n	80070da <_vfiprintf_r+0x1ea>
 8007110:	080076ce 	.word	0x080076ce
 8007114:	080076d8 	.word	0x080076d8
 8007118:	00000000 	.word	0x00000000
 800711c:	08006ecb 	.word	0x08006ecb
 8007120:	080076d4 	.word	0x080076d4

08007124 <__swbuf_r>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	460e      	mov	r6, r1
 8007128:	4614      	mov	r4, r2
 800712a:	4605      	mov	r5, r0
 800712c:	b118      	cbz	r0, 8007136 <__swbuf_r+0x12>
 800712e:	6a03      	ldr	r3, [r0, #32]
 8007130:	b90b      	cbnz	r3, 8007136 <__swbuf_r+0x12>
 8007132:	f7ff f80d 	bl	8006150 <__sinit>
 8007136:	69a3      	ldr	r3, [r4, #24]
 8007138:	60a3      	str	r3, [r4, #8]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	071a      	lsls	r2, r3, #28
 800713e:	d525      	bpl.n	800718c <__swbuf_r+0x68>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	b31b      	cbz	r3, 800718c <__swbuf_r+0x68>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	6922      	ldr	r2, [r4, #16]
 8007148:	1a98      	subs	r0, r3, r2
 800714a:	6963      	ldr	r3, [r4, #20]
 800714c:	b2f6      	uxtb	r6, r6
 800714e:	4283      	cmp	r3, r0
 8007150:	4637      	mov	r7, r6
 8007152:	dc04      	bgt.n	800715e <__swbuf_r+0x3a>
 8007154:	4621      	mov	r1, r4
 8007156:	4628      	mov	r0, r5
 8007158:	f7ff fdf8 	bl	8006d4c <_fflush_r>
 800715c:	b9e0      	cbnz	r0, 8007198 <__swbuf_r+0x74>
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	3b01      	subs	r3, #1
 8007162:	60a3      	str	r3, [r4, #8]
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	6022      	str	r2, [r4, #0]
 800716a:	701e      	strb	r6, [r3, #0]
 800716c:	6962      	ldr	r2, [r4, #20]
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	429a      	cmp	r2, r3
 8007172:	d004      	beq.n	800717e <__swbuf_r+0x5a>
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	07db      	lsls	r3, r3, #31
 8007178:	d506      	bpl.n	8007188 <__swbuf_r+0x64>
 800717a:	2e0a      	cmp	r6, #10
 800717c:	d104      	bne.n	8007188 <__swbuf_r+0x64>
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff fde3 	bl	8006d4c <_fflush_r>
 8007186:	b938      	cbnz	r0, 8007198 <__swbuf_r+0x74>
 8007188:	4638      	mov	r0, r7
 800718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800718c:	4621      	mov	r1, r4
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f806 	bl	80071a0 <__swsetup_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	d0d5      	beq.n	8007144 <__swbuf_r+0x20>
 8007198:	f04f 37ff 	mov.w	r7, #4294967295
 800719c:	e7f4      	b.n	8007188 <__swbuf_r+0x64>
	...

080071a0 <__swsetup_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <__swsetup_r+0xac>)
 80071a4:	4605      	mov	r5, r0
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	460c      	mov	r4, r1
 80071aa:	b118      	cbz	r0, 80071b4 <__swsetup_r+0x14>
 80071ac:	6a03      	ldr	r3, [r0, #32]
 80071ae:	b90b      	cbnz	r3, 80071b4 <__swsetup_r+0x14>
 80071b0:	f7fe ffce 	bl	8006150 <__sinit>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ba:	0718      	lsls	r0, r3, #28
 80071bc:	d422      	bmi.n	8007204 <__swsetup_r+0x64>
 80071be:	06d9      	lsls	r1, r3, #27
 80071c0:	d407      	bmi.n	80071d2 <__swsetup_r+0x32>
 80071c2:	2309      	movs	r3, #9
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e034      	b.n	800723c <__swsetup_r+0x9c>
 80071d2:	0758      	lsls	r0, r3, #29
 80071d4:	d512      	bpl.n	80071fc <__swsetup_r+0x5c>
 80071d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d8:	b141      	cbz	r1, 80071ec <__swsetup_r+0x4c>
 80071da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071de:	4299      	cmp	r1, r3
 80071e0:	d002      	beq.n	80071e8 <__swsetup_r+0x48>
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7ff f944 	bl	8006470 <_free_r>
 80071e8:	2300      	movs	r3, #0
 80071ea:	6363      	str	r3, [r4, #52]	; 0x34
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	2300      	movs	r3, #0
 80071f6:	6063      	str	r3, [r4, #4]
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f043 0308 	orr.w	r3, r3, #8
 8007202:	81a3      	strh	r3, [r4, #12]
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	b94b      	cbnz	r3, 800721c <__swsetup_r+0x7c>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800720e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007212:	d003      	beq.n	800721c <__swsetup_r+0x7c>
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f88c 	bl	8007334 <__smakebuf_r>
 800721c:	89a0      	ldrh	r0, [r4, #12]
 800721e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007222:	f010 0301 	ands.w	r3, r0, #1
 8007226:	d00a      	beq.n	800723e <__swsetup_r+0x9e>
 8007228:	2300      	movs	r3, #0
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	6963      	ldr	r3, [r4, #20]
 800722e:	425b      	negs	r3, r3
 8007230:	61a3      	str	r3, [r4, #24]
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	b943      	cbnz	r3, 8007248 <__swsetup_r+0xa8>
 8007236:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800723a:	d1c4      	bne.n	80071c6 <__swsetup_r+0x26>
 800723c:	bd38      	pop	{r3, r4, r5, pc}
 800723e:	0781      	lsls	r1, r0, #30
 8007240:	bf58      	it	pl
 8007242:	6963      	ldrpl	r3, [r4, #20]
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	e7f4      	b.n	8007232 <__swsetup_r+0x92>
 8007248:	2000      	movs	r0, #0
 800724a:	e7f7      	b.n	800723c <__swsetup_r+0x9c>
 800724c:	20000064 	.word	0x20000064

08007250 <_raise_r>:
 8007250:	291f      	cmp	r1, #31
 8007252:	b538      	push	{r3, r4, r5, lr}
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	d904      	bls.n	8007264 <_raise_r+0x14>
 800725a:	2316      	movs	r3, #22
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	f04f 30ff 	mov.w	r0, #4294967295
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007266:	b112      	cbz	r2, 800726e <_raise_r+0x1e>
 8007268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800726c:	b94b      	cbnz	r3, 8007282 <_raise_r+0x32>
 800726e:	4620      	mov	r0, r4
 8007270:	f000 f830 	bl	80072d4 <_getpid_r>
 8007274:	462a      	mov	r2, r5
 8007276:	4601      	mov	r1, r0
 8007278:	4620      	mov	r0, r4
 800727a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727e:	f000 b817 	b.w	80072b0 <_kill_r>
 8007282:	2b01      	cmp	r3, #1
 8007284:	d00a      	beq.n	800729c <_raise_r+0x4c>
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	d103      	bne.n	8007292 <_raise_r+0x42>
 800728a:	2316      	movs	r3, #22
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	2001      	movs	r0, #1
 8007290:	e7e7      	b.n	8007262 <_raise_r+0x12>
 8007292:	2400      	movs	r4, #0
 8007294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007298:	4628      	mov	r0, r5
 800729a:	4798      	blx	r3
 800729c:	2000      	movs	r0, #0
 800729e:	e7e0      	b.n	8007262 <_raise_r+0x12>

080072a0 <raise>:
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <raise+0xc>)
 80072a2:	4601      	mov	r1, r0
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	f7ff bfd3 	b.w	8007250 <_raise_r>
 80072aa:	bf00      	nop
 80072ac:	20000064 	.word	0x20000064

080072b0 <_kill_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	; (80072d0 <_kill_r+0x20>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	f7f9 fc59 	bl	8000b74 <_kill>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	d102      	bne.n	80072cc <_kill_r+0x1c>
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	b103      	cbz	r3, 80072cc <_kill_r+0x1c>
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
 80072ce:	bf00      	nop
 80072d0:	20000514 	.word	0x20000514

080072d4 <_getpid_r>:
 80072d4:	f7f9 bc46 	b.w	8000b64 <_getpid>

080072d8 <_malloc_usable_size_r>:
 80072d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072dc:	1f18      	subs	r0, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bfbc      	itt	lt
 80072e2:	580b      	ldrlt	r3, [r1, r0]
 80072e4:	18c0      	addlt	r0, r0, r3
 80072e6:	4770      	bx	lr

080072e8 <__swhatbuf_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	b096      	sub	sp, #88	; 0x58
 80072f4:	4615      	mov	r5, r2
 80072f6:	461e      	mov	r6, r3
 80072f8:	da0d      	bge.n	8007316 <__swhatbuf_r+0x2e>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	bf0c      	ite	eq
 8007306:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800730a:	2340      	movne	r3, #64	; 0x40
 800730c:	2000      	movs	r0, #0
 800730e:	6031      	str	r1, [r6, #0]
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	b016      	add	sp, #88	; 0x58
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	466a      	mov	r2, sp
 8007318:	f000 f848 	bl	80073ac <_fstat_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	dbec      	blt.n	80072fa <__swhatbuf_r+0x12>
 8007320:	9901      	ldr	r1, [sp, #4]
 8007322:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007326:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800732a:	4259      	negs	r1, r3
 800732c:	4159      	adcs	r1, r3
 800732e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007332:	e7eb      	b.n	800730c <__swhatbuf_r+0x24>

08007334 <__smakebuf_r>:
 8007334:	898b      	ldrh	r3, [r1, #12]
 8007336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007338:	079d      	lsls	r5, r3, #30
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d507      	bpl.n	8007350 <__smakebuf_r+0x1c>
 8007340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2301      	movs	r3, #1
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	b002      	add	sp, #8
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	ab01      	add	r3, sp, #4
 8007352:	466a      	mov	r2, sp
 8007354:	f7ff ffc8 	bl	80072e8 <__swhatbuf_r>
 8007358:	9900      	ldr	r1, [sp, #0]
 800735a:	4605      	mov	r5, r0
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff f8fb 	bl	8006558 <_malloc_r>
 8007362:	b948      	cbnz	r0, 8007378 <__smakebuf_r+0x44>
 8007364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007368:	059a      	lsls	r2, r3, #22
 800736a:	d4ef      	bmi.n	800734c <__smakebuf_r+0x18>
 800736c:	f023 0303 	bic.w	r3, r3, #3
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	e7e3      	b.n	8007340 <__smakebuf_r+0xc>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	6020      	str	r0, [r4, #0]
 800737c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	9b00      	ldr	r3, [sp, #0]
 8007384:	6163      	str	r3, [r4, #20]
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	6120      	str	r0, [r4, #16]
 800738a:	b15b      	cbz	r3, 80073a4 <__smakebuf_r+0x70>
 800738c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f81d 	bl	80073d0 <_isatty_r>
 8007396:	b128      	cbz	r0, 80073a4 <__smakebuf_r+0x70>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	431d      	orrs	r5, r3
 80073a8:	81a5      	strh	r5, [r4, #12]
 80073aa:	e7cf      	b.n	800734c <__smakebuf_r+0x18>

080073ac <_fstat_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d07      	ldr	r5, [pc, #28]	; (80073cc <_fstat_r+0x20>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	4611      	mov	r1, r2
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	f7f9 fc3a 	bl	8000c32 <_fstat>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d102      	bne.n	80073c8 <_fstat_r+0x1c>
 80073c2:	682b      	ldr	r3, [r5, #0]
 80073c4:	b103      	cbz	r3, 80073c8 <_fstat_r+0x1c>
 80073c6:	6023      	str	r3, [r4, #0]
 80073c8:	bd38      	pop	{r3, r4, r5, pc}
 80073ca:	bf00      	nop
 80073cc:	20000514 	.word	0x20000514

080073d0 <_isatty_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	; (80073ec <_isatty_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7f9 fc39 	bl	8000c52 <_isatty>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_isatty_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_isatty_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000514 	.word	0x20000514

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
