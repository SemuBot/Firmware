
Wheelbase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b698  0800b698  0000c698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b804  0800b804  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b804  0800b804  0000c804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b80c  0800b80c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b80c  0800b80c  0000c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b810  0800b810  0000c810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b814  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000014b0  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001688  20001688  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a64  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e7f  00000000  00000000  00025c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001049  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006098  00000000  00000000  0002c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce11  00000000  00000000  00032111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fa0  00000000  00000000  0004ef22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121ec2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000627c  00000000  00000000  00121f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00128184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b680 	.word	0x0800b680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b680 	.word	0x0800b680

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b3c      	ldr	r3, [pc, #240]	@ (8000388 <MX_GPIO_Init+0x108>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a3b      	ldr	r2, [pc, #236]	@ (8000388 <MX_GPIO_Init+0x108>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b39      	ldr	r3, [pc, #228]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b36      	ldr	r3, [pc, #216]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a35      	ldr	r2, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b33      	ldr	r3, [pc, #204]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b30      	ldr	r3, [pc, #192]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fc:	4823      	ldr	r0, [pc, #140]	@ (800038c <MX_GPIO_Init+0x10c>)
 80002fe:	f000 fff9 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2120      	movs	r1, #32
 8000306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030a:	f000 fff3 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|ENABLE_Pin
 800030e:	2200      	movs	r2, #0
 8000310:	f649 4104 	movw	r1, #39940	@ 0x9c04
 8000314:	481e      	ldr	r0, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x110>)
 8000316:	f000 ffed 	bl	80012f4 <HAL_GPIO_WritePin>
                          |CS_ENC_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ENC_3_GPIO_Port, CS_ENC_3_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2140      	movs	r1, #64	@ 0x40
 800031e:	481b      	ldr	r0, [pc, #108]	@ (800038c <MX_GPIO_Init+0x10c>)
 8000320:	f000 ffe8 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin CS_ENC_3_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|CS_ENC_3_Pin;
 8000324:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	4813      	ldr	r0, [pc, #76]	@ (800038c <MX_GPIO_Init+0x10c>)
 800033e:	f000 fe4f 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR2_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR2_DIR_Pin;
 8000342:	2320      	movs	r3, #32
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2300      	movs	r3, #0
 8000350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f000 fe40 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_DIR_Pin nBRAKE_Pin MOTOR1_DIR_Pin ENABLE_Pin
                           CS_ENC_1_Pin */
  GPIO_InitStruct.Pin = MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|ENABLE_Pin
 8000360:	f649 4304 	movw	r3, #39940	@ 0x9c04
 8000364:	617b      	str	r3, [r7, #20]
                          |CS_ENC_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_GPIO_Init+0x110>)
 800037a:	f000 fe31 	bl	8000fe0 <HAL_GPIO_Init>

}
 800037e:	bf00      	nop
 8000380:	3728      	adds	r7, #40	@ 0x28
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	48000400 	.word	0x48000400

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039a:	f000 fc85 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039e:	f000 f845 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a2:	f7ff ff6d 	bl	8000280 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003a6:	f000 fa67 	bl	8000878 <MX_TIM1_Init>
  MX_TIM3_Init();
 80003aa:	f000 faf5 	bl	8000998 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80003ae:	f009 fafb 	bl	80099a8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80003b2:	f000 f8a9 	bl	8000508 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80003b6:	f000 fbd9 	bl	8000b6c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c0:	4817      	ldr	r0, [pc, #92]	@ (8000420 <main+0x8c>)
 80003c2:	f000 ff97 	bl	80012f4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80003c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ca:	f000 fcd3 	bl	8000d74 <HAL_Delay>

	  char buffer[20];  // Buffer for random data
	  int random_number = rand() % 1000;  // Generate a random number (0-999)
 80003ce:	f009 ff8f 	bl	800a2f0 <rand>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <main+0x90>)
 80003d6:	fb82 1203 	smull	r1, r2, r2, r3
 80003da:	1191      	asrs	r1, r2, #6
 80003dc:	17da      	asrs	r2, r3, #31
 80003de:	1a8a      	subs	r2, r1, r2
 80003e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003e4:	fb01 f202 	mul.w	r2, r1, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	61fb      	str	r3, [r7, #28]
	  int length = snprintf(buffer, sizeof(buffer), "Rand: %d\n", random_number);
 80003ec:	1d38      	adds	r0, r7, #4
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <main+0x94>)
 80003f2:	2114      	movs	r1, #20
 80003f4:	f00a f87c 	bl	800a4f0 <sniprintf>
 80003f8:	61b8      	str	r0, [r7, #24]

	  CDC_Transmit_FS((uint8_t*)buffer, length);  // Send over USB
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4611      	mov	r1, r2
 8000402:	4618      	mov	r0, r3
 8000404:	f009 fb8e 	bl	8009b24 <CDC_Transmit_FS>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	4804      	ldr	r0, [pc, #16]	@ (8000420 <main+0x8c>)
 8000410:	f000 ff70 	bl	80012f4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000418:	f000 fcac 	bl	8000d74 <HAL_Delay>
  {
 800041c:	bf00      	nop
 800041e:	e7cc      	b.n	80003ba <main+0x26>
 8000420:	48000800 	.word	0x48000800
 8000424:	10624dd3 	.word	0x10624dd3
 8000428:	0800b698 	.word	0x0800b698

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b0a6      	sub	sp, #152	@ 0x98
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f00a f8cf 	bl	800a5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2258      	movs	r2, #88	@ 0x58
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f00a f8c1 	bl	800a5de <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800045c:	2301      	movs	r3, #1
 800045e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000464:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000470:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000478:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800047c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fbfe 	bl	8002c8c <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000496:	f000 f831 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fc3c 	bl	8003d34 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004c2:	f000 f81b 	bl	80004fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <SystemClock_Config+0xcc>)
 80004c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004d8:	2300      	movs	r3, #0
 80004da:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fe4a 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004ea:	f000 f807 	bl	80004fc <Error_Handler>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3798      	adds	r7, #152	@ 0x98
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	00221001 	.word	0x00221001

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <Error_Handler+0x8>

08000508 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800050c:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <MX_SPI2_Init+0x74>)
 800050e:	4a1c      	ldr	r2, [pc, #112]	@ (8000580 <MX_SPI2_Init+0x78>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <MX_SPI2_Init+0x74>)
 8000514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <MX_SPI2_Init+0x74>)
 800051c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000520:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <MX_SPI2_Init+0x74>)
 8000524:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000528:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_SPI2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <MX_SPI2_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_SPI2_Init+0x74>)
 8000538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800053c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <MX_SPI2_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_SPI2_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_SPI2_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <MX_SPI2_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_SPI2_Init+0x74>)
 8000558:	2207      	movs	r2, #7
 800055a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <MX_SPI2_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_SPI2_Init+0x74>)
 8000564:	2208      	movs	r2, #8
 8000566:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <MX_SPI2_Init+0x74>)
 800056a:	f004 f823 	bl	80045b4 <HAL_SPI_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000574:	f7ff ffc2 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200001f4 	.word	0x200001f4
 8000580:	40003800 	.word	0x40003800

08000584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	@ 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <HAL_SPI_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d128      	bne.n	80005f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <HAL_SPI_MspInit+0x80>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80005d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005e8:	2305      	movs	r3, #5
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <HAL_SPI_MspInit+0x84>)
 80005f4:	f000 fcf4 	bl	8000fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40003800 	.word	0x40003800
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <HAL_MspInit+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x44>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <HAL_MspInit+0x44>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_MspInit+0x44>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <NMI_Handler+0x4>

0800065c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <UsageFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 fb43 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006ba:	f000 ff20 	bl	80014fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20001048 	.word	0x20001048

080006c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return 1;
 80006cc:	2301      	movs	r3, #1
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <_kill>:

int _kill(int pid, int sig)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006e2:	f009 ffcb 	bl	800a67c <__errno>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2216      	movs	r2, #22
 80006ea:	601a      	str	r2, [r3, #0]
  return -1;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_exit>:

void _exit (int status)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000700:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ffe7 	bl	80006d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <_exit+0x12>

0800070e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e00a      	b.n	8000736 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000720:	f3af 8000 	nop.w
 8000724:	4601      	mov	r1, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	60ba      	str	r2, [r7, #8]
 800072c:	b2ca      	uxtb	r2, r1
 800072e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	429a      	cmp	r2, r3
 800073c:	dbf0      	blt.n	8000720 <_read+0x12>
  }

  return len;
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e009      	b.n	800076e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbf1      	blt.n	800075a <_write+0x12>
  }
  return len;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_close>:

int _close(int file)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a8:	605a      	str	r2, [r3, #4]
  return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <_isatty>:

int _isatty(int file)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f009 ff30 	bl	800a67c <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20010000 	.word	0x20010000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000258 	.word	0x20000258
 8000850:	20001688 	.word	0x20001688

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b096      	sub	sp, #88	@ 0x58
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	222c      	movs	r2, #44	@ 0x2c
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f009 fe9a 	bl	800a5de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008ac:	4a39      	ldr	r2, [pc, #228]	@ (8000994 <MX_TIM1_Init+0x11c>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80008b0:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008b2:	2247      	movs	r2, #71	@ 0x47
 80008b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008bc:	4b34      	ldr	r3, [pc, #208]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d6:	482e      	ldr	r0, [pc, #184]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008d8:	f003 ff17 	bl	800470a <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f7ff fe0b 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4825      	ldr	r0, [pc, #148]	@ (8000990 <MX_TIM1_Init+0x118>)
 80008fa:	f004 fc21 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000904:	f7ff fdfa 	bl	80004fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	@ 0x60
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_TIM1_Init+0x118>)
 800092e:	f003 ff43 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000938:	f7ff fde0 	bl	80004fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000954:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <MX_TIM1_Init+0x118>)
 8000972:	f004 fc71 	bl	8005258 <HAL_TIMEx_ConfigBreakDeadTime>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800097c:	f7ff fdbe 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000980:	4803      	ldr	r0, [pc, #12]	@ (8000990 <MX_TIM1_Init+0x118>)
 8000982:	f000 f897 	bl	8000ab4 <HAL_TIM_MspPostInit>

}
 8000986:	bf00      	nop
 8000988:	3758      	adds	r7, #88	@ 0x58
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000025c 	.word	0x2000025c
 8000994:	40012c00 	.word	0x40012c00

08000998 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009bc:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009be:	4a22      	ldr	r2, [pc, #136]	@ (8000a48 <MX_TIM3_Init+0xb0>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009c4:	2247      	movs	r2, #71	@ 0x47
 80009c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009e2:	4818      	ldr	r0, [pc, #96]	@ (8000a44 <MX_TIM3_Init+0xac>)
 80009e4:	f003 fe91 	bl	800470a <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80009ee:	f7ff fd85 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <MX_TIM3_Init+0xac>)
 8000a02:	f004 fb9d 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a0c:	f7ff fd76 	bl	80004fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	@ 0x60
 8000a12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <MX_TIM3_Init+0xac>)
 8000a28:	f003 fec6 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a32:	f7ff fd63 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <MX_TIM3_Init+0xac>)
 8000a38:	f000 f83c 	bl	8000ab4 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	@ 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200002a8 	.word	0x200002a8
 8000a48:	40000400 	.word	0x40000400

08000a4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10c      	bne.n	8000a78 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a76:	e010      	b.n	8000a9a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab0 <HAL_TIM_PWM_MspInit+0x64>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d10b      	bne.n	8000a9a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a09      	ldr	r2, [pc, #36]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <HAL_TIM_PWM_MspInit+0x60>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <HAL_TIM_MspPostInit+0xa8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11c      	bne.n	8000b10 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000adc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000afe:	2302      	movs	r3, #2
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4816      	ldr	r0, [pc, #88]	@ (8000b64 <HAL_TIM_MspPostInit+0xb0>)
 8000b0a:	f000 fa69 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b0e:	e021      	b.n	8000b54 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <HAL_TIM_MspPostInit+0xb4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d11c      	bne.n	8000b54 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	6153      	str	r3, [r2, #20]
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_TIM_MspPostInit+0xac>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b42:	2302      	movs	r3, #2
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f000 fa46 	bl	8000fe0 <HAL_GPIO_Init>
}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000800 	.word	0x48000800
 8000b68:	40000400 	.word	0x40000400

08000b6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <MX_USART1_UART_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b78:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000bb0:	f004 fbd8 	bl	8005364 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bba:	f7ff fc9f 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002f4 	.word	0x200002f4
 8000bc8:	40013800 	.word	0x40013800

08000bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0x7c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d127      	bne.n	8000c3e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a16      	ldr	r2, [pc, #88]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_UART_MspInit+0x80>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c1e:	2330      	movs	r3, #48	@ 0x30
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_UART_MspInit+0x84>)
 8000c3a:	f000 f9d1 	bl	8000fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000800 	.word	0x48000800

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff fdfc 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f009 fd01 	bl	800a688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fb85 	bl	8000394 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000c98:	0800b814 	.word	0x0800b814
  ldr r2, =_sbss
 8000c9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000ca0:	20001688 	.word	0x20001688

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_Init+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <HAL_Init+0x28>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f94f 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fca2 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f967 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	f000 f92f 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	2000037c 	.word	0x2000037c

08000d5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000037c 	.word	0x2000037c

08000d74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	@ (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e160      	b.n	80012b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8152 	beq.w	80012ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80ac 	beq.w	80012ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a5d      	ldr	r2, [pc, #372]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b5b      	ldr	r3, [pc, #364]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a59      	ldr	r2, [pc, #356]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001196:	d025      	beq.n	80011e4 <HAL_GPIO_Init+0x204>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4f      	ldr	r2, [pc, #316]	@ (80012d8 <HAL_GPIO_Init+0x2f8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d01f      	beq.n	80011e0 <HAL_GPIO_Init+0x200>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <HAL_GPIO_Init+0x2fc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d019      	beq.n	80011dc <HAL_GPIO_Init+0x1fc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d013      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00d      	beq.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4b      	ldr	r2, [pc, #300]	@ (80012e8 <HAL_GPIO_Init+0x308>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0x1f0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <HAL_GPIO_Init+0x30c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e00c      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011cc:	2307      	movs	r3, #7
 80011ce:	e00a      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d0:	2305      	movs	r3, #5
 80011d2:	e008      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d8:	2303      	movs	r3, #3
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011e4:	2300      	movs	r3, #0
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f6:	4937      	ldr	r1, [pc, #220]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001228:	4a31      	ldr	r2, [pc, #196]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001252:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae97 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	48001000 	.word	0x48001000
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001800 	.word	0x48001800
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0b9      	b.n	80014aa <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f008 fd20 	bl	8009d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fc55 	bl	8005c0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e03e      	b.n	80013e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3311      	adds	r3, #17
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3310      	adds	r3, #16
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3313      	adds	r3, #19
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3320      	adds	r3, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3324      	adds	r3, #36	@ 0x24
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3bb      	bcc.n	8001368 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e044      	b.n	8001480 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3301      	adds	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b5      	bcc.n	80013f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001496:	f004 fbd4 	bl	8005c42 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_PCD_Start+0x16>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e016      	b.n	80014f6 <HAL_PCD_Start+0x44>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fb82 	bl	8005bde <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014da:	2101      	movs	r1, #1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f008 fecf 	bl	800a280 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 fe40 	bl	800816c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f006 fe39 	bl	8008182 <USB_ReadInterrupts>
 8001510:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fab1 	bl	8001a84 <PCD_EP_ISR_Handler>

    return;
 8001522:	e0bd      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d013      	beq.n	8001556 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f008 fc9d 	bl	8009e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800154c:	2100      	movs	r1, #0
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f8a9 	bl	80016a6 <HAL_PCD_SetAddress>

    return;
 8001554:	e0a4      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001572:	b292      	uxth	r2, r2
 8001574:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001578:	e092      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00c      	beq.n	800159e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800159c:	e080      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d027      	beq.n	80015f8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	b292      	uxth	r2, r2
 80015bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0208 	bic.w	r2, r2, #8
 80015d2:	b292      	uxth	r2, r2
 80015d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f008 fc8d 	bl	8009ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015f6:	e053      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d027      	beq.n	8001652 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0208 	orr.w	r2, r2, #8
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800162c:	b292      	uxth	r2, r2
 800162e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	b292      	uxth	r2, r2
 8001646:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f008 fc3a 	bl	8009ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001650:	e026      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f008 fbf8 	bl	8009e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800167a:	e011      	b.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800169e:	bf00      	nop
  }
}
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_SetAddress+0x1a>
 80016bc:	2302      	movs	r3, #2
 80016be:	e012      	b.n	80016e6 <HAL_PCD_SetAddress+0x40>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fd34 	bl	8008144 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	4608      	mov	r0, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	4603      	mov	r3, r0
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	460b      	mov	r3, r1
 8001702:	803b      	strh	r3, [r7, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800170c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	da0e      	bge.n	8001732 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0207 	and.w	r2, r3, #7
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	3310      	adds	r3, #16
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	705a      	strb	r2, [r3, #1]
 8001730:	e00e      	b.n	8001750 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0207 	and.w	r2, r3, #7
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800175c:	883a      	ldrh	r2, [r7, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	78ba      	ldrb	r2, [r7, #2]
 8001766:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d102      	bne.n	8001774 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_PCD_EP_Open+0x94>
 800177e:	2302      	movs	r3, #2
 8001780:	e00e      	b.n	80017a0 <HAL_PCD_EP_Open+0xb2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fa75 	bl	8005c80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800179e:	7afb      	ldrb	r3, [r7, #11]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da0e      	bge.n	80017da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	f003 0207 	and.w	r2, r3, #7
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	3310      	adds	r3, #16
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	705a      	strb	r2, [r3, #1]
 80017d8:	e00e      	b.n	80017f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 0207 	and.w	r2, r3, #7
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_PCD_EP_Close+0x6a>
 800180e:	2302      	movs	r3, #2
 8001810:	e00e      	b.n	8001830 <HAL_PCD_EP_Close+0x88>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68f9      	ldr	r1, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fdf1 	bl	8006408 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	460b      	mov	r3, r1
 8001846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	f003 0207 	and.w	r2, r3, #7
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2200      	movs	r2, #0
 8001876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001878:	7afb      	ldrb	r3, [r7, #11]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	b2da      	uxtb	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	4618      	mov	r0, r3
 800188c:	f004 ffa9 	bl	80067e2 <USB_EPStartXfer>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0207 	and.w	r2, r3, #7
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80018bc:	681b      	ldr	r3, [r3, #0]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	3310      	adds	r3, #16
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	b2da      	uxtb	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6979      	ldr	r1, [r7, #20]
 8001928:	4618      	mov	r0, r3
 800192a:	f004 ff5a 	bl	80067e2 <USB_EPStartXfer>

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	7912      	ldrb	r2, [r2, #4]
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e03e      	b.n	80019d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da0e      	bge.n	800197c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	3310      	adds	r3, #16
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	705a      	strb	r2, [r3, #1]
 800197a:	e00c      	b.n	8001996 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_PCD_EP_SetStall+0x7e>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e00e      	b.n	80019d4 <HAL_PCD_EP_SetStall+0x9c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 fabe 	bl	8007f46 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	7912      	ldrb	r2, [r2, #4]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e040      	b.n	8001a7c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da0e      	bge.n	8001a20 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 0207 	and.w	r2, r3, #7
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	3310      	adds	r3, #16
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	705a      	strb	r2, [r3, #1]
 8001a1e:	e00e      	b.n	8001a3e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0207 	and.w	r2, r3, #7
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_EP_ClrStall+0x82>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e00e      	b.n	8001a7c <HAL_PCD_EP_ClrStall+0xa0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 fabb 	bl	8007fe8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	@ 0x58
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a8c:	e3ad      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a96:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001aa8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 816f 	bne.w	8001d90 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ab2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d14c      	bne.n	8001b58 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ace:	81fb      	strh	r3, [r7, #14]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3310      	adds	r3, #16
 8001ae6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	441a      	add	r2, r3
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f008 f988 	bl	8009e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7b1b      	ldrb	r3, [r3, #12]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 835c 	beq.w	80021ea <PCD_EP_ISR_Handler+0x766>
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8357 	bne.w	80021ea <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7b1b      	ldrb	r3, [r3, #12]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	731a      	strb	r2, [r3, #12]
 8001b56:	e348      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b5e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d032      	beq.n	8001bdc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001baa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f006 fb38 	bl	8008226 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	823b      	strh	r3, [r7, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	8a3a      	ldrh	r2, [r7, #16]
 8001bcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f008 f901 	bl	8009ddc <HAL_PCD_SetupStageCallback>
 8001bda:	e306      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f280 8302 	bge.w	80021ea <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	83fb      	strh	r3, [r7, #30]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	8bfa      	ldrh	r2, [r7, #30]
 8001bfc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c00:	b292      	uxth	r2, r2
 8001c02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d019      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x1e4>
 8001c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	6959      	ldr	r1, [r3, #20]
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f006 faea 	bl	8008226 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	441a      	add	r2, r3
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c60:	2100      	movs	r1, #0
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f008 f8cc 	bl	8009e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 82b5 	bne.w	80021ea <PCD_EP_ISR_Handler+0x766>
 8001c80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c8c:	f000 82ad 	beq.w	80021ea <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	801a      	strh	r2, [r3, #0]
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <PCD_EP_ISR_Handler+0x25a>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	801a      	strh	r2, [r3, #0]
 8001cdc:	e039      	b.n	8001d52 <PCD_EP_ISR_Handler+0x2ce>
 8001cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ce4:	d818      	bhi.n	8001d18 <PCD_EP_ISR_Handler+0x294>
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x27c>
 8001cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	e01c      	b.n	8001d52 <PCD_EP_ISR_Handler+0x2ce>
 8001d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <PCD_EP_ISR_Handler+0x2ae>
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d62:	827b      	strh	r3, [r7, #18]
 8001d64:	8a7b      	ldrh	r3, [r7, #18]
 8001d66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d6a:	827b      	strh	r3, [r7, #18]
 8001d6c:	8a7b      	ldrh	r3, [r7, #18]
 8001d6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d72:	827b      	strh	r3, [r7, #18]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	8a7b      	ldrh	r3, [r7, #18]
 8001d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	8013      	strh	r3, [r2, #0]
 8001d8e:	e22c      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001da4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f280 80f6 	bge.w	8001f9a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001ddc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001de0:	b292      	uxth	r2, r2
 8001de2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001de4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfc:	7b1b      	ldrb	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d123      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e26:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 808e 	beq.w	8001f50 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	6959      	ldr	r1, [r3, #20]
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3e:	88da      	ldrh	r2, [r3, #6]
 8001e40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e44:	f006 f9ef 	bl	8008226 <USB_ReadPMA>
 8001e48:	e082      	b.n	8001f50 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4c:	78db      	ldrb	r3, [r3, #3]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d10a      	bne.n	8001e68 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e56:	461a      	mov	r2, r3
 8001e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f9d3 	bl	8002206 <HAL_PCD_EP_DB_Receive>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001e66:	e073      	b.n	8001f50 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e82:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	441a      	add	r2, r3
 8001e94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d022      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001eee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02c      	beq.n	8001f50 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efc:	6959      	ldr	r1, [r3, #20]
 8001efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f00:	891a      	ldrh	r2, [r3, #8]
 8001f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f06:	f006 f98e 	bl	8008226 <USB_ReadPMA>
 8001f0a:	e021      	b.n	8001f50 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f42:	6959      	ldr	r1, [r3, #20]
 8001f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f46:	895a      	ldrh	r2, [r3, #10]
 8001f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f4c:	f006 f96b 	bl	8008226 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f58:	441a      	add	r2, r3
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f66:	441a      	add	r2, r3
 8001f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <PCD_EP_ISR_Handler+0x4fc>
 8001f74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d206      	bcs.n	8001f8e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f007 ff3a 	bl	8009e00 <HAL_PCD_DataOutStageCallback>
 8001f8c:	e005      	b.n	8001f9a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fc24 	bl	80067e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8121 	beq.w	80021ea <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fa8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	78db      	ldrb	r3, [r3, #3]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	f040 80a2 	bne.w	8002146 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	7b1b      	ldrb	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8093 	beq.w	8002138 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002012:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d046      	beq.n	80020ac <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800201e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d126      	bne.n	8002074 <PCD_EP_ISR_Handler+0x5f0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	4413      	add	r3, r2
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
 800203e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	00da      	lsls	r2, r3, #3
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	4413      	add	r3, r2
 8002048:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	b29a      	uxth	r2, r3
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800206c:	b29a      	uxth	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e061      	b.n	8002138 <PCD_EP_ISR_Handler+0x6b4>
 8002074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d15d      	bne.n	8002138 <PCD_EP_ISR_Handler+0x6b4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	4413      	add	r3, r2
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00da      	lsls	r2, r3, #3
 800209a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209c:	4413      	add	r3, r2
 800209e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a6:	2200      	movs	r2, #0
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e045      	b.n	8002138 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d126      	bne.n	8002108 <PCD_EP_ISR_Handler+0x684>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ce:	4413      	add	r3, r2
 80020d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002100:	b29a      	uxth	r2, r3
 8002102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	e017      	b.n	8002138 <PCD_EP_ISR_Handler+0x6b4>
 8002108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d113      	bne.n	8002138 <PCD_EP_ISR_Handler+0x6b4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002118:	b29b      	uxth	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211e:	4413      	add	r3, r2
 8002120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	00da      	lsls	r2, r3, #3
 8002128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212a:	4413      	add	r3, r2
 800212c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f007 fe79 	bl	8009e36 <HAL_PCD_DataInStageCallback>
 8002144:	e051      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002146:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d144      	bne.n	80021dc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002182:	429a      	cmp	r2, r3
 8002184:	d907      	bls.n	8002196 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8002186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	e002      	b.n	800219c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8002196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f007 fe43 	bl	8009e36 <HAL_PCD_DataInStageCallback>
 80021b0:	e01b      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021ba:	441a      	add	r2, r3
 80021bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80021c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021c8:	441a      	add	r2, r3
 80021ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021cc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fb04 	bl	80067e2 <USB_EPStartXfer>
 80021da:	e006      	b.n	80021ea <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021e0:	461a      	mov	r2, r3
 80021e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f917 	bl	8002418 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f6ff ac49 	blt.w	8001a8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3758      	adds	r7, #88	@ 0x58
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b088      	sub	sp, #32
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	4613      	mov	r3, r2
 8002212:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d07c      	beq.n	8002318 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	4413      	add	r3, r2
 8002238:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002242:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	8b7b      	ldrh	r3, [r7, #26]
 800224a:	429a      	cmp	r2, r3
 800224c:	d306      	bcc.n	800225c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	8b7b      	ldrh	r3, [r7, #26]
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	619a      	str	r2, [r3, #24]
 800225a:	e002      	b.n	8002262 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d123      	bne.n	80022b2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002284:	833b      	strh	r3, [r7, #24]
 8002286:	8b3b      	ldrh	r3, [r7, #24]
 8002288:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800228c:	833b      	strh	r3, [r7, #24]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	8b3b      	ldrh	r3, [r7, #24]
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01f      	beq.n	80022fc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d6:	82fb      	strh	r3, [r7, #22]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8085 	beq.w	800240e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6959      	ldr	r1, [r3, #20]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	891a      	ldrh	r2, [r3, #8]
 8002310:	8b7b      	ldrh	r3, [r7, #26]
 8002312:	f005 ff88 	bl	8008226 <USB_ReadPMA>
 8002316:	e07a      	b.n	800240e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4413      	add	r3, r2
 8002332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	8b7b      	ldrh	r3, [r7, #26]
 8002344:	429a      	cmp	r2, r3
 8002346:	d306      	bcc.n	8002356 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	8b7b      	ldrh	r3, [r7, #26]
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	619a      	str	r2, [r3, #24]
 8002354:	e002      	b.n	800235c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d123      	bne.n	80023ac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800237a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800237e:	83fb      	strh	r3, [r7, #30]
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002386:	83fb      	strh	r3, [r7, #30]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	8bfb      	ldrh	r3, [r7, #30]
 8002398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800239c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d0:	83bb      	strh	r3, [r7, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	441a      	add	r2, r3
 80023e0:	8bbb      	ldrh	r3, [r7, #28]
 80023e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	6959      	ldr	r1, [r3, #20]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	895a      	ldrh	r2, [r3, #10]
 8002408:	8b7b      	ldrh	r3, [r7, #26]
 800240a:	f005 ff0c 	bl	8008226 <USB_ReadPMA>
    }
  }

  return count;
 800240e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0a4      	sub	sp, #144	@ 0x90
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 81db 	beq.w	80027e8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4413      	add	r3, r2
 800244c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80b9 	bne.w	80025f8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d126      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0xc4>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	4413      	add	r3, r2
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e01a      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d116      	bne.n	8002512 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	4413      	add	r3, r2
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00da      	lsls	r2, r3, #3
 8002502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002504:	4413      	add	r3, r2
 8002506:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d126      	bne.n	800256e <HAL_PCD_EP_DB_Transmit+0x156>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	00da      	lsls	r2, r3, #3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002552:	b29a      	uxth	r2, r3
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29a      	uxth	r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	e017      	b.n	800259e <HAL_PCD_EP_DB_Transmit+0x186>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d113      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x186>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	4413      	add	r3, r2
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	00da      	lsls	r2, r3, #3
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	4413      	add	r3, r2
 8002592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2200      	movs	r2, #0
 800259c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f007 fc46 	bl	8009e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 82fa 	beq.w	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d0:	82fb      	strh	r3, [r7, #22]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	8afb      	ldrh	r3, [r7, #22]
 80025e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	8013      	strh	r3, [r2, #0]
 80025f6:	e2d8      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d021      	beq.n	8002646 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800263a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800263e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002642:	b29b      	uxth	r3, r3
 8002644:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 82ac 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800265a:	441a      	add	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002668:	441a      	add	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d30b      	bcc.n	8002692 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	621a      	str	r2, [r3, #32]
 8002690:	e017      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800269a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800269e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026aa:	e00a      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d165      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x37e>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026de:	4413      	add	r3, r2
 80026e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00da      	lsls	r2, r3, #3
 80026e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ea:	4413      	add	r3, r2
 80026ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x308>
 800270a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002718:	b29a      	uxth	r2, r3
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e057      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002724:	2b3e      	cmp	r3, #62	@ 0x3e
 8002726:	d818      	bhi.n	800275a <HAL_PCD_EP_DB_Transmit+0x342>
 8002728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_PCD_EP_DB_Transmit+0x32a>
 800273c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800273e:	3301      	adds	r3, #1
 8002740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29a      	uxth	r2, r3
 8002748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800274a:	b29b      	uxth	r3, r3
 800274c:	029b      	lsls	r3, r3, #10
 800274e:	b29b      	uxth	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b29a      	uxth	r2, r3
 8002754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	e03a      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x35c>
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002770:	3b01      	subs	r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800277c:	b29b      	uxth	r3, r3
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	b29b      	uxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e01c      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d118      	bne.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b2:	4413      	add	r3, r2
 80027b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00da      	lsls	r2, r3, #3
 80027bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027be:	4413      	add	r3, r2
 80027c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6959      	ldr	r1, [r3, #20]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	891a      	ldrh	r2, [r3, #8]
 80027dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f005 fcde 	bl	80081a2 <USB_WritePMA>
 80027e6:	e1e0      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4413      	add	r3, r2
 8002802:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002818:	429a      	cmp	r2, r3
 800281a:	d307      	bcc.n	800282c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	619a      	str	r2, [r3, #24]
 800282a:	e002      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 80c0 	bne.w	80029bc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d126      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002858:	4413      	add	r3, r2
 800285a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	00da      	lsls	r2, r3, #3
 8002862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002864:	4413      	add	r3, r2
 8002866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800286a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800286c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002876:	b29a      	uxth	r2, r3
 8002878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288a:	b29a      	uxth	r2, r3
 800288c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e01a      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d116      	bne.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	667b      	str	r3, [r7, #100]	@ 0x64
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028ae:	4413      	add	r3, r2
 80028b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	00da      	lsls	r2, r3, #3
 80028b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028ba:	4413      	add	r3, r2
 80028bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80028c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c4:	2200      	movs	r2, #0
 80028c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d12b      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x516>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ea:	4413      	add	r3, r2
 80028ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	00da      	lsls	r2, r3, #3
 80028f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	b29a      	uxth	r2, r3
 800290e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002924:	b29a      	uxth	r2, r3
 8002926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e017      	b.n	800295e <HAL_PCD_EP_DB_Transmit+0x546>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <HAL_PCD_EP_DB_Transmit+0x546>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002944:	4413      	add	r3, r2
 8002946:	677b      	str	r3, [r7, #116]	@ 0x74
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00da      	lsls	r2, r3, #3
 800294e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002950:	4413      	add	r3, r2
 8002952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002956:	673b      	str	r3, [r7, #112]	@ 0x70
 8002958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800295a:	2200      	movs	r2, #0
 800295c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f007 fa66 	bl	8009e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 811a 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800298c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002990:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80029a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	8013      	strh	r3, [r2, #0]
 80029ba:	e0f6      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 80ca 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a1e:	441a      	add	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a2c:	441a      	add	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d30b      	bcc.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	621a      	str	r2, [r3, #32]
 8002a54:	e017      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002a5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a6e:	e00a      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d165      	bne.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x748>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00da      	lsls	r2, r3, #3
 8002ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e054      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8002af0:	d818      	bhi.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x70c>
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b08:	3301      	adds	r3, #1
 8002b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e037      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x726>
 8002b38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e019      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d115      	bne.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b76:	4413      	add	r3, r2
 8002b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00da      	lsls	r2, r3, #3
 8002b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b82:	4413      	add	r3, r2
 8002b84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6959      	ldr	r1, [r3, #20]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	895a      	ldrh	r2, [r3, #10]
 8002ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f005 fafc 	bl	80081a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc4:	82bb      	strh	r3, [r7, #20]
 8002bc6:	8abb      	ldrh	r3, [r7, #20]
 8002bc8:	f083 0310 	eor.w	r3, r3, #16
 8002bcc:	82bb      	strh	r3, [r7, #20]
 8002bce:	8abb      	ldrh	r3, [r7, #20]
 8002bd0:	f083 0320 	eor.w	r3, r3, #32
 8002bd4:	82bb      	strh	r3, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	8abb      	ldrh	r3, [r7, #20]
 8002be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3790      	adds	r7, #144	@ 0x90
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	4613      	mov	r3, r2
 8002c14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f003 0207 	and.w	r2, r3, #7
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	3310      	adds	r3, #16
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c3a:	897a      	ldrh	r2, [r7, #10]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	80da      	strh	r2, [r3, #6]
 8002c62:	e00b      	b.n	8002c7c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2201      	movs	r2, #1
 8002c68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f001 b83a 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 816f 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cc8:	4bb5      	ldr	r3, [pc, #724]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d00c      	beq.n	8002cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd4:	4bb2      	ldr	r3, [pc, #712]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d15c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x10e>
 8002ce0:	4baf      	ldr	r3, [pc, #700]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d155      	bne.n	8002d9a <HAL_RCC_OscConfig+0x10e>
 8002cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_OscConfig+0x94>
 8002d1a:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	e015      	b.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d24:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d38:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002d3c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002d48:	4b95      	ldr	r3, [pc, #596]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d50:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002d54:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002d60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8111 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x318>
 8002d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 8108 	bne.w	8002fa4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f000 bfc6 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x12e>
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e036      	b.n	8002e28 <HAL_RCC_OscConfig+0x19c>
 8002dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x158>
 8002dca:	4b75      	ldr	r3, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a74      	ldr	r2, [pc, #464]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b72      	ldr	r3, [pc, #456]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a71      	ldr	r2, [pc, #452]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e021      	b.n	8002e28 <HAL_RCC_OscConfig+0x19c>
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x184>
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a69      	ldr	r2, [pc, #420]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b67      	ldr	r3, [pc, #412]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a66      	ldr	r2, [pc, #408]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0x19c>
 8002e10:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a62      	ldr	r2, [pc, #392]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b60      	ldr	r3, [pc, #384]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d059      	beq.n	8002eec <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fd ff90 	bl	8000d5c <HAL_GetTick>
 8002e3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e42:	f7fd ff8b 	bl	8000d5c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d902      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	f000 bf67 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 8002e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e5c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002e6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1fe>
 8002e84:	4b46      	ldr	r3, [pc, #280]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x22a>
 8002e8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e8e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002e9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ea6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eba:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002ebe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002eca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ab      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1b6>
 8002eea:	e05c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd ff36 	bl	8000d5c <HAL_GetTick>
 8002ef0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef6:	f7fd ff31 	bl	8000d5c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d902      	bls.n	8002f0c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	f000 bf0d 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 8002f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f10:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002f20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2b2>
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x2de>
 8002f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f42:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002f52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002f5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_RCC_OscConfig+0x314>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f6e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002f72:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002f76:	fa92 f2a2 	rbit	r2, r2
 8002f7a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002f7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ab      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x26a>
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_OscConfig+0x31a>
 8002fa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002faa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 817f 	beq.w	80032ba <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fbc:	4ba7      	ldr	r3, [pc, #668]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc8:	4ba4      	ldr	r3, [pc, #656]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d173      	bne.n	80030bc <HAL_RCC_OscConfig+0x430>
 8002fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe0:	d16c      	bne.n	80030bc <HAL_RCC_OscConfig+0x430>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002ff4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0x386>
 800300c:	4b93      	ldr	r3, [pc, #588]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	e013      	b.n	800303a <HAL_RCC_OscConfig+0x3ae>
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800302a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003036:	4b89      	ldr	r3, [pc, #548]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	2202      	movs	r2, #2
 800303c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003040:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800304c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003050:	fab2 f282 	clz	r2, r2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f042 0220 	orr.w	r2, r2, #32
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f002 021f 	and.w	r2, r2, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f202 	lsl.w	r2, r1, r2
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCC_OscConfig+0x3f6>
 800306c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003070:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d002      	beq.n	8003082 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f000 be52 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b76      	ldr	r3, [pc, #472]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800308a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	21f8      	movs	r1, #248	@ 0xf8
 8003098:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80030a0:	fa91 f1a1 	rbit	r1, r1
 80030a4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80030a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80030ac:	fab1 f181 	clz	r1, r1
 80030b0:	b2c9      	uxtb	r1, r1
 80030b2:	408b      	lsls	r3, r1
 80030b4:	4969      	ldr	r1, [pc, #420]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	e0fe      	b.n	80032ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8088 	beq.w	80031de <HAL_RCC_OscConfig+0x552>
 80030ce:	2301      	movs	r3, #1
 80030d0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80030e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fd fe2f 	bl	8000d5c <HAL_GetTick>
 80030fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003104:	f7fd fe2a 	bl	8000d5c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	f000 be06 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800312c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_RCC_OscConfig+0x4be>
 8003144:	4b45      	ldr	r3, [pc, #276]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e013      	b.n	8003172 <HAL_RCC_OscConfig+0x4e6>
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003162:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800316e:	4b3b      	ldr	r3, [pc, #236]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	2202      	movs	r2, #2
 8003174:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003178:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800317c:	fa92 f2a2 	rbit	r2, r2
 8003180:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003184:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0af      	beq.n	8003104 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	21f8      	movs	r1, #248	@ 0xf8
 80031ba:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80031c2:	fa91 f1a1 	rbit	r1, r1
 80031c6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80031ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80031ce:	fab1 f181 	clz	r1, r1
 80031d2:	b2c9      	uxtb	r1, r1
 80031d4:	408b      	lsls	r3, r1
 80031d6:	4921      	ldr	r1, [pc, #132]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	e06d      	b.n	80032ba <HAL_RCC_OscConfig+0x62e>
 80031de:	2301      	movs	r3, #1
 80031e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80031f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	2300      	movs	r3, #0
 8003208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fd fda7 	bl	8000d5c <HAL_GetTick>
 800320e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003214:	f7fd fda2 	bl	8000d5c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f000 bd7e 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 800322a:	2302      	movs	r3, #2
 800322c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800323c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x5d4>
 8003254:	4b01      	ldr	r3, [pc, #4]	@ (800325c <HAL_RCC_OscConfig+0x5d0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e016      	b.n	8003288 <HAL_RCC_OscConfig+0x5fc>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	2302      	movs	r3, #2
 8003262:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003272:	2302      	movs	r3, #2
 8003274:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003278:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003284:	4bbf      	ldr	r3, [pc, #764]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	2202      	movs	r2, #2
 800328a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800328e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003292:	fa92 f2a2 	rbit	r2, r2
 8003296:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800329a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0220 	orr.w	r2, r2, #32
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ac      	bne.n	8003214 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8113 	beq.w	80034f6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d07c      	beq.n	80033da <HAL_RCC_OscConfig+0x74e>
 80032e0:	2301      	movs	r3, #1
 80032e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80032f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	4ba2      	ldr	r3, [pc, #648]	@ (8003588 <HAL_RCC_OscConfig+0x8fc>)
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	461a      	mov	r2, r3
 8003306:	2301      	movs	r3, #1
 8003308:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fd fd27 	bl	8000d5c <HAL_GetTick>
 800330e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003314:	f7fd fd22 	bl	8000d5c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	f000 bcfe 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800336a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003376:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003384:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003388:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b7e      	ldr	r3, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 800338c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003392:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003396:	2102      	movs	r1, #2
 8003398:	6019      	str	r1, [r3, #0]
 800339a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f1a3 	rbit	r1, r3
 80033a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033b0:	6019      	str	r1, [r3, #0]
  return result;
 80033b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d09d      	beq.n	8003314 <HAL_RCC_OscConfig+0x688>
 80033d8:	e08d      	b.n	80034f6 <HAL_RCC_OscConfig+0x86a>
 80033da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033fc:	601a      	str	r2, [r3, #0]
  return result;
 80033fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003402:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003406:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	4b5d      	ldr	r3, [pc, #372]	@ (8003588 <HAL_RCC_OscConfig+0x8fc>)
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fd fc9e 	bl	8000d5c <HAL_GetTick>
 8003420:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd fc99 	bl	8000d5c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	f000 bc75 	b.w	8003d26 <HAL_RCC_OscConfig+0x109a>
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003468:	2202      	movs	r2, #2
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800348c:	2202      	movs	r2, #2
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003494:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80034a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 80034aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034b4:	2102      	movs	r1, #2
 80034b6:	6019      	str	r1, [r3, #0]
 80034b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f1a3 	rbit	r1, r3
 80034c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034ce:	6019      	str	r1, [r3, #0]
  return result;
 80034d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d197      	bne.n	8003426 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 81a5 	beq.w	8003856 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <HAL_RCC_OscConfig+0x8f8>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003540:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003544:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <HAL_RCC_OscConfig+0x900>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d121      	bne.n	800359c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <HAL_RCC_OscConfig+0x900>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <HAL_RCC_OscConfig+0x900>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003562:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003564:	f7fd fbfa 	bl	8000d5c <HAL_GetTick>
 8003568:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e010      	b.n	8003590 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356e:	f7fd fbf5 	bl	8000d5c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e3d1      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	10908120 	.word	0x10908120
 800358c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b8d      	ldr	r3, [pc, #564]	@ (80037c8 <HAL_RCC_OscConfig+0xb3c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0e8      	beq.n	800356e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x92e>
 80035ac:	4b87      	ldr	r3, [pc, #540]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a86      	ldr	r2, [pc, #536]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	e035      	b.n	8003626 <HAL_RCC_OscConfig+0x99a>
 80035ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x958>
 80035ca:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a7f      	ldr	r2, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6213      	str	r3, [r2, #32]
 80035d6:	4b7d      	ldr	r3, [pc, #500]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4a7c      	ldr	r2, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6213      	str	r3, [r2, #32]
 80035e2:	e020      	b.n	8003626 <HAL_RCC_OscConfig+0x99a>
 80035e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d10c      	bne.n	800360e <HAL_RCC_OscConfig+0x982>
 80035f4:	4b75      	ldr	r3, [pc, #468]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a74      	ldr	r2, [pc, #464]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	4b72      	ldr	r3, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a71      	ldr	r2, [pc, #452]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0x99a>
 800360e:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6213      	str	r3, [r2, #32]
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a6b      	ldr	r2, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800362a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8081 	beq.w	800373a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7fd fb90 	bl	8000d5c <HAL_GetTick>
 800363c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00b      	b.n	800365a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fd fb8b 	bl	8000d5c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e365      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 800365a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003662:	2202      	movs	r2, #2
 8003664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003678:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003682:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003686:	2202      	movs	r2, #2
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80036aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0xa3a>
 80036c0:	4b42      	ldr	r3, [pc, #264]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	e013      	b.n	80036ee <HAL_RCC_OscConfig+0xa62>
 80036c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036ce:	2202      	movs	r2, #2
 80036d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fa93 f2a3 	rbit	r2, r3
 80036e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80036f6:	2102      	movs	r1, #2
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	fa92 f1a2 	rbit	r1, r2
 8003708:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800370c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003710:	6011      	str	r1, [r2, #0]
  return result;
 8003712:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003716:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d084      	beq.n	8003642 <HAL_RCC_OscConfig+0x9b6>
 8003738:	e083      	b.n	8003842 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7fd fb0f 	bl	8000d5c <HAL_GetTick>
 800373e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd fb0a 	bl	8000d5c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e2e4      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003764:	2202      	movs	r2, #2
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	fa93 f2a3 	rbit	r2, r3
 8003776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003784:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003788:	2202      	movs	r2, #2
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003790:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fa93 f2a3 	rbit	r2, r3
 800379a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037a2:	601a      	str	r2, [r3, #0]
  return result;
 80037a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0xb44>
 80037c2:	4b02      	ldr	r3, [pc, #8]	@ (80037cc <HAL_RCC_OscConfig+0xb40>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	e017      	b.n	80037f8 <HAL_RCC_OscConfig+0xb6c>
 80037c8:	40007000 	.word	0x40007000
 80037cc:	40021000 	.word	0x40021000
 80037d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037d8:	2202      	movs	r2, #2
 80037da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f2a3 	rbit	r2, r3
 80037ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ee:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	4bb3      	ldr	r3, [pc, #716]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003800:	2102      	movs	r1, #2
 8003802:	6011      	str	r1, [r2, #0]
 8003804:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003808:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	fa92 f1a2 	rbit	r1, r2
 8003812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003816:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800381a:	6011      	str	r1, [r2, #0]
  return result;
 800381c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003820:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f002 021f 	and.w	r2, r2, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d180      	bne.n	8003744 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003842:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4a9d      	ldr	r2, [pc, #628]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003854:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 825e 	beq.w	8003d24 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	4b96      	ldr	r3, [pc, #600]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	f000 821f 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	f040 8170 	bne.w	8003b68 <HAL_RCC_OscConfig+0xedc>
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	fa93 f2a3 	rbit	r2, r3
 80038a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038ac:	601a      	str	r2, [r3, #0]
  return result;
 80038ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038b6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd fa45 	bl	8000d5c <HAL_GetTick>
 80038d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	e009      	b.n	80038ec <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fa40 	bl	8000d5c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e21c      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 80038ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003910:	601a      	str	r2, [r3, #0]
  return result;
 8003912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003916:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800391a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_RCC_OscConfig+0xcaa>
 8003930:	4b64      	ldr	r3, [pc, #400]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	e027      	b.n	8003986 <HAL_RCC_OscConfig+0xcfa>
 8003936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800393e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003948:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003956:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003960:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003964:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800396e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	fa93 f2a3 	rbit	r2, r3
 8003978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	4b50      	ldr	r3, [pc, #320]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800398a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800398e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003992:	6011      	str	r1, [r2, #0]
 8003994:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003998:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	fa92 f1a2 	rbit	r1, r2
 80039a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039a6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80039aa:	6011      	str	r1, [r2, #0]
  return result;
 80039ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039b0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d182      	bne.n	80038d8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	4937      	ldr	r1, [pc, #220]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80039ec:	4b35      	ldr	r3, [pc, #212]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80039f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a19      	ldr	r1, [r3, #32]
 8003a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	492d      	ldr	r1, [pc, #180]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a18:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a26:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a38:	601a      	str	r2, [r3, #0]
  return result;
 8003a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a3e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	461a      	mov	r2, r3
 8003a56:	2301      	movs	r3, #1
 8003a58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd f97f 	bl	8000d5c <HAL_GetTick>
 8003a5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a62:	e009      	b.n	8003a78 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd f97a 	bl	8000d5c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e156      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 8003a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a98:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a9c:	601a      	str	r2, [r3, #0]
  return result;
 8003a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003aa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xe3c>
 8003abc:	4b01      	ldr	r3, [pc, #4]	@ (8003ac4 <HAL_RCC_OscConfig+0xe38>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e02a      	b.n	8003b18 <HAL_RCC_OscConfig+0xe8c>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003acc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ada:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003af6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b00:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b86      	ldr	r3, [pc, #536]	@ (8003d30 <HAL_RCC_OscConfig+0x10a4>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b1c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b24:	6011      	str	r1, [r2, #0]
 8003b26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b2a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	fa92 f1a2 	rbit	r1, r2
 8003b34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b38:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b3c:	6011      	str	r1, [r2, #0]
  return result;
 8003b3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b42:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	fab2 f282 	clz	r2, r2
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f042 0220 	orr.w	r2, r2, #32
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f002 021f 	and.w	r2, r2, #31
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f43f af7f 	beq.w	8003a64 <HAL_RCC_OscConfig+0xdd8>
 8003b66:	e0dd      	b.n	8003d24 <HAL_RCC_OscConfig+0x1098>
 8003b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	fa93 f2a3 	rbit	r2, r3
 8003b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b88:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b8c:	601a      	str	r2, [r3, #0]
  return result;
 8003b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b96:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ba2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fd f8d5 	bl	8000d5c <HAL_GetTick>
 8003bb2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb6:	e009      	b.n	8003bcc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd f8d0 	bl	8000d5c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0ac      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
 8003bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bde:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bf0:	601a      	str	r2, [r3, #0]
  return result;
 8003bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d102      	bne.n	8003c16 <HAL_RCC_OscConfig+0xf8a>
 8003c10:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_OscConfig+0x10a4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	e027      	b.n	8003c66 <HAL_RCC_OscConfig+0xfda>
 8003c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c36:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c40:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	fa93 f2a3 	rbit	r2, r3
 8003c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <HAL_RCC_OscConfig+0x10a4>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c6a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c72:	6011      	str	r1, [r2, #0]
 8003c74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	fa92 f1a2 	rbit	r1, r2
 8003c82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c86:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c8a:	6011      	str	r1, [r2, #0]
  return result;
 8003c8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c90:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d182      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xf2c>
 8003cb2:	e037      	b.n	8003d24 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02e      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cc8:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_RCC_OscConfig+0x10a4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <HAL_RCC_OscConfig+0x10a4>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cdc:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d117      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cf4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b09e      	sub	sp, #120	@ 0x78
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e162      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b90      	ldr	r3, [pc, #576]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	498b      	ldr	r1, [pc, #556]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b89      	ldr	r3, [pc, #548]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e14a      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b82      	ldr	r3, [pc, #520]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	497f      	ldr	r1, [pc, #508]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80dc 	beq.w	8003f60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d13c      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xf6>
 8003db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003db4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_ClockConfig+0xa6>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	e00f      	b.n	8003dfa <HAL_RCC_ClockConfig+0xc6>
 8003dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003de8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003df6:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dfe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e02:	fa92 f2a2 	rbit	r2, r2
 8003e06:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f002 021f 	and.w	r2, r2, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d17b      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0f3      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d13c      	bne.n	8003eac <HAL_RCC_ClockConfig+0x178>
 8003e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x128>
 8003e56:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	e00f      	b.n	8003e7c <HAL_RCC_ClockConfig+0x148>
 8003e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e78:	4b46      	ldr	r3, [pc, #280]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e80:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f042 0220 	orr.w	r2, r2, #32
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f002 021f 	and.w	r2, r2, #31
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13a      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b2      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
 8003eac:	2302      	movs	r3, #2
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x1a0>
 8003ece:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	e00d      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1bc>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	4b29      	ldr	r3, [pc, #164]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	61ba      	str	r2, [r7, #24]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	fa92 f2a2 	rbit	r2, r2
 8003efa:	617a      	str	r2, [r7, #20]
  return result;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f042 0220 	orr.w	r2, r2, #32
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e079      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	491a      	ldr	r1, [pc, #104]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fc ff14 	bl	8000d5c <HAL_GetTick>
 8003f34:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fc ff10 	bl	8000d5c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e061      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d214      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 0207 	bic.w	r2, r3, #7
 8003f76:	4906      	ldr	r1, [pc, #24]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e040      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	491a      	ldr	r1, [pc, #104]	@ (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4912      	ldr	r1, [pc, #72]	@ (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fd6:	f000 f829 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe4:	22f0      	movs	r2, #240	@ 0xf0
 8003fe6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	fa92 f2a2 	rbit	r2, r2
 8003fee:	60fa      	str	r2, [r7, #12]
  return result;
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	fab2 f282 	clz	r2, r2
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	40d3      	lsrs	r3, r2
 8003ffa:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x2ec>)
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8004002:	4a08      	ldr	r2, [pc, #32]	@ (8004024 <HAL_RCC_ClockConfig+0x2f0>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <HAL_RCC_ClockConfig+0x2f4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fe62 	bl	8000cd4 <HAL_InitTick>
  
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3778      	adds	r7, #120	@ 0x78
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	0800b6ec 	.word	0x0800b6ec
 8004024:	20000000 	.word	0x20000000
 8004028:	20000004 	.word	0x20000004

0800402c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x30>
 8004056:	2b08      	cmp	r3, #8
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x36>
 800405a:	e029      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800405e:	613b      	str	r3, [r7, #16]
      break;
 8004060:	e029      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0c9b      	lsrs	r3, r3, #18
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004070:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	4a15      	ldr	r2, [pc, #84]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004088:	4a0f      	ldr	r2, [pc, #60]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e007      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800409a:	4a0e      	ldr	r2, [pc, #56]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	613b      	str	r3, [r7, #16]
      break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80040b2:	613b      	str	r3, [r7, #16]
      break;
 80040b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b6:	693b      	ldr	r3, [r7, #16]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40021000 	.word	0x40021000
 80040c8:	00b71b00 	.word	0x00b71b00
 80040cc:	0800b704 	.word	0x0800b704
 80040d0:	0800b714 	.word	0x0800b714
 80040d4:	007a1200 	.word	0x007a1200

080040d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040f6:	f7ff ffef 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040fa:	4601      	mov	r1, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004104:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	fa92 f2a2 	rbit	r2, r2
 8004110:	603a      	str	r2, [r7, #0]
  return result;
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	40d3      	lsrs	r3, r2
 800411c:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <HAL_RCC_GetPCLK1Freq+0x40>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	0800b6fc 	.word	0x0800b6fc

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800413a:	f7ff ffcd 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 800413e:	4601      	mov	r1, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004148:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800414c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	fa92 f2a2 	rbit	r2, r2
 8004154:	603a      	str	r2, [r7, #0]
  return result;
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	fab2 f282 	clz	r2, r2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	40d3      	lsrs	r3, r2
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	0800b6fc 	.word	0x0800b6fc

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b092      	sub	sp, #72	@ 0x48
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80d4 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419c:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10e      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b4b      	ldr	r3, [pc, #300]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	61d3      	str	r3, [r2, #28]
 80041b4:	4b48      	ldr	r3, [pc, #288]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b45      	ldr	r3, [pc, #276]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b42      	ldr	r3, [pc, #264]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a41      	ldr	r2, [pc, #260]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fc fdbd 	bl	8000d5c <HAL_GetTick>
 80041e2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fc fdb9 	bl	8000d5c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	@ 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1d6      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b38      	ldr	r3, [pc, #224]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004204:	4b34      	ldr	r3, [pc, #208]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8084 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004220:	429a      	cmp	r2, r3
 8004222:	d07c      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004224:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800422e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004232:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	461a      	mov	r2, r3
 800424e:	2301      	movs	r3, #1
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	461a      	mov	r2, r3
 8004272:	2300      	movs	r3, #0
 8004274:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004276:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04b      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fc fd69 	bl	8000d5c <HAL_GetTick>
 800428a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fc fd65 	bl	8000d5c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e180      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042a4:	2302      	movs	r3, #2
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b0:	2302      	movs	r3, #2
 80042b2:	623b      	str	r3, [r7, #32]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	61fb      	str	r3, [r7, #28]
  return result;
 80042bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d108      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042d2:	4b01      	ldr	r3, [pc, #4]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	e00d      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	10908100 	.word	0x10908100
 80042e4:	2302      	movs	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	4b9a      	ldr	r3, [pc, #616]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	2202      	movs	r2, #2
 80042f6:	613a      	str	r2, [r7, #16]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	fa92 f2a2 	rbit	r2, r2
 80042fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	fab2 f282 	clz	r2, r2
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	f002 021f 	and.w	r2, r2, #31
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f202 	lsl.w	r2, r1, r2
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0b7      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800431e:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	498c      	ldr	r1, [pc, #560]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004330:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b88      	ldr	r3, [pc, #544]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4a87      	ldr	r2, [pc, #540]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004342:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004350:	4b82      	ldr	r3, [pc, #520]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	f023 0203 	bic.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	497f      	ldr	r1, [pc, #508]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800436e:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4978      	ldr	r1, [pc, #480]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438c:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4970      	ldr	r1, [pc, #448]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043aa:	4b6c      	ldr	r3, [pc, #432]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4969      	ldr	r1, [pc, #420]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043c8:	4b64      	ldr	r3, [pc, #400]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	4961      	ldr	r1, [pc, #388]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e6:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	f023 0220 	bic.w	r2, r3, #32
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	495a      	ldr	r1, [pc, #360]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004404:	4b55      	ldr	r3, [pc, #340]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	4952      	ldr	r1, [pc, #328]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004422:	4b4e      	ldr	r3, [pc, #312]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	494b      	ldr	r1, [pc, #300]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004440:	4b46      	ldr	r3, [pc, #280]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4943      	ldr	r1, [pc, #268]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	493c      	ldr	r1, [pc, #240]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	4934      	ldr	r1, [pc, #208]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	492d      	ldr	r1, [pc, #180]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044b8:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c4:	4925      	ldr	r1, [pc, #148]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044d6:	4b21      	ldr	r3, [pc, #132]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	491e      	ldr	r1, [pc, #120]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	4916      	ldr	r1, [pc, #88]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451e:	490f      	ldr	r1, [pc, #60]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	4907      	ldr	r1, [pc, #28]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800454e:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004562:	4913      	ldr	r1, [pc, #76]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004564:	4313      	orrs	r3, r2
 8004566:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004574:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004580:	490b      	ldr	r1, [pc, #44]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004582:	4313      	orrs	r3, r2
 8004584:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3748      	adds	r7, #72	@ 0x48
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e09d      	b.n	8004702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d6:	d009      	beq.n	80045ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
 80045de:	e005      	b.n	80045ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fb ffbc 	bl	8000584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800462c:	d902      	bls.n	8004634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e002      	b.n	800463a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Init+0xa0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0204 	and.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e049      	b.n	80047b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc f98b 	bl	8000a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 f949 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0ff      	b.n	80049d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b14      	cmp	r3, #20
 80047e2:	f200 80f0 	bhi.w	80049c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047e6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080049c7 	.word	0x080049c7
 80047f4:	080049c7 	.word	0x080049c7
 80047f8:	080049c7 	.word	0x080049c7
 80047fc:	08004881 	.word	0x08004881
 8004800:	080049c7 	.word	0x080049c7
 8004804:	080049c7 	.word	0x080049c7
 8004808:	080049c7 	.word	0x080049c7
 800480c:	080048c3 	.word	0x080048c3
 8004810:	080049c7 	.word	0x080049c7
 8004814:	080049c7 	.word	0x080049c7
 8004818:	080049c7 	.word	0x080049c7
 800481c:	08004903 	.word	0x08004903
 8004820:	080049c7 	.word	0x080049c7
 8004824:	080049c7 	.word	0x080049c7
 8004828:	080049c7 	.word	0x080049c7
 800482c:	08004945 	.word	0x08004945
 8004830:	080049c7 	.word	0x080049c7
 8004834:	080049c7 	.word	0x080049c7
 8004838:	080049c7 	.word	0x080049c7
 800483c:	08004985 	.word	0x08004985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f974 	bl	8004b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0208 	orr.w	r2, r2, #8
 800485a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	619a      	str	r2, [r3, #24]
      break;
 800487e:	e0a5      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f9ee 	bl	8004c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800489a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	619a      	str	r2, [r3, #24]
      break;
 80048c0:	e084      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fa61 	bl	8004d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0208 	orr.w	r2, r2, #8
 80048dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0204 	bic.w	r2, r2, #4
 80048ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69d9      	ldr	r1, [r3, #28]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	61da      	str	r2, [r3, #28]
      break;
 8004900:	e064      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fad3 	bl	8004eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800491c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	61da      	str	r2, [r3, #28]
      break;
 8004942:	e043      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb22 	bl	8004f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0208 	orr.w	r2, r2, #8
 800495e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004982:	e023      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fb6c 	bl	8005068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049c4:	e002      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a48      	ldr	r2, [pc, #288]	@ (8004b14 <TIM_Base_SetConfig+0x134>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fe:	d00f      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a45      	ldr	r2, [pc, #276]	@ (8004b18 <TIM_Base_SetConfig+0x138>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a44      	ldr	r2, [pc, #272]	@ (8004b1c <TIM_Base_SetConfig+0x13c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a43      	ldr	r2, [pc, #268]	@ (8004b20 <TIM_Base_SetConfig+0x140>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a42      	ldr	r2, [pc, #264]	@ (8004b24 <TIM_Base_SetConfig+0x144>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a37      	ldr	r2, [pc, #220]	@ (8004b14 <TIM_Base_SetConfig+0x134>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01f      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a40:	d01b      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a34      	ldr	r2, [pc, #208]	@ (8004b18 <TIM_Base_SetConfig+0x138>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d017      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	@ (8004b1c <TIM_Base_SetConfig+0x13c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <TIM_Base_SetConfig+0x140>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00f      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a32      	ldr	r2, [pc, #200]	@ (8004b28 <TIM_Base_SetConfig+0x148>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00b      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a31      	ldr	r2, [pc, #196]	@ (8004b2c <TIM_Base_SetConfig+0x14c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a30      	ldr	r2, [pc, #192]	@ (8004b30 <TIM_Base_SetConfig+0x150>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <TIM_Base_SetConfig+0x144>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d108      	bne.n	8004a8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <TIM_Base_SetConfig+0x134>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <TIM_Base_SetConfig+0x100>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <TIM_Base_SetConfig+0x140>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00f      	beq.n	8004ae0 <TIM_Base_SetConfig+0x100>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <TIM_Base_SetConfig+0x148>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0x100>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <TIM_Base_SetConfig+0x14c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0x100>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <TIM_Base_SetConfig+0x150>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0x100>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <TIM_Base_SetConfig+0x144>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
  }
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40015000 	.word	0x40015000
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f023 0201 	bic.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 0302 	bic.w	r3, r3, #2
 8004b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a30      	ldr	r2, [pc, #192]	@ (8004c50 <TIM_OC1_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <TIM_OC1_SetConfig+0x88>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a2f      	ldr	r2, [pc, #188]	@ (8004c54 <TIM_OC1_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00f      	beq.n	8004bbc <TIM_OC1_SetConfig+0x88>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004c58 <TIM_OC1_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_OC1_SetConfig+0x88>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c5c <TIM_OC1_SetConfig+0x128>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_OC1_SetConfig+0x88>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a2c      	ldr	r2, [pc, #176]	@ (8004c60 <TIM_OC1_SetConfig+0x12c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC1_SetConfig+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <TIM_OC1_SetConfig+0x130>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10c      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0308 	bic.w	r3, r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <TIM_OC1_SetConfig+0x11c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_OC1_SetConfig+0xd2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <TIM_OC1_SetConfig+0x120>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_OC1_SetConfig+0xd2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <TIM_OC1_SetConfig+0x124>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_OC1_SetConfig+0xd2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <TIM_OC1_SetConfig+0x128>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_OC1_SetConfig+0xd2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <TIM_OC1_SetConfig+0x12c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC1_SetConfig+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <TIM_OC1_SetConfig+0x130>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d111      	bne.n	8004c2a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800
 8004c64:	40015000 	.word	0x40015000

08004c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f023 0210 	bic.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <TIM_OC2_SetConfig+0x110>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_OC2_SetConfig+0x74>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a2b      	ldr	r2, [pc, #172]	@ (8004d7c <TIM_OC2_SetConfig+0x114>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC2_SetConfig+0x74>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <TIM_OC2_SetConfig+0x118>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10d      	bne.n	8004cf8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8004d78 <TIM_OC2_SetConfig+0x110>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <TIM_OC2_SetConfig+0xc0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	@ (8004d7c <TIM_OC2_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_OC2_SetConfig+0xc0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <TIM_OC2_SetConfig+0x11c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_OC2_SetConfig+0xc0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	@ (8004d88 <TIM_OC2_SetConfig+0x120>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_OC2_SetConfig+0xc0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d8c <TIM_OC2_SetConfig+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_OC2_SetConfig+0xc0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <TIM_OC2_SetConfig+0x118>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d113      	bne.n	8004d50 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40013400 	.word	0x40013400
 8004d80:	40015000 	.word	0x40015000
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <TIM_OC3_SetConfig+0x10c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_OC3_SetConfig+0x72>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea0 <TIM_OC3_SetConfig+0x110>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_OC3_SetConfig+0x72>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ea4 <TIM_OC3_SetConfig+0x114>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <TIM_OC3_SetConfig+0x10c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_OC3_SetConfig+0xbe>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <TIM_OC3_SetConfig+0x110>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_OC3_SetConfig+0xbe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <TIM_OC3_SetConfig+0x118>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_OC3_SetConfig+0xbe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	@ (8004eac <TIM_OC3_SetConfig+0x11c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_OC3_SetConfig+0xbe>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb0 <TIM_OC3_SetConfig+0x120>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_OC3_SetConfig+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a16      	ldr	r2, [pc, #88]	@ (8004ea4 <TIM_OC3_SetConfig+0x114>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d113      	bne.n	8004e76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40015000 	.word	0x40015000
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	@ (8004f7c <TIM_OC4_SetConfig+0xc8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_OC4_SetConfig+0x8c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <TIM_OC4_SetConfig+0xcc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC4_SetConfig+0x8c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a18      	ldr	r2, [pc, #96]	@ (8004f84 <TIM_OC4_SetConfig+0xd0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC4_SetConfig+0x8c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	@ (8004f88 <TIM_OC4_SetConfig+0xd4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC4_SetConfig+0x8c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a16      	ldr	r2, [pc, #88]	@ (8004f8c <TIM_OC4_SetConfig+0xd8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC4_SetConfig+0x8c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <TIM_OC4_SetConfig+0xdc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40015000 	.word	0x40015000

08004f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <TIM_OC5_SetConfig+0xbc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <TIM_OC5_SetConfig+0x82>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <TIM_OC5_SetConfig+0xc0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <TIM_OC5_SetConfig+0x82>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <TIM_OC5_SetConfig+0xc4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_OC5_SetConfig+0x82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <TIM_OC5_SetConfig+0xc8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_OC5_SetConfig+0x82>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <TIM_OC5_SetConfig+0xcc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC5_SetConfig+0x82>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <TIM_OC5_SetConfig+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d109      	bne.n	800502a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	621a      	str	r2, [r3, #32]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	40015000 	.word	0x40015000

08005068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	051b      	lsls	r3, r3, #20
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1a      	ldr	r2, [pc, #104]	@ (8005128 <TIM_OC6_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_OC6_SetConfig+0x84>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a19      	ldr	r2, [pc, #100]	@ (800512c <TIM_OC6_SetConfig+0xc4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_OC6_SetConfig+0x84>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <TIM_OC6_SetConfig+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC6_SetConfig+0x84>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <TIM_OC6_SetConfig+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC6_SetConfig+0x84>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <TIM_OC6_SetConfig+0xd0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC6_SetConfig+0x84>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <TIM_OC6_SetConfig+0xd4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d109      	bne.n	8005100 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800
 800513c:	40015000 	.word	0x40015000

08005140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005154:	2302      	movs	r3, #2
 8005156:	e06d      	b.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a30      	ldr	r2, [pc, #192]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2f      	ldr	r2, [pc, #188]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2d      	ldr	r2, [pc, #180]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800519c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d01d      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d018      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1c      	ldr	r2, [pc, #112]	@ (800524c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a15      	ldr	r2, [pc, #84]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a16      	ldr	r2, [pc, #88]	@ (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10c      	bne.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40015000 	.word	0x40015000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40014000 	.word	0x40014000

08005258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e06a      	b.n	800534a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a19      	ldr	r2, [pc, #100]	@ (8005358 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a17      	ldr	r2, [pc, #92]	@ (800535c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a16      	ldr	r2, [pc, #88]	@ (8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d115      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	051b      	lsls	r3, r3, #20
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40015000 	.word	0x40015000

08005364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e040      	b.n	80053f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fb fc20 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	@ 0x24
 8005390:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9fc 	bl	80057a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f825 	bl	8005400 <UART_SetConfig>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e01b      	b.n	80053f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa7b 	bl	80058ec <UART_CheckIdleState>
 80053f6:	4603      	mov	r3, r0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b92      	ldr	r3, [pc, #584]	@ (8005674 <UART_SetConfig+0x274>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	430b      	orrs	r3, r1
 8005436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a80      	ldr	r2, [pc, #512]	@ (8005678 <UART_SetConfig+0x278>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d120      	bne.n	80054be <UART_SetConfig+0xbe>
 800547c:	4b7f      	ldr	r3, [pc, #508]	@ (800567c <UART_SetConfig+0x27c>)
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b03      	cmp	r3, #3
 8005486:	d817      	bhi.n	80054b8 <UART_SetConfig+0xb8>
 8005488:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <UART_SetConfig+0x90>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b3 	.word	0x080054b3
 800549c:	080054a7 	.word	0x080054a7
 80054a0:	2301      	movs	r3, #1
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0b5      	b.n	8005612 <UART_SetConfig+0x212>
 80054a6:	2302      	movs	r3, #2
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0b2      	b.n	8005612 <UART_SetConfig+0x212>
 80054ac:	2304      	movs	r3, #4
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0af      	b.n	8005612 <UART_SetConfig+0x212>
 80054b2:	2308      	movs	r3, #8
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e0ac      	b.n	8005612 <UART_SetConfig+0x212>
 80054b8:	2310      	movs	r3, #16
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0a9      	b.n	8005612 <UART_SetConfig+0x212>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005680 <UART_SetConfig+0x280>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d124      	bne.n	8005512 <UART_SetConfig+0x112>
 80054c8:	4b6c      	ldr	r3, [pc, #432]	@ (800567c <UART_SetConfig+0x27c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054d4:	d011      	beq.n	80054fa <UART_SetConfig+0xfa>
 80054d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054da:	d817      	bhi.n	800550c <UART_SetConfig+0x10c>
 80054dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054e0:	d011      	beq.n	8005506 <UART_SetConfig+0x106>
 80054e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054e6:	d811      	bhi.n	800550c <UART_SetConfig+0x10c>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <UART_SetConfig+0xf4>
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f0:	d006      	beq.n	8005500 <UART_SetConfig+0x100>
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x10c>
 80054f4:	2300      	movs	r3, #0
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e08b      	b.n	8005612 <UART_SetConfig+0x212>
 80054fa:	2302      	movs	r3, #2
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e088      	b.n	8005612 <UART_SetConfig+0x212>
 8005500:	2304      	movs	r3, #4
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e085      	b.n	8005612 <UART_SetConfig+0x212>
 8005506:	2308      	movs	r3, #8
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e082      	b.n	8005612 <UART_SetConfig+0x212>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e07f      	b.n	8005612 <UART_SetConfig+0x212>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5b      	ldr	r2, [pc, #364]	@ (8005684 <UART_SetConfig+0x284>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d124      	bne.n	8005566 <UART_SetConfig+0x166>
 800551c:	4b57      	ldr	r3, [pc, #348]	@ (800567c <UART_SetConfig+0x27c>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005524:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005528:	d011      	beq.n	800554e <UART_SetConfig+0x14e>
 800552a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800552e:	d817      	bhi.n	8005560 <UART_SetConfig+0x160>
 8005530:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005534:	d011      	beq.n	800555a <UART_SetConfig+0x15a>
 8005536:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800553a:	d811      	bhi.n	8005560 <UART_SetConfig+0x160>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <UART_SetConfig+0x148>
 8005540:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005544:	d006      	beq.n	8005554 <UART_SetConfig+0x154>
 8005546:	e00b      	b.n	8005560 <UART_SetConfig+0x160>
 8005548:	2300      	movs	r3, #0
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e061      	b.n	8005612 <UART_SetConfig+0x212>
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e05e      	b.n	8005612 <UART_SetConfig+0x212>
 8005554:	2304      	movs	r3, #4
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e05b      	b.n	8005612 <UART_SetConfig+0x212>
 800555a:	2308      	movs	r3, #8
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e058      	b.n	8005612 <UART_SetConfig+0x212>
 8005560:	2310      	movs	r3, #16
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e055      	b.n	8005612 <UART_SetConfig+0x212>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a47      	ldr	r2, [pc, #284]	@ (8005688 <UART_SetConfig+0x288>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d124      	bne.n	80055ba <UART_SetConfig+0x1ba>
 8005570:	4b42      	ldr	r3, [pc, #264]	@ (800567c <UART_SetConfig+0x27c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800557c:	d011      	beq.n	80055a2 <UART_SetConfig+0x1a2>
 800557e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005582:	d817      	bhi.n	80055b4 <UART_SetConfig+0x1b4>
 8005584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005588:	d011      	beq.n	80055ae <UART_SetConfig+0x1ae>
 800558a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800558e:	d811      	bhi.n	80055b4 <UART_SetConfig+0x1b4>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <UART_SetConfig+0x19c>
 8005594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005598:	d006      	beq.n	80055a8 <UART_SetConfig+0x1a8>
 800559a:	e00b      	b.n	80055b4 <UART_SetConfig+0x1b4>
 800559c:	2300      	movs	r3, #0
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e037      	b.n	8005612 <UART_SetConfig+0x212>
 80055a2:	2302      	movs	r3, #2
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e034      	b.n	8005612 <UART_SetConfig+0x212>
 80055a8:	2304      	movs	r3, #4
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e031      	b.n	8005612 <UART_SetConfig+0x212>
 80055ae:	2308      	movs	r3, #8
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e02e      	b.n	8005612 <UART_SetConfig+0x212>
 80055b4:	2310      	movs	r3, #16
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e02b      	b.n	8005612 <UART_SetConfig+0x212>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a33      	ldr	r2, [pc, #204]	@ (800568c <UART_SetConfig+0x28c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d124      	bne.n	800560e <UART_SetConfig+0x20e>
 80055c4:	4b2d      	ldr	r3, [pc, #180]	@ (800567c <UART_SetConfig+0x27c>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80055cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055d0:	d011      	beq.n	80055f6 <UART_SetConfig+0x1f6>
 80055d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055d6:	d817      	bhi.n	8005608 <UART_SetConfig+0x208>
 80055d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055dc:	d011      	beq.n	8005602 <UART_SetConfig+0x202>
 80055de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e2:	d811      	bhi.n	8005608 <UART_SetConfig+0x208>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <UART_SetConfig+0x1f0>
 80055e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ec:	d006      	beq.n	80055fc <UART_SetConfig+0x1fc>
 80055ee:	e00b      	b.n	8005608 <UART_SetConfig+0x208>
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x212>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e00a      	b.n	8005612 <UART_SetConfig+0x212>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e007      	b.n	8005612 <UART_SetConfig+0x212>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e004      	b.n	8005612 <UART_SetConfig+0x212>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e001      	b.n	8005612 <UART_SetConfig+0x212>
 800560e:	2310      	movs	r3, #16
 8005610:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561a:	d16b      	bne.n	80056f4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800561c:	7ffb      	ldrb	r3, [r7, #31]
 800561e:	2b08      	cmp	r3, #8
 8005620:	d838      	bhi.n	8005694 <UART_SetConfig+0x294>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0x228>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	08005695 	.word	0x08005695
 8005638:	08005663 	.word	0x08005663
 800563c:	08005695 	.word	0x08005695
 8005640:	08005695 	.word	0x08005695
 8005644:	08005695 	.word	0x08005695
 8005648:	0800566b 	.word	0x0800566b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fe fd50 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005650:	61b8      	str	r0, [r7, #24]
        break;
 8005652:	e024      	b.n	800569e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fe fd6e 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8005658:	61b8      	str	r0, [r7, #24]
        break;
 800565a:	e020      	b.n	800569e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <UART_SetConfig+0x290>)
 800565e:	61bb      	str	r3, [r7, #24]
        break;
 8005660:	e01d      	b.n	800569e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005662:	f7fe fce3 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8005666:	61b8      	str	r0, [r7, #24]
        break;
 8005668:	e019      	b.n	800569e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566e:	61bb      	str	r3, [r7, #24]
        break;
 8005670:	e015      	b.n	800569e <UART_SetConfig+0x29e>
 8005672:	bf00      	nop
 8005674:	efff69f3 	.word	0xefff69f3
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	40004800 	.word	0x40004800
 8005688:	40004c00 	.word	0x40004c00
 800568c:	40005000 	.word	0x40005000
 8005690:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	77bb      	strb	r3, [r7, #30]
        break;
 800569c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d073      	beq.n	800578c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	005a      	lsls	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	441a      	add	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b0f      	cmp	r3, #15
 80056be:	d916      	bls.n	80056ee <UART_SetConfig+0x2ee>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c6:	d212      	bcs.n	80056ee <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f023 030f 	bic.w	r3, r3, #15
 80056d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	b29a      	uxth	r2, r3
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	89fa      	ldrh	r2, [r7, #14]
 80056ea:	60da      	str	r2, [r3, #12]
 80056ec:	e04e      	b.n	800578c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	77bb      	strb	r3, [r7, #30]
 80056f2:	e04b      	b.n	800578c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d827      	bhi.n	800574a <UART_SetConfig+0x34a>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0x300>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	0800574b 	.word	0x0800574b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fe fce4 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005728:	61b8      	str	r0, [r7, #24]
        break;
 800572a:	e013      	b.n	8005754 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fe fd02 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8005730:	61b8      	str	r0, [r7, #24]
        break;
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <UART_SetConfig+0x3a4>)
 8005736:	61bb      	str	r3, [r7, #24]
        break;
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fc77 	bl	800402c <HAL_RCC_GetSysClockFreq>
 800573e:	61b8      	str	r0, [r7, #24]
        break;
 8005740:	e008      	b.n	8005754 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005746:	61bb      	str	r3, [r7, #24]
        break;
 8005748:	e004      	b.n	8005754 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	77bb      	strb	r3, [r7, #30]
        break;
 8005752:	bf00      	nop
    }

    if (pclk != 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d909      	bls.n	8005788 <UART_SetConfig+0x388>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577a:	d205      	bcs.n	8005788 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005798:	7fbb      	ldrb	r3, [r7, #30]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	007a1200 	.word	0x007a1200

080057a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a6:	d10a      	bne.n	80058be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b098      	sub	sp, #96	@ 0x60
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058fc:	f7fb fa2e 	bl	8000d5c <HAL_GetTick>
 8005900:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d12e      	bne.n	800596e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f88c 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d021      	beq.n	800596e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800593e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
 800594a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800594e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e062      	b.n	8005a34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b04      	cmp	r3, #4
 800597a:	d149      	bne.n	8005a10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f856 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d03c      	beq.n	8005a10 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	623b      	str	r3, [r7, #32]
   return(result);
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3308      	adds	r3, #8
 80059ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	617b      	str	r3, [r7, #20]
   return(result);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e5      	bne.n	80059c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e011      	b.n	8005a34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3758      	adds	r7, #88	@ 0x58
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	e04f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a54:	d04b      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7fb f981 	bl	8000d5c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e04e      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d037      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b80      	cmp	r3, #128	@ 0x80
 8005a82:	d034      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b40      	cmp	r3, #64	@ 0x40
 8005a88:	d031      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d110      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f838 	bl	8005b16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e029      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac8:	d111      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f81e 	bl	8005b16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e00f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d0a0      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b095      	sub	sp, #84	@ 0x54
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d118      	bne.n	8005bbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e6      	bne.n	8005b8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bd2:	bf00      	nop
 8005bd4:	3754      	adds	r7, #84	@ 0x54
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c14:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005c18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b09d      	sub	sp, #116	@ 0x74
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	78db      	ldrb	r3, [r3, #3]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d81f      	bhi.n	8005cf2 <USB_ActivateEndpoint+0x72>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <USB_ActivateEndpoint+0x38>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005cfb 	.word	0x08005cfb
 8005cc4:	08005cd7 	.word	0x08005cd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cd4:	e012      	b.n	8005cfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cd6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cda:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005cde:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ce2:	e00b      	b.n	8005cfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ce4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cf0:	e004      	b.n	8005cfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005cf8:	e000      	b.n	8005cfc <USB_ActivateEndpoint+0x7c>
      break;
 8005cfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	b21a      	sxth	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	b21b      	sxth	r3, r3
 8005d42:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	7b1b      	ldrb	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8178 	bne.w	8006062 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8084 	beq.w	8005e84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	00da      	lsls	r2, r3, #3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	88db      	ldrh	r3, [r3, #6]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	827b      	strh	r3, [r7, #18]
 8005dbe:	8a7b      	ldrh	r3, [r7, #18]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <USB_ActivateEndpoint+0x180>
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	823b      	strh	r3, [r7, #16]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8a3b      	ldrh	r3, [r7, #16]
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d020      	beq.n	8005e4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1e:	81bb      	strh	r3, [r7, #12]
 8005e20:	89bb      	ldrh	r3, [r7, #12]
 8005e22:	f083 0320 	eor.w	r3, r3, #32
 8005e26:	81bb      	strh	r3, [r7, #12]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	89bb      	ldrh	r3, [r7, #12]
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]
 8005e48:	e2d5      	b.n	80063f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e60:	81fb      	strh	r3, [r7, #14]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]
 8005e82:	e2b8      	b.n	80063f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	4413      	add	r3, r2
 8005e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	88db      	ldrh	r3, [r3, #6]
 8005eac:	085b      	lsrs	r3, r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	4413      	add	r3, r2
 8005eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	00da      	lsls	r2, r3, #3
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <USB_ActivateEndpoint+0x28a>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e039      	b.n	8005f7e <USB_ActivateEndpoint+0x2fe>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f10:	d818      	bhi.n	8005f44 <USB_ActivateEndpoint+0x2c4>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <USB_ActivateEndpoint+0x2ac>
 8005f26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f28:	3301      	adds	r3, #1
 8005f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	029b      	lsls	r3, r3, #10
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	e01c      	b.n	8005f7e <USB_ActivateEndpoint+0x2fe>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <USB_ActivateEndpoint+0x2de>
 8005f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01b      	beq.n	8005fce <USB_ActivateEndpoint+0x34e>
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fac:	843b      	strh	r3, [r7, #32]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	8c3b      	ldrh	r3, [r7, #32]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d124      	bne.n	8006020 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fec:	83bb      	strh	r3, [r7, #28]
 8005fee:	8bbb      	ldrh	r3, [r7, #28]
 8005ff0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ff4:	83bb      	strh	r3, [r7, #28]
 8005ff6:	8bbb      	ldrh	r3, [r7, #28]
 8005ff8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ffc:	83bb      	strh	r3, [r7, #28]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	8bbb      	ldrh	r3, [r7, #28]
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
 800601e:	e1ea      	b.n	80063f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	83fb      	strh	r3, [r7, #30]
 8006038:	8bfb      	ldrh	r3, [r7, #30]
 800603a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800603e:	83fb      	strh	r3, [r7, #30]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	8bfb      	ldrh	r3, [r7, #30]
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
 8006060:	e1c9      	b.n	80063f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d11e      	bne.n	80060a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006080:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800609a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800609e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
 80060a6:	e01d      	b.n	80060e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80060d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f4:	4413      	add	r3, r2
 80060f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	00da      	lsls	r2, r3, #3
 80060fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006100:	4413      	add	r3, r2
 8006102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	891b      	ldrh	r3, [r3, #8]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	657b      	str	r3, [r7, #84]	@ 0x54
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006128:	4413      	add	r3, r2
 800612a:	657b      	str	r3, [r7, #84]	@ 0x54
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00da      	lsls	r2, r3, #3
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	4413      	add	r3, r2
 8006136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800613a:	653b      	str	r3, [r7, #80]	@ 0x50
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	895b      	ldrh	r3, [r3, #10]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	b29b      	uxth	r3, r3
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800614a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 8093 	bne.w	800627c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006166:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800616a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <USB_ActivateEndpoint+0x52a>
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006188:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800619e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80061b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01b      	beq.n	80061fa <USB_ActivateEndpoint+0x57a>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800620c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006210:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006212:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006214:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006218:	873b      	strh	r3, [r7, #56]	@ 0x38
 800621a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800621c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006220:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800623a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006258:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
 800627a:	e0bc      	b.n	80063f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800628c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01d      	beq.n	80062d4 <USB_ActivateEndpoint+0x654>
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80062c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80062e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01d      	beq.n	800632c <USB_ActivateEndpoint+0x6ac>
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	441a      	add	r2, r3
 8006314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006324:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006328:	b29b      	uxth	r3, r3
 800632a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d024      	beq.n	800637e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800634a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800634e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006352:	f083 0320 	eor.w	r3, r3, #32
 8006356:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800636c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006378:	b29b      	uxth	r3, r3
 800637a:	8013      	strh	r3, [r2, #0]
 800637c:	e01d      	b.n	80063ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006394:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3774      	adds	r7, #116	@ 0x74
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop

08006408 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006408:	b480      	push	{r7}
 800640a:	b08d      	sub	sp, #52	@ 0x34
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	7b1b      	ldrb	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 808e 	bne.w	8006538 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d044      	beq.n	80064ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	81bb      	strh	r3, [r7, #12]
 8006432:	89bb      	ldrh	r3, [r7, #12]
 8006434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <USB_DeactivateEndpoint+0x6c>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	817b      	strh	r3, [r7, #10]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	441a      	add	r2, r3
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006468:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006470:	b29b      	uxth	r3, r3
 8006472:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800648a:	813b      	strh	r3, [r7, #8]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	441a      	add	r2, r3
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800649c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	8013      	strh	r3, [r2, #0]
 80064ac:	e192      	b.n	80067d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	827b      	strh	r3, [r7, #18]
 80064bc:	8a7b      	ldrh	r3, [r7, #18]
 80064be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01b      	beq.n	80064fe <USB_DeactivateEndpoint+0xf6>
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064dc:	823b      	strh	r3, [r7, #16]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	8a3b      	ldrh	r3, [r7, #16]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006514:	81fb      	strh	r3, [r7, #14]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	441a      	add	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]
 8006536:	e14d      	b.n	80067d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 80a5 	bne.w	800668c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	843b      	strh	r3, [r7, #32]
 8006550:	8c3b      	ldrh	r3, [r7, #32]
 8006552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <USB_DeactivateEndpoint+0x18a>
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800656c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006570:	83fb      	strh	r3, [r7, #30]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	8bfb      	ldrh	r3, [r7, #30]
 800657e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800658a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	83bb      	strh	r3, [r7, #28]
 80065a0:	8bbb      	ldrh	r3, [r7, #28]
 80065a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01b      	beq.n	80065e2 <USB_DeactivateEndpoint+0x1da>
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c0:	837b      	strh	r3, [r7, #26]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	8b7b      	ldrh	r3, [r7, #26]
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f8:	833b      	strh	r3, [r7, #24]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	8b3b      	ldrh	r3, [r7, #24]
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006612:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800662c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006630:	82fb      	strh	r3, [r7, #22]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	441a      	add	r2, r3
 800663c:	8afb      	ldrh	r3, [r7, #22]
 800663e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800664a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800664e:	b29b      	uxth	r3, r3
 8006650:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006668:	82bb      	strh	r3, [r7, #20]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8abb      	ldrh	r3, [r7, #20]
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]
 800668a:	e0a3      	b.n	80067d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800669a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800669c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <USB_DeactivateEndpoint+0x2d4>
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	441a      	add	r2, r3
 80066c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d8:	b29b      	uxth	r3, r3
 80066da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80066ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <USB_DeactivateEndpoint+0x324>
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006724:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	441a      	add	r2, r3
 800674e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006758:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800675c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3734      	adds	r7, #52	@ 0x34
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b0c2      	sub	sp, #264	@ 0x108
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b01      	cmp	r3, #1
 800680a:	f040 86b7 	bne.w	800757c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d908      	bls.n	800683c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800683a:	e007      	b.n	800684c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	7b1b      	ldrb	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d13a      	bne.n	80068d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	88da      	ldrh	r2, [r3, #6]
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	b29b      	uxth	r3, r3
 800687a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800687e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006882:	6800      	ldr	r0, [r0, #0]
 8006884:	f001 fc8d 	bl	80081a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	00da      	lsls	r2, r3, #3
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	f000 be1f 	b.w	8007510 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	78db      	ldrb	r3, [r3, #3]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	f040 8462 	bne.w	80071a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	f240 83df 	bls.w	80070c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006952:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 81c7 	beq.w	8006d32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d177      	bne.n	8006ab0 <USB_EPStartXfer+0x2ce>
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069da:	b29b      	uxth	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	4413      	add	r3, r2
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	00da      	lsls	r2, r3, #3
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <USB_EPStartXfer+0x248>
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	e067      	b.n	8006afa <USB_EPStartXfer+0x318>
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a30:	d81c      	bhi.n	8006a6c <USB_EPStartXfer+0x28a>
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <USB_EPStartXfer+0x270>
 8006a48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	e046      	b.n	8006afa <USB_EPStartXfer+0x318>
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <USB_EPStartXfer+0x2aa>
 8006a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a86:	3b01      	subs	r3, #1
 8006a88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e024      	b.n	8006afa <USB_EPStartXfer+0x318>
 8006ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d11c      	bne.n	8006afa <USB_EPStartXfer+0x318>
 8006ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	4413      	add	r3, r2
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	895b      	ldrh	r3, [r3, #10]
 8006b06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6959      	ldr	r1, [r3, #20]
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b28:	6800      	ldr	r0, [r0, #0]
 8006b2a:	f001 fb3a 	bl	80081a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	441a      	add	r2, r3
 8006b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d90f      	bls.n	8006b88 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	621a      	str	r2, [r3, #32]
 8006b86:	e00e      	b.n	8006ba6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d177      	bne.n	8006ca6 <USB_EPStartXfer+0x4c4>
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	00da      	lsls	r2, r3, #3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4413      	add	r3, r2
 8006bec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USB_EPStartXfer+0x43e>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e06d      	b.n	8006cfc <USB_EPStartXfer+0x51a>
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c26:	d81c      	bhi.n	8006c62 <USB_EPStartXfer+0x480>
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USB_EPStartXfer+0x466>
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c42:	3301      	adds	r3, #1
 8006c44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e04c      	b.n	8006cfc <USB_EPStartXfer+0x51a>
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USB_EPStartXfer+0x4a0>
 8006c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e02a      	b.n	8006cfc <USB_EPStartXfer+0x51a>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d122      	bne.n	8006cfc <USB_EPStartXfer+0x51a>
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	623b      	str	r3, [r7, #32]
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	00da      	lsls	r2, r3, #3
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	891b      	ldrh	r3, [r3, #8]
 8006d08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6959      	ldr	r1, [r3, #20]
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	f001 fa39 	bl	80081a2 <USB_WritePMA>
 8006d30:	e3ee      	b.n	8007510 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d177      	bne.n	8006e32 <USB_EPStartXfer+0x650>
 8006d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d62:	4413      	add	r3, r2
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	00da      	lsls	r2, r3, #3
 8006d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <USB_EPStartXfer+0x5ca>
 8006d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e06d      	b.n	8006e88 <USB_EPStartXfer+0x6a6>
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006db2:	d81c      	bhi.n	8006dee <USB_EPStartXfer+0x60c>
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <USB_EPStartXfer+0x5f2>
 8006dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	e04c      	b.n	8006e88 <USB_EPStartXfer+0x6a6>
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USB_EPStartXfer+0x62c>
 8006e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	e02a      	b.n	8006e88 <USB_EPStartXfer+0x6a6>
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d122      	bne.n	8006e88 <USB_EPStartXfer+0x6a6>
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e62:	4413      	add	r3, r2
 8006e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00da      	lsls	r2, r3, #3
 8006e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6959      	ldr	r1, [r3, #20]
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eb6:	6800      	ldr	r0, [r0, #0]
 8006eb8:	f001 f973 	bl	80081a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	441a      	add	r2, r3
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d90f      	bls.n	8006f16 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	621a      	str	r2, [r3, #32]
 8006f14:	e00e      	b.n	8006f34 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d177      	bne.n	8007040 <USB_EPStartXfer+0x85e>
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	4413      	add	r3, r2
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	00da      	lsls	r2, r3, #3
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	4413      	add	r3, r2
 8006f86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <USB_EPStartXfer+0x7d8>
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e067      	b.n	800708a <USB_EPStartXfer+0x8a8>
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fc0:	d81c      	bhi.n	8006ffc <USB_EPStartXfer+0x81a>
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <USB_EPStartXfer+0x800>
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e046      	b.n	800708a <USB_EPStartXfer+0x8a8>
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USB_EPStartXfer+0x83a>
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007016:	3b01      	subs	r3, #1
 8007018:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800701c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29a      	uxth	r2, r3
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	b29b      	uxth	r3, r3
 8007028:	029b      	lsls	r3, r3, #10
 800702a:	b29b      	uxth	r3, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007038:	b29a      	uxth	r2, r3
 800703a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e024      	b.n	800708a <USB_EPStartXfer+0x8a8>
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d11c      	bne.n	800708a <USB_EPStartXfer+0x8a8>
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007064:	4413      	add	r3, r2
 8007066:	643b      	str	r3, [r7, #64]	@ 0x40
 8007068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	00da      	lsls	r2, r3, #3
 8007076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007078:	4413      	add	r3, r2
 800707a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007084:	b29a      	uxth	r2, r3
 8007086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	895b      	ldrh	r3, [r3, #10]
 8007096:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800709a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6959      	ldr	r1, [r3, #20]
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070b8:	6800      	ldr	r0, [r0, #0]
 80070ba:	f001 f872 	bl	80081a2 <USB_WritePMA>
 80070be:	e227      	b.n	8007510 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800714c:	4413      	add	r3, r2
 800714e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	00da      	lsls	r2, r3, #3
 800715e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007160:	4413      	add	r3, r2
 8007162:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007166:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716c:	b29a      	uxth	r2, r3
 800716e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007170:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	891b      	ldrh	r3, [r3, #8]
 800717e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6959      	ldr	r1, [r3, #20]
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	b29b      	uxth	r3, r3
 8007194:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007198:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800719c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071a0:	6800      	ldr	r0, [r0, #0]
 80071a2:	f000 fffe 	bl	80081a2 <USB_WritePMA>
 80071a6:	e1b3      	b.n	8007510 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b8:	1ad2      	subs	r2, r2, r3
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80c6 	beq.w	800737a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d177      	bne.n	80072fa <USB_EPStartXfer+0xb18>
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800722a:	4413      	add	r3, r2
 800722c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	00da      	lsls	r2, r3, #3
 800723c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800723e:	4413      	add	r3, r2
 8007240:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007244:	667b      	str	r3, [r7, #100]	@ 0x64
 8007246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007250:	b29a      	uxth	r2, r3
 8007252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <USB_EPStartXfer+0xa92>
 800725e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e067      	b.n	8007344 <USB_EPStartXfer+0xb62>
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	2b3e      	cmp	r3, #62	@ 0x3e
 800727a:	d81c      	bhi.n	80072b6 <USB_EPStartXfer+0xad4>
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <USB_EPStartXfer+0xaba>
 8007292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007296:	3301      	adds	r3, #1
 8007298:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800729c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	029b      	lsls	r3, r3, #10
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e046      	b.n	8007344 <USB_EPStartXfer+0xb62>
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <USB_EPStartXfer+0xaf4>
 80072cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072d0:	3b01      	subs	r3, #1
 80072d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	029b      	lsls	r3, r3, #10
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	4313      	orrs	r3, r2
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e024      	b.n	8007344 <USB_EPStartXfer+0xb62>
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d11c      	bne.n	8007344 <USB_EPStartXfer+0xb62>
 800730a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731e:	4413      	add	r3, r2
 8007320:	673b      	str	r3, [r7, #112]	@ 0x70
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	00da      	lsls	r2, r3, #3
 8007330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007332:	4413      	add	r3, r2
 8007334:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733e:	b29a      	uxth	r2, r3
 8007340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007342:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	895b      	ldrh	r3, [r3, #10]
 8007350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	b29b      	uxth	r3, r3
 8007366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800736a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800736e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	f000 ff15 	bl	80081a2 <USB_WritePMA>
 8007378:	e0ca      	b.n	8007510 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d177      	bne.n	800747a <USB_EPStartXfer+0xc98>
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073aa:	4413      	add	r3, r2
 80073ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	00da      	lsls	r2, r3, #3
 80073bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073be:	4413      	add	r3, r2
 80073c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <USB_EPStartXfer+0xc12>
 80073de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	e073      	b.n	80074dc <USB_EPStartXfer+0xcfa>
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80073fa:	d81c      	bhi.n	8007436 <USB_EPStartXfer+0xc54>
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USB_EPStartXfer+0xc3a>
 8007412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007416:	3301      	adds	r3, #1
 8007418:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800741c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e052      	b.n	80074dc <USB_EPStartXfer+0xcfa>
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USB_EPStartXfer+0xc74>
 800744c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007450:	3b01      	subs	r3, #1
 8007452:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007460:	b29b      	uxth	r3, r3
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	b29b      	uxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007472:	b29a      	uxth	r2, r3
 8007474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e030      	b.n	80074dc <USB_EPStartXfer+0xcfa>
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d128      	bne.n	80074dc <USB_EPStartXfer+0xcfa>
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074ae:	4413      	add	r3, r2
 80074b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	00da      	lsls	r2, r3, #3
 80074c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074c6:	4413      	add	r3, r2
 80074c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	891b      	ldrh	r3, [r3, #8]
 80074e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6959      	ldr	r1, [r3, #20]
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007502:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007506:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	f000 fe49 	bl	80081a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007536:	817b      	strh	r3, [r7, #10]
 8007538:	897b      	ldrh	r3, [r7, #10]
 800753a:	f083 0310 	eor.w	r3, r3, #16
 800753e:	817b      	strh	r3, [r7, #10]
 8007540:	897b      	ldrh	r3, [r7, #10]
 8007542:	f083 0320 	eor.w	r3, r3, #32
 8007546:	817b      	strh	r3, [r7, #10]
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	441a      	add	r2, r3
 8007562:	897b      	ldrh	r3, [r7, #10]
 8007564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800756c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007574:	b29b      	uxth	r3, r3
 8007576:	8013      	strh	r3, [r2, #0]
 8007578:	f000 bcdf 	b.w	8007f3a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	7b1b      	ldrb	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 80bc 	bne.w	8007706 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d917      	bls.n	80075da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80075aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80075ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	619a      	str	r2, [r3, #24]
 80075d8:	e00e      	b.n	80075f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80075da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2200      	movs	r2, #0
 80075f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007614:	b29b      	uxth	r3, r3
 8007616:	461a      	mov	r2, r3
 8007618:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800761c:	4413      	add	r3, r2
 800761e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	00da      	lsls	r2, r3, #3
 8007630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007634:	4413      	add	r3, r2
 8007636:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800763a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800763e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10d      	bne.n	8007676 <USB_EPStartXfer+0xe94>
 800765a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766a:	b29a      	uxth	r2, r3
 800766c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	f000 bc28 	b.w	8007ec6 <USB_EPStartXfer+0x16e4>
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	2b3e      	cmp	r3, #62	@ 0x3e
 800767c:	d81f      	bhi.n	80076be <USB_EPStartXfer+0xedc>
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <USB_EPStartXfer+0xebc>
 8007694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800769e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	f000 bc04 	b.w	8007ec6 <USB_EPStartXfer+0x16e4>
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <USB_EPStartXfer+0xefc>
 80076d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076d8:	3b01      	subs	r3, #1
 80076da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	029b      	lsls	r3, r3, #10
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4313      	orrs	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e3df      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	78db      	ldrb	r3, [r3, #3]
 8007712:	2b02      	cmp	r3, #2
 8007714:	f040 8218 	bne.w	8007b48 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f040 809d 	bne.w	8007864 <USB_EPStartXfer+0x1082>
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007746:	b29b      	uxth	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800774e:	4413      	add	r3, r2
 8007750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	00da      	lsls	r2, r3, #3
 8007762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007766:	4413      	add	r3, r2
 8007768:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800776c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10c      	bne.n	80077ae <USB_EPStartXfer+0xfcc>
 8007794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e08f      	b.n	80078ce <USB_EPStartXfer+0x10ec>
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80077bc:	d826      	bhi.n	800780c <USB_EPStartXfer+0x102a>
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <USB_EPStartXfer+0x100c>
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e8:	3301      	adds	r3, #1
 80077ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e060      	b.n	80078ce <USB_EPStartXfer+0x10ec>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800781e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <USB_EPStartXfer+0x105a>
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007836:	3b01      	subs	r3, #1
 8007838:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800783c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29a      	uxth	r2, r3
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007848:	b29b      	uxth	r3, r3
 800784a:	029b      	lsls	r3, r3, #10
 800784c:	b29b      	uxth	r3, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	b29b      	uxth	r3, r3
 8007852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785a:	b29a      	uxth	r2, r3
 800785c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	e034      	b.n	80078ce <USB_EPStartXfer+0x10ec>
 8007864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d12c      	bne.n	80078ce <USB_EPStartXfer+0x10ec>
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007898:	4413      	add	r3, r2
 800789a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	00da      	lsls	r2, r3, #3
 80078ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	785b      	ldrb	r3, [r3, #1]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f040 809d 	bne.w	8007a28 <USB_EPStartXfer+0x1246>
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800790a:	b29b      	uxth	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007912:	4413      	add	r3, r2
 8007914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800792a:	4413      	add	r3, r2
 800792c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007940:	b29a      	uxth	r2, r3
 8007942:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10c      	bne.n	8007972 <USB_EPStartXfer+0x1190>
 8007958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e088      	b.n	8007a84 <USB_EPStartXfer+0x12a2>
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007980:	d826      	bhi.n	80079d0 <USB_EPStartXfer+0x11ee>
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <USB_EPStartXfer+0x11d0>
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e059      	b.n	8007a84 <USB_EPStartXfer+0x12a2>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <USB_EPStartXfer+0x121e>
 80079f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079fa:	3b01      	subs	r3, #1
 80079fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	029b      	lsls	r3, r3, #10
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e02d      	b.n	8007a84 <USB_EPStartXfer+0x12a2>
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d125      	bne.n	8007a84 <USB_EPStartXfer+0x12a2>
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a4e:	4413      	add	r3, r2
 8007a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00da      	lsls	r2, r3, #3
 8007a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a66:	4413      	add	r3, r2
 8007a68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a82:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8218 	beq.w	8007ec6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ab6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <USB_EPStartXfer+0x12ec>
 8007ac2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10d      	bne.n	8007aea <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ace:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 81f5 	bne.w	8007ec6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007adc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 81ee 	bne.w	8007ec6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
 8007b46:	e1be      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 81b4 	bne.w	8007ec2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d917      	bls.n	8007ba6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	699a      	ldr	r2, [r3, #24]
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	619a      	str	r2, [r3, #24]
 8007ba4:	e00e      	b.n	8007bc4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f040 8085 	bne.w	8007ce0 <USB_EPStartXfer+0x14fe>
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	00da      	lsls	r2, r3, #3
 8007c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c12:	4413      	add	r3, r2
 8007c14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10c      	bne.n	8007c52 <USB_EPStartXfer+0x1470>
 8007c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	e077      	b.n	8007d42 <USB_EPStartXfer+0x1560>
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c58:	d81e      	bhi.n	8007c98 <USB_EPStartXfer+0x14b6>
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <USB_EPStartXfer+0x1498>
 8007c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c74:	3301      	adds	r3, #1
 8007c76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	e054      	b.n	8007d42 <USB_EPStartXfer+0x1560>
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <USB_EPStartXfer+0x14d6>
 8007cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e030      	b.n	8007d42 <USB_EPStartXfer+0x1560>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d128      	bne.n	8007d42 <USB_EPStartXfer+0x1560>
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d14:	4413      	add	r3, r2
 8007d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	00da      	lsls	r2, r3, #3
 8007d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 8085 	bne.w	8007e6c <USB_EPStartXfer+0x168a>
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d86:	4413      	add	r3, r2
 8007d88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d9e:	4413      	add	r3, r2
 8007da0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10c      	bne.n	8007dde <USB_EPStartXfer+0x15fc>
 8007dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e073      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007de4:	d81e      	bhi.n	8007e24 <USB_EPStartXfer+0x1642>
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <USB_EPStartXfer+0x1624>
 8007dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e00:	3301      	adds	r3, #1
 8007e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	029b      	lsls	r3, r3, #10
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	e050      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d104      	bne.n	8007e44 <USB_EPStartXfer+0x1662>
 8007e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e02c      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d124      	bne.n	8007ec6 <USB_EPStartXfer+0x16e4>
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e92:	4413      	add	r3, r2
 8007e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00da      	lsls	r2, r3, #3
 8007ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	e001      	b.n	8007ec6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e03a      	b.n	8007f3c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ef4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ef8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007efc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f6e:	81bb      	strh	r3, [r7, #12]
 8007f70:	89bb      	ldrh	r3, [r7, #12]
 8007f72:	f083 0310 	eor.w	r3, r3, #16
 8007f76:	81bb      	strh	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	89bb      	ldrh	r3, [r7, #12]
 8007f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	8013      	strh	r3, [r2, #0]
 8007f98:	e01f      	b.n	8007fda <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb0:	81fb      	strh	r3, [r7, #14]
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
 8007fb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fb8:	81fb      	strh	r3, [r7, #14]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	7b1b      	ldrb	r3, [r3, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f040 809d 	bne.w	8008136 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d04c      	beq.n	800809e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	823b      	strh	r3, [r7, #16]
 8008012:	8a3b      	ldrh	r3, [r7, #16]
 8008014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <USB_EPClearStall+0x6c>
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800802e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008032:	81fb      	strh	r3, [r7, #14]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	441a      	add	r2, r3
 800803e:	89fb      	ldrh	r3, [r7, #14]
 8008040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800804c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008050:	b29b      	uxth	r3, r3
 8008052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	78db      	ldrb	r3, [r3, #3]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d06c      	beq.n	8008136 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008072:	81bb      	strh	r3, [r7, #12]
 8008074:	89bb      	ldrh	r3, [r7, #12]
 8008076:	f083 0320 	eor.w	r3, r3, #32
 800807a:	81bb      	strh	r3, [r7, #12]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	89bb      	ldrh	r3, [r7, #12]
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
 800809c:	e04b      	b.n	8008136 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	82fb      	strh	r3, [r7, #22]
 80080ac:	8afb      	ldrh	r3, [r7, #22]
 80080ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01b      	beq.n	80080ee <USB_EPClearStall+0x106>
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080cc:	82bb      	strh	r3, [r7, #20]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	8abb      	ldrh	r3, [r7, #20]
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008104:	827b      	strh	r3, [r7, #18]
 8008106:	8a7b      	ldrh	r3, [r7, #18]
 8008108:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800810c:	827b      	strh	r3, [r7, #18]
 800810e:	8a7b      	ldrh	r3, [r7, #18]
 8008110:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008114:	827b      	strh	r3, [r7, #18]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	441a      	add	r2, r3
 8008120:	8a7b      	ldrh	r3, [r7, #18]
 8008122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800812a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800812e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008132:	b29b      	uxth	r3, r3
 8008134:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2280      	movs	r2, #128	@ 0x80
 800815a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008190:	b29b      	uxth	r3, r3
 8008192:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b08b      	sub	sp, #44	@ 0x2c
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4611      	mov	r1, r2
 80081ae:	461a      	mov	r2, r3
 80081b0:	460b      	mov	r3, r1
 80081b2:	80fb      	strh	r3, [r7, #6]
 80081b4:	4613      	mov	r3, r2
 80081b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081b8:	88bb      	ldrh	r3, [r7, #4]
 80081ba:	3301      	adds	r3, #1
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d8:	e01b      	b.n	8008212 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	3301      	adds	r3, #1
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b21a      	sxth	r2, r3
 80081ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b21b      	sxth	r3, r3
 80081f2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	8a7a      	ldrh	r2, [r7, #18]
 80081f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	3302      	adds	r3, #2
 80081fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3301      	adds	r3, #1
 800820a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	3b01      	subs	r3, #1
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e0      	bne.n	80081da <USB_WritePMA+0x38>
  }
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	372c      	adds	r7, #44	@ 0x2c
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008226:	b480      	push	{r7}
 8008228:	b08b      	sub	sp, #44	@ 0x2c
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	4611      	mov	r1, r2
 8008232:	461a      	mov	r2, r3
 8008234:	460b      	mov	r3, r1
 8008236:	80fb      	strh	r3, [r7, #6]
 8008238:	4613      	mov	r3, r2
 800823a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800823c:	88bb      	ldrh	r3, [r7, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	b29b      	uxth	r3, r3
 8008242:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008256:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	627b      	str	r3, [r7, #36]	@ 0x24
 800825c:	e018      	b.n	8008290 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	3302      	adds	r3, #2
 800826a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	3301      	adds	r3, #1
 8008278:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	b2da      	uxtb	r2, r3
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	3301      	adds	r3, #1
 8008288:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	3b01      	subs	r3, #1
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e3      	bne.n	800825e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008296:	88bb      	ldrh	r3, [r7, #4]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	701a      	strb	r2, [r3, #0]
  }
}
 80082b2:	bf00      	nop
 80082b4:	372c      	adds	r7, #44	@ 0x2c
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7c1b      	ldrb	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d115      	bne.n	8008302 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082da:	2202      	movs	r2, #2
 80082dc:	2181      	movs	r1, #129	@ 0x81
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fe8f 	bl	800a002 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ee:	2202      	movs	r2, #2
 80082f0:	2101      	movs	r1, #1
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fe85 	bl	800a002 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008300:	e012      	b.n	8008328 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008302:	2340      	movs	r3, #64	@ 0x40
 8008304:	2202      	movs	r2, #2
 8008306:	2181      	movs	r1, #129	@ 0x81
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 fe7a 	bl	800a002 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008314:	2340      	movs	r3, #64	@ 0x40
 8008316:	2202      	movs	r2, #2
 8008318:	2101      	movs	r1, #1
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fe71 	bl	800a002 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008328:	2308      	movs	r3, #8
 800832a:	2203      	movs	r2, #3
 800832c:	2182      	movs	r1, #130	@ 0x82
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fe67 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800833a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800833e:	f001 ff87 	bl	800a250 <USBD_static_malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
 8008358:	e026      	b.n	80083a8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008360:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7c1b      	ldrb	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800838a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800838e:	2101      	movs	r1, #1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 ff27 	bl	800a1e4 <USBD_LL_PrepareReceive>
 8008396:	e007      	b.n	80083a8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800839e:	2340      	movs	r3, #64	@ 0x40
 80083a0:	2101      	movs	r1, #1
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 ff1e 	bl	800a1e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083c2:	2181      	movs	r1, #129	@ 0x81
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fe42 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083d0:	2101      	movs	r1, #1
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fe3b 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083e0:	2182      	movs	r1, #130	@ 0x82
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fe33 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008408:	4618      	mov	r0, r3
 800840a:	f001 ff2f 	bl	800a26c <USBD_static_free>
    pdev->pClassData = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008430:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008446:	2b00      	cmp	r3, #0
 8008448:	d039      	beq.n	80084be <USBD_CDC_Setup+0x9e>
 800844a:	2b20      	cmp	r3, #32
 800844c:	d17f      	bne.n	800854e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88db      	ldrh	r3, [r3, #6]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d029      	beq.n	80084aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b25b      	sxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	da11      	bge.n	8008484 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800846c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	88d2      	ldrh	r2, [r2, #6]
 8008472:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008474:	6939      	ldr	r1, [r7, #16]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	88db      	ldrh	r3, [r3, #6]
 800847a:	461a      	mov	r2, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 fa0f 	bl	80098a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008482:	e06b      	b.n	800855c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	785a      	ldrb	r2, [r3, #1]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	88db      	ldrh	r3, [r3, #6]
 8008492:	b2da      	uxtb	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800849a:	6939      	ldr	r1, [r7, #16]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	88db      	ldrh	r3, [r3, #6]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fa2a 	bl	80098fc <USBD_CtlPrepareRx>
      break;
 80084a8:	e058      	b.n	800855c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	7850      	ldrb	r0, [r2, #1]
 80084b6:	2200      	movs	r2, #0
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	4798      	blx	r3
      break;
 80084bc:	e04e      	b.n	800855c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b0b      	cmp	r3, #11
 80084c4:	d02e      	beq.n	8008524 <USBD_CDC_Setup+0x104>
 80084c6:	2b0b      	cmp	r3, #11
 80084c8:	dc38      	bgt.n	800853c <USBD_CDC_Setup+0x11c>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <USBD_CDC_Setup+0xb4>
 80084ce:	2b0a      	cmp	r3, #10
 80084d0:	d014      	beq.n	80084fc <USBD_CDC_Setup+0xdc>
 80084d2:	e033      	b.n	800853c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d107      	bne.n	80084ee <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	2202      	movs	r2, #2
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f9da 	bl	80098a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084ec:	e02e      	b.n	800854c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f96a 	bl	80097ca <USBD_CtlError>
            ret = USBD_FAIL;
 80084f6:	2302      	movs	r3, #2
 80084f8:	75fb      	strb	r3, [r7, #23]
          break;
 80084fa:	e027      	b.n	800854c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008502:	2b03      	cmp	r3, #3
 8008504:	d107      	bne.n	8008516 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008506:	f107 030f 	add.w	r3, r7, #15
 800850a:	2201      	movs	r2, #1
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 f9c6 	bl	80098a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008514:	e01a      	b.n	800854c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 f956 	bl	80097ca <USBD_CtlError>
            ret = USBD_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	75fb      	strb	r3, [r7, #23]
          break;
 8008522:	e013      	b.n	800854c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852a:	2b03      	cmp	r3, #3
 800852c:	d00d      	beq.n	800854a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f94a 	bl	80097ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008536:	2302      	movs	r3, #2
 8008538:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800853a:	e006      	b.n	800854a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 f943 	bl	80097ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008544:	2302      	movs	r3, #2
 8008546:	75fb      	strb	r3, [r7, #23]
          break;
 8008548:	e000      	b.n	800854c <USBD_CDC_Setup+0x12c>
          break;
 800854a:	bf00      	nop
      }
      break;
 800854c:	e006      	b.n	800855c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f93a 	bl	80097ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008556:	2302      	movs	r3, #2
 8008558:	75fb      	strb	r3, [r7, #23]
      break;
 800855a:	bf00      	nop
  }

  return ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008578:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008580:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d03a      	beq.n	8008602 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	331c      	adds	r3, #28
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d029      	beq.n	80085f6 <USBD_CDC_DataIn+0x90>
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	440b      	add	r3, r1
 80085b0:	331c      	adds	r3, #28
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	78f9      	ldrb	r1, [r7, #3]
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	460b      	mov	r3, r1
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	4403      	add	r3, r0
 80085c2:	3320      	adds	r3, #32
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d110      	bne.n	80085f6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	331c      	adds	r3, #28
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085e8:	78f9      	ldrb	r1, [r7, #3]
 80085ea:	2300      	movs	r3, #0
 80085ec:	2200      	movs	r2, #0
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 fdd5 	bl	800a19e <USBD_LL_Transmit>
 80085f4:	e003      	b.n	80085fe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	e000      	b.n	8008604 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008602:	2302      	movs	r3, #2
  }
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fe00 	bl	800a22a <USBD_LL_GetRxDataSize>
 800862a:	4602      	mov	r2, r0
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00d      	beq.n	8008658 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008650:	4611      	mov	r1, r2
 8008652:	4798      	blx	r3

    return USBD_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008670:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008678:	2b00      	cmp	r3, #0
 800867a:	d014      	beq.n	80086a6 <USBD_CDC_EP0_RxReady+0x44>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008682:	2bff      	cmp	r3, #255	@ 0xff
 8008684:	d00f      	beq.n	80086a6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008694:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800869c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	22ff      	movs	r2, #255	@ 0xff
 80086a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2243      	movs	r2, #67	@ 0x43
 80086bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80086be:	4b03      	ldr	r3, [pc, #12]	@ (80086cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20000094 	.word	0x20000094

080086d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2243      	movs	r2, #67	@ 0x43
 80086dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086de:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	20000050 	.word	0x20000050

080086f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2243      	movs	r2, #67	@ 0x43
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	@ (800870c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	200000d8 	.word	0x200000d8

08008710 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	220a      	movs	r2, #10
 800871c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	@ (800872c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	2000000c 	.word	0x2000000c

08008730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800873a:	2302      	movs	r3, #2
 800873c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	4613      	mov	r3, r2
 800876a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008772:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01c      	beq.n	800880e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d115      	bne.n	800880a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2181      	movs	r1, #129	@ 0x81
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 fccc 	bl	800a19e <USBD_LL_Transmit>

      return USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e002      	b.n	8008810 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800880e:	2302      	movs	r3, #2
  }
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008826:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d017      	beq.n	8008862 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7c1b      	ldrb	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008844:	2101      	movs	r1, #1
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fccc 	bl	800a1e4 <USBD_LL_PrepareReceive>
 800884c:	e007      	b.n	800885e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008854:	2340      	movs	r3, #64	@ 0x40
 8008856:	2101      	movs	r1, #1
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fcc3 	bl	800a1e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e000      	b.n	8008864 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008862:	2302      	movs	r3, #2
  }
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008880:	2302      	movs	r3, #2
 8008882:	e01a      	b.n	80088ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	79fa      	ldrb	r2, [r7, #7]
 80088b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f001 fb2e 	bl	8009f14 <USBD_LL_Init>

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d006      	beq.n	80088e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
 80088e2:	e001      	b.n	80088e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 fb64 	bl	8009fcc <USBD_LL_Start>

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00c      	beq.n	8008958 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fedb 	bl	8009756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d016      	beq.n	80089f2 <USBD_LL_SetupStage+0x6a>
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d81c      	bhi.n	8008a02 <USBD_LL_SetupStage+0x7a>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <USBD_LL_SetupStage+0x4a>
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d008      	beq.n	80089e2 <USBD_LL_SetupStage+0x5a>
 80089d0:	e017      	b.n	8008a02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9ce 	bl	8008d7c <USBD_StdDevReq>
      break;
 80089e0:	e01a      	b.n	8008a18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa30 	bl	8008e50 <USBD_StdItfReq>
      break;
 80089f0:	e012      	b.n	8008a18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa70 	bl	8008ee0 <USBD_StdEPReq>
      break;
 8008a00:	e00a      	b.n	8008a18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008a08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fb3b 	bl	800a08c <USBD_LL_StallEP>
      break;
 8008a16:	bf00      	nop
  }

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d14b      	bne.n	8008ace <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d134      	bne.n	8008ab2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d919      	bls.n	8008a88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	1ad2      	subs	r2, r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d203      	bcs.n	8008a76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	e002      	b.n	8008a7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 ff59 	bl	8009938 <USBD_CtlContinueRx>
 8008a86:	e038      	b.n	8008afa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d105      	bne.n	8008aaa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 ff56 	bl	800995c <USBD_CtlSendStatus>
 8008ab0:	e023      	b.n	8008afa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ab8:	2b05      	cmp	r3, #5
 8008aba:	d11e      	bne.n	8008afa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f001 fae0 	bl	800a08c <USBD_LL_StallEP>
 8008acc:	e015      	b.n	8008afa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d108      	bne.n	8008af6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	7afa      	ldrb	r2, [r7, #11]
 8008aee:	4611      	mov	r1, r2
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	4798      	blx	r3
 8008af4:	e001      	b.n	8008afa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008af6:	2302      	movs	r3, #2
 8008af8:	e000      	b.n	8008afc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d17f      	bne.n	8008c18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3314      	adds	r3, #20
 8008b1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d15c      	bne.n	8008be2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d915      	bls.n	8008b60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	1ad2      	subs	r2, r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fec3 	bl	80098d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b52:	2300      	movs	r3, #0
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f001 fb43 	bl	800a1e4 <USBD_LL_PrepareReceive>
 8008b5e:	e04e      	b.n	8008bfe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	6912      	ldr	r2, [r2, #16]
 8008b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b6c:	fb01 f202 	mul.w	r2, r1, r2
 8008b70:	1a9b      	subs	r3, r3, r2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d11c      	bne.n	8008bb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d316      	bcc.n	8008bb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d20f      	bcs.n	8008bb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b90:	2200      	movs	r2, #0
 8008b92:	2100      	movs	r1, #0
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 fe9f 	bl	80098d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 fb1b 	bl	800a1e4 <USBD_LL_PrepareReceive>
 8008bae:	e026      	b.n	8008bfe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d105      	bne.n	8008bd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bd2:	2180      	movs	r1, #128	@ 0x80
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f001 fa59 	bl	800a08c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fed1 	bl	8009982 <USBD_CtlReceiveStatus>
 8008be0:	e00d      	b.n	8008bfe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d004      	beq.n	8008bf6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bf6:	2180      	movs	r1, #128	@ 0x80
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f001 fa47 	bl	800a08c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d11d      	bne.n	8008c44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7ff fe80 	bl	800890e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c16:	e015      	b.n	8008c44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00d      	beq.n	8008c40 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d108      	bne.n	8008c40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	7afa      	ldrb	r2, [r7, #11]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	4798      	blx	r3
 8008c3e:	e001      	b.n	8008c44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c40:	2302      	movs	r3, #2
 8008c42:	e000      	b.n	8008c46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c56:	2340      	movs	r3, #64	@ 0x40
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f9d0 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2240      	movs	r2, #64	@ 0x40
 8008c6e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c72:	2340      	movs	r3, #64	@ 0x40
 8008c74:	2200      	movs	r2, #0
 8008c76:	2180      	movs	r1, #128	@ 0x80
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f9c2 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2240      	movs	r2, #64	@ 0x40
 8008c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6852      	ldr	r2, [r2, #4]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
  }

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2204      	movs	r2, #4
 8008d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d105      	bne.n	8008d38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d10b      	bne.n	8008d70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d005      	beq.n	8008da2 <USBD_StdDevReq+0x26>
 8008d96:	2b40      	cmp	r3, #64	@ 0x40
 8008d98:	d84f      	bhi.n	8008e3a <USBD_StdDevReq+0xbe>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <USBD_StdDevReq+0x36>
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d14b      	bne.n	8008e3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	4798      	blx	r3
      break;
 8008db0:	e048      	b.n	8008e44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	d839      	bhi.n	8008e2e <USBD_StdDevReq+0xb2>
 8008dba:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <USBD_StdDevReq+0x44>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08008e25 	.word	0x08008e25
 8008dc8:	08008e2f 	.word	0x08008e2f
 8008dcc:	08008e1b 	.word	0x08008e1b
 8008dd0:	08008e2f 	.word	0x08008e2f
 8008dd4:	08008df3 	.word	0x08008df3
 8008dd8:	08008de9 	.word	0x08008de9
 8008ddc:	08008e2f 	.word	0x08008e2f
 8008de0:	08008e07 	.word	0x08008e07
 8008de4:	08008dfd 	.word	0x08008dfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9dc 	bl	80091a8 <USBD_GetDescriptor>
          break;
 8008df0:	e022      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fb3f 	bl	8009478 <USBD_SetAddress>
          break;
 8008dfa:	e01d      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fb7e 	bl	8009500 <USBD_SetConfig>
          break;
 8008e04:	e018      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc07 	bl	800961c <USBD_GetConfig>
          break;
 8008e0e:	e013      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fc37 	bl	8009686 <USBD_GetStatus>
          break;
 8008e18:	e00e      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fc65 	bl	80096ec <USBD_SetFeature>
          break;
 8008e22:	e009      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fc74 	bl	8009714 <USBD_ClrFeature>
          break;
 8008e2c:	e004      	b.n	8008e38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fcca 	bl	80097ca <USBD_CtlError>
          break;
 8008e36:	bf00      	nop
      }
      break;
 8008e38:	e004      	b.n	8008e44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fcc4 	bl	80097ca <USBD_CtlError>
      break;
 8008e42:	bf00      	nop
  }

  return ret;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e66:	2b40      	cmp	r3, #64	@ 0x40
 8008e68:	d005      	beq.n	8008e76 <USBD_StdItfReq+0x26>
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d82e      	bhi.n	8008ecc <USBD_StdItfReq+0x7c>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <USBD_StdItfReq+0x26>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d12a      	bne.n	8008ecc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d81d      	bhi.n	8008ebe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	889b      	ldrh	r3, [r3, #4]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d813      	bhi.n	8008eb4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d110      	bne.n	8008ec8 <USBD_StdItfReq+0x78>
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10d      	bne.n	8008ec8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fd55 	bl	800995c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008eb2:	e009      	b.n	8008ec8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fc87 	bl	80097ca <USBD_CtlError>
          break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fc82 	bl	80097ca <USBD_CtlError>
          break;
 8008ec6:	e000      	b.n	8008eca <USBD_StdItfReq+0x7a>
          break;
 8008ec8:	bf00      	nop
      }
      break;
 8008eca:	e004      	b.n	8008ed6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc7b 	bl	80097ca <USBD_CtlError>
      break;
 8008ed4:	bf00      	nop
  }

  return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
 8008ef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008efc:	2b40      	cmp	r3, #64	@ 0x40
 8008efe:	d007      	beq.n	8008f10 <USBD_StdEPReq+0x30>
 8008f00:	2b40      	cmp	r3, #64	@ 0x40
 8008f02:	f200 8146 	bhi.w	8009192 <USBD_StdEPReq+0x2b2>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <USBD_StdEPReq+0x40>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	f040 8141 	bne.w	8009192 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
      break;
 8008f1e:	e13d      	b.n	800919c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d10a      	bne.n	8008f42 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	e12d      	b.n	800919e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d007      	beq.n	8008f5a <USBD_StdEPReq+0x7a>
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	f300 811b 	bgt.w	8009186 <USBD_StdEPReq+0x2a6>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d072      	beq.n	800903a <USBD_StdEPReq+0x15a>
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d03a      	beq.n	8008fce <USBD_StdEPReq+0xee>
 8008f58:	e115      	b.n	8009186 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d002      	beq.n	8008f6a <USBD_StdEPReq+0x8a>
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d015      	beq.n	8008f94 <USBD_StdEPReq+0xb4>
 8008f68:	e02b      	b.n	8008fc2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00c      	beq.n	8008f8a <USBD_StdEPReq+0xaa>
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	2b80      	cmp	r3, #128	@ 0x80
 8008f74:	d009      	beq.n	8008f8a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 f886 	bl	800a08c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f80:	2180      	movs	r1, #128	@ 0x80
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f882 	bl	800a08c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f88:	e020      	b.n	8008fcc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc1c 	bl	80097ca <USBD_CtlError>
              break;
 8008f92:	e01b      	b.n	8008fcc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10e      	bne.n	8008fba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <USBD_StdEPReq+0xda>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b80      	cmp	r3, #128	@ 0x80
 8008fa6:	d008      	beq.n	8008fba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f869 	bl	800a08c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fcce 	bl	800995c <USBD_CtlSendStatus>

              break;
 8008fc0:	e004      	b.n	8008fcc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fc00 	bl	80097ca <USBD_CtlError>
              break;
 8008fca:	bf00      	nop
          }
          break;
 8008fcc:	e0e0      	b.n	8009190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d002      	beq.n	8008fde <USBD_StdEPReq+0xfe>
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d015      	beq.n	8009008 <USBD_StdEPReq+0x128>
 8008fdc:	e026      	b.n	800902c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00c      	beq.n	8008ffe <USBD_StdEPReq+0x11e>
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d009      	beq.n	8008ffe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 f84c 	bl	800a08c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ff4:	2180      	movs	r1, #128	@ 0x80
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 f848 	bl	800a08c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ffc:	e01c      	b.n	8009038 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fbe2 	bl	80097ca <USBD_CtlError>
              break;
 8009006:	e017      	b.n	8009038 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d112      	bne.n	8009036 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 f853 	bl	800a0ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc99 	bl	800995c <USBD_CtlSendStatus>
              }
              break;
 800902a:	e004      	b.n	8009036 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fbcb 	bl	80097ca <USBD_CtlError>
              break;
 8009034:	e000      	b.n	8009038 <USBD_StdEPReq+0x158>
              break;
 8009036:	bf00      	nop
          }
          break;
 8009038:	e0aa      	b.n	8009190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009040:	2b02      	cmp	r3, #2
 8009042:	d002      	beq.n	800904a <USBD_StdEPReq+0x16a>
 8009044:	2b03      	cmp	r3, #3
 8009046:	d032      	beq.n	80090ae <USBD_StdEPReq+0x1ce>
 8009048:	e097      	b.n	800917a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <USBD_StdEPReq+0x180>
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b80      	cmp	r3, #128	@ 0x80
 8009054:	d004      	beq.n	8009060 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fbb6 	bl	80097ca <USBD_CtlError>
                break;
 800905e:	e091      	b.n	8009184 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009064:	2b00      	cmp	r3, #0
 8009066:	da0b      	bge.n	8009080 <USBD_StdEPReq+0x1a0>
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	3310      	adds	r3, #16
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	4413      	add	r3, r2
 800907c:	3304      	adds	r3, #4
 800907e:	e00b      	b.n	8009098 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4413      	add	r3, r2
 8009096:	3304      	adds	r3, #4
 8009098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2202      	movs	r2, #2
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fbfa 	bl	80098a0 <USBD_CtlSendData>
              break;
 80090ac:	e06a      	b.n	8009184 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da11      	bge.n	80090da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3318      	adds	r3, #24
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d117      	bne.n	8009100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fb79 	bl	80097ca <USBD_CtlError>
                  break;
 80090d8:	e054      	b.n	8009184 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	f003 020f 	and.w	r2, r3, #15
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	440b      	add	r3, r1
 80090ec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb66 	bl	80097ca <USBD_CtlError>
                  break;
 80090fe:	e041      	b.n	8009184 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da0b      	bge.n	8009120 <USBD_StdEPReq+0x240>
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	3310      	adds	r3, #16
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	4413      	add	r3, r2
 800911c:	3304      	adds	r3, #4
 800911e:	e00b      	b.n	8009138 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4413      	add	r3, r2
 8009136:	3304      	adds	r3, #4
 8009138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <USBD_StdEPReq+0x266>
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	2b80      	cmp	r3, #128	@ 0x80
 8009144:	d103      	bne.n	800914e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	e00e      	b.n	800916c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 ffd8 	bl	800a108 <USBD_LL_IsStallEP>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	e002      	b.n	800916c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2202      	movs	r2, #2
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fb94 	bl	80098a0 <USBD_CtlSendData>
              break;
 8009178:	e004      	b.n	8009184 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb24 	bl	80097ca <USBD_CtlError>
              break;
 8009182:	bf00      	nop
          }
          break;
 8009184:	e004      	b.n	8009190 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb1e 	bl	80097ca <USBD_CtlError>
          break;
 800918e:	bf00      	nop
      }
      break;
 8009190:	e004      	b.n	800919c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fb18 	bl	80097ca <USBD_CtlError>
      break;
 800919a:	bf00      	nop
  }

  return ret;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	f200 8128 	bhi.w	800941e <USBD_GetDescriptor+0x276>
 80091ce:	a201      	add	r2, pc, #4	@ (adr r2, 80091d4 <USBD_GetDescriptor+0x2c>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091f1 	.word	0x080091f1
 80091d8:	08009209 	.word	0x08009209
 80091dc:	08009249 	.word	0x08009249
 80091e0:	0800941f 	.word	0x0800941f
 80091e4:	0800941f 	.word	0x0800941f
 80091e8:	080093bf 	.word	0x080093bf
 80091ec:	080093eb 	.word	0x080093eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
      break;
 8009206:	e112      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7c1b      	ldrb	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10d      	bne.n	800922c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009218:	f107 0208 	add.w	r2, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800922a:	e100      	b.n	800942e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009234:	f107 0208 	add.w	r2, r7, #8
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	2202      	movs	r2, #2
 8009244:	701a      	strb	r2, [r3, #0]
      break;
 8009246:	e0f2      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	885b      	ldrh	r3, [r3, #2]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b05      	cmp	r3, #5
 8009250:	f200 80ac 	bhi.w	80093ac <USBD_GetDescriptor+0x204>
 8009254:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <USBD_GetDescriptor+0xb4>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009275 	.word	0x08009275
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092dd 	.word	0x080092dd
 8009268:	08009311 	.word	0x08009311
 800926c:	08009345 	.word	0x08009345
 8009270:	08009379 	.word	0x08009379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e091      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa95 	bl	80097ca <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e089      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e077      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa7b 	bl	80097ca <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e06f      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e05d      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa61 	bl	80097ca <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e055      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009332:	e043      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa47 	bl	80097ca <USBD_CtlError>
            err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
          break;
 8009342:	e03b      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	7c12      	ldrb	r2, [r2, #16]
 800935c:	f107 0108 	add.w	r1, r7, #8
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009366:	e029      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa2d 	bl	80097ca <USBD_CtlError>
            err++;
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	3301      	adds	r3, #1
 8009374:	72fb      	strb	r3, [r7, #11]
          break;
 8009376:	e021      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	7c12      	ldrb	r2, [r2, #16]
 8009390:	f107 0108 	add.w	r1, r7, #8
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
 8009398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939a:	e00f      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fa13 	bl	80097ca <USBD_CtlError>
            err++;
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	3301      	adds	r3, #1
 80093a8:	72fb      	strb	r3, [r7, #11]
          break;
 80093aa:	e007      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa0b 	bl	80097ca <USBD_CtlError>
          err++;
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	3301      	adds	r3, #1
 80093b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80093ba:	e038      	b.n	800942e <USBD_GetDescriptor+0x286>
 80093bc:	e037      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7c1b      	ldrb	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ce:	f107 0208 	add.w	r2, r7, #8
 80093d2:	4610      	mov	r0, r2
 80093d4:	4798      	blx	r3
 80093d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d8:	e029      	b.n	800942e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9f4 	bl	80097ca <USBD_CtlError>
        err++;
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	3301      	adds	r3, #1
 80093e6:	72fb      	strb	r3, [r7, #11]
      break;
 80093e8:	e021      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10d      	bne.n	800940e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fa:	f107 0208 	add.w	r2, r7, #8
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
 8009402:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	2207      	movs	r2, #7
 800940a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800940c:	e00f      	b.n	800942e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f9da 	bl	80097ca <USBD_CtlError>
        err++;
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	3301      	adds	r3, #1
 800941a:	72fb      	strb	r3, [r7, #11]
      break;
 800941c:	e007      	b.n	800942e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9d2 	bl	80097ca <USBD_CtlError>
      err++;
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	3301      	adds	r3, #1
 800942a:	72fb      	strb	r3, [r7, #11]
      break;
 800942c:	bf00      	nop
  }

  if (err != 0U)
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11c      	bne.n	800946e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009434:	893b      	ldrh	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d011      	beq.n	800945e <USBD_GetDescriptor+0x2b6>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00d      	beq.n	800945e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88da      	ldrh	r2, [r3, #6]
 8009446:	893b      	ldrh	r3, [r7, #8]
 8009448:	4293      	cmp	r3, r2
 800944a:	bf28      	it	cs
 800944c:	4613      	movcs	r3, r2
 800944e:	b29b      	uxth	r3, r3
 8009450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009452:	893b      	ldrh	r3, [r7, #8]
 8009454:	461a      	mov	r2, r3
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa21 	bl	80098a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	88db      	ldrh	r3, [r3, #6]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa78 	bl	800995c <USBD_CtlSendStatus>
 800946c:	e000      	b.n	8009470 <USBD_GetDescriptor+0x2c8>
    return;
 800946e:	bf00      	nop
    }
  }
}
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop

08009478 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	889b      	ldrh	r3, [r3, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d130      	bne.n	80094ec <USBD_SetAddress+0x74>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	88db      	ldrh	r3, [r3, #6]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d12c      	bne.n	80094ec <USBD_SetAddress+0x74>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	885b      	ldrh	r3, [r3, #2]
 8009496:	2b7f      	cmp	r3, #127	@ 0x7f
 8009498:	d828      	bhi.n	80094ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	885b      	ldrh	r3, [r3, #2]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d104      	bne.n	80094ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f989 	bl	80097ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b8:	e01d      	b.n	80094f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7bfa      	ldrb	r2, [r7, #15]
 80094be:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fe4a 	bl	800a160 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fa45 	bl	800995c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e0:	e009      	b.n	80094f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	e004      	b.n	80094f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f96b 	bl	80097ca <USBD_CtlError>
  }
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	4b41      	ldr	r3, [pc, #260]	@ (8009618 <USBD_SetConfig+0x118>)
 8009512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009514:	4b40      	ldr	r3, [pc, #256]	@ (8009618 <USBD_SetConfig+0x118>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d904      	bls.n	8009526 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f953 	bl	80097ca <USBD_CtlError>
 8009524:	e075      	b.n	8009612 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800952c:	2b02      	cmp	r3, #2
 800952e:	d002      	beq.n	8009536 <USBD_SetConfig+0x36>
 8009530:	2b03      	cmp	r3, #3
 8009532:	d023      	beq.n	800957c <USBD_SetConfig+0x7c>
 8009534:	e062      	b.n	80095fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009536:	4b38      	ldr	r3, [pc, #224]	@ (8009618 <USBD_SetConfig+0x118>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01a      	beq.n	8009574 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800953e:	4b36      	ldr	r3, [pc, #216]	@ (8009618 <USBD_SetConfig+0x118>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2203      	movs	r2, #3
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009550:	4b31      	ldr	r3, [pc, #196]	@ (8009618 <USBD_SetConfig+0x118>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff f9e4 	bl	8008924 <USBD_SetClassConfig>
 800955c:	4603      	mov	r3, r0
 800955e:	2b02      	cmp	r3, #2
 8009560:	d104      	bne.n	800956c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f930 	bl	80097ca <USBD_CtlError>
            return;
 800956a:	e052      	b.n	8009612 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9f5 	bl	800995c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009572:	e04e      	b.n	8009612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9f1 	bl	800995c <USBD_CtlSendStatus>
        break;
 800957a:	e04a      	b.n	8009612 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800957c:	4b26      	ldr	r3, [pc, #152]	@ (8009618 <USBD_SetConfig+0x118>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d112      	bne.n	80095aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800958c:	4b22      	ldr	r3, [pc, #136]	@ (8009618 <USBD_SetConfig+0x118>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009596:	4b20      	ldr	r3, [pc, #128]	@ (8009618 <USBD_SetConfig+0x118>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff f9e0 	bl	8008962 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f9da 	bl	800995c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095a8:	e033      	b.n	8009612 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80095aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009618 <USBD_SetConfig+0x118>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d01d      	beq.n	80095f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff f9ce 	bl	8008962 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80095c6:	4b14      	ldr	r3, [pc, #80]	@ (8009618 <USBD_SetConfig+0x118>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095d0:	4b11      	ldr	r3, [pc, #68]	@ (8009618 <USBD_SetConfig+0x118>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff f9a4 	bl	8008924 <USBD_SetClassConfig>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d104      	bne.n	80095ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f8f0 	bl	80097ca <USBD_CtlError>
            return;
 80095ea:	e012      	b.n	8009612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f9b5 	bl	800995c <USBD_CtlSendStatus>
        break;
 80095f2:	e00e      	b.n	8009612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f9b1 	bl	800995c <USBD_CtlSendStatus>
        break;
 80095fa:	e00a      	b.n	8009612 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f8e3 	bl	80097ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009604:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <USBD_SetConfig+0x118>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff f9a9 	bl	8008962 <USBD_ClrClassConfig>
        break;
 8009610:	bf00      	nop
    }
  }
}
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20000380 	.word	0x20000380

0800961c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	88db      	ldrh	r3, [r3, #6]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d004      	beq.n	8009638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8ca 	bl	80097ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009636:	e022      	b.n	800967e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800963e:	2b02      	cmp	r3, #2
 8009640:	dc02      	bgt.n	8009648 <USBD_GetConfig+0x2c>
 8009642:	2b00      	cmp	r3, #0
 8009644:	dc03      	bgt.n	800964e <USBD_GetConfig+0x32>
 8009646:	e015      	b.n	8009674 <USBD_GetConfig+0x58>
 8009648:	2b03      	cmp	r3, #3
 800964a:	d00b      	beq.n	8009664 <USBD_GetConfig+0x48>
 800964c:	e012      	b.n	8009674 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3308      	adds	r3, #8
 8009658:	2201      	movs	r2, #1
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f91f 	bl	80098a0 <USBD_CtlSendData>
        break;
 8009662:	e00c      	b.n	800967e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	2201      	movs	r2, #1
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f917 	bl	80098a0 <USBD_CtlSendData>
        break;
 8009672:	e004      	b.n	800967e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f8a7 	bl	80097ca <USBD_CtlError>
        break;
 800967c:	bf00      	nop
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009696:	3b01      	subs	r3, #1
 8009698:	2b02      	cmp	r3, #2
 800969a:	d81e      	bhi.n	80096da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	88db      	ldrh	r3, [r3, #6]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d004      	beq.n	80096ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f88f 	bl	80097ca <USBD_CtlError>
        break;
 80096ac:	e01a      	b.n	80096e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f043 0202 	orr.w	r2, r3, #2
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	330c      	adds	r3, #12
 80096ce:	2202      	movs	r2, #2
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f8e4 	bl	80098a0 <USBD_CtlSendData>
      break;
 80096d8:	e004      	b.n	80096e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f874 	bl	80097ca <USBD_CtlError>
      break;
 80096e2:	bf00      	nop
  }
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	885b      	ldrh	r3, [r3, #2]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d106      	bne.n	800970c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f928 	bl	800995c <USBD_CtlSendStatus>
  }
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009724:	3b01      	subs	r3, #1
 8009726:	2b02      	cmp	r3, #2
 8009728:	d80b      	bhi.n	8009742 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	885b      	ldrh	r3, [r3, #2]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d10c      	bne.n	800974c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f90e 	bl	800995c <USBD_CtlSendStatus>
      }
      break;
 8009740:	e004      	b.n	800974c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f840 	bl	80097ca <USBD_CtlError>
      break;
 800974a:	e000      	b.n	800974e <USBD_ClrFeature+0x3a>
      break;
 800974c:	bf00      	nop
  }
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781a      	ldrb	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	785a      	ldrb	r2, [r3, #1]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	3302      	adds	r3, #2
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3303      	adds	r3, #3
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	4413      	add	r3, r2
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	3304      	adds	r3, #4
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3305      	adds	r3, #5
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	b29b      	uxth	r3, r3
 800979c:	4413      	add	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	3306      	adds	r3, #6
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	3307      	adds	r3, #7
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4413      	add	r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	80da      	strh	r2, [r3, #6]

}
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097d4:	2180      	movs	r1, #128	@ 0x80
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fc58 	bl	800a08c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc54 	bl	800a08c <USBD_LL_StallEP>
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d032      	beq.n	8009868 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f834 	bl	8009870 <USBD_GetLen>
 8009808:	4603      	mov	r3, r0
 800980a:	3301      	adds	r3, #1
 800980c:	b29b      	uxth	r3, r3
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	75fa      	strb	r2, [r7, #23]
 800981c:	461a      	mov	r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	7812      	ldrb	r2, [r2, #0]
 8009826:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	75fa      	strb	r2, [r7, #23]
 800982e:	461a      	mov	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4413      	add	r3, r2
 8009834:	2203      	movs	r2, #3
 8009836:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009838:	e012      	b.n	8009860 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	60fa      	str	r2, [r7, #12]
 8009840:	7dfa      	ldrb	r2, [r7, #23]
 8009842:	1c51      	adds	r1, r2, #1
 8009844:	75f9      	strb	r1, [r7, #23]
 8009846:	4611      	mov	r1, r2
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	440a      	add	r2, r1
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	75fa      	strb	r2, [r7, #23]
 8009856:	461a      	mov	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4413      	add	r3, r2
 800985c:	2200      	movs	r2, #0
 800985e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e8      	bne.n	800983a <USBD_GetString+0x4e>
    }
  }
}
 8009868:	bf00      	nop
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800987c:	e005      	b.n	800988a <USBD_GetLen+0x1a>
  {
    len++;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	3301      	adds	r3, #1
 8009882:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f5      	bne.n	800987e <USBD_GetLen+0xe>
  }

  return len;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2202      	movs	r2, #2
 80098b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098bc:	88fa      	ldrh	r2, [r7, #6]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098c2:	88fb      	ldrh	r3, [r7, #6]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	2100      	movs	r1, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 fc68 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098e6:	88fb      	ldrh	r3, [r7, #6]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fc56 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2203      	movs	r2, #3
 800990e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009912:	88fa      	ldrh	r2, [r7, #6]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800991a:	88fa      	ldrh	r2, [r7, #6]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	2100      	movs	r1, #0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fc5b 	bl	800a1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	2100      	movs	r1, #0
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fc49 	bl	800a1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2204      	movs	r2, #4
 8009968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800996c:	2300      	movs	r3, #0
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fc13 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2205      	movs	r2, #5
 800998e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009992:	2300      	movs	r3, #0
 8009994:	2200      	movs	r2, #0
 8009996:	2100      	movs	r1, #0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc23 	bl	800a1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4912      	ldr	r1, [pc, #72]	@ (80099f8 <MX_USB_DEVICE_Init+0x50>)
 80099b0:	4812      	ldr	r0, [pc, #72]	@ (80099fc <MX_USB_DEVICE_Init+0x54>)
 80099b2:	f7fe ff5b 	bl	800886c <USBD_Init>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099bc:	f7f6 fd9e 	bl	80004fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099c0:	490f      	ldr	r1, [pc, #60]	@ (8009a00 <MX_USB_DEVICE_Init+0x58>)
 80099c2:	480e      	ldr	r0, [pc, #56]	@ (80099fc <MX_USB_DEVICE_Init+0x54>)
 80099c4:	f7fe ff7d 	bl	80088c2 <USBD_RegisterClass>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099ce:	f7f6 fd95 	bl	80004fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099d2:	490c      	ldr	r1, [pc, #48]	@ (8009a04 <MX_USB_DEVICE_Init+0x5c>)
 80099d4:	4809      	ldr	r0, [pc, #36]	@ (80099fc <MX_USB_DEVICE_Init+0x54>)
 80099d6:	f7fe feab 	bl	8008730 <USBD_CDC_RegisterInterface>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099e0:	f7f6 fd8c 	bl	80004fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099e4:	4805      	ldr	r0, [pc, #20]	@ (80099fc <MX_USB_DEVICE_Init+0x54>)
 80099e6:	f7fe ff86 	bl	80088f6 <USBD_Start>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099f0:	f7f6 fd84 	bl	80004fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099f4:	bf00      	nop
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	2000012c 	.word	0x2000012c
 80099fc:	20000384 	.word	0x20000384
 8009a00:	20000018 	.word	0x20000018
 8009a04:	2000011c 	.word	0x2000011c

08009a08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4905      	ldr	r1, [pc, #20]	@ (8009a24 <CDC_Init_FS+0x1c>)
 8009a10:	4805      	ldr	r0, [pc, #20]	@ (8009a28 <CDC_Init_FS+0x20>)
 8009a12:	f7fe fea4 	bl	800875e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a16:	4905      	ldr	r1, [pc, #20]	@ (8009a2c <CDC_Init_FS+0x24>)
 8009a18:	4803      	ldr	r0, [pc, #12]	@ (8009a28 <CDC_Init_FS+0x20>)
 8009a1a:	f7fe feba 	bl	8008792 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000a48 	.word	0x20000a48
 8009a28:	20000384 	.word	0x20000384
 8009a2c:	20000648 	.word	0x20000648

08009a30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	2b23      	cmp	r3, #35	@ 0x23
 8009a54:	d84a      	bhi.n	8009aec <CDC_Control_FS+0xac>
 8009a56:	a201      	add	r2, pc, #4	@ (adr r2, 8009a5c <CDC_Control_FS+0x1c>)
 8009a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5c:	08009aed 	.word	0x08009aed
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009aed 	.word	0x08009aed
 8009a68:	08009aed 	.word	0x08009aed
 8009a6c:	08009aed 	.word	0x08009aed
 8009a70:	08009aed 	.word	0x08009aed
 8009a74:	08009aed 	.word	0x08009aed
 8009a78:	08009aed 	.word	0x08009aed
 8009a7c:	08009aed 	.word	0x08009aed
 8009a80:	08009aed 	.word	0x08009aed
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009aed 	.word	0x08009aed
 8009a8c:	08009aed 	.word	0x08009aed
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009aed 	.word	0x08009aed
 8009a98:	08009aed 	.word	0x08009aed
 8009a9c:	08009aed 	.word	0x08009aed
 8009aa0:	08009aed 	.word	0x08009aed
 8009aa4:	08009aed 	.word	0x08009aed
 8009aa8:	08009aed 	.word	0x08009aed
 8009aac:	08009aed 	.word	0x08009aed
 8009ab0:	08009aed 	.word	0x08009aed
 8009ab4:	08009aed 	.word	0x08009aed
 8009ab8:	08009aed 	.word	0x08009aed
 8009abc:	08009aed 	.word	0x08009aed
 8009ac0:	08009aed 	.word	0x08009aed
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009aed 	.word	0x08009aed
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009aed 	.word	0x08009aed
 8009adc:	08009aed 	.word	0x08009aed
 8009ae0:	08009aed 	.word	0x08009aed
 8009ae4:	08009aed 	.word	0x08009aed
 8009ae8:	08009aed 	.word	0x08009aed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009aec:	bf00      	nop
  }

  return (USBD_OK);
 8009aee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	4805      	ldr	r0, [pc, #20]	@ (8009b20 <CDC_Receive_FS+0x24>)
 8009b0a:	f7fe fe42 	bl	8008792 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b0e:	4804      	ldr	r0, [pc, #16]	@ (8009b20 <CDC_Receive_FS+0x24>)
 8009b10:	f7fe fe82 	bl	8008818 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000384 	.word	0x20000384

08009b24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b34:	4b0d      	ldr	r3, [pc, #52]	@ (8009b6c <CDC_Transmit_FS+0x48>)
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e00b      	b.n	8009b62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b4a:	887b      	ldrh	r3, [r7, #2]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4806      	ldr	r0, [pc, #24]	@ (8009b6c <CDC_Transmit_FS+0x48>)
 8009b52:	f7fe fe04 	bl	800875e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b56:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <CDC_Transmit_FS+0x48>)
 8009b58:	f7fe fe2f 	bl	80087ba <USBD_CDC_TransmitPacket>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000384 	.word	0x20000384

08009b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2212      	movs	r2, #18
 8009b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b82:	4b03      	ldr	r3, [pc, #12]	@ (8009b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000148 	.word	0x20000148

08009b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ba6:	4b03      	ldr	r3, [pc, #12]	@ (8009bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	2000015c 	.word	0x2000015c

08009bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4907      	ldr	r1, [pc, #28]	@ (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
 8009bce:	4808      	ldr	r0, [pc, #32]	@ (8009bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd0:	f7ff fe0c 	bl	80097ec <USBD_GetString>
 8009bd4:	e004      	b.n	8009be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	4904      	ldr	r1, [pc, #16]	@ (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
 8009bda:	4805      	ldr	r0, [pc, #20]	@ (8009bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bdc:	f7ff fe06 	bl	80097ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009be0:	4b02      	ldr	r3, [pc, #8]	@ (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000e48 	.word	0x20000e48
 8009bf0:	0800b6a4 	.word	0x0800b6a4

08009bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	4904      	ldr	r1, [pc, #16]	@ (8009c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c04:	4804      	ldr	r0, [pc, #16]	@ (8009c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c06:	f7ff fdf1 	bl	80097ec <USBD_GetString>
  return USBD_StrDesc;
 8009c0a:	4b02      	ldr	r3, [pc, #8]	@ (8009c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000e48 	.word	0x20000e48
 8009c18:	0800b6bc 	.word	0x0800b6bc

08009c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	221a      	movs	r2, #26
 8009c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c2e:	f000 f843 	bl	8009cb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c32:	4b02      	ldr	r3, [pc, #8]	@ (8009c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000160 	.word	0x20000160

08009c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4907      	ldr	r1, [pc, #28]	@ (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c56:	4808      	ldr	r0, [pc, #32]	@ (8009c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c58:	f7ff fdc8 	bl	80097ec <USBD_GetString>
 8009c5c:	e004      	b.n	8009c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4904      	ldr	r1, [pc, #16]	@ (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c62:	4805      	ldr	r0, [pc, #20]	@ (8009c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c64:	f7ff fdc2 	bl	80097ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c68:	4b02      	ldr	r3, [pc, #8]	@ (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000e48 	.word	0x20000e48
 8009c78:	0800b6d0 	.word	0x0800b6d0

08009c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4907      	ldr	r1, [pc, #28]	@ (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c92:	4808      	ldr	r0, [pc, #32]	@ (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c94:	f7ff fdaa 	bl	80097ec <USBD_GetString>
 8009c98:	e004      	b.n	8009ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4904      	ldr	r1, [pc, #16]	@ (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c9e:	4805      	ldr	r0, [pc, #20]	@ (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ca0:	f7ff fda4 	bl	80097ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca4:	4b02      	ldr	r3, [pc, #8]	@ (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000e48 	.word	0x20000e48
 8009cb4:	0800b6dc 	.word	0x0800b6dc

08009cb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8009cfc <Get_SerialNum+0x44>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d00 <Get_SerialNum+0x48>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cca:	4b0e      	ldr	r3, [pc, #56]	@ (8009d04 <Get_SerialNum+0x4c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cde:	2208      	movs	r2, #8
 8009ce0:	4909      	ldr	r1, [pc, #36]	@ (8009d08 <Get_SerialNum+0x50>)
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f814 	bl	8009d10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ce8:	2204      	movs	r2, #4
 8009cea:	4908      	ldr	r1, [pc, #32]	@ (8009d0c <Get_SerialNum+0x54>)
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f000 f80f 	bl	8009d10 <IntToUnicode>
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	1ffff7ac 	.word	0x1ffff7ac
 8009d00:	1ffff7b0 	.word	0x1ffff7b0
 8009d04:	1ffff7b4 	.word	0x1ffff7b4
 8009d08:	20000162 	.word	0x20000162
 8009d0c:	20000172 	.word	0x20000172

08009d10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]
 8009d26:	e027      	b.n	8009d78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	0f1b      	lsrs	r3, r3, #28
 8009d2c:	2b09      	cmp	r3, #9
 8009d2e:	d80b      	bhi.n	8009d48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0f1b      	lsrs	r3, r3, #28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	440b      	add	r3, r1
 8009d40:	3230      	adds	r2, #48	@ 0x30
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	e00a      	b.n	8009d5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4619      	mov	r1, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	440b      	add	r3, r1
 8009d58:	3237      	adds	r2, #55	@ 0x37
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	3301      	adds	r3, #1
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	3301      	adds	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
 8009d78:	7dfa      	ldrb	r2, [r7, #23]
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d3d3      	bcc.n	8009d28 <IntToUnicode+0x18>
  }
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
	...

08009d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009dd4 <HAL_PCD_MspInit+0x44>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d113      	bne.n	8009dca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <HAL_PCD_MspInit+0x48>)
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd8 <HAL_PCD_MspInit+0x48>)
 8009da8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dac:	61d3      	str	r3, [r2, #28]
 8009dae:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <HAL_PCD_MspInit+0x48>)
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	2014      	movs	r0, #20
 8009dc0:	f7f7 f8d7 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009dc4:	2014      	movs	r0, #20
 8009dc6:	f7f7 f8f0 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	40005c00 	.word	0x40005c00
 8009dd8:	40021000 	.word	0x40021000

08009ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f7fe fdc8 	bl	8008988 <USBD_LL_SetupStage>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	440b      	add	r3, r1
 8009e20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	f7fe fdfa 	bl	8008a22 <USBD_LL_DataOutStage>
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009e48:	78fa      	ldrb	r2, [r7, #3]
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	440b      	add	r3, r1
 8009e56:	3324      	adds	r3, #36	@ 0x24
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7fe fe51 	bl	8008b04 <USBD_LL_DataInStage>
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe ff64 	bl	8008d46 <USBD_LL_SOF>
}
 8009e7e:	bf00      	nop
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	795b      	ldrb	r3, [r3, #5]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d001      	beq.n	8009e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e9a:	f7f6 fb2f 	bl	80004fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ea4:	7bfa      	ldrb	r2, [r7, #15]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe ff11 	bl	8008cd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe feca 	bl	8008c4e <USBD_LL_Reset>
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe ff0c 	bl	8008cf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7a5b      	ldrb	r3, [r3, #9]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ee0:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <HAL_PCD_SuspendCallback+0x30>)
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	4a03      	ldr	r2, [pc, #12]	@ (8009ef4 <HAL_PCD_SuspendCallback+0x30>)
 8009ee6:	f043 0306 	orr.w	r3, r3, #6
 8009eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed00 	.word	0xe000ed00

08009ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe ff07 	bl	8008d1a <USBD_LL_Resume>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f1c:	4a29      	ldr	r2, [pc, #164]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a27      	ldr	r2, [pc, #156]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f28:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f2c:	4b25      	ldr	r3, [pc, #148]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f2e:	4a26      	ldr	r2, [pc, #152]	@ (8009fc8 <USBD_LL_Init+0xb4>)
 8009f30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f32:	4b24      	ldr	r3, [pc, #144]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f34:	2208      	movs	r2, #8
 8009f36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f38:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f3e:	4b21      	ldr	r3, [pc, #132]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f40:	2202      	movs	r2, #2
 8009f42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f44:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f50:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f56:	481b      	ldr	r0, [pc, #108]	@ (8009fc4 <USBD_LL_Init+0xb0>)
 8009f58:	f7f7 f9e4 	bl	8001324 <HAL_PCD_Init>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009f62:	f7f6 facb 	bl	80004fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f6c:	2318      	movs	r3, #24
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2100      	movs	r1, #0
 8009f72:	f7f8 fe47 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f7c:	2358      	movs	r3, #88	@ 0x58
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2180      	movs	r1, #128	@ 0x80
 8009f82:	f7f8 fe3f 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f8c:	23c0      	movs	r3, #192	@ 0xc0
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2181      	movs	r1, #129	@ 0x81
 8009f92:	f7f8 fe37 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f9c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	f7f8 fe2e 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2182      	movs	r1, #130	@ 0x82
 8009fb6:	f7f8 fe25 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20001048 	.word	0x20001048
 8009fc8:	40005c00 	.word	0x40005c00

08009fcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7f7 fa65 	bl	80014b2 <HAL_PCD_Start>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f952 	bl	800a298 <USBD_Get_USB_Status>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	461a      	mov	r2, r3
 800a010:	4603      	mov	r3, r0
 800a012:	70fb      	strb	r3, [r7, #3]
 800a014:	460b      	mov	r3, r1
 800a016:	70bb      	strb	r3, [r7, #2]
 800a018:	4613      	mov	r3, r2
 800a01a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a02a:	78bb      	ldrb	r3, [r7, #2]
 800a02c:	883a      	ldrh	r2, [r7, #0]
 800a02e:	78f9      	ldrb	r1, [r7, #3]
 800a030:	f7f7 fb5d 	bl	80016ee <HAL_PCD_EP_Open>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f92c 	bl	800a298 <USBD_Get_USB_Status>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a044:	7bbb      	ldrb	r3, [r7, #14]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f7 fb9b 	bl	80017a8 <HAL_PCD_EP_Close>
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f90d 	bl	800a298 <USBD_Get_USB_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a082:	7bbb      	ldrb	r3, [r7, #14]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7f7 fc44 	bl	8001938 <HAL_PCD_EP_SetStall>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f8ee 	bl	800a298 <USBD_Get_USB_Status>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0e4:	78fa      	ldrb	r2, [r7, #3]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7f7 fc77 	bl	80019dc <HAL_PCD_EP_ClrStall>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f8cf 	bl	800a298 <USBD_Get_USB_Status>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a11a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a11c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a120:	2b00      	cmp	r3, #0
 800a122:	da0b      	bge.n	800a13c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	440b      	add	r3, r1
 800a136:	3312      	adds	r3, #18
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	e00b      	b.n	800a154 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a13c:	78fb      	ldrb	r3, [r7, #3]
 800a13e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a142:	68f9      	ldr	r1, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	440b      	add	r3, r1
 800a14e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a152:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7f7 fa91 	bl	80016a6 <HAL_PCD_SetAddress>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 f884 	bl	800a298 <USBD_Get_USB_Status>
 800a190:	4603      	mov	r3, r0
 800a192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a194:	7bbb      	ldrb	r3, [r7, #14]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b086      	sub	sp, #24
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	72fb      	strb	r3, [r7, #11]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1c0:	893b      	ldrh	r3, [r7, #8]
 800a1c2:	7af9      	ldrb	r1, [r7, #11]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	f7f7 fb80 	bl	80018ca <HAL_PCD_EP_Transmit>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 f861 	bl	800a298 <USBD_Get_USB_Status>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	72fb      	strb	r3, [r7, #11]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a206:	893b      	ldrh	r3, [r7, #8]
 800a208:	7af9      	ldrb	r1, [r7, #11]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	f7f7 fb14 	bl	8001838 <HAL_PCD_EP_Receive>
 800a210:	4603      	mov	r3, r0
 800a212:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 f83e 	bl	800a298 <USBD_Get_USB_Status>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a220:	7dbb      	ldrb	r3, [r7, #22]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7f7 fb2a 	bl	800189a <HAL_PCD_EP_GetRxCount>
 800a246:	4603      	mov	r3, r0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a258:	4b03      	ldr	r3, [pc, #12]	@ (800a268 <USBD_static_malloc+0x18>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	2000131c 	.word	0x2000131c

0800a26c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d817      	bhi.n	800a2dc <USBD_Get_USB_Status+0x44>
 800a2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <USBD_Get_USB_Status+0x1c>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2c5 	.word	0x0800a2c5
 800a2b8:	0800a2cb 	.word	0x0800a2cb
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2d7 	.word	0x0800a2d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c8:	e00b      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ce:	e008      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d4:	e005      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2da:	e002      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e0:	bf00      	nop
  }
  return usb_status;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <rand>:
 800a2f0:	4b16      	ldr	r3, [pc, #88]	@ (800a34c <rand+0x5c>)
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	681c      	ldr	r4, [r3, #0]
 800a2f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2f8:	b9b3      	cbnz	r3, 800a328 <rand+0x38>
 800a2fa:	2018      	movs	r0, #24
 800a2fc:	f000 fa54 	bl	800a7a8 <malloc>
 800a300:	4602      	mov	r2, r0
 800a302:	6320      	str	r0, [r4, #48]	@ 0x30
 800a304:	b920      	cbnz	r0, 800a310 <rand+0x20>
 800a306:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <rand+0x60>)
 800a308:	4812      	ldr	r0, [pc, #72]	@ (800a354 <rand+0x64>)
 800a30a:	2152      	movs	r1, #82	@ 0x52
 800a30c:	f000 f9e4 	bl	800a6d8 <__assert_func>
 800a310:	4911      	ldr	r1, [pc, #68]	@ (800a358 <rand+0x68>)
 800a312:	4b12      	ldr	r3, [pc, #72]	@ (800a35c <rand+0x6c>)
 800a314:	e9c0 1300 	strd	r1, r3, [r0]
 800a318:	4b11      	ldr	r3, [pc, #68]	@ (800a360 <rand+0x70>)
 800a31a:	6083      	str	r3, [r0, #8]
 800a31c:	230b      	movs	r3, #11
 800a31e:	8183      	strh	r3, [r0, #12]
 800a320:	2100      	movs	r1, #0
 800a322:	2001      	movs	r0, #1
 800a324:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a328:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a32a:	480e      	ldr	r0, [pc, #56]	@ (800a364 <rand+0x74>)
 800a32c:	690b      	ldr	r3, [r1, #16]
 800a32e:	694c      	ldr	r4, [r1, #20]
 800a330:	4a0d      	ldr	r2, [pc, #52]	@ (800a368 <rand+0x78>)
 800a332:	4358      	muls	r0, r3
 800a334:	fb02 0004 	mla	r0, r2, r4, r0
 800a338:	fba3 3202 	umull	r3, r2, r3, r2
 800a33c:	3301      	adds	r3, #1
 800a33e:	eb40 0002 	adc.w	r0, r0, r2
 800a342:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a346:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	20000188 	.word	0x20000188
 800a350:	0800b724 	.word	0x0800b724
 800a354:	0800b73b 	.word	0x0800b73b
 800a358:	abcd330e 	.word	0xabcd330e
 800a35c:	e66d1234 	.word	0xe66d1234
 800a360:	0005deec 	.word	0x0005deec
 800a364:	5851f42d 	.word	0x5851f42d
 800a368:	4c957f2d 	.word	0x4c957f2d

0800a36c <std>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	e9c0 3300 	strd	r3, r3, [r0]
 800a376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	8181      	strh	r1, [r0, #12]
 800a37e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a380:	81c2      	strh	r2, [r0, #14]
 800a382:	6183      	str	r3, [r0, #24]
 800a384:	4619      	mov	r1, r3
 800a386:	2208      	movs	r2, #8
 800a388:	305c      	adds	r0, #92	@ 0x5c
 800a38a:	f000 f928 	bl	800a5de <memset>
 800a38e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c4 <std+0x58>)
 800a390:	6263      	str	r3, [r4, #36]	@ 0x24
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <std+0x5c>)
 800a394:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <std+0x60>)
 800a398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a39a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d0 <std+0x64>)
 800a39c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x68>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d006      	beq.n	800a3b4 <std+0x48>
 800a3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3aa:	4294      	cmp	r4, r2
 800a3ac:	d002      	beq.n	800a3b4 <std+0x48>
 800a3ae:	33d0      	adds	r3, #208	@ 0xd0
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d105      	bne.n	800a3c0 <std+0x54>
 800a3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f000 b988 	b.w	800a6d0 <__retarget_lock_init_recursive>
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a559 	.word	0x0800a559
 800a3c8:	0800a57b 	.word	0x0800a57b
 800a3cc:	0800a5b3 	.word	0x0800a5b3
 800a3d0:	0800a5d7 	.word	0x0800a5d7
 800a3d4:	2000153c 	.word	0x2000153c

0800a3d8 <stdio_exit_handler>:
 800a3d8:	4a02      	ldr	r2, [pc, #8]	@ (800a3e4 <stdio_exit_handler+0xc>)
 800a3da:	4903      	ldr	r1, [pc, #12]	@ (800a3e8 <stdio_exit_handler+0x10>)
 800a3dc:	4803      	ldr	r0, [pc, #12]	@ (800a3ec <stdio_exit_handler+0x14>)
 800a3de:	f000 b869 	b.w	800a4b4 <_fwalk_sglue>
 800a3e2:	bf00      	nop
 800a3e4:	2000017c 	.word	0x2000017c
 800a3e8:	0800afe9 	.word	0x0800afe9
 800a3ec:	2000018c 	.word	0x2000018c

0800a3f0 <cleanup_stdio>:
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a424 <cleanup_stdio+0x34>)
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	d001      	beq.n	800a400 <cleanup_stdio+0x10>
 800a3fc:	f000 fdf4 	bl	800afe8 <_fflush_r>
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <cleanup_stdio+0x38>)
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <cleanup_stdio+0x1e>
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fded 	bl	800afe8 <_fflush_r>
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <cleanup_stdio+0x3c>)
 800a412:	4299      	cmp	r1, r3
 800a414:	d004      	beq.n	800a420 <cleanup_stdio+0x30>
 800a416:	4620      	mov	r0, r4
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f000 bde4 	b.w	800afe8 <_fflush_r>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	2000153c 	.word	0x2000153c
 800a428:	200015a4 	.word	0x200015a4
 800a42c:	2000160c 	.word	0x2000160c

0800a430 <global_stdio_init.part.0>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <global_stdio_init.part.0+0x30>)
 800a434:	4c0b      	ldr	r4, [pc, #44]	@ (800a464 <global_stdio_init.part.0+0x34>)
 800a436:	4a0c      	ldr	r2, [pc, #48]	@ (800a468 <global_stdio_init.part.0+0x38>)
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	4620      	mov	r0, r4
 800a43c:	2200      	movs	r2, #0
 800a43e:	2104      	movs	r1, #4
 800a440:	f7ff ff94 	bl	800a36c <std>
 800a444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a448:	2201      	movs	r2, #1
 800a44a:	2109      	movs	r1, #9
 800a44c:	f7ff ff8e 	bl	800a36c <std>
 800a450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a454:	2202      	movs	r2, #2
 800a456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45a:	2112      	movs	r1, #18
 800a45c:	f7ff bf86 	b.w	800a36c <std>
 800a460:	20001674 	.word	0x20001674
 800a464:	2000153c 	.word	0x2000153c
 800a468:	0800a3d9 	.word	0x0800a3d9

0800a46c <__sfp_lock_acquire>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__sfp_lock_acquire+0x8>)
 800a46e:	f000 b930 	b.w	800a6d2 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	2000167d 	.word	0x2000167d

0800a478 <__sfp_lock_release>:
 800a478:	4801      	ldr	r0, [pc, #4]	@ (800a480 <__sfp_lock_release+0x8>)
 800a47a:	f000 b92b 	b.w	800a6d4 <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	2000167d 	.word	0x2000167d

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff fff0 	bl	800a46c <__sfp_lock_acquire>
 800a48c:	6a23      	ldr	r3, [r4, #32]
 800a48e:	b11b      	cbz	r3, 800a498 <__sinit+0x14>
 800a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a494:	f7ff bff0 	b.w	800a478 <__sfp_lock_release>
 800a498:	4b04      	ldr	r3, [pc, #16]	@ (800a4ac <__sinit+0x28>)
 800a49a:	6223      	str	r3, [r4, #32]
 800a49c:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <__sinit+0x2c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f5      	bne.n	800a490 <__sinit+0xc>
 800a4a4:	f7ff ffc4 	bl	800a430 <global_stdio_init.part.0>
 800a4a8:	e7f2      	b.n	800a490 <__sinit+0xc>
 800a4aa:	bf00      	nop
 800a4ac:	0800a3f1 	.word	0x0800a3f1
 800a4b0:	20001674 	.word	0x20001674

0800a4b4 <_fwalk_sglue>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4688      	mov	r8, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	2600      	movs	r6, #0
 800a4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c8:	d505      	bpl.n	800a4d6 <_fwalk_sglue+0x22>
 800a4ca:	6824      	ldr	r4, [r4, #0]
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d1f7      	bne.n	800a4c0 <_fwalk_sglue+0xc>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d907      	bls.n	800a4ec <_fwalk_sglue+0x38>
 800a4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	d003      	beq.n	800a4ec <_fwalk_sglue+0x38>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	47c0      	blx	r8
 800a4ea:	4306      	orrs	r6, r0
 800a4ec:	3568      	adds	r5, #104	@ 0x68
 800a4ee:	e7e9      	b.n	800a4c4 <_fwalk_sglue+0x10>

0800a4f0 <sniprintf>:
 800a4f0:	b40c      	push	{r2, r3}
 800a4f2:	b530      	push	{r4, r5, lr}
 800a4f4:	4b17      	ldr	r3, [pc, #92]	@ (800a554 <sniprintf+0x64>)
 800a4f6:	1e0c      	subs	r4, r1, #0
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	b09d      	sub	sp, #116	@ 0x74
 800a4fc:	da08      	bge.n	800a510 <sniprintf+0x20>
 800a4fe:	238b      	movs	r3, #139	@ 0x8b
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a506:	b01d      	add	sp, #116	@ 0x74
 800a508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a50c:	b002      	add	sp, #8
 800a50e:	4770      	bx	lr
 800a510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a514:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a518:	bf14      	ite	ne
 800a51a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a51e:	4623      	moveq	r3, r4
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a528:	9002      	str	r0, [sp, #8]
 800a52a:	9006      	str	r0, [sp, #24]
 800a52c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a532:	ab21      	add	r3, sp, #132	@ 0x84
 800a534:	a902      	add	r1, sp, #8
 800a536:	4628      	mov	r0, r5
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	f000 fa47 	bl	800a9cc <_svfiprintf_r>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	bfbc      	itt	lt
 800a542:	238b      	movlt	r3, #139	@ 0x8b
 800a544:	602b      	strlt	r3, [r5, #0]
 800a546:	2c00      	cmp	r4, #0
 800a548:	d0dd      	beq.n	800a506 <sniprintf+0x16>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e7d9      	b.n	800a506 <sniprintf+0x16>
 800a552:	bf00      	nop
 800a554:	20000188 	.word	0x20000188

0800a558 <__sread>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	f000 f868 	bl	800a634 <_read_r>
 800a564:	2800      	cmp	r0, #0
 800a566:	bfab      	itete	ge
 800a568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a56a:	89a3      	ldrhlt	r3, [r4, #12]
 800a56c:	181b      	addge	r3, r3, r0
 800a56e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a572:	bfac      	ite	ge
 800a574:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a576:	81a3      	strhlt	r3, [r4, #12]
 800a578:	bd10      	pop	{r4, pc}

0800a57a <__swrite>:
 800a57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57e:	461f      	mov	r7, r3
 800a580:	898b      	ldrh	r3, [r1, #12]
 800a582:	05db      	lsls	r3, r3, #23
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	4616      	mov	r6, r2
 800a58a:	d505      	bpl.n	800a598 <__swrite+0x1e>
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	2302      	movs	r3, #2
 800a592:	2200      	movs	r2, #0
 800a594:	f000 f83c 	bl	800a610 <_lseek_r>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	f000 b853 	b.w	800a658 <_write_r>

0800a5b2 <__sseek>:
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ba:	f000 f829 	bl	800a610 <_lseek_r>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	bf15      	itete	ne
 800a5c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5ce:	81a3      	strheq	r3, [r4, #12]
 800a5d0:	bf18      	it	ne
 800a5d2:	81a3      	strhne	r3, [r4, #12]
 800a5d4:	bd10      	pop	{r4, pc}

0800a5d6 <__sclose>:
 800a5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5da:	f000 b809 	b.w	800a5f0 <_close_r>

0800a5de <memset>:
 800a5de:	4402      	add	r2, r0
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d100      	bne.n	800a5e8 <memset+0xa>
 800a5e6:	4770      	bx	lr
 800a5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ec:	e7f9      	b.n	800a5e2 <memset+0x4>
	...

0800a5f0 <_close_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4d06      	ldr	r5, [pc, #24]	@ (800a60c <_close_r+0x1c>)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	f7f6 f8c0 	bl	8000780 <_close>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_close_r+0x1a>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_close_r+0x1a>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20001678 	.word	0x20001678

0800a610 <_lseek_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	@ (800a630 <_lseek_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f6 f8d5 	bl	80007ce <_lseek>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_lseek_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_lseek_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	20001678 	.word	0x20001678

0800a634 <_read_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d07      	ldr	r5, [pc, #28]	@ (800a654 <_read_r+0x20>)
 800a638:	4604      	mov	r4, r0
 800a63a:	4608      	mov	r0, r1
 800a63c:	4611      	mov	r1, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	602a      	str	r2, [r5, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	f7f6 f863 	bl	800070e <_read>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_read_r+0x1e>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_read_r+0x1e>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20001678 	.word	0x20001678

0800a658 <_write_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	@ (800a678 <_write_r+0x20>)
 800a65c:	4604      	mov	r4, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f6 f86e 	bl	8000748 <_write>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_write_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_write_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20001678 	.word	0x20001678

0800a67c <__errno>:
 800a67c:	4b01      	ldr	r3, [pc, #4]	@ (800a684 <__errno+0x8>)
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000188 	.word	0x20000188

0800a688 <__libc_init_array>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	4d0d      	ldr	r5, [pc, #52]	@ (800a6c0 <__libc_init_array+0x38>)
 800a68c:	4c0d      	ldr	r4, [pc, #52]	@ (800a6c4 <__libc_init_array+0x3c>)
 800a68e:	1b64      	subs	r4, r4, r5
 800a690:	10a4      	asrs	r4, r4, #2
 800a692:	2600      	movs	r6, #0
 800a694:	42a6      	cmp	r6, r4
 800a696:	d109      	bne.n	800a6ac <__libc_init_array+0x24>
 800a698:	4d0b      	ldr	r5, [pc, #44]	@ (800a6c8 <__libc_init_array+0x40>)
 800a69a:	4c0c      	ldr	r4, [pc, #48]	@ (800a6cc <__libc_init_array+0x44>)
 800a69c:	f000 fff0 	bl	800b680 <_init>
 800a6a0:	1b64      	subs	r4, r4, r5
 800a6a2:	10a4      	asrs	r4, r4, #2
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	42a6      	cmp	r6, r4
 800a6a8:	d105      	bne.n	800a6b6 <__libc_init_array+0x2e>
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b0:	4798      	blx	r3
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7ee      	b.n	800a694 <__libc_init_array+0xc>
 800a6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ba:	4798      	blx	r3
 800a6bc:	3601      	adds	r6, #1
 800a6be:	e7f2      	b.n	800a6a6 <__libc_init_array+0x1e>
 800a6c0:	0800b80c 	.word	0x0800b80c
 800a6c4:	0800b80c 	.word	0x0800b80c
 800a6c8:	0800b80c 	.word	0x0800b80c
 800a6cc:	0800b810 	.word	0x0800b810

0800a6d0 <__retarget_lock_init_recursive>:
 800a6d0:	4770      	bx	lr

0800a6d2 <__retarget_lock_acquire_recursive>:
 800a6d2:	4770      	bx	lr

0800a6d4 <__retarget_lock_release_recursive>:
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <__assert_func>:
 800a6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6da:	4614      	mov	r4, r2
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <__assert_func+0x2c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	68d8      	ldr	r0, [r3, #12]
 800a6e6:	b954      	cbnz	r4, 800a6fe <__assert_func+0x26>
 800a6e8:	4b07      	ldr	r3, [pc, #28]	@ (800a708 <__assert_func+0x30>)
 800a6ea:	461c      	mov	r4, r3
 800a6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6f0:	9100      	str	r1, [sp, #0]
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	4905      	ldr	r1, [pc, #20]	@ (800a70c <__assert_func+0x34>)
 800a6f6:	f000 fc9f 	bl	800b038 <fiprintf>
 800a6fa:	f000 fce7 	bl	800b0cc <abort>
 800a6fe:	4b04      	ldr	r3, [pc, #16]	@ (800a710 <__assert_func+0x38>)
 800a700:	e7f4      	b.n	800a6ec <__assert_func+0x14>
 800a702:	bf00      	nop
 800a704:	20000188 	.word	0x20000188
 800a708:	0800b7ce 	.word	0x0800b7ce
 800a70c:	0800b7a0 	.word	0x0800b7a0
 800a710:	0800b793 	.word	0x0800b793

0800a714 <_free_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4605      	mov	r5, r0
 800a718:	2900      	cmp	r1, #0
 800a71a:	d041      	beq.n	800a7a0 <_free_r+0x8c>
 800a71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a720:	1f0c      	subs	r4, r1, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	bfb8      	it	lt
 800a726:	18e4      	addlt	r4, r4, r3
 800a728:	f000 f8e8 	bl	800a8fc <__malloc_lock>
 800a72c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a4 <_free_r+0x90>)
 800a72e:	6813      	ldr	r3, [r2, #0]
 800a730:	b933      	cbnz	r3, 800a740 <_free_r+0x2c>
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	6014      	str	r4, [r2, #0]
 800a736:	4628      	mov	r0, r5
 800a738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73c:	f000 b8e4 	b.w	800a908 <__malloc_unlock>
 800a740:	42a3      	cmp	r3, r4
 800a742:	d908      	bls.n	800a756 <_free_r+0x42>
 800a744:	6820      	ldr	r0, [r4, #0]
 800a746:	1821      	adds	r1, r4, r0
 800a748:	428b      	cmp	r3, r1
 800a74a:	bf01      	itttt	eq
 800a74c:	6819      	ldreq	r1, [r3, #0]
 800a74e:	685b      	ldreq	r3, [r3, #4]
 800a750:	1809      	addeq	r1, r1, r0
 800a752:	6021      	streq	r1, [r4, #0]
 800a754:	e7ed      	b.n	800a732 <_free_r+0x1e>
 800a756:	461a      	mov	r2, r3
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	b10b      	cbz	r3, 800a760 <_free_r+0x4c>
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	d9fa      	bls.n	800a756 <_free_r+0x42>
 800a760:	6811      	ldr	r1, [r2, #0]
 800a762:	1850      	adds	r0, r2, r1
 800a764:	42a0      	cmp	r0, r4
 800a766:	d10b      	bne.n	800a780 <_free_r+0x6c>
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	4401      	add	r1, r0
 800a76c:	1850      	adds	r0, r2, r1
 800a76e:	4283      	cmp	r3, r0
 800a770:	6011      	str	r1, [r2, #0]
 800a772:	d1e0      	bne.n	800a736 <_free_r+0x22>
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	6053      	str	r3, [r2, #4]
 800a77a:	4408      	add	r0, r1
 800a77c:	6010      	str	r0, [r2, #0]
 800a77e:	e7da      	b.n	800a736 <_free_r+0x22>
 800a780:	d902      	bls.n	800a788 <_free_r+0x74>
 800a782:	230c      	movs	r3, #12
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	e7d6      	b.n	800a736 <_free_r+0x22>
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	1821      	adds	r1, r4, r0
 800a78c:	428b      	cmp	r3, r1
 800a78e:	bf04      	itt	eq
 800a790:	6819      	ldreq	r1, [r3, #0]
 800a792:	685b      	ldreq	r3, [r3, #4]
 800a794:	6063      	str	r3, [r4, #4]
 800a796:	bf04      	itt	eq
 800a798:	1809      	addeq	r1, r1, r0
 800a79a:	6021      	streq	r1, [r4, #0]
 800a79c:	6054      	str	r4, [r2, #4]
 800a79e:	e7ca      	b.n	800a736 <_free_r+0x22>
 800a7a0:	bd38      	pop	{r3, r4, r5, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20001684 	.word	0x20001684

0800a7a8 <malloc>:
 800a7a8:	4b02      	ldr	r3, [pc, #8]	@ (800a7b4 <malloc+0xc>)
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f000 b825 	b.w	800a7fc <_malloc_r>
 800a7b2:	bf00      	nop
 800a7b4:	20000188 	.word	0x20000188

0800a7b8 <sbrk_aligned>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a7f8 <sbrk_aligned+0x40>)
 800a7bc:	460c      	mov	r4, r1
 800a7be:	6831      	ldr	r1, [r6, #0]
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	b911      	cbnz	r1, 800a7ca <sbrk_aligned+0x12>
 800a7c4:	f000 fc64 	bl	800b090 <_sbrk_r>
 800a7c8:	6030      	str	r0, [r6, #0]
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 fc5f 	bl	800b090 <_sbrk_r>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d103      	bne.n	800a7de <sbrk_aligned+0x26>
 800a7d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a7da:	4620      	mov	r0, r4
 800a7dc:	bd70      	pop	{r4, r5, r6, pc}
 800a7de:	1cc4      	adds	r4, r0, #3
 800a7e0:	f024 0403 	bic.w	r4, r4, #3
 800a7e4:	42a0      	cmp	r0, r4
 800a7e6:	d0f8      	beq.n	800a7da <sbrk_aligned+0x22>
 800a7e8:	1a21      	subs	r1, r4, r0
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 fc50 	bl	800b090 <_sbrk_r>
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d1f2      	bne.n	800a7da <sbrk_aligned+0x22>
 800a7f4:	e7ef      	b.n	800a7d6 <sbrk_aligned+0x1e>
 800a7f6:	bf00      	nop
 800a7f8:	20001680 	.word	0x20001680

0800a7fc <_malloc_r>:
 800a7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a800:	1ccd      	adds	r5, r1, #3
 800a802:	f025 0503 	bic.w	r5, r5, #3
 800a806:	3508      	adds	r5, #8
 800a808:	2d0c      	cmp	r5, #12
 800a80a:	bf38      	it	cc
 800a80c:	250c      	movcc	r5, #12
 800a80e:	2d00      	cmp	r5, #0
 800a810:	4606      	mov	r6, r0
 800a812:	db01      	blt.n	800a818 <_malloc_r+0x1c>
 800a814:	42a9      	cmp	r1, r5
 800a816:	d904      	bls.n	800a822 <_malloc_r+0x26>
 800a818:	230c      	movs	r3, #12
 800a81a:	6033      	str	r3, [r6, #0]
 800a81c:	2000      	movs	r0, #0
 800a81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8f8 <_malloc_r+0xfc>
 800a826:	f000 f869 	bl	800a8fc <__malloc_lock>
 800a82a:	f8d8 3000 	ldr.w	r3, [r8]
 800a82e:	461c      	mov	r4, r3
 800a830:	bb44      	cbnz	r4, 800a884 <_malloc_r+0x88>
 800a832:	4629      	mov	r1, r5
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ffbf 	bl	800a7b8 <sbrk_aligned>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	4604      	mov	r4, r0
 800a83e:	d158      	bne.n	800a8f2 <_malloc_r+0xf6>
 800a840:	f8d8 4000 	ldr.w	r4, [r8]
 800a844:	4627      	mov	r7, r4
 800a846:	2f00      	cmp	r7, #0
 800a848:	d143      	bne.n	800a8d2 <_malloc_r+0xd6>
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	d04b      	beq.n	800a8e6 <_malloc_r+0xea>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	4639      	mov	r1, r7
 800a852:	4630      	mov	r0, r6
 800a854:	eb04 0903 	add.w	r9, r4, r3
 800a858:	f000 fc1a 	bl	800b090 <_sbrk_r>
 800a85c:	4581      	cmp	r9, r0
 800a85e:	d142      	bne.n	800a8e6 <_malloc_r+0xea>
 800a860:	6821      	ldr	r1, [r4, #0]
 800a862:	1a6d      	subs	r5, r5, r1
 800a864:	4629      	mov	r1, r5
 800a866:	4630      	mov	r0, r6
 800a868:	f7ff ffa6 	bl	800a7b8 <sbrk_aligned>
 800a86c:	3001      	adds	r0, #1
 800a86e:	d03a      	beq.n	800a8e6 <_malloc_r+0xea>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	442b      	add	r3, r5
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	f8d8 3000 	ldr.w	r3, [r8]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	bb62      	cbnz	r2, 800a8d8 <_malloc_r+0xdc>
 800a87e:	f8c8 7000 	str.w	r7, [r8]
 800a882:	e00f      	b.n	800a8a4 <_malloc_r+0xa8>
 800a884:	6822      	ldr	r2, [r4, #0]
 800a886:	1b52      	subs	r2, r2, r5
 800a888:	d420      	bmi.n	800a8cc <_malloc_r+0xd0>
 800a88a:	2a0b      	cmp	r2, #11
 800a88c:	d917      	bls.n	800a8be <_malloc_r+0xc2>
 800a88e:	1961      	adds	r1, r4, r5
 800a890:	42a3      	cmp	r3, r4
 800a892:	6025      	str	r5, [r4, #0]
 800a894:	bf18      	it	ne
 800a896:	6059      	strne	r1, [r3, #4]
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	bf08      	it	eq
 800a89c:	f8c8 1000 	streq.w	r1, [r8]
 800a8a0:	5162      	str	r2, [r4, r5]
 800a8a2:	604b      	str	r3, [r1, #4]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f000 f82f 	bl	800a908 <__malloc_unlock>
 800a8aa:	f104 000b 	add.w	r0, r4, #11
 800a8ae:	1d23      	adds	r3, r4, #4
 800a8b0:	f020 0007 	bic.w	r0, r0, #7
 800a8b4:	1ac2      	subs	r2, r0, r3
 800a8b6:	bf1c      	itt	ne
 800a8b8:	1a1b      	subne	r3, r3, r0
 800a8ba:	50a3      	strne	r3, [r4, r2]
 800a8bc:	e7af      	b.n	800a81e <_malloc_r+0x22>
 800a8be:	6862      	ldr	r2, [r4, #4]
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	bf0c      	ite	eq
 800a8c4:	f8c8 2000 	streq.w	r2, [r8]
 800a8c8:	605a      	strne	r2, [r3, #4]
 800a8ca:	e7eb      	b.n	800a8a4 <_malloc_r+0xa8>
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	6864      	ldr	r4, [r4, #4]
 800a8d0:	e7ae      	b.n	800a830 <_malloc_r+0x34>
 800a8d2:	463c      	mov	r4, r7
 800a8d4:	687f      	ldr	r7, [r7, #4]
 800a8d6:	e7b6      	b.n	800a846 <_malloc_r+0x4a>
 800a8d8:	461a      	mov	r2, r3
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d1fb      	bne.n	800a8d8 <_malloc_r+0xdc>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6053      	str	r3, [r2, #4]
 800a8e4:	e7de      	b.n	800a8a4 <_malloc_r+0xa8>
 800a8e6:	230c      	movs	r3, #12
 800a8e8:	6033      	str	r3, [r6, #0]
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f000 f80c 	bl	800a908 <__malloc_unlock>
 800a8f0:	e794      	b.n	800a81c <_malloc_r+0x20>
 800a8f2:	6005      	str	r5, [r0, #0]
 800a8f4:	e7d6      	b.n	800a8a4 <_malloc_r+0xa8>
 800a8f6:	bf00      	nop
 800a8f8:	20001684 	.word	0x20001684

0800a8fc <__malloc_lock>:
 800a8fc:	4801      	ldr	r0, [pc, #4]	@ (800a904 <__malloc_lock+0x8>)
 800a8fe:	f7ff bee8 	b.w	800a6d2 <__retarget_lock_acquire_recursive>
 800a902:	bf00      	nop
 800a904:	2000167c 	.word	0x2000167c

0800a908 <__malloc_unlock>:
 800a908:	4801      	ldr	r0, [pc, #4]	@ (800a910 <__malloc_unlock+0x8>)
 800a90a:	f7ff bee3 	b.w	800a6d4 <__retarget_lock_release_recursive>
 800a90e:	bf00      	nop
 800a910:	2000167c 	.word	0x2000167c

0800a914 <__ssputs_r>:
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	688e      	ldr	r6, [r1, #8]
 800a91a:	461f      	mov	r7, r3
 800a91c:	42be      	cmp	r6, r7
 800a91e:	680b      	ldr	r3, [r1, #0]
 800a920:	4682      	mov	sl, r0
 800a922:	460c      	mov	r4, r1
 800a924:	4690      	mov	r8, r2
 800a926:	d82d      	bhi.n	800a984 <__ssputs_r+0x70>
 800a928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a92c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a930:	d026      	beq.n	800a980 <__ssputs_r+0x6c>
 800a932:	6965      	ldr	r5, [r4, #20]
 800a934:	6909      	ldr	r1, [r1, #16]
 800a936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a93a:	eba3 0901 	sub.w	r9, r3, r1
 800a93e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a942:	1c7b      	adds	r3, r7, #1
 800a944:	444b      	add	r3, r9
 800a946:	106d      	asrs	r5, r5, #1
 800a948:	429d      	cmp	r5, r3
 800a94a:	bf38      	it	cc
 800a94c:	461d      	movcc	r5, r3
 800a94e:	0553      	lsls	r3, r2, #21
 800a950:	d527      	bpl.n	800a9a2 <__ssputs_r+0x8e>
 800a952:	4629      	mov	r1, r5
 800a954:	f7ff ff52 	bl	800a7fc <_malloc_r>
 800a958:	4606      	mov	r6, r0
 800a95a:	b360      	cbz	r0, 800a9b6 <__ssputs_r+0xa2>
 800a95c:	6921      	ldr	r1, [r4, #16]
 800a95e:	464a      	mov	r2, r9
 800a960:	f000 fba6 	bl	800b0b0 <memcpy>
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	6126      	str	r6, [r4, #16]
 800a972:	6165      	str	r5, [r4, #20]
 800a974:	444e      	add	r6, r9
 800a976:	eba5 0509 	sub.w	r5, r5, r9
 800a97a:	6026      	str	r6, [r4, #0]
 800a97c:	60a5      	str	r5, [r4, #8]
 800a97e:	463e      	mov	r6, r7
 800a980:	42be      	cmp	r6, r7
 800a982:	d900      	bls.n	800a986 <__ssputs_r+0x72>
 800a984:	463e      	mov	r6, r7
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	4632      	mov	r2, r6
 800a98a:	4641      	mov	r1, r8
 800a98c:	f000 fb66 	bl	800b05c <memmove>
 800a990:	68a3      	ldr	r3, [r4, #8]
 800a992:	1b9b      	subs	r3, r3, r6
 800a994:	60a3      	str	r3, [r4, #8]
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	4433      	add	r3, r6
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	2000      	movs	r0, #0
 800a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	f000 fb99 	bl	800b0da <_realloc_r>
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d1e0      	bne.n	800a970 <__ssputs_r+0x5c>
 800a9ae:	6921      	ldr	r1, [r4, #16]
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f7ff feaf 	bl	800a714 <_free_r>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	f8ca 3000 	str.w	r3, [sl]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9c8:	e7e9      	b.n	800a99e <__ssputs_r+0x8a>
	...

0800a9cc <_svfiprintf_r>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	4698      	mov	r8, r3
 800a9d2:	898b      	ldrh	r3, [r1, #12]
 800a9d4:	061b      	lsls	r3, r3, #24
 800a9d6:	b09d      	sub	sp, #116	@ 0x74
 800a9d8:	4607      	mov	r7, r0
 800a9da:	460d      	mov	r5, r1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	d510      	bpl.n	800aa02 <_svfiprintf_r+0x36>
 800a9e0:	690b      	ldr	r3, [r1, #16]
 800a9e2:	b973      	cbnz	r3, 800aa02 <_svfiprintf_r+0x36>
 800a9e4:	2140      	movs	r1, #64	@ 0x40
 800a9e6:	f7ff ff09 	bl	800a7fc <_malloc_r>
 800a9ea:	6028      	str	r0, [r5, #0]
 800a9ec:	6128      	str	r0, [r5, #16]
 800a9ee:	b930      	cbnz	r0, 800a9fe <_svfiprintf_r+0x32>
 800a9f0:	230c      	movs	r3, #12
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9f8:	b01d      	add	sp, #116	@ 0x74
 800a9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fe:	2340      	movs	r3, #64	@ 0x40
 800aa00:	616b      	str	r3, [r5, #20]
 800aa02:	2300      	movs	r3, #0
 800aa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa06:	2320      	movs	r3, #32
 800aa08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa10:	2330      	movs	r3, #48	@ 0x30
 800aa12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abb0 <_svfiprintf_r+0x1e4>
 800aa16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa1a:	f04f 0901 	mov.w	r9, #1
 800aa1e:	4623      	mov	r3, r4
 800aa20:	469a      	mov	sl, r3
 800aa22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa26:	b10a      	cbz	r2, 800aa2c <_svfiprintf_r+0x60>
 800aa28:	2a25      	cmp	r2, #37	@ 0x25
 800aa2a:	d1f9      	bne.n	800aa20 <_svfiprintf_r+0x54>
 800aa2c:	ebba 0b04 	subs.w	fp, sl, r4
 800aa30:	d00b      	beq.n	800aa4a <_svfiprintf_r+0x7e>
 800aa32:	465b      	mov	r3, fp
 800aa34:	4622      	mov	r2, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7ff ff6b 	bl	800a914 <__ssputs_r>
 800aa3e:	3001      	adds	r0, #1
 800aa40:	f000 80a7 	beq.w	800ab92 <_svfiprintf_r+0x1c6>
 800aa44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa46:	445a      	add	r2, fp
 800aa48:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa4a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 809f 	beq.w	800ab92 <_svfiprintf_r+0x1c6>
 800aa54:	2300      	movs	r3, #0
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa5e:	f10a 0a01 	add.w	sl, sl, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	9307      	str	r3, [sp, #28]
 800aa66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa6c:	4654      	mov	r4, sl
 800aa6e:	2205      	movs	r2, #5
 800aa70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa74:	484e      	ldr	r0, [pc, #312]	@ (800abb0 <_svfiprintf_r+0x1e4>)
 800aa76:	f7f5 fbb3 	bl	80001e0 <memchr>
 800aa7a:	9a04      	ldr	r2, [sp, #16]
 800aa7c:	b9d8      	cbnz	r0, 800aab6 <_svfiprintf_r+0xea>
 800aa7e:	06d0      	lsls	r0, r2, #27
 800aa80:	bf44      	itt	mi
 800aa82:	2320      	movmi	r3, #32
 800aa84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa88:	0711      	lsls	r1, r2, #28
 800aa8a:	bf44      	itt	mi
 800aa8c:	232b      	movmi	r3, #43	@ 0x2b
 800aa8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa92:	f89a 3000 	ldrb.w	r3, [sl]
 800aa96:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa98:	d015      	beq.n	800aac6 <_svfiprintf_r+0xfa>
 800aa9a:	9a07      	ldr	r2, [sp, #28]
 800aa9c:	4654      	mov	r4, sl
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	f04f 0c0a 	mov.w	ip, #10
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaaa:	3b30      	subs	r3, #48	@ 0x30
 800aaac:	2b09      	cmp	r3, #9
 800aaae:	d94b      	bls.n	800ab48 <_svfiprintf_r+0x17c>
 800aab0:	b1b0      	cbz	r0, 800aae0 <_svfiprintf_r+0x114>
 800aab2:	9207      	str	r2, [sp, #28]
 800aab4:	e014      	b.n	800aae0 <_svfiprintf_r+0x114>
 800aab6:	eba0 0308 	sub.w	r3, r0, r8
 800aaba:	fa09 f303 	lsl.w	r3, r9, r3
 800aabe:	4313      	orrs	r3, r2
 800aac0:	9304      	str	r3, [sp, #16]
 800aac2:	46a2      	mov	sl, r4
 800aac4:	e7d2      	b.n	800aa6c <_svfiprintf_r+0xa0>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	1d19      	adds	r1, r3, #4
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	9103      	str	r1, [sp, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bfbb      	ittet	lt
 800aad2:	425b      	neglt	r3, r3
 800aad4:	f042 0202 	orrlt.w	r2, r2, #2
 800aad8:	9307      	strge	r3, [sp, #28]
 800aada:	9307      	strlt	r3, [sp, #28]
 800aadc:	bfb8      	it	lt
 800aade:	9204      	strlt	r2, [sp, #16]
 800aae0:	7823      	ldrb	r3, [r4, #0]
 800aae2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aae4:	d10a      	bne.n	800aafc <_svfiprintf_r+0x130>
 800aae6:	7863      	ldrb	r3, [r4, #1]
 800aae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaea:	d132      	bne.n	800ab52 <_svfiprintf_r+0x186>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	9203      	str	r2, [sp, #12]
 800aaf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaf8:	3402      	adds	r4, #2
 800aafa:	9305      	str	r3, [sp, #20]
 800aafc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800abc0 <_svfiprintf_r+0x1f4>
 800ab00:	7821      	ldrb	r1, [r4, #0]
 800ab02:	2203      	movs	r2, #3
 800ab04:	4650      	mov	r0, sl
 800ab06:	f7f5 fb6b 	bl	80001e0 <memchr>
 800ab0a:	b138      	cbz	r0, 800ab1c <_svfiprintf_r+0x150>
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	eba0 000a 	sub.w	r0, r0, sl
 800ab12:	2240      	movs	r2, #64	@ 0x40
 800ab14:	4082      	lsls	r2, r0
 800ab16:	4313      	orrs	r3, r2
 800ab18:	3401      	adds	r4, #1
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab20:	4824      	ldr	r0, [pc, #144]	@ (800abb4 <_svfiprintf_r+0x1e8>)
 800ab22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab26:	2206      	movs	r2, #6
 800ab28:	f7f5 fb5a 	bl	80001e0 <memchr>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d036      	beq.n	800ab9e <_svfiprintf_r+0x1d2>
 800ab30:	4b21      	ldr	r3, [pc, #132]	@ (800abb8 <_svfiprintf_r+0x1ec>)
 800ab32:	bb1b      	cbnz	r3, 800ab7c <_svfiprintf_r+0x1b0>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	3307      	adds	r3, #7
 800ab38:	f023 0307 	bic.w	r3, r3, #7
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	9303      	str	r3, [sp, #12]
 800ab40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab42:	4433      	add	r3, r6
 800ab44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab46:	e76a      	b.n	800aa1e <_svfiprintf_r+0x52>
 800ab48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	2001      	movs	r0, #1
 800ab50:	e7a8      	b.n	800aaa4 <_svfiprintf_r+0xd8>
 800ab52:	2300      	movs	r3, #0
 800ab54:	3401      	adds	r4, #1
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f04f 0c0a 	mov.w	ip, #10
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab64:	3a30      	subs	r2, #48	@ 0x30
 800ab66:	2a09      	cmp	r2, #9
 800ab68:	d903      	bls.n	800ab72 <_svfiprintf_r+0x1a6>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0c6      	beq.n	800aafc <_svfiprintf_r+0x130>
 800ab6e:	9105      	str	r1, [sp, #20]
 800ab70:	e7c4      	b.n	800aafc <_svfiprintf_r+0x130>
 800ab72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab76:	4604      	mov	r4, r0
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e7f0      	b.n	800ab5e <_svfiprintf_r+0x192>
 800ab7c:	ab03      	add	r3, sp, #12
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	462a      	mov	r2, r5
 800ab82:	4b0e      	ldr	r3, [pc, #56]	@ (800abbc <_svfiprintf_r+0x1f0>)
 800ab84:	a904      	add	r1, sp, #16
 800ab86:	4638      	mov	r0, r7
 800ab88:	f3af 8000 	nop.w
 800ab8c:	1c42      	adds	r2, r0, #1
 800ab8e:	4606      	mov	r6, r0
 800ab90:	d1d6      	bne.n	800ab40 <_svfiprintf_r+0x174>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	065b      	lsls	r3, r3, #25
 800ab96:	f53f af2d 	bmi.w	800a9f4 <_svfiprintf_r+0x28>
 800ab9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab9c:	e72c      	b.n	800a9f8 <_svfiprintf_r+0x2c>
 800ab9e:	ab03      	add	r3, sp, #12
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	462a      	mov	r2, r5
 800aba4:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <_svfiprintf_r+0x1f0>)
 800aba6:	a904      	add	r1, sp, #16
 800aba8:	4638      	mov	r0, r7
 800abaa:	f000 f879 	bl	800aca0 <_printf_i>
 800abae:	e7ed      	b.n	800ab8c <_svfiprintf_r+0x1c0>
 800abb0:	0800b7cf 	.word	0x0800b7cf
 800abb4:	0800b7d9 	.word	0x0800b7d9
 800abb8:	00000000 	.word	0x00000000
 800abbc:	0800a915 	.word	0x0800a915
 800abc0:	0800b7d5 	.word	0x0800b7d5

0800abc4 <_printf_common>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	4616      	mov	r6, r2
 800abca:	4698      	mov	r8, r3
 800abcc:	688a      	ldr	r2, [r1, #8]
 800abce:	690b      	ldr	r3, [r1, #16]
 800abd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	bfb8      	it	lt
 800abd8:	4613      	movlt	r3, r2
 800abda:	6033      	str	r3, [r6, #0]
 800abdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abe0:	4607      	mov	r7, r0
 800abe2:	460c      	mov	r4, r1
 800abe4:	b10a      	cbz	r2, 800abea <_printf_common+0x26>
 800abe6:	3301      	adds	r3, #1
 800abe8:	6033      	str	r3, [r6, #0]
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	0699      	lsls	r1, r3, #26
 800abee:	bf42      	ittt	mi
 800abf0:	6833      	ldrmi	r3, [r6, #0]
 800abf2:	3302      	addmi	r3, #2
 800abf4:	6033      	strmi	r3, [r6, #0]
 800abf6:	6825      	ldr	r5, [r4, #0]
 800abf8:	f015 0506 	ands.w	r5, r5, #6
 800abfc:	d106      	bne.n	800ac0c <_printf_common+0x48>
 800abfe:	f104 0a19 	add.w	sl, r4, #25
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	6832      	ldr	r2, [r6, #0]
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dc26      	bgt.n	800ac5a <_printf_common+0x96>
 800ac0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac10:	6822      	ldr	r2, [r4, #0]
 800ac12:	3b00      	subs	r3, #0
 800ac14:	bf18      	it	ne
 800ac16:	2301      	movne	r3, #1
 800ac18:	0692      	lsls	r2, r2, #26
 800ac1a:	d42b      	bmi.n	800ac74 <_printf_common+0xb0>
 800ac1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac20:	4641      	mov	r1, r8
 800ac22:	4638      	mov	r0, r7
 800ac24:	47c8      	blx	r9
 800ac26:	3001      	adds	r0, #1
 800ac28:	d01e      	beq.n	800ac68 <_printf_common+0xa4>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	6922      	ldr	r2, [r4, #16]
 800ac2e:	f003 0306 	and.w	r3, r3, #6
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	bf02      	ittt	eq
 800ac36:	68e5      	ldreq	r5, [r4, #12]
 800ac38:	6833      	ldreq	r3, [r6, #0]
 800ac3a:	1aed      	subeq	r5, r5, r3
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	bf0c      	ite	eq
 800ac40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac44:	2500      	movne	r5, #0
 800ac46:	4293      	cmp	r3, r2
 800ac48:	bfc4      	itt	gt
 800ac4a:	1a9b      	subgt	r3, r3, r2
 800ac4c:	18ed      	addgt	r5, r5, r3
 800ac4e:	2600      	movs	r6, #0
 800ac50:	341a      	adds	r4, #26
 800ac52:	42b5      	cmp	r5, r6
 800ac54:	d11a      	bne.n	800ac8c <_printf_common+0xc8>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e008      	b.n	800ac6c <_printf_common+0xa8>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4652      	mov	r2, sl
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4638      	mov	r0, r7
 800ac62:	47c8      	blx	r9
 800ac64:	3001      	adds	r0, #1
 800ac66:	d103      	bne.n	800ac70 <_printf_common+0xac>
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac70:	3501      	adds	r5, #1
 800ac72:	e7c6      	b.n	800ac02 <_printf_common+0x3e>
 800ac74:	18e1      	adds	r1, r4, r3
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	2030      	movs	r0, #48	@ 0x30
 800ac7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac7e:	4422      	add	r2, r4
 800ac80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac88:	3302      	adds	r3, #2
 800ac8a:	e7c7      	b.n	800ac1c <_printf_common+0x58>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4622      	mov	r2, r4
 800ac90:	4641      	mov	r1, r8
 800ac92:	4638      	mov	r0, r7
 800ac94:	47c8      	blx	r9
 800ac96:	3001      	adds	r0, #1
 800ac98:	d0e6      	beq.n	800ac68 <_printf_common+0xa4>
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7d9      	b.n	800ac52 <_printf_common+0x8e>
	...

0800aca0 <_printf_i>:
 800aca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	7e0f      	ldrb	r7, [r1, #24]
 800aca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aca8:	2f78      	cmp	r7, #120	@ 0x78
 800acaa:	4691      	mov	r9, r2
 800acac:	4680      	mov	r8, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	469a      	mov	sl, r3
 800acb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acb6:	d807      	bhi.n	800acc8 <_printf_i+0x28>
 800acb8:	2f62      	cmp	r7, #98	@ 0x62
 800acba:	d80a      	bhi.n	800acd2 <_printf_i+0x32>
 800acbc:	2f00      	cmp	r7, #0
 800acbe:	f000 80d2 	beq.w	800ae66 <_printf_i+0x1c6>
 800acc2:	2f58      	cmp	r7, #88	@ 0x58
 800acc4:	f000 80b9 	beq.w	800ae3a <_printf_i+0x19a>
 800acc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800accc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acd0:	e03a      	b.n	800ad48 <_printf_i+0xa8>
 800acd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acd6:	2b15      	cmp	r3, #21
 800acd8:	d8f6      	bhi.n	800acc8 <_printf_i+0x28>
 800acda:	a101      	add	r1, pc, #4	@ (adr r1, 800ace0 <_printf_i+0x40>)
 800acdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ace0:	0800ad39 	.word	0x0800ad39
 800ace4:	0800ad4d 	.word	0x0800ad4d
 800ace8:	0800acc9 	.word	0x0800acc9
 800acec:	0800acc9 	.word	0x0800acc9
 800acf0:	0800acc9 	.word	0x0800acc9
 800acf4:	0800acc9 	.word	0x0800acc9
 800acf8:	0800ad4d 	.word	0x0800ad4d
 800acfc:	0800acc9 	.word	0x0800acc9
 800ad00:	0800acc9 	.word	0x0800acc9
 800ad04:	0800acc9 	.word	0x0800acc9
 800ad08:	0800acc9 	.word	0x0800acc9
 800ad0c:	0800ae4d 	.word	0x0800ae4d
 800ad10:	0800ad77 	.word	0x0800ad77
 800ad14:	0800ae07 	.word	0x0800ae07
 800ad18:	0800acc9 	.word	0x0800acc9
 800ad1c:	0800acc9 	.word	0x0800acc9
 800ad20:	0800ae6f 	.word	0x0800ae6f
 800ad24:	0800acc9 	.word	0x0800acc9
 800ad28:	0800ad77 	.word	0x0800ad77
 800ad2c:	0800acc9 	.word	0x0800acc9
 800ad30:	0800acc9 	.word	0x0800acc9
 800ad34:	0800ae0f 	.word	0x0800ae0f
 800ad38:	6833      	ldr	r3, [r6, #0]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6032      	str	r2, [r6, #0]
 800ad40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e09d      	b.n	800ae88 <_printf_i+0x1e8>
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	1d19      	adds	r1, r3, #4
 800ad52:	6031      	str	r1, [r6, #0]
 800ad54:	0606      	lsls	r6, r0, #24
 800ad56:	d501      	bpl.n	800ad5c <_printf_i+0xbc>
 800ad58:	681d      	ldr	r5, [r3, #0]
 800ad5a:	e003      	b.n	800ad64 <_printf_i+0xc4>
 800ad5c:	0645      	lsls	r5, r0, #25
 800ad5e:	d5fb      	bpl.n	800ad58 <_printf_i+0xb8>
 800ad60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	da03      	bge.n	800ad70 <_printf_i+0xd0>
 800ad68:	232d      	movs	r3, #45	@ 0x2d
 800ad6a:	426d      	negs	r5, r5
 800ad6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad70:	4859      	ldr	r0, [pc, #356]	@ (800aed8 <_printf_i+0x238>)
 800ad72:	230a      	movs	r3, #10
 800ad74:	e011      	b.n	800ad9a <_printf_i+0xfa>
 800ad76:	6821      	ldr	r1, [r4, #0]
 800ad78:	6833      	ldr	r3, [r6, #0]
 800ad7a:	0608      	lsls	r0, r1, #24
 800ad7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad80:	d402      	bmi.n	800ad88 <_printf_i+0xe8>
 800ad82:	0649      	lsls	r1, r1, #25
 800ad84:	bf48      	it	mi
 800ad86:	b2ad      	uxthmi	r5, r5
 800ad88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad8a:	4853      	ldr	r0, [pc, #332]	@ (800aed8 <_printf_i+0x238>)
 800ad8c:	6033      	str	r3, [r6, #0]
 800ad8e:	bf14      	ite	ne
 800ad90:	230a      	movne	r3, #10
 800ad92:	2308      	moveq	r3, #8
 800ad94:	2100      	movs	r1, #0
 800ad96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad9a:	6866      	ldr	r6, [r4, #4]
 800ad9c:	60a6      	str	r6, [r4, #8]
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	bfa2      	ittt	ge
 800ada2:	6821      	ldrge	r1, [r4, #0]
 800ada4:	f021 0104 	bicge.w	r1, r1, #4
 800ada8:	6021      	strge	r1, [r4, #0]
 800adaa:	b90d      	cbnz	r5, 800adb0 <_printf_i+0x110>
 800adac:	2e00      	cmp	r6, #0
 800adae:	d04b      	beq.n	800ae48 <_printf_i+0x1a8>
 800adb0:	4616      	mov	r6, r2
 800adb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800adb6:	fb03 5711 	mls	r7, r3, r1, r5
 800adba:	5dc7      	ldrb	r7, [r0, r7]
 800adbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adc0:	462f      	mov	r7, r5
 800adc2:	42bb      	cmp	r3, r7
 800adc4:	460d      	mov	r5, r1
 800adc6:	d9f4      	bls.n	800adb2 <_printf_i+0x112>
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d10b      	bne.n	800ade4 <_printf_i+0x144>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	07df      	lsls	r7, r3, #31
 800add0:	d508      	bpl.n	800ade4 <_printf_i+0x144>
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	6861      	ldr	r1, [r4, #4]
 800add6:	4299      	cmp	r1, r3
 800add8:	bfde      	ittt	le
 800adda:	2330      	movle	r3, #48	@ 0x30
 800addc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ade0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ade4:	1b92      	subs	r2, r2, r6
 800ade6:	6122      	str	r2, [r4, #16]
 800ade8:	f8cd a000 	str.w	sl, [sp]
 800adec:	464b      	mov	r3, r9
 800adee:	aa03      	add	r2, sp, #12
 800adf0:	4621      	mov	r1, r4
 800adf2:	4640      	mov	r0, r8
 800adf4:	f7ff fee6 	bl	800abc4 <_printf_common>
 800adf8:	3001      	adds	r0, #1
 800adfa:	d14a      	bne.n	800ae92 <_printf_i+0x1f2>
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae00:	b004      	add	sp, #16
 800ae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	f043 0320 	orr.w	r3, r3, #32
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	4833      	ldr	r0, [pc, #204]	@ (800aedc <_printf_i+0x23c>)
 800ae10:	2778      	movs	r7, #120	@ 0x78
 800ae12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	6831      	ldr	r1, [r6, #0]
 800ae1a:	061f      	lsls	r7, r3, #24
 800ae1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae20:	d402      	bmi.n	800ae28 <_printf_i+0x188>
 800ae22:	065f      	lsls	r7, r3, #25
 800ae24:	bf48      	it	mi
 800ae26:	b2ad      	uxthmi	r5, r5
 800ae28:	6031      	str	r1, [r6, #0]
 800ae2a:	07d9      	lsls	r1, r3, #31
 800ae2c:	bf44      	itt	mi
 800ae2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae32:	6023      	strmi	r3, [r4, #0]
 800ae34:	b11d      	cbz	r5, 800ae3e <_printf_i+0x19e>
 800ae36:	2310      	movs	r3, #16
 800ae38:	e7ac      	b.n	800ad94 <_printf_i+0xf4>
 800ae3a:	4827      	ldr	r0, [pc, #156]	@ (800aed8 <_printf_i+0x238>)
 800ae3c:	e7e9      	b.n	800ae12 <_printf_i+0x172>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f023 0320 	bic.w	r3, r3, #32
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	e7f6      	b.n	800ae36 <_printf_i+0x196>
 800ae48:	4616      	mov	r6, r2
 800ae4a:	e7bd      	b.n	800adc8 <_printf_i+0x128>
 800ae4c:	6833      	ldr	r3, [r6, #0]
 800ae4e:	6825      	ldr	r5, [r4, #0]
 800ae50:	6961      	ldr	r1, [r4, #20]
 800ae52:	1d18      	adds	r0, r3, #4
 800ae54:	6030      	str	r0, [r6, #0]
 800ae56:	062e      	lsls	r6, r5, #24
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	d501      	bpl.n	800ae60 <_printf_i+0x1c0>
 800ae5c:	6019      	str	r1, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <_printf_i+0x1c6>
 800ae60:	0668      	lsls	r0, r5, #25
 800ae62:	d5fb      	bpl.n	800ae5c <_printf_i+0x1bc>
 800ae64:	8019      	strh	r1, [r3, #0]
 800ae66:	2300      	movs	r3, #0
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	e7bc      	b.n	800ade8 <_printf_i+0x148>
 800ae6e:	6833      	ldr	r3, [r6, #0]
 800ae70:	1d1a      	adds	r2, r3, #4
 800ae72:	6032      	str	r2, [r6, #0]
 800ae74:	681e      	ldr	r6, [r3, #0]
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7f5 f9b0 	bl	80001e0 <memchr>
 800ae80:	b108      	cbz	r0, 800ae86 <_printf_i+0x1e6>
 800ae82:	1b80      	subs	r0, r0, r6
 800ae84:	6060      	str	r0, [r4, #4]
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae90:	e7aa      	b.n	800ade8 <_printf_i+0x148>
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	4632      	mov	r2, r6
 800ae96:	4649      	mov	r1, r9
 800ae98:	4640      	mov	r0, r8
 800ae9a:	47d0      	blx	sl
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d0ad      	beq.n	800adfc <_printf_i+0x15c>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	079b      	lsls	r3, r3, #30
 800aea4:	d413      	bmi.n	800aece <_printf_i+0x22e>
 800aea6:	68e0      	ldr	r0, [r4, #12]
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	4298      	cmp	r0, r3
 800aeac:	bfb8      	it	lt
 800aeae:	4618      	movlt	r0, r3
 800aeb0:	e7a6      	b.n	800ae00 <_printf_i+0x160>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	4640      	mov	r0, r8
 800aeba:	47d0      	blx	sl
 800aebc:	3001      	adds	r0, #1
 800aebe:	d09d      	beq.n	800adfc <_printf_i+0x15c>
 800aec0:	3501      	adds	r5, #1
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	9903      	ldr	r1, [sp, #12]
 800aec6:	1a5b      	subs	r3, r3, r1
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	dcf2      	bgt.n	800aeb2 <_printf_i+0x212>
 800aecc:	e7eb      	b.n	800aea6 <_printf_i+0x206>
 800aece:	2500      	movs	r5, #0
 800aed0:	f104 0619 	add.w	r6, r4, #25
 800aed4:	e7f5      	b.n	800aec2 <_printf_i+0x222>
 800aed6:	bf00      	nop
 800aed8:	0800b7e0 	.word	0x0800b7e0
 800aedc:	0800b7f1 	.word	0x0800b7f1

0800aee0 <__sflush_r>:
 800aee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee8:	0716      	lsls	r6, r2, #28
 800aeea:	4605      	mov	r5, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	d454      	bmi.n	800af9a <__sflush_r+0xba>
 800aef0:	684b      	ldr	r3, [r1, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dc02      	bgt.n	800aefc <__sflush_r+0x1c>
 800aef6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dd48      	ble.n	800af8e <__sflush_r+0xae>
 800aefc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aefe:	2e00      	cmp	r6, #0
 800af00:	d045      	beq.n	800af8e <__sflush_r+0xae>
 800af02:	2300      	movs	r3, #0
 800af04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af08:	682f      	ldr	r7, [r5, #0]
 800af0a:	6a21      	ldr	r1, [r4, #32]
 800af0c:	602b      	str	r3, [r5, #0]
 800af0e:	d030      	beq.n	800af72 <__sflush_r+0x92>
 800af10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	0759      	lsls	r1, r3, #29
 800af16:	d505      	bpl.n	800af24 <__sflush_r+0x44>
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af1e:	b10b      	cbz	r3, 800af24 <__sflush_r+0x44>
 800af20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	2300      	movs	r3, #0
 800af26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af28:	6a21      	ldr	r1, [r4, #32]
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b0      	blx	r6
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	d106      	bne.n	800af42 <__sflush_r+0x62>
 800af34:	6829      	ldr	r1, [r5, #0]
 800af36:	291d      	cmp	r1, #29
 800af38:	d82b      	bhi.n	800af92 <__sflush_r+0xb2>
 800af3a:	4a2a      	ldr	r2, [pc, #168]	@ (800afe4 <__sflush_r+0x104>)
 800af3c:	410a      	asrs	r2, r1
 800af3e:	07d6      	lsls	r6, r2, #31
 800af40:	d427      	bmi.n	800af92 <__sflush_r+0xb2>
 800af42:	2200      	movs	r2, #0
 800af44:	6062      	str	r2, [r4, #4]
 800af46:	04d9      	lsls	r1, r3, #19
 800af48:	6922      	ldr	r2, [r4, #16]
 800af4a:	6022      	str	r2, [r4, #0]
 800af4c:	d504      	bpl.n	800af58 <__sflush_r+0x78>
 800af4e:	1c42      	adds	r2, r0, #1
 800af50:	d101      	bne.n	800af56 <__sflush_r+0x76>
 800af52:	682b      	ldr	r3, [r5, #0]
 800af54:	b903      	cbnz	r3, 800af58 <__sflush_r+0x78>
 800af56:	6560      	str	r0, [r4, #84]	@ 0x54
 800af58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af5a:	602f      	str	r7, [r5, #0]
 800af5c:	b1b9      	cbz	r1, 800af8e <__sflush_r+0xae>
 800af5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af62:	4299      	cmp	r1, r3
 800af64:	d002      	beq.n	800af6c <__sflush_r+0x8c>
 800af66:	4628      	mov	r0, r5
 800af68:	f7ff fbd4 	bl	800a714 <_free_r>
 800af6c:	2300      	movs	r3, #0
 800af6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800af70:	e00d      	b.n	800af8e <__sflush_r+0xae>
 800af72:	2301      	movs	r3, #1
 800af74:	4628      	mov	r0, r5
 800af76:	47b0      	blx	r6
 800af78:	4602      	mov	r2, r0
 800af7a:	1c50      	adds	r0, r2, #1
 800af7c:	d1c9      	bne.n	800af12 <__sflush_r+0x32>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0c6      	beq.n	800af12 <__sflush_r+0x32>
 800af84:	2b1d      	cmp	r3, #29
 800af86:	d001      	beq.n	800af8c <__sflush_r+0xac>
 800af88:	2b16      	cmp	r3, #22
 800af8a:	d11e      	bne.n	800afca <__sflush_r+0xea>
 800af8c:	602f      	str	r7, [r5, #0]
 800af8e:	2000      	movs	r0, #0
 800af90:	e022      	b.n	800afd8 <__sflush_r+0xf8>
 800af92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af96:	b21b      	sxth	r3, r3
 800af98:	e01b      	b.n	800afd2 <__sflush_r+0xf2>
 800af9a:	690f      	ldr	r7, [r1, #16]
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	d0f6      	beq.n	800af8e <__sflush_r+0xae>
 800afa0:	0793      	lsls	r3, r2, #30
 800afa2:	680e      	ldr	r6, [r1, #0]
 800afa4:	bf08      	it	eq
 800afa6:	694b      	ldreq	r3, [r1, #20]
 800afa8:	600f      	str	r7, [r1, #0]
 800afaa:	bf18      	it	ne
 800afac:	2300      	movne	r3, #0
 800afae:	eba6 0807 	sub.w	r8, r6, r7
 800afb2:	608b      	str	r3, [r1, #8]
 800afb4:	f1b8 0f00 	cmp.w	r8, #0
 800afb8:	dde9      	ble.n	800af8e <__sflush_r+0xae>
 800afba:	6a21      	ldr	r1, [r4, #32]
 800afbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afbe:	4643      	mov	r3, r8
 800afc0:	463a      	mov	r2, r7
 800afc2:	4628      	mov	r0, r5
 800afc4:	47b0      	blx	r6
 800afc6:	2800      	cmp	r0, #0
 800afc8:	dc08      	bgt.n	800afdc <__sflush_r+0xfc>
 800afca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	4407      	add	r7, r0
 800afde:	eba8 0800 	sub.w	r8, r8, r0
 800afe2:	e7e7      	b.n	800afb4 <__sflush_r+0xd4>
 800afe4:	dfbffffe 	.word	0xdfbffffe

0800afe8 <_fflush_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	690b      	ldr	r3, [r1, #16]
 800afec:	4605      	mov	r5, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	b913      	cbnz	r3, 800aff8 <_fflush_r+0x10>
 800aff2:	2500      	movs	r5, #0
 800aff4:	4628      	mov	r0, r5
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	b118      	cbz	r0, 800b002 <_fflush_r+0x1a>
 800affa:	6a03      	ldr	r3, [r0, #32]
 800affc:	b90b      	cbnz	r3, 800b002 <_fflush_r+0x1a>
 800affe:	f7ff fa41 	bl	800a484 <__sinit>
 800b002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0f3      	beq.n	800aff2 <_fflush_r+0xa>
 800b00a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b00c:	07d0      	lsls	r0, r2, #31
 800b00e:	d404      	bmi.n	800b01a <_fflush_r+0x32>
 800b010:	0599      	lsls	r1, r3, #22
 800b012:	d402      	bmi.n	800b01a <_fflush_r+0x32>
 800b014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b016:	f7ff fb5c 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800b01a:	4628      	mov	r0, r5
 800b01c:	4621      	mov	r1, r4
 800b01e:	f7ff ff5f 	bl	800aee0 <__sflush_r>
 800b022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b024:	07da      	lsls	r2, r3, #31
 800b026:	4605      	mov	r5, r0
 800b028:	d4e4      	bmi.n	800aff4 <_fflush_r+0xc>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	059b      	lsls	r3, r3, #22
 800b02e:	d4e1      	bmi.n	800aff4 <_fflush_r+0xc>
 800b030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b032:	f7ff fb4f 	bl	800a6d4 <__retarget_lock_release_recursive>
 800b036:	e7dd      	b.n	800aff4 <_fflush_r+0xc>

0800b038 <fiprintf>:
 800b038:	b40e      	push	{r1, r2, r3}
 800b03a:	b503      	push	{r0, r1, lr}
 800b03c:	4601      	mov	r1, r0
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	4805      	ldr	r0, [pc, #20]	@ (800b058 <fiprintf+0x20>)
 800b042:	f853 2b04 	ldr.w	r2, [r3], #4
 800b046:	6800      	ldr	r0, [r0, #0]
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	f000 f89d 	bl	800b188 <_vfiprintf_r>
 800b04e:	b002      	add	sp, #8
 800b050:	f85d eb04 	ldr.w	lr, [sp], #4
 800b054:	b003      	add	sp, #12
 800b056:	4770      	bx	lr
 800b058:	20000188 	.word	0x20000188

0800b05c <memmove>:
 800b05c:	4288      	cmp	r0, r1
 800b05e:	b510      	push	{r4, lr}
 800b060:	eb01 0402 	add.w	r4, r1, r2
 800b064:	d902      	bls.n	800b06c <memmove+0x10>
 800b066:	4284      	cmp	r4, r0
 800b068:	4623      	mov	r3, r4
 800b06a:	d807      	bhi.n	800b07c <memmove+0x20>
 800b06c:	1e43      	subs	r3, r0, #1
 800b06e:	42a1      	cmp	r1, r4
 800b070:	d008      	beq.n	800b084 <memmove+0x28>
 800b072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07a:	e7f8      	b.n	800b06e <memmove+0x12>
 800b07c:	4402      	add	r2, r0
 800b07e:	4601      	mov	r1, r0
 800b080:	428a      	cmp	r2, r1
 800b082:	d100      	bne.n	800b086 <memmove+0x2a>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b08e:	e7f7      	b.n	800b080 <memmove+0x24>

0800b090 <_sbrk_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d06      	ldr	r5, [pc, #24]	@ (800b0ac <_sbrk_r+0x1c>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	f7f5 fba4 	bl	80007e8 <_sbrk>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_sbrk_r+0x1a>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_sbrk_r+0x1a>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20001678 	.word	0x20001678

0800b0b0 <memcpy>:
 800b0b0:	440a      	add	r2, r1
 800b0b2:	4291      	cmp	r1, r2
 800b0b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b0b8:	d100      	bne.n	800b0bc <memcpy+0xc>
 800b0ba:	4770      	bx	lr
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0c6:	4291      	cmp	r1, r2
 800b0c8:	d1f9      	bne.n	800b0be <memcpy+0xe>
 800b0ca:	bd10      	pop	{r4, pc}

0800b0cc <abort>:
 800b0cc:	b508      	push	{r3, lr}
 800b0ce:	2006      	movs	r0, #6
 800b0d0:	f000 fa2e 	bl	800b530 <raise>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f7f5 fb0f 	bl	80006f8 <_exit>

0800b0da <_realloc_r>:
 800b0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4615      	mov	r5, r2
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	b921      	cbnz	r1, 800b0f0 <_realloc_r+0x16>
 800b0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	f7ff bb86 	b.w	800a7fc <_malloc_r>
 800b0f0:	b92a      	cbnz	r2, 800b0fe <_realloc_r+0x24>
 800b0f2:	f7ff fb0f 	bl	800a714 <_free_r>
 800b0f6:	2400      	movs	r4, #0
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fe:	f000 fa33 	bl	800b568 <_malloc_usable_size_r>
 800b102:	4285      	cmp	r5, r0
 800b104:	4606      	mov	r6, r0
 800b106:	d802      	bhi.n	800b10e <_realloc_r+0x34>
 800b108:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b10c:	d8f4      	bhi.n	800b0f8 <_realloc_r+0x1e>
 800b10e:	4629      	mov	r1, r5
 800b110:	4640      	mov	r0, r8
 800b112:	f7ff fb73 	bl	800a7fc <_malloc_r>
 800b116:	4607      	mov	r7, r0
 800b118:	2800      	cmp	r0, #0
 800b11a:	d0ec      	beq.n	800b0f6 <_realloc_r+0x1c>
 800b11c:	42b5      	cmp	r5, r6
 800b11e:	462a      	mov	r2, r5
 800b120:	4621      	mov	r1, r4
 800b122:	bf28      	it	cs
 800b124:	4632      	movcs	r2, r6
 800b126:	f7ff ffc3 	bl	800b0b0 <memcpy>
 800b12a:	4621      	mov	r1, r4
 800b12c:	4640      	mov	r0, r8
 800b12e:	f7ff faf1 	bl	800a714 <_free_r>
 800b132:	463c      	mov	r4, r7
 800b134:	e7e0      	b.n	800b0f8 <_realloc_r+0x1e>

0800b136 <__sfputc_r>:
 800b136:	6893      	ldr	r3, [r2, #8]
 800b138:	3b01      	subs	r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	b410      	push	{r4}
 800b13e:	6093      	str	r3, [r2, #8]
 800b140:	da08      	bge.n	800b154 <__sfputc_r+0x1e>
 800b142:	6994      	ldr	r4, [r2, #24]
 800b144:	42a3      	cmp	r3, r4
 800b146:	db01      	blt.n	800b14c <__sfputc_r+0x16>
 800b148:	290a      	cmp	r1, #10
 800b14a:	d103      	bne.n	800b154 <__sfputc_r+0x1e>
 800b14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b150:	f000 b932 	b.w	800b3b8 <__swbuf_r>
 800b154:	6813      	ldr	r3, [r2, #0]
 800b156:	1c58      	adds	r0, r3, #1
 800b158:	6010      	str	r0, [r2, #0]
 800b15a:	7019      	strb	r1, [r3, #0]
 800b15c:	4608      	mov	r0, r1
 800b15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <__sfputs_r>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	4614      	mov	r4, r2
 800b16c:	18d5      	adds	r5, r2, r3
 800b16e:	42ac      	cmp	r4, r5
 800b170:	d101      	bne.n	800b176 <__sfputs_r+0x12>
 800b172:	2000      	movs	r0, #0
 800b174:	e007      	b.n	800b186 <__sfputs_r+0x22>
 800b176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17a:	463a      	mov	r2, r7
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7ff ffda 	bl	800b136 <__sfputc_r>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	d1f3      	bne.n	800b16e <__sfputs_r+0xa>
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b188 <_vfiprintf_r>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	460d      	mov	r5, r1
 800b18e:	b09d      	sub	sp, #116	@ 0x74
 800b190:	4614      	mov	r4, r2
 800b192:	4698      	mov	r8, r3
 800b194:	4606      	mov	r6, r0
 800b196:	b118      	cbz	r0, 800b1a0 <_vfiprintf_r+0x18>
 800b198:	6a03      	ldr	r3, [r0, #32]
 800b19a:	b90b      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x18>
 800b19c:	f7ff f972 	bl	800a484 <__sinit>
 800b1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	d405      	bmi.n	800b1b2 <_vfiprintf_r+0x2a>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d402      	bmi.n	800b1b2 <_vfiprintf_r+0x2a>
 800b1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1ae:	f7ff fa90 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	071b      	lsls	r3, r3, #28
 800b1b6:	d501      	bpl.n	800b1bc <_vfiprintf_r+0x34>
 800b1b8:	692b      	ldr	r3, [r5, #16]
 800b1ba:	b99b      	cbnz	r3, 800b1e4 <_vfiprintf_r+0x5c>
 800b1bc:	4629      	mov	r1, r5
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f000 f938 	bl	800b434 <__swsetup_r>
 800b1c4:	b170      	cbz	r0, 800b1e4 <_vfiprintf_r+0x5c>
 800b1c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c8:	07dc      	lsls	r4, r3, #31
 800b1ca:	d504      	bpl.n	800b1d6 <_vfiprintf_r+0x4e>
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1d0:	b01d      	add	sp, #116	@ 0x74
 800b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	0598      	lsls	r0, r3, #22
 800b1da:	d4f7      	bmi.n	800b1cc <_vfiprintf_r+0x44>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1de:	f7ff fa79 	bl	800a6d4 <__retarget_lock_release_recursive>
 800b1e2:	e7f3      	b.n	800b1cc <_vfiprintf_r+0x44>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f2:	2330      	movs	r3, #48	@ 0x30
 800b1f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a4 <_vfiprintf_r+0x21c>
 800b1f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1fc:	f04f 0901 	mov.w	r9, #1
 800b200:	4623      	mov	r3, r4
 800b202:	469a      	mov	sl, r3
 800b204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b208:	b10a      	cbz	r2, 800b20e <_vfiprintf_r+0x86>
 800b20a:	2a25      	cmp	r2, #37	@ 0x25
 800b20c:	d1f9      	bne.n	800b202 <_vfiprintf_r+0x7a>
 800b20e:	ebba 0b04 	subs.w	fp, sl, r4
 800b212:	d00b      	beq.n	800b22c <_vfiprintf_r+0xa4>
 800b214:	465b      	mov	r3, fp
 800b216:	4622      	mov	r2, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ffa2 	bl	800b164 <__sfputs_r>
 800b220:	3001      	adds	r0, #1
 800b222:	f000 80a7 	beq.w	800b374 <_vfiprintf_r+0x1ec>
 800b226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b228:	445a      	add	r2, fp
 800b22a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b22c:	f89a 3000 	ldrb.w	r3, [sl]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 809f 	beq.w	800b374 <_vfiprintf_r+0x1ec>
 800b236:	2300      	movs	r3, #0
 800b238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b240:	f10a 0a01 	add.w	sl, sl, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	9307      	str	r3, [sp, #28]
 800b248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b24c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24e:	4654      	mov	r4, sl
 800b250:	2205      	movs	r2, #5
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4853      	ldr	r0, [pc, #332]	@ (800b3a4 <_vfiprintf_r+0x21c>)
 800b258:	f7f4 ffc2 	bl	80001e0 <memchr>
 800b25c:	9a04      	ldr	r2, [sp, #16]
 800b25e:	b9d8      	cbnz	r0, 800b298 <_vfiprintf_r+0x110>
 800b260:	06d1      	lsls	r1, r2, #27
 800b262:	bf44      	itt	mi
 800b264:	2320      	movmi	r3, #32
 800b266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26a:	0713      	lsls	r3, r2, #28
 800b26c:	bf44      	itt	mi
 800b26e:	232b      	movmi	r3, #43	@ 0x2b
 800b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b274:	f89a 3000 	ldrb.w	r3, [sl]
 800b278:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27a:	d015      	beq.n	800b2a8 <_vfiprintf_r+0x120>
 800b27c:	9a07      	ldr	r2, [sp, #28]
 800b27e:	4654      	mov	r4, sl
 800b280:	2000      	movs	r0, #0
 800b282:	f04f 0c0a 	mov.w	ip, #10
 800b286:	4621      	mov	r1, r4
 800b288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b28c:	3b30      	subs	r3, #48	@ 0x30
 800b28e:	2b09      	cmp	r3, #9
 800b290:	d94b      	bls.n	800b32a <_vfiprintf_r+0x1a2>
 800b292:	b1b0      	cbz	r0, 800b2c2 <_vfiprintf_r+0x13a>
 800b294:	9207      	str	r2, [sp, #28]
 800b296:	e014      	b.n	800b2c2 <_vfiprintf_r+0x13a>
 800b298:	eba0 0308 	sub.w	r3, r0, r8
 800b29c:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	46a2      	mov	sl, r4
 800b2a6:	e7d2      	b.n	800b24e <_vfiprintf_r+0xc6>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	1d19      	adds	r1, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	9103      	str	r1, [sp, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	bfbb      	ittet	lt
 800b2b4:	425b      	neglt	r3, r3
 800b2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ba:	9307      	strge	r3, [sp, #28]
 800b2bc:	9307      	strlt	r3, [sp, #28]
 800b2be:	bfb8      	it	lt
 800b2c0:	9204      	strlt	r2, [sp, #16]
 800b2c2:	7823      	ldrb	r3, [r4, #0]
 800b2c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c6:	d10a      	bne.n	800b2de <_vfiprintf_r+0x156>
 800b2c8:	7863      	ldrb	r3, [r4, #1]
 800b2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2cc:	d132      	bne.n	800b334 <_vfiprintf_r+0x1ac>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9203      	str	r2, [sp, #12]
 800b2d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2da:	3402      	adds	r4, #2
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b4 <_vfiprintf_r+0x22c>
 800b2e2:	7821      	ldrb	r1, [r4, #0]
 800b2e4:	2203      	movs	r2, #3
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	f7f4 ff7a 	bl	80001e0 <memchr>
 800b2ec:	b138      	cbz	r0, 800b2fe <_vfiprintf_r+0x176>
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	eba0 000a 	sub.w	r0, r0, sl
 800b2f4:	2240      	movs	r2, #64	@ 0x40
 800b2f6:	4082      	lsls	r2, r0
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b302:	4829      	ldr	r0, [pc, #164]	@ (800b3a8 <_vfiprintf_r+0x220>)
 800b304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b308:	2206      	movs	r2, #6
 800b30a:	f7f4 ff69 	bl	80001e0 <memchr>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d03f      	beq.n	800b392 <_vfiprintf_r+0x20a>
 800b312:	4b26      	ldr	r3, [pc, #152]	@ (800b3ac <_vfiprintf_r+0x224>)
 800b314:	bb1b      	cbnz	r3, 800b35e <_vfiprintf_r+0x1d6>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	3307      	adds	r3, #7
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	3308      	adds	r3, #8
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	443b      	add	r3, r7
 800b326:	9309      	str	r3, [sp, #36]	@ 0x24
 800b328:	e76a      	b.n	800b200 <_vfiprintf_r+0x78>
 800b32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32e:	460c      	mov	r4, r1
 800b330:	2001      	movs	r0, #1
 800b332:	e7a8      	b.n	800b286 <_vfiprintf_r+0xfe>
 800b334:	2300      	movs	r3, #0
 800b336:	3401      	adds	r4, #1
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	4619      	mov	r1, r3
 800b33c:	f04f 0c0a 	mov.w	ip, #10
 800b340:	4620      	mov	r0, r4
 800b342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b346:	3a30      	subs	r2, #48	@ 0x30
 800b348:	2a09      	cmp	r2, #9
 800b34a:	d903      	bls.n	800b354 <_vfiprintf_r+0x1cc>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0c6      	beq.n	800b2de <_vfiprintf_r+0x156>
 800b350:	9105      	str	r1, [sp, #20]
 800b352:	e7c4      	b.n	800b2de <_vfiprintf_r+0x156>
 800b354:	fb0c 2101 	mla	r1, ip, r1, r2
 800b358:	4604      	mov	r4, r0
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7f0      	b.n	800b340 <_vfiprintf_r+0x1b8>
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	462a      	mov	r2, r5
 800b364:	4b12      	ldr	r3, [pc, #72]	@ (800b3b0 <_vfiprintf_r+0x228>)
 800b366:	a904      	add	r1, sp, #16
 800b368:	4630      	mov	r0, r6
 800b36a:	f3af 8000 	nop.w
 800b36e:	4607      	mov	r7, r0
 800b370:	1c78      	adds	r0, r7, #1
 800b372:	d1d6      	bne.n	800b322 <_vfiprintf_r+0x19a>
 800b374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x1fe>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x1fe>
 800b380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b382:	f7ff f9a7 	bl	800a6d4 <__retarget_lock_release_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	065b      	lsls	r3, r3, #25
 800b38a:	f53f af1f 	bmi.w	800b1cc <_vfiprintf_r+0x44>
 800b38e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b390:	e71e      	b.n	800b1d0 <_vfiprintf_r+0x48>
 800b392:	ab03      	add	r3, sp, #12
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	462a      	mov	r2, r5
 800b398:	4b05      	ldr	r3, [pc, #20]	@ (800b3b0 <_vfiprintf_r+0x228>)
 800b39a:	a904      	add	r1, sp, #16
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff fc7f 	bl	800aca0 <_printf_i>
 800b3a2:	e7e4      	b.n	800b36e <_vfiprintf_r+0x1e6>
 800b3a4:	0800b7cf 	.word	0x0800b7cf
 800b3a8:	0800b7d9 	.word	0x0800b7d9
 800b3ac:	00000000 	.word	0x00000000
 800b3b0:	0800b165 	.word	0x0800b165
 800b3b4:	0800b7d5 	.word	0x0800b7d5

0800b3b8 <__swbuf_r>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	460e      	mov	r6, r1
 800b3bc:	4614      	mov	r4, r2
 800b3be:	4605      	mov	r5, r0
 800b3c0:	b118      	cbz	r0, 800b3ca <__swbuf_r+0x12>
 800b3c2:	6a03      	ldr	r3, [r0, #32]
 800b3c4:	b90b      	cbnz	r3, 800b3ca <__swbuf_r+0x12>
 800b3c6:	f7ff f85d 	bl	800a484 <__sinit>
 800b3ca:	69a3      	ldr	r3, [r4, #24]
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	071a      	lsls	r2, r3, #28
 800b3d2:	d501      	bpl.n	800b3d8 <__swbuf_r+0x20>
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	b943      	cbnz	r3, 800b3ea <__swbuf_r+0x32>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 f82a 	bl	800b434 <__swsetup_r>
 800b3e0:	b118      	cbz	r0, 800b3ea <__swbuf_r+0x32>
 800b3e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	6922      	ldr	r2, [r4, #16]
 800b3ee:	1a98      	subs	r0, r3, r2
 800b3f0:	6963      	ldr	r3, [r4, #20]
 800b3f2:	b2f6      	uxtb	r6, r6
 800b3f4:	4283      	cmp	r3, r0
 800b3f6:	4637      	mov	r7, r6
 800b3f8:	dc05      	bgt.n	800b406 <__swbuf_r+0x4e>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f7ff fdf3 	bl	800afe8 <_fflush_r>
 800b402:	2800      	cmp	r0, #0
 800b404:	d1ed      	bne.n	800b3e2 <__swbuf_r+0x2a>
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	3b01      	subs	r3, #1
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	701e      	strb	r6, [r3, #0]
 800b414:	6962      	ldr	r2, [r4, #20]
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	429a      	cmp	r2, r3
 800b41a:	d004      	beq.n	800b426 <__swbuf_r+0x6e>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	07db      	lsls	r3, r3, #31
 800b420:	d5e1      	bpl.n	800b3e6 <__swbuf_r+0x2e>
 800b422:	2e0a      	cmp	r6, #10
 800b424:	d1df      	bne.n	800b3e6 <__swbuf_r+0x2e>
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f7ff fddd 	bl	800afe8 <_fflush_r>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0d9      	beq.n	800b3e6 <__swbuf_r+0x2e>
 800b432:	e7d6      	b.n	800b3e2 <__swbuf_r+0x2a>

0800b434 <__swsetup_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4b29      	ldr	r3, [pc, #164]	@ (800b4dc <__swsetup_r+0xa8>)
 800b438:	4605      	mov	r5, r0
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	460c      	mov	r4, r1
 800b43e:	b118      	cbz	r0, 800b448 <__swsetup_r+0x14>
 800b440:	6a03      	ldr	r3, [r0, #32]
 800b442:	b90b      	cbnz	r3, 800b448 <__swsetup_r+0x14>
 800b444:	f7ff f81e 	bl	800a484 <__sinit>
 800b448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44c:	0719      	lsls	r1, r3, #28
 800b44e:	d422      	bmi.n	800b496 <__swsetup_r+0x62>
 800b450:	06da      	lsls	r2, r3, #27
 800b452:	d407      	bmi.n	800b464 <__swsetup_r+0x30>
 800b454:	2209      	movs	r2, #9
 800b456:	602a      	str	r2, [r5, #0]
 800b458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b462:	e033      	b.n	800b4cc <__swsetup_r+0x98>
 800b464:	0758      	lsls	r0, r3, #29
 800b466:	d512      	bpl.n	800b48e <__swsetup_r+0x5a>
 800b468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b46a:	b141      	cbz	r1, 800b47e <__swsetup_r+0x4a>
 800b46c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b470:	4299      	cmp	r1, r3
 800b472:	d002      	beq.n	800b47a <__swsetup_r+0x46>
 800b474:	4628      	mov	r0, r5
 800b476:	f7ff f94d 	bl	800a714 <_free_r>
 800b47a:	2300      	movs	r3, #0
 800b47c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	2300      	movs	r3, #0
 800b488:	6063      	str	r3, [r4, #4]
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	f043 0308 	orr.w	r3, r3, #8
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	6923      	ldr	r3, [r4, #16]
 800b498:	b94b      	cbnz	r3, 800b4ae <__swsetup_r+0x7a>
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a4:	d003      	beq.n	800b4ae <__swsetup_r+0x7a>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f000 f88b 	bl	800b5c4 <__smakebuf_r>
 800b4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b2:	f013 0201 	ands.w	r2, r3, #1
 800b4b6:	d00a      	beq.n	800b4ce <__swsetup_r+0x9a>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	60a2      	str	r2, [r4, #8]
 800b4bc:	6962      	ldr	r2, [r4, #20]
 800b4be:	4252      	negs	r2, r2
 800b4c0:	61a2      	str	r2, [r4, #24]
 800b4c2:	6922      	ldr	r2, [r4, #16]
 800b4c4:	b942      	cbnz	r2, 800b4d8 <__swsetup_r+0xa4>
 800b4c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4ca:	d1c5      	bne.n	800b458 <__swsetup_r+0x24>
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	0799      	lsls	r1, r3, #30
 800b4d0:	bf58      	it	pl
 800b4d2:	6962      	ldrpl	r2, [r4, #20]
 800b4d4:	60a2      	str	r2, [r4, #8]
 800b4d6:	e7f4      	b.n	800b4c2 <__swsetup_r+0x8e>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e7f7      	b.n	800b4cc <__swsetup_r+0x98>
 800b4dc:	20000188 	.word	0x20000188

0800b4e0 <_raise_r>:
 800b4e0:	291f      	cmp	r1, #31
 800b4e2:	b538      	push	{r3, r4, r5, lr}
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	d904      	bls.n	800b4f4 <_raise_r+0x14>
 800b4ea:	2316      	movs	r3, #22
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4f6:	b112      	cbz	r2, 800b4fe <_raise_r+0x1e>
 800b4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4fc:	b94b      	cbnz	r3, 800b512 <_raise_r+0x32>
 800b4fe:	4628      	mov	r0, r5
 800b500:	f000 f830 	bl	800b564 <_getpid_r>
 800b504:	4622      	mov	r2, r4
 800b506:	4601      	mov	r1, r0
 800b508:	4628      	mov	r0, r5
 800b50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b50e:	f000 b817 	b.w	800b540 <_kill_r>
 800b512:	2b01      	cmp	r3, #1
 800b514:	d00a      	beq.n	800b52c <_raise_r+0x4c>
 800b516:	1c59      	adds	r1, r3, #1
 800b518:	d103      	bne.n	800b522 <_raise_r+0x42>
 800b51a:	2316      	movs	r3, #22
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	2001      	movs	r0, #1
 800b520:	e7e7      	b.n	800b4f2 <_raise_r+0x12>
 800b522:	2100      	movs	r1, #0
 800b524:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b528:	4620      	mov	r0, r4
 800b52a:	4798      	blx	r3
 800b52c:	2000      	movs	r0, #0
 800b52e:	e7e0      	b.n	800b4f2 <_raise_r+0x12>

0800b530 <raise>:
 800b530:	4b02      	ldr	r3, [pc, #8]	@ (800b53c <raise+0xc>)
 800b532:	4601      	mov	r1, r0
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	f7ff bfd3 	b.w	800b4e0 <_raise_r>
 800b53a:	bf00      	nop
 800b53c:	20000188 	.word	0x20000188

0800b540 <_kill_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	@ (800b560 <_kill_r+0x20>)
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	4611      	mov	r1, r2
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	f7f5 f8c3 	bl	80006d8 <_kill>
 800b552:	1c43      	adds	r3, r0, #1
 800b554:	d102      	bne.n	800b55c <_kill_r+0x1c>
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	b103      	cbz	r3, 800b55c <_kill_r+0x1c>
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	bd38      	pop	{r3, r4, r5, pc}
 800b55e:	bf00      	nop
 800b560:	20001678 	.word	0x20001678

0800b564 <_getpid_r>:
 800b564:	f7f5 b8b0 	b.w	80006c8 <_getpid>

0800b568 <_malloc_usable_size_r>:
 800b568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b56c:	1f18      	subs	r0, r3, #4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfbc      	itt	lt
 800b572:	580b      	ldrlt	r3, [r1, r0]
 800b574:	18c0      	addlt	r0, r0, r3
 800b576:	4770      	bx	lr

0800b578 <__swhatbuf_r>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	2900      	cmp	r1, #0
 800b582:	b096      	sub	sp, #88	@ 0x58
 800b584:	4615      	mov	r5, r2
 800b586:	461e      	mov	r6, r3
 800b588:	da0d      	bge.n	800b5a6 <__swhatbuf_r+0x2e>
 800b58a:	89a3      	ldrh	r3, [r4, #12]
 800b58c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b590:	f04f 0100 	mov.w	r1, #0
 800b594:	bf14      	ite	ne
 800b596:	2340      	movne	r3, #64	@ 0x40
 800b598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b59c:	2000      	movs	r0, #0
 800b59e:	6031      	str	r1, [r6, #0]
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	b016      	add	sp, #88	@ 0x58
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	466a      	mov	r2, sp
 800b5a8:	f000 f848 	bl	800b63c <_fstat_r>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	dbec      	blt.n	800b58a <__swhatbuf_r+0x12>
 800b5b0:	9901      	ldr	r1, [sp, #4]
 800b5b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5ba:	4259      	negs	r1, r3
 800b5bc:	4159      	adcs	r1, r3
 800b5be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5c2:	e7eb      	b.n	800b59c <__swhatbuf_r+0x24>

0800b5c4 <__smakebuf_r>:
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5c8:	079d      	lsls	r5, r3, #30
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	d507      	bpl.n	800b5e0 <__smakebuf_r+0x1c>
 800b5d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	6163      	str	r3, [r4, #20]
 800b5dc:	b003      	add	sp, #12
 800b5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e0:	ab01      	add	r3, sp, #4
 800b5e2:	466a      	mov	r2, sp
 800b5e4:	f7ff ffc8 	bl	800b578 <__swhatbuf_r>
 800b5e8:	9f00      	ldr	r7, [sp, #0]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7ff f904 	bl	800a7fc <_malloc_r>
 800b5f4:	b948      	cbnz	r0, 800b60a <__smakebuf_r+0x46>
 800b5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fa:	059a      	lsls	r2, r3, #22
 800b5fc:	d4ee      	bmi.n	800b5dc <__smakebuf_r+0x18>
 800b5fe:	f023 0303 	bic.w	r3, r3, #3
 800b602:	f043 0302 	orr.w	r3, r3, #2
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	e7e2      	b.n	800b5d0 <__smakebuf_r+0xc>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	6020      	str	r0, [r4, #0]
 800b60e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	9b01      	ldr	r3, [sp, #4]
 800b616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b61a:	b15b      	cbz	r3, 800b634 <__smakebuf_r+0x70>
 800b61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f81d 	bl	800b660 <_isatty_r>
 800b626:	b128      	cbz	r0, 800b634 <__smakebuf_r+0x70>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f023 0303 	bic.w	r3, r3, #3
 800b62e:	f043 0301 	orr.w	r3, r3, #1
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	431d      	orrs	r5, r3
 800b638:	81a5      	strh	r5, [r4, #12]
 800b63a:	e7cf      	b.n	800b5dc <__smakebuf_r+0x18>

0800b63c <_fstat_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	@ (800b65c <_fstat_r+0x20>)
 800b640:	2300      	movs	r3, #0
 800b642:	4604      	mov	r4, r0
 800b644:	4608      	mov	r0, r1
 800b646:	4611      	mov	r1, r2
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	f7f5 f8a5 	bl	8000798 <_fstat>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d102      	bne.n	800b658 <_fstat_r+0x1c>
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	b103      	cbz	r3, 800b658 <_fstat_r+0x1c>
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	bd38      	pop	{r3, r4, r5, pc}
 800b65a:	bf00      	nop
 800b65c:	20001678 	.word	0x20001678

0800b660 <_isatty_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d06      	ldr	r5, [pc, #24]	@ (800b67c <_isatty_r+0x1c>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f7f5 f8a4 	bl	80007b8 <_isatty>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_isatty_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_isatty_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20001678 	.word	0x20001678

0800b680 <_init>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	bf00      	nop
 800b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b686:	bc08      	pop	{r3}
 800b688:	469e      	mov	lr, r3
 800b68a:	4770      	bx	lr

0800b68c <_fini>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr
