
Wheelbase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800b69c  0800b69c  0000c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b818  0800b818  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b818  0800b818  0000c818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b820  0800b820  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b820  0800b820  0000c820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b824  0800b824  0000c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b828  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000014b0  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001688  20001688  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a59  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e7f  00000000  00000000  00025c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00029ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104f  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006098  00000000  00000000  0002c077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce0b  00000000  00000000  0003210f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fa0  00000000  00000000  0004ef1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121eba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006298  00000000  00000000  00121f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00128198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b684 	.word	0x0800b684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b684 	.word	0x0800b684

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b3c      	ldr	r3, [pc, #240]	@ (8000388 <MX_GPIO_Init+0x108>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a3b      	ldr	r2, [pc, #236]	@ (8000388 <MX_GPIO_Init+0x108>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b39      	ldr	r3, [pc, #228]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b36      	ldr	r3, [pc, #216]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a35      	ldr	r2, [pc, #212]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b33      	ldr	r3, [pc, #204]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b30      	ldr	r3, [pc, #192]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <MX_GPIO_Init+0x108>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fc:	4823      	ldr	r0, [pc, #140]	@ (800038c <MX_GPIO_Init+0x10c>)
 80002fe:	f000 ffd9 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2120      	movs	r1, #32
 8000306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030a:	f000 ffd3 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|ENABLE_Pin
 800030e:	2200      	movs	r2, #0
 8000310:	f649 4104 	movw	r1, #39940	@ 0x9c04
 8000314:	481e      	ldr	r0, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x110>)
 8000316:	f000 ffcd 	bl	80012b4 <HAL_GPIO_WritePin>
                          |CS_ENC_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ENC_3_GPIO_Port, CS_ENC_3_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2140      	movs	r1, #64	@ 0x40
 800031e:	481b      	ldr	r0, [pc, #108]	@ (800038c <MX_GPIO_Init+0x10c>)
 8000320:	f000 ffc8 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin CS_ENC_3_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|CS_ENC_3_Pin;
 8000324:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	4813      	ldr	r0, [pc, #76]	@ (800038c <MX_GPIO_Init+0x10c>)
 800033e:	f000 fe2f 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR2_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR2_DIR_Pin;
 8000342:	2320      	movs	r3, #32
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2300      	movs	r3, #0
 8000350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f000 fe20 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_DIR_Pin nBRAKE_Pin MOTOR1_DIR_Pin ENABLE_Pin
                           CS_ENC_1_Pin */
  GPIO_InitStruct.Pin = MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|ENABLE_Pin
 8000360:	f649 4304 	movw	r3, #39940	@ 0x9c04
 8000364:	617b      	str	r3, [r7, #20]
                          |CS_ENC_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_GPIO_Init+0x110>)
 800037a:	f000 fe11 	bl	8000fa0 <HAL_GPIO_Init>

}
 800037e:	bf00      	nop
 8000380:	3728      	adds	r7, #40	@ 0x28
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	48000400 	.word	0x48000400

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039a:	f000 fc89 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039e:	f000 f83f 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a2:	f7ff ff6d 	bl	8000280 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003a6:	f000 fa6b 	bl	8000880 <MX_TIM1_Init>
  MX_TIM3_Init();
 80003aa:	f000 faf9 	bl	80009a0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80003ae:	f009 faf5 	bl	800999c <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80003b2:	f000 f8a3 	bl	80004fc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80003b6:	f000 fbdd 	bl	8000b74 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (CDC_Transmit_FS((uint8_t*)"USB Connected\n", 14) == USBD_OK) {
 80003ba:	210e      	movs	r1, #14
 80003bc:	4814      	ldr	r0, [pc, #80]	@ (8000410 <main+0x7c>)
 80003be:	f009 fbab 	bl	8009b18 <CDC_Transmit_FS>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d104      	bne.n	80003d2 <main+0x3e>
	      HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin); // Blink LED on success
 80003c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003cc:	4811      	ldr	r0, [pc, #68]	@ (8000414 <main+0x80>)
 80003ce:	f000 ff89 	bl	80012e4 <HAL_GPIO_TogglePin>
	  }

	  char buffer[20];  // Buffer for random data
	  int random_number = rand() % 1000;  // Generate a random number (0-999)
 80003d2:	f009 ff8f 	bl	800a2f4 <rand>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <main+0x84>)
 80003da:	fb82 1203 	smull	r1, r2, r2, r3
 80003de:	1191      	asrs	r1, r2, #6
 80003e0:	17da      	asrs	r2, r3, #31
 80003e2:	1a8a      	subs	r2, r1, r2
 80003e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003e8:	fb01 f202 	mul.w	r2, r1, r2
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	61fb      	str	r3, [r7, #28]
	  int length = snprintf(buffer, sizeof(buffer), "Rand: %d\n", random_number);
 80003f0:	1d38      	adds	r0, r7, #4
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	4a09      	ldr	r2, [pc, #36]	@ (800041c <main+0x88>)
 80003f6:	2114      	movs	r1, #20
 80003f8:	f00a f87c 	bl	800a4f4 <sniprintf>
 80003fc:	61b8      	str	r0, [r7, #24]

	  CDC_Transmit_FS((uint8_t*)buffer, length);  // Send over USB
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	b29a      	uxth	r2, r3
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f009 fb86 	bl	8009b18 <CDC_Transmit_FS>
  {
 800040c:	e7d5      	b.n	80003ba <main+0x26>
 800040e:	bf00      	nop
 8000410:	0800b69c 	.word	0x0800b69c
 8000414:	48000800 	.word	0x48000800
 8000418:	10624dd3 	.word	0x10624dd3
 800041c:	0800b6ac 	.word	0x0800b6ac

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b0a6      	sub	sp, #152	@ 0x98
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800042a:	2228      	movs	r2, #40	@ 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f00a f8d7 	bl	800a5e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2258      	movs	r2, #88	@ 0x58
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f00a f8c9 	bl	800a5e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000450:	2301      	movs	r3, #1
 8000452:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000458:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000464:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800046c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000470:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fbfe 	bl	8002c80 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800048a:	f000 f831 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2302      	movs	r3, #2
 8000494:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800049e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004a8:	2101      	movs	r1, #1
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fc3c 	bl	8003d28 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004b6:	f000 f81b 	bl	80004f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <SystemClock_Config+0xcc>)
 80004bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004c8:	2300      	movs	r3, #0
 80004ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fe4a 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004de:	f000 f807 	bl	80004f0 <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3798      	adds	r7, #152	@ 0x98
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	00221001 	.word	0x00221001

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	@ (8000574 <MX_SPI2_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800050c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800050e:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000514:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000518:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800051c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_SPI2_Init+0x74>)
 800052c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000530:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_SPI2_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_SPI2_Init+0x74>)
 800054c:	2207      	movs	r2, #7
 800054e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_SPI2_Init+0x74>)
 8000558:	2208      	movs	r2, #8
 800055a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_SPI2_Init+0x74>)
 800055e:	f004 f823 	bl	80045a8 <HAL_SPI_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000568:	f7ff ffc2 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200001f4 	.word	0x200001f4
 8000574:	40003800 	.word	0x40003800

08000578 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <HAL_SPI_MspInit+0x7c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d128      	bne.n	80005ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 80005a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 80005b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <HAL_SPI_MspInit+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80005ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005dc:	2305      	movs	r3, #5
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <HAL_SPI_MspInit+0x84>)
 80005e8:	f000 fcda 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	@ 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40003800 	.word	0x40003800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <HAL_MspInit+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <HAL_MspInit+0x44>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <NMI_Handler+0x4>

08000650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <UsageFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069e:	f000 fb4d 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80006ae:	f000 ff20 	bl	80014f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20001048 	.word	0x20001048

080006bc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006c2:	f000 ff16 	bl	80014f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20001048 	.word	0x20001048

080006d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return 1;
 80006d4:	2301      	movs	r3, #1
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <_kill>:

int _kill(int pid, int sig)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006ea:	f009 ffc9 	bl	800a680 <__errno>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2216      	movs	r2, #22
 80006f2:	601a      	str	r2, [r3, #0]
  return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <_exit>:

void _exit (int status)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffe7 	bl	80006e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <_exit+0x12>

08000716 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e00a      	b.n	800073e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000728:	f3af 8000 	nop.w
 800072c:	4601      	mov	r1, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	b2ca      	uxtb	r2, r1
 8000736:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	429a      	cmp	r2, r3
 8000744:	dbf0      	blt.n	8000728 <_read+0x12>
  }

  return len;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e009      	b.n	8000776 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	60ba      	str	r2, [r7, #8]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	dbf1      	blt.n	8000762 <_write+0x12>
  }
  return len;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_close>:

int _close(int file)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b0:	605a      	str	r2, [r3, #4]
  return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_isatty>:

int _isatty(int file)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007c8:	2301      	movs	r3, #1
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	@ (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f009 ff2e 	bl	800a680 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20010000 	.word	0x20010000
 8000850:	00000400 	.word	0x00000400
 8000854:	20000258 	.word	0x20000258
 8000858:	20001688 	.word	0x20001688

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <SystemInit+0x20>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <SystemInit+0x20>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	@ 0x58
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000892:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	222c      	movs	r2, #44	@ 0x2c
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f009 fe98 	bl	800a5e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b2:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008b4:	4a39      	ldr	r2, [pc, #228]	@ (800099c <MX_TIM1_Init+0x11c>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80008b8:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008ba:	2247      	movs	r2, #71	@ 0x47
 80008bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b36      	ldr	r3, [pc, #216]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008c4:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d2:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008de:	482e      	ldr	r0, [pc, #184]	@ (8000998 <MX_TIM1_Init+0x118>)
 80008e0:	f003 ff0d 	bl	80046fe <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f7ff fe01 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008fe:	4619      	mov	r1, r3
 8000900:	4825      	ldr	r0, [pc, #148]	@ (8000998 <MX_TIM1_Init+0x118>)
 8000902:	f004 fc17 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800090c:	f7ff fdf0 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800091c:	2300      	movs	r3, #0
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	4818      	ldr	r0, [pc, #96]	@ (8000998 <MX_TIM1_Init+0x118>)
 8000936:	f003 ff39 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000940:	f7ff fdd6 	bl	80004f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <MX_TIM1_Init+0x118>)
 800097a:	f004 fc67 	bl	800524c <HAL_TIMEx_ConfigBreakDeadTime>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000984:	f7ff fdb4 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <MX_TIM1_Init+0x118>)
 800098a:	f000 f897 	bl	8000abc <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3758      	adds	r7, #88	@ 0x58
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000025c 	.word	0x2000025c
 800099c:	40012c00 	.word	0x40012c00

080009a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009c6:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <MX_TIM3_Init+0xb0>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009cc:	2247      	movs	r2, #71	@ 0x47
 80009ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ea:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <MX_TIM3_Init+0xac>)
 80009ec:	f003 fe87 	bl	80046fe <HAL_TIM_PWM_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80009f6:	f7ff fd7b 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	@ (8000a4c <MX_TIM3_Init+0xac>)
 8000a0a:	f004 fb93 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a14:	f7ff fd6c 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	2360      	movs	r3, #96	@ 0x60
 8000a1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <MX_TIM3_Init+0xac>)
 8000a30:	f003 febc 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a3a:	f7ff fd59 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a3e:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <MX_TIM3_Init+0xac>)
 8000a40:	f000 f83c 	bl	8000abc <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200002a8 	.word	0x200002a8
 8000a50:	40000400 	.word	0x40000400

08000a54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10c      	bne.n	8000a80 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a70:	6193      	str	r3, [r2, #24]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a7e:	e010      	b.n	8000aa2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <HAL_TIM_PWM_MspInit+0x64>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10b      	bne.n	8000aa2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a09      	ldr	r2, [pc, #36]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <HAL_TIM_PWM_MspInit+0x60>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40000400 	.word	0x40000400

08000abc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_TIM_MspPostInit+0xa8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d11c      	bne.n	8000b18 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000ae4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b06:	2302      	movs	r3, #2
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4816      	ldr	r0, [pc, #88]	@ (8000b6c <HAL_TIM_MspPostInit+0xb0>)
 8000b12:	f000 fa45 	bl	8000fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b16:	e021      	b.n	8000b5c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d11c      	bne.n	8000b5c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_TIM_MspPostInit+0xac>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f000 fa22 	bl	8000fa0 <HAL_GPIO_Init>
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	40000400 	.word	0x40000400

08000b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <MX_USART1_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b80:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb8:	f004 fbce 	bl	8005358 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f7ff fc95 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002f4 	.word	0x200002f4
 8000bd0:	40013800 	.word	0x40013800

08000bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c26:	2330      	movs	r3, #48	@ 0x30
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_UART_MspInit+0x84>)
 8000c42:	f000 f9ad 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013800 	.word	0x40013800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000800 	.word	0x48000800

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff fdfc 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f009 fcff 	bl	800a68c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fb81 	bl	8000394 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000ca0:	0800b828 	.word	0x0800b828
  ldr r2, =_sbss
 8000ca4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000ca8:	20001688 	.word	0x20001688

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f92b 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fc98 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f943 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f000 f90b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000037c 	.word	0x2000037c

08000d64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000037c 	.word	0x2000037c

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff3e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff31 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e160      	b.n	8001272 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8152 	beq.w	800126c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x40>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 0201 	and.w	r2, r3, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d017      	beq.n	800107e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0203 	and.w	r2, r3, #3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80ac 	beq.w	800126c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	4b5e      	ldr	r3, [pc, #376]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a5d      	ldr	r2, [pc, #372]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b5b      	ldr	r3, [pc, #364]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800112c:	4a59      	ldr	r2, [pc, #356]	@ (8001294 <HAL_GPIO_Init+0x2f4>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001156:	d025      	beq.n	80011a4 <HAL_GPIO_Init+0x204>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a4f      	ldr	r2, [pc, #316]	@ (8001298 <HAL_GPIO_Init+0x2f8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d01f      	beq.n	80011a0 <HAL_GPIO_Init+0x200>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4e      	ldr	r2, [pc, #312]	@ (800129c <HAL_GPIO_Init+0x2fc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d019      	beq.n	800119c <HAL_GPIO_Init+0x1fc>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a4d      	ldr	r2, [pc, #308]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_GPIO_Init+0x1f8>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00d      	beq.n	8001194 <HAL_GPIO_Init+0x1f4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a4b      	ldr	r2, [pc, #300]	@ (80012a8 <HAL_GPIO_Init+0x308>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d007      	beq.n	8001190 <HAL_GPIO_Init+0x1f0>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a4a      	ldr	r2, [pc, #296]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_GPIO_Init+0x1ec>
 8001188:	2306      	movs	r3, #6
 800118a:	e00c      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 800118c:	2307      	movs	r3, #7
 800118e:	e00a      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 8001190:	2305      	movs	r3, #5
 8001192:	e008      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 8001194:	2304      	movs	r3, #4
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 8001198:	2303      	movs	r3, #3
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x206>
 80011a4:	2300      	movs	r3, #0
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b6:	4937      	ldr	r1, [pc, #220]	@ (8001294 <HAL_GPIO_Init+0x2f4>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c4:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e8:	4a31      	ldr	r2, [pc, #196]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ee:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001212:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001266:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	f47f ae97 	bne.w	8000fb0 <HAL_GPIO_Init+0x10>
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48001400 	.word	0x48001400
 80012ac:	48001800 	.word	0x48001800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43d9      	mvns	r1, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0b9      	b.n	800149e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f008 fd20 	bl	8009d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fc55 	bl	8005c00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e03e      	b.n	80013da <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	3311      	adds	r3, #17
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3310      	adds	r3, #16
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3313      	adds	r3, #19
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3320      	adds	r3, #32
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	3324      	adds	r3, #36	@ 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3bb      	bcc.n	800135c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e044      	b.n	8001474 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3b5      	bcc.n	80013ea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	e893 0006 	ldmia.w	r3, {r1, r2}
 800148a:	f004 fbd4 	bl	8005c36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_PCD_Start+0x16>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e016      	b.n	80014ea <HAL_PCD_Start+0x44>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fb82 	bl	8005bd2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014ce:	2101      	movs	r1, #1
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f008 fed7 	bl	800a284 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 fe40 	bl	8008160 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fe39 	bl	8008176 <USB_ReadInterrupts>
 8001504:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fab1 	bl	8001a78 <PCD_EP_ISR_Handler>

    return;
 8001516:	e0bd      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d013      	beq.n	800154a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001534:	b292      	uxth	r2, r2
 8001536:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f008 fca5 	bl	8009e8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8a9 	bl	800169a <HAL_PCD_SetAddress>

    return;
 8001548:	e0a4      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001566:	b292      	uxth	r2, r2
 8001568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800156c:	e092      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00c      	beq.n	8001592 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001580:	b29a      	uxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800158a:	b292      	uxth	r2, r2
 800158c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001590:	e080      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d027      	beq.n	80015ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015bc:	b29a      	uxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	b292      	uxth	r2, r2
 80015c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f008 fc95 	bl	8009efc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015e4:	b292      	uxth	r2, r2
 80015e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015ea:	e053      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d027      	beq.n	8001646 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0208 	orr.w	r2, r2, #8
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001620:	b292      	uxth	r2, r2
 8001622:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	b292      	uxth	r2, r2
 800163a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f008 fc42 	bl	8009ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001644:	e026      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00f      	beq.n	8001670 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f008 fc00 	bl	8009e6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800166e:	e011      	b.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00c      	beq.n	8001694 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001692:	bf00      	nop
  }
}
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_SetAddress+0x1a>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e012      	b.n	80016da <HAL_PCD_SetAddress+0x40>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fd34 	bl	8008138 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	4608      	mov	r0, r1
 80016ec:	4611      	mov	r1, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	460b      	mov	r3, r1
 80016f6:	803b      	strh	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da0e      	bge.n	8001726 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 0207 	and.w	r2, r3, #7
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	3310      	adds	r3, #16
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	705a      	strb	r2, [r3, #1]
 8001724:	e00e      	b.n	8001744 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	f003 0207 	and.w	r2, r3, #7
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001750:	883a      	ldrh	r2, [r7, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	78ba      	ldrb	r2, [r7, #2]
 800175a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d102      	bne.n	8001768 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_PCD_EP_Open+0x94>
 8001772:	2302      	movs	r3, #2
 8001774:	e00e      	b.n	8001794 <HAL_PCD_EP_Open+0xb2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fa75 	bl	8005c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001792:	7afb      	ldrb	r3, [r7, #11]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da0e      	bge.n	80017ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0207 	and.w	r2, r3, #7
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	3310      	adds	r3, #16
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	705a      	strb	r2, [r3, #1]
 80017cc:	e00e      	b.n	80017ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0207 	and.w	r2, r3, #7
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_PCD_EP_Close+0x6a>
 8001802:	2302      	movs	r3, #2
 8001804:	e00e      	b.n	8001824 <HAL_PCD_EP_Close+0x88>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fdf1 	bl	80063fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	f003 0207 	and.w	r2, r3, #7
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	b2da      	uxtb	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	4618      	mov	r0, r3
 8001880:	f004 ffa9 	bl	80067d6 <USB_EPStartXfer>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f003 0207 	and.w	r2, r3, #7
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80018b0:	681b      	ldr	r3, [r3, #0]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	460b      	mov	r3, r1
 80018cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	f003 0207 	and.w	r2, r3, #7
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	3310      	adds	r3, #16
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	b2da      	uxtb	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	4618      	mov	r0, r3
 800191e:	f004 ff5a 	bl	80067d6 <USB_EPStartXfer>

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	7912      	ldrb	r2, [r2, #4]
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e03e      	b.n	80019c8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0e      	bge.n	8001970 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0207 	and.w	r2, r3, #7
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	3310      	adds	r3, #16
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00c      	b.n	800198a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_PCD_EP_SetStall+0x7e>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e00e      	b.n	80019c8 <HAL_PCD_EP_SetStall+0x9c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fabe 	bl	8007f3a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	7912      	ldrb	r2, [r2, #4]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e040      	b.n	8001a70 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0e      	bge.n	8001a14 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 0207 	and.w	r2, r3, #7
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	3310      	adds	r3, #16
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	705a      	strb	r2, [r3, #1]
 8001a12:	e00e      	b.n	8001a32 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 0207 	and.w	r2, r3, #7
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_EP_ClrStall+0x82>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e00e      	b.n	8001a70 <HAL_PCD_EP_ClrStall+0xa0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68f9      	ldr	r1, [r7, #12]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f006 fabb 	bl	8007fdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b096      	sub	sp, #88	@ 0x58
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a80:	e3ad      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a8a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001a9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 816f 	bne.w	8001d84 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001aa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d14c      	bne.n	8001b4c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ac2:	81fb      	strh	r3, [r7, #14]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3310      	adds	r3, #16
 8001ada:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f008 f990 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b1b      	ldrb	r3, [r3, #12]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 835c 	beq.w	80021de <PCD_EP_ISR_Handler+0x766>
 8001b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8357 	bne.w	80021de <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7b1b      	ldrb	r3, [r3, #12]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	731a      	strb	r2, [r3, #12]
 8001b4a:	e348      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b52:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d032      	beq.n	8001bd0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f006 fb38 	bl	800821a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	823b      	strh	r3, [r7, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	8a3a      	ldrh	r2, [r7, #16]
 8001bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f008 f909 	bl	8009de0 <HAL_PCD_SetupStageCallback>
 8001bce:	e306      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bd0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f280 8302 	bge.w	80021de <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001be6:	4013      	ands	r3, r2
 8001be8:	83fb      	strh	r3, [r7, #30]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	8bfa      	ldrh	r2, [r7, #30]
 8001bf0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d019      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x1e4>
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d015      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c36:	6959      	ldr	r1, [r3, #20]
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f006 faea 	bl	800821a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	441a      	add	r2, r3
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c54:	2100      	movs	r1, #0
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f008 f8d4 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 82b5 	bne.w	80021de <PCD_EP_ISR_Handler+0x766>
 8001c74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c78:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c80:	f000 82ad 	beq.w	80021de <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4413      	add	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	801a      	strh	r2, [r3, #0]
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <PCD_EP_ISR_Handler+0x25a>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e039      	b.n	8001d46 <PCD_EP_ISR_Handler+0x2ce>
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001cd8:	d818      	bhi.n	8001d0c <PCD_EP_ISR_Handler+0x294>
 8001cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <PCD_EP_ISR_Handler+0x27c>
 8001cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e01c      	b.n	8001d46 <PCD_EP_ISR_Handler+0x2ce>
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <PCD_EP_ISR_Handler+0x2ae>
 8001d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d22:	3b01      	subs	r3, #1
 8001d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d56:	827b      	strh	r3, [r7, #18]
 8001d58:	8a7b      	ldrh	r3, [r7, #18]
 8001d5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d5e:	827b      	strh	r3, [r7, #18]
 8001d60:	8a7b      	ldrh	r3, [r7, #18]
 8001d62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d66:	827b      	strh	r3, [r7, #18]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	8a7b      	ldrh	r3, [r7, #18]
 8001d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	8013      	strh	r3, [r2, #0]
 8001d82:	e22c      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f280 80f6 	bge.w	8001f8e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001db8:	4013      	ands	r3, r2
 8001dba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001dd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dd8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d123      	bne.n	8001e3e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001e1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 808e 	beq.w	8001f44 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2e:	6959      	ldr	r1, [r3, #20]
 8001e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e32:	88da      	ldrh	r2, [r3, #6]
 8001e34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e38:	f006 f9ef 	bl	800821a <USB_ReadPMA>
 8001e3c:	e082      	b.n	8001f44 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d10a      	bne.n	8001e5c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f9d3 	bl	80021fa <HAL_PCD_EP_DB_Receive>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001e5a:	e073      	b.n	8001f44 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e76:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	441a      	add	r2, r3
 8001e88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d022      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ede:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ee2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02c      	beq.n	8001f44 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef0:	6959      	ldr	r1, [r3, #20]
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef4:	891a      	ldrh	r2, [r3, #8]
 8001ef6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001efa:	f006 f98e 	bl	800821a <USB_ReadPMA>
 8001efe:	e021      	b.n	8001f44 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f24:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	6959      	ldr	r1, [r3, #20]
 8001f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3a:	895a      	ldrh	r2, [r3, #10]
 8001f3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f40:	f006 f96b 	bl	800821a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f4c:	441a      	add	r2, r3
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f5a:	441a      	add	r2, r3
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <PCD_EP_ISR_Handler+0x4fc>
 8001f68:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d206      	bcs.n	8001f82 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f007 ff42 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
 8001f80:	e005      	b.n	8001f8e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fc24 	bl	80067d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8121 	beq.w	80021de <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f9c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3310      	adds	r3, #16
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fee:	78db      	ldrb	r3, [r3, #3]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f040 80a2 	bne.w	800213a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffe:	7b1b      	ldrb	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8093 	beq.w	800212c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002006:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d046      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d126      	bne.n	8002068 <PCD_EP_ISR_Handler+0x5f0>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	4413      	add	r3, r2
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	00da      	lsls	r2, r3, #3
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	4413      	add	r3, r2
 800203c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800204c:	b29a      	uxth	r2, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002060:	b29a      	uxth	r2, r3
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	e061      	b.n	800212c <PCD_EP_ISR_Handler+0x6b4>
 8002068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d15d      	bne.n	800212c <PCD_EP_ISR_Handler+0x6b4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002084:	4413      	add	r3, r2
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	00da      	lsls	r2, r3, #3
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	4413      	add	r3, r2
 8002092:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	e045      	b.n	800212c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d126      	bne.n	80020fc <PCD_EP_ISR_Handler+0x684>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c2:	4413      	add	r3, r2
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00da      	lsls	r2, r3, #3
 80020cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ce:	4413      	add	r3, r2
 80020d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80020d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	e017      	b.n	800212c <PCD_EP_ISR_Handler+0x6b4>
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	785b      	ldrb	r3, [r3, #1]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d113      	bne.n	800212c <PCD_EP_ISR_Handler+0x6b4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002112:	4413      	add	r3, r2
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	00da      	lsls	r2, r3, #3
 800211c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211e:	4413      	add	r3, r2
 8002120:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f007 fe81 	bl	8009e3a <HAL_PCD_DataInStageCallback>
 8002138:	e051      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800213a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d144      	bne.n	80021d0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4413      	add	r3, r2
 8002160:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800216e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002176:	429a      	cmp	r2, r3
 8002178:	d907      	bls.n	800218a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002182:	1ad2      	subs	r2, r2, r3
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	619a      	str	r2, [r3, #24]
 8002188:	e002      	b.n	8002190 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d106      	bne.n	80021a6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f007 fe4b 	bl	8009e3a <HAL_PCD_DataInStageCallback>
 80021a4:	e01b      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021ae:	441a      	add	r2, r3
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80021b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021bc:	441a      	add	r2, r3
 80021be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fb04 	bl	80067d6 <USB_EPStartXfer>
 80021ce:	e006      	b.n	80021de <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021d4:	461a      	mov	r2, r3
 80021d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f917 	bl	800240c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f6ff ac49 	blt.w	8001a82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3758      	adds	r7, #88	@ 0x58
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b088      	sub	sp, #32
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07c      	beq.n	800230c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	4413      	add	r3, r2
 800222c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002236:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	8b7b      	ldrh	r3, [r7, #26]
 800223e:	429a      	cmp	r2, r3
 8002240:	d306      	bcc.n	8002250 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	8b7b      	ldrh	r3, [r7, #26]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	619a      	str	r2, [r3, #24]
 800224e:	e002      	b.n	8002256 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d123      	bne.n	80022a6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002278:	833b      	strh	r3, [r7, #24]
 800227a:	8b3b      	ldrh	r3, [r7, #24]
 800227c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002280:	833b      	strh	r3, [r7, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	8b3b      	ldrh	r3, [r7, #24]
 8002292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800229a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01f      	beq.n	80022f0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ca:	82fb      	strh	r3, [r7, #22]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	8afb      	ldrh	r3, [r7, #22]
 80022dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8085 	beq.w	8002402 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6959      	ldr	r1, [r3, #20]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	891a      	ldrh	r2, [r3, #8]
 8002304:	8b7b      	ldrh	r3, [r7, #26]
 8002306:	f005 ff88 	bl	800821a <USB_ReadPMA>
 800230a:	e07a      	b.n	8002402 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	8b7b      	ldrh	r3, [r7, #26]
 8002338:	429a      	cmp	r2, r3
 800233a:	d306      	bcc.n	800234a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	e002      	b.n	8002350 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d123      	bne.n	80023a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800236e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002372:	83fb      	strh	r3, [r7, #30]
 8002374:	8bfb      	ldrh	r3, [r7, #30]
 8002376:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800237a:	83fb      	strh	r3, [r7, #30]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	8bfb      	ldrh	r3, [r7, #30]
 800238c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800239c:	b29b      	uxth	r3, r3
 800239e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11f      	bne.n	80023ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c4:	83bb      	strh	r3, [r7, #28]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	441a      	add	r2, r3
 80023d4:	8bbb      	ldrh	r3, [r7, #28]
 80023d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6959      	ldr	r1, [r3, #20]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	895a      	ldrh	r2, [r3, #10]
 80023fc:	8b7b      	ldrh	r3, [r7, #26]
 80023fe:	f005 ff0c 	bl	800821a <USB_ReadPMA>
    }
  }

  return count;
 8002402:	8b7b      	ldrh	r3, [r7, #26]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0a4      	sub	sp, #144	@ 0x90
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 81db 	beq.w	80027dc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4413      	add	r3, r2
 8002440:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002456:	429a      	cmp	r2, r3
 8002458:	d907      	bls.n	800246a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	619a      	str	r2, [r3, #24]
 8002468:	e002      	b.n	8002470 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f040 80b9 	bne.w	80025ec <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d126      	bne.n	80024d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	4413      	add	r3, r2
 8002498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	4413      	add	r3, r2
 80024a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e01a      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d116      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ec:	4413      	add	r3, r2
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00da      	lsls	r2, r3, #3
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	4413      	add	r3, r2
 80024fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	2200      	movs	r2, #0
 8002504:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d126      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0x156>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	00da      	lsls	r2, r3, #3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002546:	b29a      	uxth	r2, r3
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255a:	b29a      	uxth	r2, r3
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e017      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x186>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d113      	bne.n	8002592 <HAL_PCD_EP_DB_Transmit+0x186>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	4413      	add	r3, r2
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	4413      	add	r3, r2
 8002586:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2200      	movs	r2, #0
 8002590:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f007 fc4e 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 82fa 	beq.w	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c4:	82fb      	strh	r3, [r7, #22]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8afb      	ldrh	r3, [r7, #22]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
 80025ea:	e2d8      	b.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d021      	beq.n	800263a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800260c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002610:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800262e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 82ac 	bne.w	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800264e:	441a      	add	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800265c:	441a      	add	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d30b      	bcc.n	8002686 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	e017      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800268e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800269e:	e00a      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d165      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x37e>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	4413      	add	r3, r2
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	00da      	lsls	r2, r3, #3
 80026dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026de:	4413      	add	r3, r2
 80026e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x308>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270c:	b29a      	uxth	r2, r3
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	e057      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002718:	2b3e      	cmp	r3, #62	@ 0x3e
 800271a:	d818      	bhi.n	800274e <HAL_PCD_EP_DB_Transmit+0x342>
 800271c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_PCD_EP_DB_Transmit+0x32a>
 8002730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002732:	3301      	adds	r3, #1
 8002734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800273e:	b29b      	uxth	r3, r3
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	b29b      	uxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	b29a      	uxth	r2, r3
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e03a      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800274e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_PCD_EP_DB_Transmit+0x35c>
 8002762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002764:	3b01      	subs	r3, #1
 8002766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002770:	b29b      	uxth	r3, r3
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	b29b      	uxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002782:	b29a      	uxth	r2, r3
 8002784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	e01c      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d118      	bne.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	647b      	str	r3, [r7, #68]	@ 0x44
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a6:	4413      	add	r3, r2
 80027a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b2:	4413      	add	r3, r2
 80027b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6959      	ldr	r1, [r3, #20]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	891a      	ldrh	r2, [r3, #8]
 80027d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f005 fcde 	bl	8008196 <USB_WritePMA>
 80027da:	e1e0      	b.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800280c:	429a      	cmp	r2, r3
 800280e:	d307      	bcc.n	8002820 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002818:	1ad2      	subs	r2, r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	e002      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80c0 	bne.w	80029b0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	785b      	ldrb	r3, [r3, #1]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d126      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800284c:	4413      	add	r3, r2
 800284e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00da      	lsls	r2, r3, #3
 8002856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002858:	4413      	add	r3, r2
 800285a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800285e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287e:	b29a      	uxth	r2, r3
 8002880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e01a      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d116      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	667b      	str	r3, [r7, #100]	@ 0x64
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a2:	4413      	add	r3, r2
 80028a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	00da      	lsls	r2, r3, #3
 80028ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80028b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12b      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x516>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028de:	4413      	add	r3, r2
 80028e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	00da      	lsls	r2, r3, #3
 80028e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002900:	b29a      	uxth	r2, r3
 8002902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002918:	b29a      	uxth	r2, r3
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	e017      	b.n	8002952 <HAL_PCD_EP_DB_Transmit+0x546>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d113      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x546>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002938:	4413      	add	r3, r2
 800293a:	677b      	str	r3, [r7, #116]	@ 0x74
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00da      	lsls	r2, r3, #3
 8002942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002944:	4413      	add	r3, r2
 8002946:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800294a:	673b      	str	r3, [r7, #112]	@ 0x70
 800294c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f007 fa6e 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 811a 	bne.w	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002984:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
 80029ae:	e0f6      	b.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 80ca 	bne.w	8002b9e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a12:	441a      	add	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a20:	441a      	add	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d30b      	bcc.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	621a      	str	r2, [r3, #32]
 8002a48:	e017      	b.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002a52:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a62:	e00a      	b.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d165      	bne.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x748>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a9c:	4413      	add	r3, r2
 8002a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	00da      	lsls	r2, r3, #3
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002aae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	e054      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ae2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ae4:	d818      	bhi.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x70c>
 8002ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002afc:	3301      	adds	r3, #1
 8002afe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e037      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x726>
 8002b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e019      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d115      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6a:	4413      	add	r3, r2
 8002b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b76:	4413      	add	r3, r2
 8002b78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b86:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6959      	ldr	r1, [r3, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	895a      	ldrh	r2, [r3, #10]
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f005 fafc 	bl	8008196 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb8:	82bb      	strh	r3, [r7, #20]
 8002bba:	8abb      	ldrh	r3, [r7, #20]
 8002bbc:	f083 0310 	eor.w	r3, r3, #16
 8002bc0:	82bb      	strh	r3, [r7, #20]
 8002bc2:	8abb      	ldrh	r3, [r7, #20]
 8002bc4:	f083 0320 	eor.w	r3, r3, #32
 8002bc8:	82bb      	strh	r3, [r7, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	8abb      	ldrh	r3, [r7, #20]
 8002bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3790      	adds	r7, #144	@ 0x90
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	4613      	mov	r3, r2
 8002c08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	f003 0207 	and.w	r2, r3, #7
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	3310      	adds	r3, #16
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e009      	b.n	8002c42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2e:	897a      	ldrh	r2, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c42:	893b      	ldrh	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	80da      	strh	r2, [r3, #6]
 8002c56:	e00b      	b.n	8002c70 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f001 b83a 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 816f 	beq.w	8002f9a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cbc:	4bb5      	ldr	r3, [pc, #724]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc8:	4bb2      	ldr	r3, [pc, #712]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d15c      	bne.n	8002d8e <HAL_RCC_OscConfig+0x10e>
 8002cd4:	4baf      	ldr	r3, [pc, #700]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce0:	d155      	bne.n	8002d8e <HAL_RCC_OscConfig+0x10e>
 8002ce2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_OscConfig+0x94>
 8002d0e:	4ba1      	ldr	r3, [pc, #644]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d18:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d2c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002d30:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002d3c:	4b95      	ldr	r3, [pc, #596]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d44:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002d48:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002d4c:	fa92 f2a2 	rbit	r2, r2
 8002d50:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002d54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	f002 021f 	and.w	r2, r2, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8111 	beq.w	8002f98 <HAL_RCC_OscConfig+0x318>
 8002d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8108 	bne.w	8002f98 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f000 bfc6 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x12e>
 8002da0:	4b7c      	ldr	r3, [pc, #496]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7b      	ldr	r2, [pc, #492]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e036      	b.n	8002e1c <HAL_RCC_OscConfig+0x19c>
 8002dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x158>
 8002dbe:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a74      	ldr	r2, [pc, #464]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b72      	ldr	r3, [pc, #456]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a71      	ldr	r2, [pc, #452]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e021      	b.n	8002e1c <HAL_RCC_OscConfig+0x19c>
 8002dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x184>
 8002dea:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b67      	ldr	r3, [pc, #412]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a66      	ldr	r2, [pc, #408]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x19c>
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a62      	ldr	r2, [pc, #392]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a5f      	ldr	r2, [pc, #380]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d059      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd ff9a 	bl	8000d64 <HAL_GetTick>
 8002e30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e36:	f7fd ff95 	bl	8000d64 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d902      	bls.n	8002e4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f000 bf67 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e50:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002e60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d102      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1fe>
 8002e78:	4b46      	ldr	r3, [pc, #280]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x22a>
 8002e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002e92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e96:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002e9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002eb2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002ebe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ab      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1b6>
 8002ede:	e05c      	b.n	8002f9a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fd ff40 	bl	8000d64 <HAL_GetTick>
 8002ee4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eea:	f7fd ff3b 	bl	8000d64 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f000 bf0d 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 8002f00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f04:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002f14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2b2>
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x2de>
 8002f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f4a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002f4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_RCC_OscConfig+0x314>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f62:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002f66:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002f6a:	fa92 f2a2 	rbit	r2, r2
 8002f6e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002f72:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002f76:	fab2 f282 	clz	r2, r2
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f042 0220 	orr.w	r2, r2, #32
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f002 021f 	and.w	r2, r2, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ab      	bne.n	8002eea <HAL_RCC_OscConfig+0x26a>
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_OscConfig+0x31a>
 8002f94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 817f 	beq.w	80032ae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fb0:	4ba7      	ldr	r3, [pc, #668]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fbc:	4ba4      	ldr	r3, [pc, #656]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d173      	bne.n	80030b0 <HAL_RCC_OscConfig+0x430>
 8002fc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd4:	d16c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x430>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002fe8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0x386>
 8003000:	4b93      	ldr	r3, [pc, #588]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e013      	b.n	800302e <HAL_RCC_OscConfig+0x3ae>
 8003006:	2302      	movs	r3, #2
 8003008:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800301e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800302a:	4b89      	ldr	r3, [pc, #548]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	2202      	movs	r2, #2
 8003030:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003034:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003038:	fa92 f2a2 	rbit	r2, r2
 800303c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003040:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f042 0220 	orr.w	r2, r2, #32
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f002 021f 	and.w	r2, r2, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCC_OscConfig+0x3f6>
 8003060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003064:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d002      	beq.n	8003076 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f000 be52 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b76      	ldr	r3, [pc, #472]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003082:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	21f8      	movs	r1, #248	@ 0xf8
 800308c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003094:	fa91 f1a1 	rbit	r1, r1
 8003098:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800309c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80030a0:	fab1 f181 	clz	r1, r1
 80030a4:	b2c9      	uxtb	r1, r1
 80030a6:	408b      	lsls	r3, r1
 80030a8:	4969      	ldr	r1, [pc, #420]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e0fe      	b.n	80032ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8088 	beq.w	80031d2 <HAL_RCC_OscConfig+0x552>
 80030c2:	2301      	movs	r3, #1
 80030c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80030d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	461a      	mov	r2, r3
 80030ea:	2301      	movs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fd fe39 	bl	8000d64 <HAL_GetTick>
 80030f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fd fe34 	bl	8000d64 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d902      	bls.n	800310e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	f000 be06 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003120:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_RCC_OscConfig+0x4be>
 8003138:	4b45      	ldr	r3, [pc, #276]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	e013      	b.n	8003166 <HAL_RCC_OscConfig+0x4e6>
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003150:	2302      	movs	r3, #2
 8003152:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003156:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	2202      	movs	r2, #2
 8003168:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800316c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003178:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0af      	beq.n	80030f8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	21f8      	movs	r1, #248	@ 0xf8
 80031ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80031b6:	fa91 f1a1 	rbit	r1, r1
 80031ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80031be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80031c2:	fab1 f181 	clz	r1, r1
 80031c6:	b2c9      	uxtb	r1, r1
 80031c8:	408b      	lsls	r3, r1
 80031ca:	4921      	ldr	r1, [pc, #132]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e06d      	b.n	80032ae <HAL_RCC_OscConfig+0x62e>
 80031d2:	2301      	movs	r3, #1
 80031d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80031e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fd fdb1 	bl	8000d64 <HAL_GetTick>
 8003202:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fd fdac 	bl	8000d64 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d902      	bls.n	800321e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	f000 bd7e 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 800321e:	2302      	movs	r3, #2
 8003220:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003230:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCC_OscConfig+0x5d4>
 8003248:	4b01      	ldr	r3, [pc, #4]	@ (8003250 <HAL_RCC_OscConfig+0x5d0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	e016      	b.n	800327c <HAL_RCC_OscConfig+0x5fc>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	2302      	movs	r3, #2
 8003256:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003266:	2302      	movs	r3, #2
 8003268:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800326c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003278:	4bbf      	ldr	r3, [pc, #764]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	2202      	movs	r2, #2
 800327e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003282:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003286:	fa92 f2a2 	rbit	r2, r2
 800328a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800328e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ac      	bne.n	8003208 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8113 	beq.w	80034ea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d07c      	beq.n	80033ce <HAL_RCC_OscConfig+0x74e>
 80032d4:	2301      	movs	r3, #1
 80032d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80032e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4ba2      	ldr	r3, [pc, #648]	@ (800357c <HAL_RCC_OscConfig+0x8fc>)
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	461a      	mov	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fd fd31 	bl	8000d64 <HAL_GetTick>
 8003302:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003308:	f7fd fd2c 	bl	8000d64 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d902      	bls.n	800331e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	f000 bcfe 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 800331e:	2302      	movs	r3, #2
 8003320:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003330:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800336a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003378:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800337c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	4b7e      	ldr	r3, [pc, #504]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 8003380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003386:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800338a:	2102      	movs	r1, #2
 800338c:	6019      	str	r1, [r3, #0]
 800338e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003392:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f1a3 	rbit	r1, r3
 800339c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033a4:	6019      	str	r1, [r3, #0]
  return result;
 80033a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d09d      	beq.n	8003308 <HAL_RCC_OscConfig+0x688>
 80033cc:	e08d      	b.n	80034ea <HAL_RCC_OscConfig+0x86a>
 80033ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033f0:	601a      	str	r2, [r3, #0]
  return result;
 80033f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	4b5d      	ldr	r3, [pc, #372]	@ (800357c <HAL_RCC_OscConfig+0x8fc>)
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	2300      	movs	r3, #0
 800340e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fd fca8 	bl	8000d64 <HAL_GetTick>
 8003414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7fd fca3 	bl	8000d64 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	f000 bc75 	b.w	8003d1a <HAL_RCC_OscConfig+0x109a>
 8003430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003434:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003458:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800345c:	2202      	movs	r2, #2
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003472:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003480:	2202      	movs	r2, #2
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fa93 f2a3 	rbit	r2, r3
 8003492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003496:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800349a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 800349e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034a8:	2102      	movs	r1, #2
 80034aa:	6019      	str	r1, [r3, #0]
 80034ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f1a3 	rbit	r1, r3
 80034ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034c2:	6019      	str	r1, [r3, #0]
  return result;
 80034c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d197      	bne.n	800341a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 81a5 	beq.w	800384a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_RCC_OscConfig+0x8f8>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003538:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <HAL_RCC_OscConfig+0x900>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_RCC_OscConfig+0x900>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0b      	ldr	r2, [pc, #44]	@ (8003580 <HAL_RCC_OscConfig+0x900>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003556:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003558:	f7fd fc04 	bl	8000d64 <HAL_GetTick>
 800355c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e010      	b.n	8003584 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fd fbff 	bl	8000d64 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d908      	bls.n	8003584 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e3d1      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	10908120 	.word	0x10908120
 8003580:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b8d      	ldr	r3, [pc, #564]	@ (80037bc <HAL_RCC_OscConfig+0xb3c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0e8      	beq.n	8003562 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003594:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x92e>
 80035a0:	4b87      	ldr	r3, [pc, #540]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a86      	ldr	r2, [pc, #536]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	e035      	b.n	800361a <HAL_RCC_OscConfig+0x99a>
 80035ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x958>
 80035be:	4b80      	ldr	r3, [pc, #512]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a7f      	ldr	r2, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6213      	str	r3, [r2, #32]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a7c      	ldr	r2, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6213      	str	r3, [r2, #32]
 80035d6:	e020      	b.n	800361a <HAL_RCC_OscConfig+0x99a>
 80035d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d10c      	bne.n	8003602 <HAL_RCC_OscConfig+0x982>
 80035e8:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a74      	ldr	r2, [pc, #464]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	4b72      	ldr	r3, [pc, #456]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a71      	ldr	r2, [pc, #452]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x99a>
 8003602:	4b6f      	ldr	r3, [pc, #444]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a6e      	ldr	r2, [pc, #440]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a6b      	ldr	r2, [pc, #428]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8081 	beq.w	800372e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7fd fb9a 	bl	8000d64 <HAL_GetTick>
 8003630:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fb95 	bl	8000d64 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e365      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 800364e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003652:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003676:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003682:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003690:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003694:	601a      	str	r2, [r3, #0]
  return result;
 8003696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800369e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0xa3a>
 80036b4:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	e013      	b.n	80036e2 <HAL_RCC_OscConfig+0xa62>
 80036ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80036ea:	2102      	movs	r1, #2
 80036ec:	6011      	str	r1, [r2, #0]
 80036ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fa92 f1a2 	rbit	r1, r2
 80036fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003700:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003704:	6011      	str	r1, [r2, #0]
  return result;
 8003706:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800370a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d084      	beq.n	8003636 <HAL_RCC_OscConfig+0x9b6>
 800372c:	e083      	b.n	8003836 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fd fb19 	bl	8000d64 <HAL_GetTick>
 8003732:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fd fb14 	bl	8000d64 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e2e4      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 8003750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003754:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003758:	2202      	movs	r2, #2
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003778:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800377c:	2202      	movs	r2, #2
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003784:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003792:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003796:	601a      	str	r2, [r3, #0]
  return result;
 8003798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d106      	bne.n	80037c4 <HAL_RCC_OscConfig+0xb44>
 80037b6:	4b02      	ldr	r3, [pc, #8]	@ (80037c0 <HAL_RCC_OscConfig+0xb40>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	e017      	b.n	80037ec <HAL_RCC_OscConfig+0xb6c>
 80037bc:	40007000 	.word	0x40007000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	4bb3      	ldr	r3, [pc, #716]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80037f4:	2102      	movs	r1, #2
 80037f6:	6011      	str	r1, [r2, #0]
 80037f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	fa92 f1a2 	rbit	r1, r2
 8003806:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800380a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800380e:	6011      	str	r1, [r2, #0]
  return result;
 8003810:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003814:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	fab2 f282 	clz	r2, r2
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f002 021f 	and.w	r2, r2, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d180      	bne.n	8003738 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003836:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4a9d      	ldr	r2, [pc, #628]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003848:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 825e 	beq.w	8003d18 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b96      	ldr	r3, [pc, #600]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	f000 821f 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800386e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b02      	cmp	r3, #2
 8003878:	f040 8170 	bne.w	8003b5c <HAL_RCC_OscConfig+0xedc>
 800387c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003880:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038a0:	601a      	str	r2, [r3, #0]
  return result;
 80038a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fd fa4f 	bl	8000d64 <HAL_GetTick>
 80038c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd fa4a 	bl	8000d64 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e21c      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 80038e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003900:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003904:	601a      	str	r2, [r3, #0]
  return result;
 8003906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800390e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d102      	bne.n	800392a <HAL_RCC_OscConfig+0xcaa>
 8003924:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	e027      	b.n	800397a <HAL_RCC_OscConfig+0xcfa>
 800392a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800392e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003932:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003954:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003962:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	fa93 f2a3 	rbit	r2, r3
 800396c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003970:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800397e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003982:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003986:	6011      	str	r1, [r2, #0]
 8003988:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800398c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	fa92 f1a2 	rbit	r1, r2
 8003996:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800399a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800399e:	6011      	str	r1, [r2, #0]
  return result;
 80039a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039a4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	fab2 f282 	clz	r2, r2
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	f002 021f 	and.w	r2, r2, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f202 	lsl.w	r2, r1, r2
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d182      	bne.n	80038cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	4937      	ldr	r1, [pc, #220]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80039e0:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80039e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a19      	ldr	r1, [r3, #32]
 80039f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	492d      	ldr	r1, [pc, #180]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a1a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a28:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a2c:	601a      	str	r2, [r3, #0]
  return result;
 8003a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a32:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a36:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fd f989 	bl	8000d64 <HAL_GetTick>
 8003a52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a56:	e009      	b.n	8003a6c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fd f984 	bl	8000d64 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e156      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 8003a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a90:	601a      	str	r2, [r3, #0]
  return result;
 8003a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a96:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0xe3c>
 8003ab0:	4b01      	ldr	r3, [pc, #4]	@ (8003ab8 <HAL_RCC_OscConfig+0xe38>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	e02a      	b.n	8003b0c <HAL_RCC_OscConfig+0xe8c>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ac4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ace:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	fa93 f2a3 	rbit	r2, r3
 8003ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003adc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	fa93 f2a3 	rbit	r2, r3
 8003afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b02:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	4b86      	ldr	r3, [pc, #536]	@ (8003d24 <HAL_RCC_OscConfig+0x10a4>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b10:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b1e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fa92 f1a2 	rbit	r1, r2
 8003b28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b2c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b30:	6011      	str	r1, [r2, #0]
  return result;
 8003b32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b36:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	f042 0220 	orr.w	r2, r2, #32
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f002 021f 	and.w	r2, r2, #31
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f43f af7f 	beq.w	8003a58 <HAL_RCC_OscConfig+0xdd8>
 8003b5a:	e0dd      	b.n	8003d18 <HAL_RCC_OscConfig+0x1098>
 8003b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b80:	601a      	str	r2, [r3, #0]
  return result;
 8003b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b86:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b8a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd f8df 	bl	8000d64 <HAL_GetTick>
 8003ba6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003baa:	e009      	b.n	8003bc0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd f8da 	bl	8000d64 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0ac      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
 8003bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bc4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003be0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003be4:	601a      	str	r2, [r3, #0]
  return result;
 8003be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0xf8a>
 8003c04:	4b47      	ldr	r3, [pc, #284]	@ (8003d24 <HAL_RCC_OscConfig+0x10a4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e027      	b.n	8003c5a <HAL_RCC_OscConfig+0xfda>
 8003c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c2a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c34:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c42:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c50:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <HAL_RCC_OscConfig+0x10a4>)
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c5e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c62:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c66:	6011      	str	r1, [r2, #0]
 8003c68:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c6c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	fa92 f1a2 	rbit	r1, r2
 8003c76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c7a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c7e:	6011      	str	r1, [r2, #0]
  return result;
 8003c80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c84:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0220 	orr.w	r2, r2, #32
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d182      	bne.n	8003bac <HAL_RCC_OscConfig+0xf2c>
 8003ca6:	e037      	b.n	8003d18 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e02e      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	@ (8003d24 <HAL_RCC_OscConfig+0x10a4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cc4:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_RCC_OscConfig+0x10a4>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ccc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cd0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d117      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ce4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ce8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000

08003d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b09e      	sub	sp, #120	@ 0x78
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e162      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d40:	4b90      	ldr	r3, [pc, #576]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d910      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	498b      	ldr	r1, [pc, #556]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b89      	ldr	r3, [pc, #548]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e14a      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b82      	ldr	r3, [pc, #520]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	497f      	ldr	r1, [pc, #508]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80dc 	beq.w	8003f54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d13c      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xf6>
 8003da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003da8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_ClockConfig+0xa6>
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	e00f      	b.n	8003dee <HAL_RCC_ClockConfig+0xc6>
 8003dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dea:	4b67      	ldr	r3, [pc, #412]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003df2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003df6:	fa92 f2a2 	rbit	r2, r2
 8003dfa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003dfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dfe:	fab2 f282 	clz	r2, r2
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f002 021f 	and.w	r2, r2, #31
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d17b      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0f3      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d13c      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x178>
 8003e26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x128>
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	e00f      	b.n	8003e70 <HAL_RCC_ClockConfig+0x148>
 8003e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6c:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e74:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e78:	fa92 f2a2 	rbit	r2, r2
 8003e7c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e80:	fab2 f282 	clz	r2, r2
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	f042 0220 	orr.w	r2, r2, #32
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	f002 021f 	and.w	r2, r2, #31
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f202 	lsl.w	r2, r1, r2
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d13a      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b2      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x1a0>
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	e00d      	b.n	8003ee4 <HAL_RCC_ClockConfig+0x1bc>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	4b29      	ldr	r3, [pc, #164]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	61ba      	str	r2, [r7, #24]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	fa92 f2a2 	rbit	r2, r2
 8003eee:	617a      	str	r2, [r7, #20]
  return result;
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	fab2 f282 	clz	r2, r2
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f002 021f 	and.w	r2, r2, #31
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f202 	lsl.w	r2, r1, r2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e079      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f12:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	491a      	ldr	r1, [pc, #104]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fc ff1e 	bl	8000d64 <HAL_GetTick>
 8003f28:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fc ff1a 	bl	8000d64 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e061      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 020c 	and.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1eb      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d214      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 0207 	bic.w	r2, r3, #7
 8003f6a:	4906      	ldr	r1, [pc, #24]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_RCC_ClockConfig+0x25c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e040      	b.n	8004006 <HAL_RCC_ClockConfig+0x2de>
 8003f84:	40022000 	.word	0x40022000
 8003f88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <HAL_RCC_ClockConfig+0x2e8>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	491a      	ldr	r1, [pc, #104]	@ (8004010 <HAL_RCC_ClockConfig+0x2e8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <HAL_RCC_ClockConfig+0x2e8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4912      	ldr	r1, [pc, #72]	@ (8004010 <HAL_RCC_ClockConfig+0x2e8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fca:	f000 f829 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fce:	4601      	mov	r1, r0
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <HAL_RCC_ClockConfig+0x2e8>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd8:	22f0      	movs	r2, #240	@ 0xf0
 8003fda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	fa92 f2a2 	rbit	r2, r2
 8003fe2:	60fa      	str	r2, [r7, #12]
  return result;
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	fab2 f282 	clz	r2, r2
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	40d3      	lsrs	r3, r2
 8003fee:	4a09      	ldr	r2, [pc, #36]	@ (8004014 <HAL_RCC_ClockConfig+0x2ec>)
 8003ff0:	5cd3      	ldrb	r3, [r2, r3]
 8003ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <HAL_RCC_ClockConfig+0x2f0>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <HAL_RCC_ClockConfig+0x2f4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fe6c 	bl	8000cdc <HAL_InitTick>
  
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3778      	adds	r7, #120	@ 0x78
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	0800b700 	.word	0x0800b700
 8004018:	20000000 	.word	0x20000000
 800401c:	20000004 	.word	0x20000004

08004020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800403a:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x30>
 800404a:	2b08      	cmp	r3, #8
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x36>
 800404e:	e029      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004050:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004052:	613b      	str	r3, [r7, #16]
      break;
 8004054:	e029      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0c9b      	lsrs	r3, r3, #18
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800407c:	4a0f      	ldr	r2, [pc, #60]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	fbb2 f2f3 	udiv	r2, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e007      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800408e:	4a0e      	ldr	r2, [pc, #56]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	fbb2 f2f3 	udiv	r2, r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80040a6:	613b      	str	r3, [r7, #16]
      break;
 80040a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040aa:	693b      	ldr	r3, [r7, #16]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40021000 	.word	0x40021000
 80040bc:	00b71b00 	.word	0x00b71b00
 80040c0:	0800b718 	.word	0x0800b718
 80040c4:	0800b728 	.word	0x0800b728
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000000 	.word	0x20000000

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040ea:	f7ff ffef 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040ee:	4601      	mov	r1, r0
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80040fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	fa92 f2a2 	rbit	r2, r2
 8004104:	603a      	str	r2, [r7, #0]
  return result;
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	40d3      	lsrs	r3, r2
 8004110:	4a04      	ldr	r2, [pc, #16]	@ (8004124 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	0800b710 	.word	0x0800b710

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800412e:	f7ff ffcd 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004132:	4601      	mov	r1, r0
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800413c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	fa92 f2a2 	rbit	r2, r2
 8004148:	603a      	str	r2, [r7, #0]
  return result;
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	fab2 f282 	clz	r2, r2
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	40d3      	lsrs	r3, r2
 8004154:	4a04      	ldr	r2, [pc, #16]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000
 8004168:	0800b710 	.word	0x0800b710

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b092      	sub	sp, #72	@ 0x48
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80d4 	beq.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004190:	4b4e      	ldr	r3, [pc, #312]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10e      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	4b4b      	ldr	r3, [pc, #300]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	61d3      	str	r3, [r2, #28]
 80041a8:	4b48      	ldr	r3, [pc, #288]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b45      	ldr	r3, [pc, #276]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d118      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c6:	4b42      	ldr	r3, [pc, #264]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a41      	ldr	r2, [pc, #260]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fc fdc7 	bl	8000d64 <HAL_GetTick>
 80041d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	e008      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041da:	f7fc fdc3 	bl	8000d64 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	@ 0x64
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e1d6      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b38      	ldr	r3, [pc, #224]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f8:	4b34      	ldr	r3, [pc, #208]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8084 	beq.w	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004214:	429a      	cmp	r2, r3
 8004216:	d07c      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004218:	4b2c      	ldr	r3, [pc, #176]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004222:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	461a      	mov	r2, r3
 8004242:	2301      	movs	r3, #1
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	461a      	mov	r2, r3
 8004266:	2300      	movs	r3, #0
 8004268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426a:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fc fd73 	bl	8000d64 <HAL_GetTick>
 800427e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fc fd6f 	bl	8000d64 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e180      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004298:	2302      	movs	r3, #2
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	2302      	movs	r3, #2
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	61fb      	str	r3, [r7, #28]
  return result;
 80042b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d108      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042c6:	4b01      	ldr	r3, [pc, #4]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	e00d      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	10908100 	.word	0x10908100
 80042d8:	2302      	movs	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2202      	movs	r2, #2
 80042ea:	613a      	str	r2, [r7, #16]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	fa92 f2a2 	rbit	r2, r2
 80042f2:	60fa      	str	r2, [r7, #12]
  return result;
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	fab2 f282 	clz	r2, r2
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	f002 021f 	and.w	r2, r2, #31
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0b7      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004312:	4b8f      	ldr	r3, [pc, #572]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	498c      	ldr	r1, [pc, #560]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004324:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004328:	2b01      	cmp	r3, #1
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b88      	ldr	r3, [pc, #544]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a87      	ldr	r2, [pc, #540]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004344:	4b82      	ldr	r3, [pc, #520]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	f023 0203 	bic.w	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	497f      	ldr	r1, [pc, #508]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004362:	4b7b      	ldr	r3, [pc, #492]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4978      	ldr	r1, [pc, #480]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004380:	4b73      	ldr	r3, [pc, #460]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	4970      	ldr	r1, [pc, #448]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438e:	4313      	orrs	r3, r2
 8004390:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439e:	4b6c      	ldr	r3, [pc, #432]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	4969      	ldr	r1, [pc, #420]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043bc:	4b64      	ldr	r3, [pc, #400]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	4961      	ldr	r1, [pc, #388]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043da:	4b5d      	ldr	r3, [pc, #372]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f023 0220 	bic.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	495a      	ldr	r1, [pc, #360]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043f8:	4b55      	ldr	r3, [pc, #340]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	4952      	ldr	r1, [pc, #328]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004416:	4b4e      	ldr	r3, [pc, #312]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	494b      	ldr	r1, [pc, #300]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004434:	4b46      	ldr	r3, [pc, #280]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4943      	ldr	r1, [pc, #268]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004452:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	493c      	ldr	r1, [pc, #240]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004470:	4b37      	ldr	r3, [pc, #220]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	4934      	ldr	r1, [pc, #208]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800448e:	4b30      	ldr	r3, [pc, #192]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	492d      	ldr	r1, [pc, #180]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b8:	4925      	ldr	r1, [pc, #148]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044ca:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	491e      	ldr	r1, [pc, #120]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	4916      	ldr	r1, [pc, #88]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	490f      	ldr	r1, [pc, #60]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004524:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	4907      	ldr	r1, [pc, #28]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004542:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	e002      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004556:	4913      	ldr	r1, [pc, #76]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004558:	4313      	orrs	r3, r2
 800455a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004568:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004574:	490b      	ldr	r1, [pc, #44]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004576:	4313      	orrs	r3, r2
 8004578:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004586:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004592:	4904      	ldr	r1, [pc, #16]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004594:	4313      	orrs	r3, r2
 8004596:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3748      	adds	r7, #72	@ 0x48
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e09d      	b.n	80046f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fb ffbc 	bl	8000578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004620:	d902      	bls.n	8004628 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e002      	b.n	800462e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004636:	d007      	beq.n	8004648 <HAL_SPI_Init+0xa0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468a:	ea42 0103 	orr.w	r1, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0204 	and.w	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046c4:	ea42 0103 	orr.w	r1, r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e049      	b.n	80047a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc f995 	bl	8000a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f000 f949 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ff      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b14      	cmp	r3, #20
 80047d6:	f200 80f0 	bhi.w	80049ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080049bb 	.word	0x080049bb
 80047e8:	080049bb 	.word	0x080049bb
 80047ec:	080049bb 	.word	0x080049bb
 80047f0:	08004875 	.word	0x08004875
 80047f4:	080049bb 	.word	0x080049bb
 80047f8:	080049bb 	.word	0x080049bb
 80047fc:	080049bb 	.word	0x080049bb
 8004800:	080048b7 	.word	0x080048b7
 8004804:	080049bb 	.word	0x080049bb
 8004808:	080049bb 	.word	0x080049bb
 800480c:	080049bb 	.word	0x080049bb
 8004810:	080048f7 	.word	0x080048f7
 8004814:	080049bb 	.word	0x080049bb
 8004818:	080049bb 	.word	0x080049bb
 800481c:	080049bb 	.word	0x080049bb
 8004820:	08004939 	.word	0x08004939
 8004824:	080049bb 	.word	0x080049bb
 8004828:	080049bb 	.word	0x080049bb
 800482c:	080049bb 	.word	0x080049bb
 8004830:	08004979 	.word	0x08004979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f974 	bl	8004b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0208 	orr.w	r2, r2, #8
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
      break;
 8004872:	e0a5      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f9ee 	bl	8004c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
      break;
 80048b4:	e084      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fa61 	bl	8004d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0204 	bic.w	r2, r2, #4
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	61da      	str	r2, [r3, #28]
      break;
 80048f4:	e064      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fad3 	bl	8004ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
      break;
 8004936:	e043      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb22 	bl	8004f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004976:	e023      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb6c 	bl	800505c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049b8:	e002      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
      break;
 80049be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop

080049d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <TIM_Base_SetConfig+0x134>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f2:	d00f      	beq.n	8004a14 <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a45      	ldr	r2, [pc, #276]	@ (8004b0c <TIM_Base_SetConfig+0x138>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a44      	ldr	r2, [pc, #272]	@ (8004b10 <TIM_Base_SetConfig+0x13c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a43      	ldr	r2, [pc, #268]	@ (8004b14 <TIM_Base_SetConfig+0x140>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a42      	ldr	r2, [pc, #264]	@ (8004b18 <TIM_Base_SetConfig+0x144>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d108      	bne.n	8004a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a37      	ldr	r2, [pc, #220]	@ (8004b08 <TIM_Base_SetConfig+0x134>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01f      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a34:	d01b      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a34      	ldr	r2, [pc, #208]	@ (8004b0c <TIM_Base_SetConfig+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d017      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a33      	ldr	r2, [pc, #204]	@ (8004b10 <TIM_Base_SetConfig+0x13c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a32      	ldr	r2, [pc, #200]	@ (8004b14 <TIM_Base_SetConfig+0x140>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00f      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a32      	ldr	r2, [pc, #200]	@ (8004b1c <TIM_Base_SetConfig+0x148>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a31      	ldr	r2, [pc, #196]	@ (8004b20 <TIM_Base_SetConfig+0x14c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a30      	ldr	r2, [pc, #192]	@ (8004b24 <TIM_Base_SetConfig+0x150>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2b      	ldr	r2, [pc, #172]	@ (8004b18 <TIM_Base_SetConfig+0x144>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d108      	bne.n	8004a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <TIM_Base_SetConfig+0x134>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <TIM_Base_SetConfig+0x100>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a19      	ldr	r2, [pc, #100]	@ (8004b14 <TIM_Base_SetConfig+0x140>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x100>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <TIM_Base_SetConfig+0x148>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x100>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <TIM_Base_SetConfig+0x14c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x100>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <TIM_Base_SetConfig+0x150>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x100>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <TIM_Base_SetConfig+0x144>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]
  }
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40013400 	.word	0x40013400
 8004b18:	40015000 	.word	0x40015000
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40014400 	.word	0x40014400
 8004b24:	40014800 	.word	0x40014800

08004b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f023 0201 	bic.w	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 0302 	bic.w	r3, r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a30      	ldr	r2, [pc, #192]	@ (8004c44 <TIM_OC1_SetConfig+0x11c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x88>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c48 <TIM_OC1_SetConfig+0x120>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x88>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a2e      	ldr	r2, [pc, #184]	@ (8004c4c <TIM_OC1_SetConfig+0x124>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x88>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c50 <TIM_OC1_SetConfig+0x128>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x88>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <TIM_OC1_SetConfig+0x12c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x88>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <TIM_OC1_SetConfig+0x130>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <TIM_OC1_SetConfig+0x11c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_OC1_SetConfig+0xd2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c48 <TIM_OC1_SetConfig+0x120>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_OC1_SetConfig+0xd2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c4c <TIM_OC1_SetConfig+0x124>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_OC1_SetConfig+0xd2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <TIM_OC1_SetConfig+0x128>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_OC1_SetConfig+0xd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <TIM_OC1_SetConfig+0x12c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC1_SetConfig+0xd2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <TIM_OC1_SetConfig+0x130>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40013400 	.word	0x40013400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800
 8004c58:	40015000 	.word	0x40015000

08004c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f023 0210 	bic.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0320 	bic.w	r3, r3, #32
 8004caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <TIM_OC2_SetConfig+0x110>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_OC2_SetConfig+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d70 <TIM_OC2_SetConfig+0x114>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_OC2_SetConfig+0x74>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a2a      	ldr	r2, [pc, #168]	@ (8004d74 <TIM_OC2_SetConfig+0x118>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10d      	bne.n	8004cec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <TIM_OC2_SetConfig+0x110>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <TIM_OC2_SetConfig+0xc0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <TIM_OC2_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00f      	beq.n	8004d1c <TIM_OC2_SetConfig+0xc0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <TIM_OC2_SetConfig+0x11c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_OC2_SetConfig+0xc0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	@ (8004d7c <TIM_OC2_SetConfig+0x120>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_OC2_SetConfig+0xc0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d80 <TIM_OC2_SetConfig+0x124>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC2_SetConfig+0xc0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a17      	ldr	r2, [pc, #92]	@ (8004d74 <TIM_OC2_SetConfig+0x118>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40015000 	.word	0x40015000
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e90 <TIM_OC3_SetConfig+0x10c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC3_SetConfig+0x72>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e94 <TIM_OC3_SetConfig+0x110>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC3_SetConfig+0x72>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a29      	ldr	r2, [pc, #164]	@ (8004e98 <TIM_OC3_SetConfig+0x114>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10d      	bne.n	8004e12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <TIM_OC3_SetConfig+0x10c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_OC3_SetConfig+0xbe>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <TIM_OC3_SetConfig+0x110>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_OC3_SetConfig+0xbe>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <TIM_OC3_SetConfig+0x118>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_OC3_SetConfig+0xbe>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea0 <TIM_OC3_SetConfig+0x11c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_OC3_SetConfig+0xbe>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <TIM_OC3_SetConfig+0x120>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC3_SetConfig+0xbe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <TIM_OC3_SetConfig+0x114>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d113      	bne.n	8004e6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40015000 	.word	0x40015000
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	@ (8004f70 <TIM_OC4_SetConfig+0xc8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_OC4_SetConfig+0x8c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <TIM_OC4_SetConfig+0xcc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_OC4_SetConfig+0x8c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <TIM_OC4_SetConfig+0xd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_OC4_SetConfig+0x8c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <TIM_OC4_SetConfig+0xd4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_OC4_SetConfig+0x8c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	@ (8004f80 <TIM_OC4_SetConfig+0xd8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC4_SetConfig+0x8c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <TIM_OC4_SetConfig+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d109      	bne.n	8004f48 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	019b      	lsls	r3, r3, #6
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40015000 	.word	0x40015000

08004f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	@ (8005044 <TIM_OC5_SetConfig+0xbc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_OC5_SetConfig+0x82>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <TIM_OC5_SetConfig+0xc0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_OC5_SetConfig+0x82>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a17      	ldr	r2, [pc, #92]	@ (800504c <TIM_OC5_SetConfig+0xc4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_OC5_SetConfig+0x82>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <TIM_OC5_SetConfig+0xc8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_OC5_SetConfig+0x82>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a15      	ldr	r2, [pc, #84]	@ (8005054 <TIM_OC5_SetConfig+0xcc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_OC5_SetConfig+0x82>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <TIM_OC5_SetConfig+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d109      	bne.n	800501e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800
 8005058:	40015000 	.word	0x40015000

0800505c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	051b      	lsls	r3, r3, #20
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1a      	ldr	r2, [pc, #104]	@ (800511c <TIM_OC6_SetConfig+0xc0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <TIM_OC6_SetConfig+0x84>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <TIM_OC6_SetConfig+0xc4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_OC6_SetConfig+0x84>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a18      	ldr	r2, [pc, #96]	@ (8005124 <TIM_OC6_SetConfig+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC6_SetConfig+0x84>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <TIM_OC6_SetConfig+0xcc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC6_SetConfig+0x84>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	@ (800512c <TIM_OC6_SetConfig+0xd0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC6_SetConfig+0x84>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <TIM_OC6_SetConfig+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d109      	bne.n	80050f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40013400 	.word	0x40013400
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800
 8005130:	40015000 	.word	0x40015000

08005134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e06d      	b.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a30      	ldr	r2, [pc, #192]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2d      	ldr	r2, [pc, #180]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005190:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d01d      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c8:	d018      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a15      	ldr	r2, [pc, #84]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a11      	ldr	r2, [pc, #68]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10c      	bne.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40015000 	.word	0x40015000
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40014000 	.word	0x40014000

0800524c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005264:	2302      	movs	r3, #2
 8005266:	e06a      	b.n	800533e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a17      	ldr	r2, [pc, #92]	@ (8005350 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d115      	bne.n	800532c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	051b      	lsls	r3, r3, #20
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40015000 	.word	0x40015000

08005358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e040      	b.n	80053ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb fc2a 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9fc 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f825 	bl	80053f4 <UART_SetConfig>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e01b      	b.n	80053ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa7b 	bl	80058e0 <UART_CheckIdleState>
 80053ea:	4603      	mov	r3, r0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b92      	ldr	r3, [pc, #584]	@ (8005668 <UART_SetConfig+0x274>)
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	430b      	orrs	r3, r1
 800542a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	430a      	orrs	r2, r1
 8005464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a80      	ldr	r2, [pc, #512]	@ (800566c <UART_SetConfig+0x278>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d120      	bne.n	80054b2 <UART_SetConfig+0xbe>
 8005470:	4b7f      	ldr	r3, [pc, #508]	@ (8005670 <UART_SetConfig+0x27c>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b03      	cmp	r3, #3
 800547a:	d817      	bhi.n	80054ac <UART_SetConfig+0xb8>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x90>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a1 	.word	0x080054a1
 800548c:	080054a7 	.word	0x080054a7
 8005490:	0800549b 	.word	0x0800549b
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e0b5      	b.n	8005606 <UART_SetConfig+0x212>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e0b2      	b.n	8005606 <UART_SetConfig+0x212>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0af      	b.n	8005606 <UART_SetConfig+0x212>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0ac      	b.n	8005606 <UART_SetConfig+0x212>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0a9      	b.n	8005606 <UART_SetConfig+0x212>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005674 <UART_SetConfig+0x280>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d124      	bne.n	8005506 <UART_SetConfig+0x112>
 80054bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005670 <UART_SetConfig+0x27c>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054c8:	d011      	beq.n	80054ee <UART_SetConfig+0xfa>
 80054ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054ce:	d817      	bhi.n	8005500 <UART_SetConfig+0x10c>
 80054d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054d4:	d011      	beq.n	80054fa <UART_SetConfig+0x106>
 80054d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054da:	d811      	bhi.n	8005500 <UART_SetConfig+0x10c>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <UART_SetConfig+0xf4>
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e4:	d006      	beq.n	80054f4 <UART_SetConfig+0x100>
 80054e6:	e00b      	b.n	8005500 <UART_SetConfig+0x10c>
 80054e8:	2300      	movs	r3, #0
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e08b      	b.n	8005606 <UART_SetConfig+0x212>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e088      	b.n	8005606 <UART_SetConfig+0x212>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e085      	b.n	8005606 <UART_SetConfig+0x212>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e082      	b.n	8005606 <UART_SetConfig+0x212>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e07f      	b.n	8005606 <UART_SetConfig+0x212>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5b      	ldr	r2, [pc, #364]	@ (8005678 <UART_SetConfig+0x284>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d124      	bne.n	800555a <UART_SetConfig+0x166>
 8005510:	4b57      	ldr	r3, [pc, #348]	@ (8005670 <UART_SetConfig+0x27c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005518:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800551c:	d011      	beq.n	8005542 <UART_SetConfig+0x14e>
 800551e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005522:	d817      	bhi.n	8005554 <UART_SetConfig+0x160>
 8005524:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005528:	d011      	beq.n	800554e <UART_SetConfig+0x15a>
 800552a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800552e:	d811      	bhi.n	8005554 <UART_SetConfig+0x160>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <UART_SetConfig+0x148>
 8005534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005538:	d006      	beq.n	8005548 <UART_SetConfig+0x154>
 800553a:	e00b      	b.n	8005554 <UART_SetConfig+0x160>
 800553c:	2300      	movs	r3, #0
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e061      	b.n	8005606 <UART_SetConfig+0x212>
 8005542:	2302      	movs	r3, #2
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e05e      	b.n	8005606 <UART_SetConfig+0x212>
 8005548:	2304      	movs	r3, #4
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e05b      	b.n	8005606 <UART_SetConfig+0x212>
 800554e:	2308      	movs	r3, #8
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e058      	b.n	8005606 <UART_SetConfig+0x212>
 8005554:	2310      	movs	r3, #16
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e055      	b.n	8005606 <UART_SetConfig+0x212>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a47      	ldr	r2, [pc, #284]	@ (800567c <UART_SetConfig+0x288>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d124      	bne.n	80055ae <UART_SetConfig+0x1ba>
 8005564:	4b42      	ldr	r3, [pc, #264]	@ (8005670 <UART_SetConfig+0x27c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800556c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005570:	d011      	beq.n	8005596 <UART_SetConfig+0x1a2>
 8005572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005576:	d817      	bhi.n	80055a8 <UART_SetConfig+0x1b4>
 8005578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800557c:	d011      	beq.n	80055a2 <UART_SetConfig+0x1ae>
 800557e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005582:	d811      	bhi.n	80055a8 <UART_SetConfig+0x1b4>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <UART_SetConfig+0x19c>
 8005588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800558c:	d006      	beq.n	800559c <UART_SetConfig+0x1a8>
 800558e:	e00b      	b.n	80055a8 <UART_SetConfig+0x1b4>
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e037      	b.n	8005606 <UART_SetConfig+0x212>
 8005596:	2302      	movs	r3, #2
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e034      	b.n	8005606 <UART_SetConfig+0x212>
 800559c:	2304      	movs	r3, #4
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e031      	b.n	8005606 <UART_SetConfig+0x212>
 80055a2:	2308      	movs	r3, #8
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e02e      	b.n	8005606 <UART_SetConfig+0x212>
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e02b      	b.n	8005606 <UART_SetConfig+0x212>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a33      	ldr	r2, [pc, #204]	@ (8005680 <UART_SetConfig+0x28c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d124      	bne.n	8005602 <UART_SetConfig+0x20e>
 80055b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005670 <UART_SetConfig+0x27c>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80055c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055c4:	d011      	beq.n	80055ea <UART_SetConfig+0x1f6>
 80055c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055ca:	d817      	bhi.n	80055fc <UART_SetConfig+0x208>
 80055cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055d0:	d011      	beq.n	80055f6 <UART_SetConfig+0x202>
 80055d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055d6:	d811      	bhi.n	80055fc <UART_SetConfig+0x208>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x1f0>
 80055dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055e0:	d006      	beq.n	80055f0 <UART_SetConfig+0x1fc>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x208>
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e00d      	b.n	8005606 <UART_SetConfig+0x212>
 80055ea:	2302      	movs	r3, #2
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e00a      	b.n	8005606 <UART_SetConfig+0x212>
 80055f0:	2304      	movs	r3, #4
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e007      	b.n	8005606 <UART_SetConfig+0x212>
 80055f6:	2308      	movs	r3, #8
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e004      	b.n	8005606 <UART_SetConfig+0x212>
 80055fc:	2310      	movs	r3, #16
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e001      	b.n	8005606 <UART_SetConfig+0x212>
 8005602:	2310      	movs	r3, #16
 8005604:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560e:	d16b      	bne.n	80056e8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005610:	7ffb      	ldrb	r3, [r7, #31]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d838      	bhi.n	8005688 <UART_SetConfig+0x294>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x228>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	08005689 	.word	0x08005689
 800562c:	08005657 	.word	0x08005657
 8005630:	08005689 	.word	0x08005689
 8005634:	08005689 	.word	0x08005689
 8005638:	08005689 	.word	0x08005689
 800563c:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe fd50 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e024      	b.n	8005692 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe fd6e 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 800564c:	61b8      	str	r0, [r7, #24]
        break;
 800564e:	e020      	b.n	8005692 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <UART_SetConfig+0x290>)
 8005652:	61bb      	str	r3, [r7, #24]
        break;
 8005654:	e01d      	b.n	8005692 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fe fce3 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 800565a:	61b8      	str	r0, [r7, #24]
        break;
 800565c:	e019      	b.n	8005692 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005662:	61bb      	str	r3, [r7, #24]
        break;
 8005664:	e015      	b.n	8005692 <UART_SetConfig+0x29e>
 8005666:	bf00      	nop
 8005668:	efff69f3 	.word	0xefff69f3
 800566c:	40013800 	.word	0x40013800
 8005670:	40021000 	.word	0x40021000
 8005674:	40004400 	.word	0x40004400
 8005678:	40004800 	.word	0x40004800
 800567c:	40004c00 	.word	0x40004c00
 8005680:	40005000 	.word	0x40005000
 8005684:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	77bb      	strb	r3, [r7, #30]
        break;
 8005690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d073      	beq.n	8005780 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	005a      	lsls	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	441a      	add	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d916      	bls.n	80056e2 <UART_SetConfig+0x2ee>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	d212      	bcs.n	80056e2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f023 030f 	bic.w	r3, r3, #15
 80056c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	89fb      	ldrh	r3, [r7, #14]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	89fa      	ldrh	r2, [r7, #14]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e04e      	b.n	8005780 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	77bb      	strb	r3, [r7, #30]
 80056e6:	e04b      	b.n	8005780 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d827      	bhi.n	800573e <UART_SetConfig+0x34a>
 80056ee:	a201      	add	r2, pc, #4	@ (adr r2, 80056f4 <UART_SetConfig+0x300>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573f 	.word	0x0800573f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe fce4 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e013      	b.n	8005748 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7fe fd02 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8005724:	61b8      	str	r0, [r7, #24]
        break;
 8005726:	e00f      	b.n	8005748 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <UART_SetConfig+0x3a4>)
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e00c      	b.n	8005748 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7fe fc77 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8005732:	61b8      	str	r0, [r7, #24]
        break;
 8005734:	e008      	b.n	8005748 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573a:	61bb      	str	r3, [r7, #24]
        break;
 800573c:	e004      	b.n	8005748 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	77bb      	strb	r3, [r7, #30]
        break;
 8005746:	bf00      	nop
    }

    if (pclk != 0U)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	085a      	lsrs	r2, r3, #1
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	441a      	add	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b0f      	cmp	r3, #15
 8005766:	d909      	bls.n	800577c <UART_SetConfig+0x388>
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576e:	d205      	bcs.n	800577c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	b29a      	uxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e001      	b.n	8005780 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800578c:	7fbb      	ldrb	r3, [r7, #30]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	007a1200 	.word	0x007a1200

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b098      	sub	sp, #96	@ 0x60
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f0:	f7fb fa38 	bl	8000d64 <HAL_GetTick>
 80058f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d12e      	bne.n	8005962 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f88c 	bl	8005a30 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d021      	beq.n	8005962 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005932:	653b      	str	r3, [r7, #80]	@ 0x50
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800593c:	647b      	str	r3, [r7, #68]	@ 0x44
 800593e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800594a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e062      	b.n	8005a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d149      	bne.n	8005a04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f856 	bl	8005a30 <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d03c      	beq.n	8005a04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	623b      	str	r3, [r7, #32]
   return(result);
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800599e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e011      	b.n	8005a28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3758      	adds	r7, #88	@ 0x58
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	e04f      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a48:	d04b      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fb f98b 	bl	8000d64 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e04e      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d037      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b80      	cmp	r3, #128	@ 0x80
 8005a76:	d034      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d031      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d110      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2208      	movs	r2, #8
 8005a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f838 	bl	8005b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e029      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005abc:	d111      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f81e 	bl	8005b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00f      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d0a0      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b095      	sub	sp, #84	@ 0x54
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d118      	bne.n	8005bb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f023 0310 	bic.w	r3, r3, #16
 8005b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e6      	bne.n	8005b80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bc6:	bf00      	nop
 8005bc8:	3754      	adds	r7, #84	@ 0x54
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005be2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005be6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c08:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b09d      	sub	sp, #116	@ 0x74
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d81f      	bhi.n	8005ce6 <USB_ActivateEndpoint+0x72>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <USB_ActivateEndpoint+0x38>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cd9 	.word	0x08005cd9
 8005cb4:	08005cef 	.word	0x08005cef
 8005cb8:	08005ccb 	.word	0x08005ccb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cc8:	e012      	b.n	8005cf0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005cd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cd6:	e00b      	b.n	8005cf0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ce4:	e004      	b.n	8005cf0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005cec:	e000      	b.n	8005cf0 <USB_ActivateEndpoint+0x7c>
      break;
 8005cee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	4313      	orrs	r3, r2
 8005d34:	b21b      	sxth	r3, r3
 8005d36:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	441a      	add	r2, r3
 8005d44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	7b1b      	ldrb	r3, [r3, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 8178 	bne.w	8006056 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8084 	beq.w	8005e78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4413      	add	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	88db      	ldrh	r3, [r3, #6]
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	827b      	strh	r3, [r7, #18]
 8005db2:	8a7b      	ldrh	r3, [r7, #18]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <USB_ActivateEndpoint+0x180>
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	823b      	strh	r3, [r7, #16]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	8a3b      	ldrh	r3, [r7, #16]
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	78db      	ldrb	r3, [r3, #3]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d020      	beq.n	8005e3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e12:	81bb      	strh	r3, [r7, #12]
 8005e14:	89bb      	ldrh	r3, [r7, #12]
 8005e16:	f083 0320 	eor.w	r3, r3, #32
 8005e1a:	81bb      	strh	r3, [r7, #12]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	89bb      	ldrh	r3, [r7, #12]
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
 8005e3c:	e2d5      	b.n	80063ea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e54:	81fb      	strh	r3, [r7, #14]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]
 8005e76:	e2b8      	b.n	80063ea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	4413      	add	r3, r2
 8005e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	88db      	ldrh	r3, [r3, #6]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	4413      	add	r3, r2
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <USB_ActivateEndpoint+0x28a>
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	e039      	b.n	8005f72 <USB_ActivateEndpoint+0x2fe>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f04:	d818      	bhi.n	8005f38 <USB_ActivateEndpoint+0x2c4>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <USB_ActivateEndpoint+0x2ac>
 8005f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	029b      	lsls	r3, r3, #10
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e01c      	b.n	8005f72 <USB_ActivateEndpoint+0x2fe>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <USB_ActivateEndpoint+0x2de>
 8005f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	029b      	lsls	r3, r3, #10
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4313      	orrs	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01b      	beq.n	8005fc2 <USB_ActivateEndpoint+0x34e>
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	843b      	strh	r3, [r7, #32]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	8c3b      	ldrh	r3, [r7, #32]
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d124      	bne.n	8006014 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe0:	83bb      	strh	r3, [r7, #28]
 8005fe2:	8bbb      	ldrh	r3, [r7, #28]
 8005fe4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fe8:	83bb      	strh	r3, [r7, #28]
 8005fea:	8bbb      	ldrh	r3, [r7, #28]
 8005fec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ff0:	83bb      	strh	r3, [r7, #28]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8bbb      	ldrh	r3, [r7, #28]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
 8006012:	e1ea      	b.n	80063ea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602a:	83fb      	strh	r3, [r7, #30]
 800602c:	8bfb      	ldrh	r3, [r7, #30]
 800602e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006032:	83fb      	strh	r3, [r7, #30]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	8bfb      	ldrh	r3, [r7, #30]
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]
 8006054:	e1c9      	b.n	80063ea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d11e      	bne.n	800609c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006074:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
 800609a:	e01d      	b.n	80060d8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80060ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e8:	4413      	add	r3, r2
 80060ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	00da      	lsls	r2, r3, #3
 80060f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	891b      	ldrh	r3, [r3, #8]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800611c:	4413      	add	r3, r2
 800611e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	00da      	lsls	r2, r3, #3
 8006126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006128:	4413      	add	r3, r2
 800612a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800612e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	895b      	ldrh	r3, [r3, #10]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800613e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f040 8093 	bne.w	8006270 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800615a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800615e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01b      	beq.n	800619e <USB_ActivateEndpoint+0x52a>
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80061ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01b      	beq.n	80061ee <USB_ActivateEndpoint+0x57a>
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006206:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006208:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800620c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800620e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006210:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006214:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	441a      	add	r2, r3
 8006258:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800625a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800625e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626a:	b29b      	uxth	r3, r3
 800626c:	8013      	strh	r3, [r2, #0]
 800626e:	e0bc      	b.n	80063ea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01d      	beq.n	80062c8 <USB_ActivateEndpoint+0x654>
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80062d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01d      	beq.n	8006320 <USB_ActivateEndpoint+0x6ac>
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	441a      	add	r2, r3
 8006308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006318:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d024      	beq.n	8006372 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006342:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006346:	f083 0320 	eor.w	r3, r3, #32
 800634a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
 8006370:	e01d      	b.n	80063ae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006388:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	441a      	add	r2, r3
 8006396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800639a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3774      	adds	r7, #116	@ 0x74
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b08d      	sub	sp, #52	@ 0x34
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	7b1b      	ldrb	r3, [r3, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 808e 	bne.w	800652c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d044      	beq.n	80064a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	81bb      	strh	r3, [r7, #12]
 8006426:	89bb      	ldrh	r3, [r7, #12]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01b      	beq.n	8006468 <USB_DeactivateEndpoint+0x6c>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006446:	817b      	strh	r3, [r7, #10]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	441a      	add	r2, r3
 8006452:	897b      	ldrh	r3, [r7, #10]
 8006454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006464:	b29b      	uxth	r3, r3
 8006466:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647e:	813b      	strh	r3, [r7, #8]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
 80064a0:	e192      	b.n	80067c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	827b      	strh	r3, [r7, #18]
 80064b0:	8a7b      	ldrh	r3, [r7, #18]
 80064b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <USB_DeactivateEndpoint+0xf6>
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d0:	823b      	strh	r3, [r7, #16]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	8a3b      	ldrh	r3, [r7, #16]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	81fb      	strh	r3, [r7, #14]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
 800652a:	e14d      	b.n	80067c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 80a5 	bne.w	8006680 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	843b      	strh	r3, [r7, #32]
 8006544:	8c3b      	ldrh	r3, [r7, #32]
 8006546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01b      	beq.n	8006586 <USB_DeactivateEndpoint+0x18a>
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006564:	83fb      	strh	r3, [r7, #30]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	8bfb      	ldrh	r3, [r7, #30]
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800657e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	83bb      	strh	r3, [r7, #28]
 8006594:	8bbb      	ldrh	r3, [r7, #28]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01b      	beq.n	80065d6 <USB_DeactivateEndpoint+0x1da>
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b4:	837b      	strh	r3, [r7, #26]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	8b7b      	ldrh	r3, [r7, #26]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ec:	833b      	strh	r3, [r7, #24]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	8b3b      	ldrh	r3, [r7, #24]
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	82fb      	strh	r3, [r7, #22]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	8afb      	ldrh	r3, [r7, #22]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800663e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800665c:	82bb      	strh	r3, [r7, #20]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	8abb      	ldrh	r3, [r7, #20]
 800666a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667a:	b29b      	uxth	r3, r3
 800667c:	8013      	strh	r3, [r2, #0]
 800667e:	e0a3      	b.n	80067c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800668e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <USB_DeactivateEndpoint+0x2d4>
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80066de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01b      	beq.n	8006720 <USB_DeactivateEndpoint+0x324>
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006718:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3734      	adds	r7, #52	@ 0x34
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b0c2      	sub	sp, #264	@ 0x108
 80067da:	af00      	add	r7, sp, #0
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e4:	6018      	str	r0, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	f040 86b7 	bne.w	8007570 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	d908      	bls.n	8006830 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800681e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800682e:	e007      	b.n	8006840 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	7b1b      	ldrb	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d13a      	bne.n	80068c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6959      	ldr	r1, [r3, #20]
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	88da      	ldrh	r2, [r3, #6]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	b29b      	uxth	r3, r3
 800686e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006872:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	f001 fc8d 	bl	8008196 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006896:	b29b      	uxth	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	00da      	lsls	r2, r3, #3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4413      	add	r3, r2
 80068b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	f000 be1f 	b.w	8007504 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	78db      	ldrb	r3, [r3, #3]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	f040 8462 	bne.w	800719c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1a      	ldr	r2, [r3, #32]
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	f240 83df 	bls.w	80070b4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006946:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800694a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a1a      	ldr	r2, [r3, #32]
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 81c7 	beq.w	8006d26 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d177      	bne.n	8006aa4 <USB_EPStartXfer+0x2ce>
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d4:	4413      	add	r3, r2
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00da      	lsls	r2, r3, #3
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	4413      	add	r3, r2
 80069ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <USB_EPStartXfer+0x248>
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e067      	b.n	8006aee <USB_EPStartXfer+0x318>
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a24:	d81c      	bhi.n	8006a60 <USB_EPStartXfer+0x28a>
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <USB_EPStartXfer+0x270>
 8006a3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	029b      	lsls	r3, r3, #10
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e046      	b.n	8006aee <USB_EPStartXfer+0x318>
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <USB_EPStartXfer+0x2aa>
 8006a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4313      	orrs	r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	e024      	b.n	8006aee <USB_EPStartXfer+0x318>
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d11c      	bne.n	8006aee <USB_EPStartXfer+0x318>
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	4413      	add	r3, r2
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	895b      	ldrh	r3, [r3, #10]
 8006afa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6959      	ldr	r1, [r3, #20]
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f001 fb3a 	bl	8008196 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695a      	ldr	r2, [r3, #20]
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	441a      	add	r2, r3
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d90f      	bls.n	8006b7c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	621a      	str	r2, [r3, #32]
 8006b7a:	e00e      	b.n	8006b9a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d177      	bne.n	8006c9a <USB_EPStartXfer+0x4c4>
 8006baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	4413      	add	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00da      	lsls	r2, r3, #3
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	4413      	add	r3, r2
 8006be0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <USB_EPStartXfer+0x43e>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e06d      	b.n	8006cf0 <USB_EPStartXfer+0x51a>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c1a:	d81c      	bhi.n	8006c56 <USB_EPStartXfer+0x480>
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <USB_EPStartXfer+0x466>
 8006c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c36:	3301      	adds	r3, #1
 8006c38:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e04c      	b.n	8006cf0 <USB_EPStartXfer+0x51a>
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <USB_EPStartXfer+0x4a0>
 8006c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c70:	3b01      	subs	r3, #1
 8006c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e02a      	b.n	8006cf0 <USB_EPStartXfer+0x51a>
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d122      	bne.n	8006cf0 <USB_EPStartXfer+0x51a>
 8006caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	4413      	add	r3, r2
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	00da      	lsls	r2, r3, #3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	891b      	ldrh	r3, [r3, #8]
 8006cfc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6959      	ldr	r1, [r3, #20]
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d1e:	6800      	ldr	r0, [r0, #0]
 8006d20:	f001 fa39 	bl	8008196 <USB_WritePMA>
 8006d24:	e3ee      	b.n	8007504 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d177      	bne.n	8006e26 <USB_EPStartXfer+0x650>
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d56:	4413      	add	r3, r2
 8006d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	00da      	lsls	r2, r3, #3
 8006d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <USB_EPStartXfer+0x5ca>
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e06d      	b.n	8006e7c <USB_EPStartXfer+0x6a6>
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006da6:	d81c      	bhi.n	8006de2 <USB_EPStartXfer+0x60c>
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <USB_EPStartXfer+0x5f2>
 8006dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	029b      	lsls	r3, r3, #10
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e04c      	b.n	8006e7c <USB_EPStartXfer+0x6a6>
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USB_EPStartXfer+0x62c>
 8006df8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	029b      	lsls	r3, r3, #10
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e02a      	b.n	8006e7c <USB_EPStartXfer+0x6a6>
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d122      	bne.n	8006e7c <USB_EPStartXfer+0x6a6>
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e56:	4413      	add	r3, r2
 8006e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	00da      	lsls	r2, r3, #3
 8006e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	891b      	ldrh	r3, [r3, #8]
 8006e88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6959      	ldr	r1, [r3, #20]
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ea2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ea6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	f001 f973 	bl	8008196 <USB_WritePMA>
            ep->xfer_buff += len;
 8006eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	441a      	add	r2, r3
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d90f      	bls.n	8006f0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	621a      	str	r2, [r3, #32]
 8006f08:	e00e      	b.n	8006f28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d177      	bne.n	8007034 <USB_EPStartXfer+0x85e>
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	4413      	add	r3, r2
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00da      	lsls	r2, r3, #3
 8006f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <USB_EPStartXfer+0x7d8>
 8006f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e067      	b.n	800707e <USB_EPStartXfer+0x8a8>
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fb4:	d81c      	bhi.n	8006ff0 <USB_EPStartXfer+0x81a>
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <USB_EPStartXfer+0x800>
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e046      	b.n	800707e <USB_EPStartXfer+0x8a8>
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <USB_EPStartXfer+0x83a>
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700a:	3b01      	subs	r3, #1
 800700c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29a      	uxth	r2, r3
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	b29b      	uxth	r3, r3
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	b29b      	uxth	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702c:	b29a      	uxth	r2, r3
 800702e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e024      	b.n	800707e <USB_EPStartXfer+0x8a8>
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d11c      	bne.n	800707e <USB_EPStartXfer+0x8a8>
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007052:	b29b      	uxth	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	4413      	add	r3, r2
 800705a:	643b      	str	r3, [r7, #64]	@ 0x40
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	00da      	lsls	r2, r3, #3
 800706a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706c:	4413      	add	r3, r2
 800706e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007078:	b29a      	uxth	r2, r3
 800707a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	895b      	ldrh	r3, [r3, #10]
 800708a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6959      	ldr	r1, [r3, #20]
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070ac:	6800      	ldr	r0, [r0, #0]
 80070ae:	f001 f872 	bl	8008196 <USB_WritePMA>
 80070b2:	e227      	b.n	8007504 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800710c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711c:	b29b      	uxth	r3, r3
 800711e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007140:	4413      	add	r3, r2
 8007142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	00da      	lsls	r2, r3, #3
 8007152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007154:	4413      	add	r3, r2
 8007156:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800715a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	b29a      	uxth	r2, r3
 8007162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	891b      	ldrh	r3, [r3, #8]
 8007172:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6959      	ldr	r1, [r3, #20]
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007186:	b29b      	uxth	r3, r3
 8007188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800718c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007190:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007194:	6800      	ldr	r0, [r0, #0]
 8007196:	f000 fffe 	bl	8008196 <USB_WritePMA>
 800719a:	e1b3      	b.n	8007504 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80c6 	beq.w	800736e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d177      	bne.n	80072ee <USB_EPStartXfer+0xb18>
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800721e:	4413      	add	r3, r2
 8007220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007232:	4413      	add	r3, r2
 8007234:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007238:	667b      	str	r3, [r7, #100]	@ 0x64
 800723a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007244:	b29a      	uxth	r2, r3
 8007246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <USB_EPStartXfer+0xa92>
 8007252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007260:	b29a      	uxth	r2, r3
 8007262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e067      	b.n	8007338 <USB_EPStartXfer+0xb62>
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	2b3e      	cmp	r3, #62	@ 0x3e
 800726e:	d81c      	bhi.n	80072aa <USB_EPStartXfer+0xad4>
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <USB_EPStartXfer+0xaba>
 8007286:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800728a:	3301      	adds	r3, #1
 800728c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	e046      	b.n	8007338 <USB_EPStartXfer+0xb62>
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <USB_EPStartXfer+0xaf4>
 80072c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072c4:	3b01      	subs	r3, #1
 80072c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e024      	b.n	8007338 <USB_EPStartXfer+0xb62>
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d11c      	bne.n	8007338 <USB_EPStartXfer+0xb62>
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007312:	4413      	add	r3, r2
 8007314:	673b      	str	r3, [r7, #112]	@ 0x70
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	00da      	lsls	r2, r3, #3
 8007324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007326:	4413      	add	r3, r2
 8007328:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800732c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007332:	b29a      	uxth	r2, r3
 8007334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007336:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	895b      	ldrh	r3, [r3, #10]
 8007344:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6959      	ldr	r1, [r3, #20]
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	b29b      	uxth	r3, r3
 800735a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800735e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007362:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007366:	6800      	ldr	r0, [r0, #0]
 8007368:	f000 ff15 	bl	8008196 <USB_WritePMA>
 800736c:	e0ca      	b.n	8007504 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d177      	bne.n	800746e <USB_EPStartXfer+0xc98>
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800739e:	4413      	add	r3, r2
 80073a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	00da      	lsls	r2, r3, #3
 80073b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <USB_EPStartXfer+0xc12>
 80073d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	e073      	b.n	80074d0 <USB_EPStartXfer+0xcfa>
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ee:	d81c      	bhi.n	800742a <USB_EPStartXfer+0xc54>
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <USB_EPStartXfer+0xc3a>
 8007406:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800740a:	3301      	adds	r3, #1
 800740c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29a      	uxth	r2, r3
 8007416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800741a:	b29b      	uxth	r3, r3
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	b29b      	uxth	r3, r3
 8007420:	4313      	orrs	r3, r2
 8007422:	b29a      	uxth	r2, r3
 8007424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	e052      	b.n	80074d0 <USB_EPStartXfer+0xcfa>
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USB_EPStartXfer+0xc74>
 8007440:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007444:	3b01      	subs	r3, #1
 8007446:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800744a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29a      	uxth	r2, r3
 8007450:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007454:	b29b      	uxth	r3, r3
 8007456:	029b      	lsls	r3, r3, #10
 8007458:	b29b      	uxth	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e030      	b.n	80074d0 <USB_EPStartXfer+0xcfa>
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d128      	bne.n	80074d0 <USB_EPStartXfer+0xcfa>
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074a2:	4413      	add	r3, r2
 80074a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	00da      	lsls	r2, r3, #3
 80074b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074ba:	4413      	add	r3, r2
 80074bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	891b      	ldrh	r3, [r3, #8]
 80074dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6959      	ldr	r1, [r3, #20]
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	f000 fe49 	bl	8008196 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800752a:	817b      	strh	r3, [r7, #10]
 800752c:	897b      	ldrh	r3, [r7, #10]
 800752e:	f083 0310 	eor.w	r3, r3, #16
 8007532:	817b      	strh	r3, [r7, #10]
 8007534:	897b      	ldrh	r3, [r7, #10]
 8007536:	f083 0320 	eor.w	r3, r3, #32
 800753a:	817b      	strh	r3, [r7, #10]
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	441a      	add	r2, r3
 8007556:	897b      	ldrh	r3, [r7, #10]
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]
 800756c:	f000 bcdf 	b.w	8007f2e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	7b1b      	ldrb	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 80bc 	bne.w	80076fa <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	429a      	cmp	r2, r3
 800759c:	d917      	bls.n	80075ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	619a      	str	r2, [r3, #24]
 80075cc:	e00e      	b.n	80075ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80075ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80075de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007608:	b29b      	uxth	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007610:	4413      	add	r3, r2
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	00da      	lsls	r2, r3, #3
 8007624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007628:	4413      	add	r3, r2
 800762a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800762e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10d      	bne.n	800766a <USB_EPStartXfer+0xe94>
 800764e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	f000 bc28 	b.w	8007eba <USB_EPStartXfer+0x16e4>
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007670:	d81f      	bhi.n	80076b2 <USB_EPStartXfer+0xedc>
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <USB_EPStartXfer+0xebc>
 8007688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800768c:	3301      	adds	r3, #1
 800768e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800769e:	b29b      	uxth	r3, r3
 80076a0:	029b      	lsls	r3, r3, #10
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	f000 bc04 	b.w	8007eba <USB_EPStartXfer+0x16e4>
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <USB_EPStartXfer+0xefc>
 80076c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076de:	b29b      	uxth	r3, r3
 80076e0:	029b      	lsls	r3, r3, #10
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	e3df      	b.n	8007eba <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	78db      	ldrb	r3, [r3, #3]
 8007706:	2b02      	cmp	r3, #2
 8007708:	f040 8218 	bne.w	8007b3c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 809d 	bne.w	8007858 <USB_EPStartXfer+0x1082>
 800771e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007742:	4413      	add	r3, r2
 8007744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	00da      	lsls	r2, r3, #3
 8007756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800775a:	4413      	add	r3, r2
 800775c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <USB_EPStartXfer+0xfcc>
 8007788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007798:	b29a      	uxth	r2, r3
 800779a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e08f      	b.n	80078c2 <USB_EPStartXfer+0x10ec>
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80077b0:	d826      	bhi.n	8007800 <USB_EPStartXfer+0x102a>
 80077b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <USB_EPStartXfer+0x100c>
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077dc:	3301      	adds	r3, #1
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	e060      	b.n	80078c2 <USB_EPStartXfer+0x10ec>
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	095b      	lsrs	r3, r3, #5
 800780e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2b00      	cmp	r3, #0
 8007824:	d104      	bne.n	8007830 <USB_EPStartXfer+0x105a>
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782a:	3b01      	subs	r3, #1
 800782c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783c:	b29b      	uxth	r3, r3
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	e034      	b.n	80078c2 <USB_EPStartXfer+0x10ec>
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d12c      	bne.n	80078c2 <USB_EPStartXfer+0x10ec>
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800788c:	4413      	add	r3, r2
 800788e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	00da      	lsls	r2, r3, #3
 80078a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078a4:	4413      	add	r3, r2
 80078a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 809d 	bne.w	8007a1c <USB_EPStartXfer+0x1246>
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007906:	4413      	add	r3, r2
 8007908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	00da      	lsls	r2, r3, #3
 800791a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800791e:	4413      	add	r3, r2
 8007920:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <USB_EPStartXfer+0x1190>
 800794c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795c:	b29a      	uxth	r2, r3
 800795e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007962:	801a      	strh	r2, [r3, #0]
 8007964:	e088      	b.n	8007a78 <USB_EPStartXfer+0x12a2>
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b3e      	cmp	r3, #62	@ 0x3e
 8007974:	d826      	bhi.n	80079c4 <USB_EPStartXfer+0x11ee>
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <USB_EPStartXfer+0x11d0>
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	3301      	adds	r3, #1
 80079a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	029b      	lsls	r3, r3, #10
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4313      	orrs	r3, r2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e059      	b.n	8007a78 <USB_EPStartXfer+0x12a2>
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <USB_EPStartXfer+0x121e>
 80079ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ee:	3b01      	subs	r3, #1
 80079f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e02d      	b.n	8007a78 <USB_EPStartXfer+0x12a2>
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d125      	bne.n	8007a78 <USB_EPStartXfer+0x12a2>
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a42:	4413      	add	r3, r2
 8007a44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8218 	beq.w	8007eba <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aaa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <USB_EPStartXfer+0x12ec>
 8007ab6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ac2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 81f5 	bne.w	8007eba <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ad0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f040 81ee 	bne.w	8007eba <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b04:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	8013      	strh	r3, [r2, #0]
 8007b3a:	e1be      	b.n	8007eba <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	78db      	ldrb	r3, [r3, #3]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 81b4 	bne.w	8007eb6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d917      	bls.n	8007b9a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	619a      	str	r2, [r3, #24]
 8007b98:	e00e      	b.n	8007bb8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 8085 	bne.w	8007cd4 <USB_EPStartXfer+0x14fe>
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bee:	4413      	add	r3, r2
 8007bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	00da      	lsls	r2, r3, #3
 8007c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c06:	4413      	add	r3, r2
 8007c08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <USB_EPStartXfer+0x1470>
 8007c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e077      	b.n	8007d36 <USB_EPStartXfer+0x1560>
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c4c:	d81e      	bhi.n	8007c8c <USB_EPStartXfer+0x14b6>
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <USB_EPStartXfer+0x1498>
 8007c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c68:	3301      	adds	r3, #1
 8007c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	e054      	b.n	8007d36 <USB_EPStartXfer+0x1560>
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <USB_EPStartXfer+0x14d6>
 8007ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	029b      	lsls	r3, r3, #10
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e030      	b.n	8007d36 <USB_EPStartXfer+0x1560>
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d128      	bne.n	8007d36 <USB_EPStartXfer+0x1560>
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d08:	4413      	add	r3, r2
 8007d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	00da      	lsls	r2, r3, #3
 8007d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d34:	801a      	strh	r2, [r3, #0]
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f040 8085 	bne.w	8007e60 <USB_EPStartXfer+0x168a>
 8007d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	00da      	lsls	r2, r3, #3
 8007d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d92:	4413      	add	r3, r2
 8007d94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10c      	bne.n	8007dd2 <USB_EPStartXfer+0x15fc>
 8007db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e073      	b.n	8007eba <USB_EPStartXfer+0x16e4>
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dd8:	d81e      	bhi.n	8007e18 <USB_EPStartXfer+0x1642>
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <USB_EPStartXfer+0x1624>
 8007df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df4:	3301      	adds	r3, #1
 8007df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e050      	b.n	8007eba <USB_EPStartXfer+0x16e4>
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USB_EPStartXfer+0x1662>
 8007e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e32:	3b01      	subs	r3, #1
 8007e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e02c      	b.n	8007eba <USB_EPStartXfer+0x16e4>
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d124      	bne.n	8007eba <USB_EPStartXfer+0x16e4>
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e86:	4413      	add	r3, r2
 8007e88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	00da      	lsls	r2, r3, #3
 8007e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e001      	b.n	8007eba <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e03a      	b.n	8007f30 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ee8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007eec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ef4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ef8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d020      	beq.n	8007f8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f62:	81bb      	strh	r3, [r7, #12]
 8007f64:	89bb      	ldrh	r3, [r7, #12]
 8007f66:	f083 0310 	eor.w	r3, r3, #16
 8007f6a:	81bb      	strh	r3, [r7, #12]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	441a      	add	r2, r3
 8007f76:	89bb      	ldrh	r3, [r7, #12]
 8007f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	8013      	strh	r3, [r2, #0]
 8007f8c:	e01f      	b.n	8007fce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa4:	81fb      	strh	r3, [r7, #14]
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
 8007fa8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fac:	81fb      	strh	r3, [r7, #14]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	89fb      	ldrh	r3, [r7, #14]
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	7b1b      	ldrb	r3, [r3, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f040 809d 	bne.w	800812a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d04c      	beq.n	8008092 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	823b      	strh	r3, [r7, #16]
 8008006:	8a3b      	ldrh	r3, [r7, #16]
 8008008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <USB_EPClearStall+0x6c>
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008026:	81fb      	strh	r3, [r7, #14]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	441a      	add	r2, r3
 8008032:	89fb      	ldrh	r3, [r7, #14]
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800803c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008040:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	78db      	ldrb	r3, [r3, #3]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d06c      	beq.n	800812a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008066:	81bb      	strh	r3, [r7, #12]
 8008068:	89bb      	ldrh	r3, [r7, #12]
 800806a:	f083 0320 	eor.w	r3, r3, #32
 800806e:	81bb      	strh	r3, [r7, #12]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	441a      	add	r2, r3
 800807a:	89bb      	ldrh	r3, [r7, #12]
 800807c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808c:	b29b      	uxth	r3, r3
 800808e:	8013      	strh	r3, [r2, #0]
 8008090:	e04b      	b.n	800812a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	82fb      	strh	r3, [r7, #22]
 80080a0:	8afb      	ldrh	r3, [r7, #22]
 80080a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01b      	beq.n	80080e2 <USB_EPClearStall+0x106>
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c0:	82bb      	strh	r3, [r7, #20]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	441a      	add	r2, r3
 80080cc:	8abb      	ldrh	r3, [r7, #20]
 80080ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080de:	b29b      	uxth	r3, r3
 80080e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f8:	827b      	strh	r3, [r7, #18]
 80080fa:	8a7b      	ldrh	r3, [r7, #18]
 80080fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008100:	827b      	strh	r3, [r7, #18]
 8008102:	8a7b      	ldrh	r3, [r7, #18]
 8008104:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008108:	827b      	strh	r3, [r7, #18]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	441a      	add	r2, r3
 8008114:	8a7b      	ldrh	r3, [r7, #18]
 8008116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800811a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800811e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	b29b      	uxth	r3, r3
 8008128:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2280      	movs	r2, #128	@ 0x80
 800814e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008184:	b29b      	uxth	r3, r3
 8008186:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008188:	68fb      	ldr	r3, [r7, #12]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008196:	b480      	push	{r7}
 8008198:	b08b      	sub	sp, #44	@ 0x2c
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	4611      	mov	r1, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	460b      	mov	r3, r1
 80081a6:	80fb      	strh	r3, [r7, #6]
 80081a8:	4613      	mov	r3, r2
 80081aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081ac:	88bb      	ldrh	r3, [r7, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081bc:	88fa      	ldrh	r2, [r7, #6]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80081cc:	e01b      	b.n	8008206 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	3301      	adds	r3, #1
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b21a      	sxth	r2, r3
 80081de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	8a7a      	ldrh	r2, [r7, #18]
 80081ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	3302      	adds	r3, #2
 80081f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3301      	adds	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	3301      	adds	r3, #1
 80081fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	3b01      	subs	r3, #1
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e0      	bne.n	80081ce <USB_WritePMA+0x38>
  }
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	372c      	adds	r7, #44	@ 0x2c
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800821a:	b480      	push	{r7}
 800821c:	b08b      	sub	sp, #44	@ 0x2c
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	4611      	mov	r1, r2
 8008226:	461a      	mov	r2, r3
 8008228:	460b      	mov	r3, r1
 800822a:	80fb      	strh	r3, [r7, #6]
 800822c:	4613      	mov	r3, r2
 800822e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008230:	88bb      	ldrh	r3, [r7, #4]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008240:	88fa      	ldrh	r2, [r7, #6]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800824a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008250:	e018      	b.n	8008284 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	3302      	adds	r3, #2
 800825e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	b2da      	uxtb	r2, r3
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	3301      	adds	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	3b01      	subs	r3, #1
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e3      	bne.n	8008252 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800828a:	88bb      	ldrh	r3, [r7, #4]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d007      	beq.n	80082a6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	701a      	strb	r2, [r3, #0]
  }
}
 80082a6:	bf00      	nop
 80082a8:	372c      	adds	r7, #44	@ 0x2c
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7c1b      	ldrb	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d115      	bne.n	80082f6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ce:	2202      	movs	r2, #2
 80082d0:	2181      	movs	r1, #129	@ 0x81
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fe97 	bl	800a006 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082e2:	2202      	movs	r2, #2
 80082e4:	2101      	movs	r1, #1
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fe8d 	bl	800a006 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80082f4:	e012      	b.n	800831c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082f6:	2340      	movs	r3, #64	@ 0x40
 80082f8:	2202      	movs	r2, #2
 80082fa:	2181      	movs	r1, #129	@ 0x81
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fe82 	bl	800a006 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008308:	2340      	movs	r3, #64	@ 0x40
 800830a:	2202      	movs	r2, #2
 800830c:	2101      	movs	r1, #1
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fe79 	bl	800a006 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800831c:	2308      	movs	r3, #8
 800831e:	2203      	movs	r2, #3
 8008320:	2182      	movs	r1, #130	@ 0x82
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fe6f 	bl	800a006 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800832e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008332:	f001 ff8f 	bl	800a254 <USBD_static_malloc>
 8008336:	4602      	mov	r2, r0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e026      	b.n	800839c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008354:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7c1b      	ldrb	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800837e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008382:	2101      	movs	r1, #1
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 ff2f 	bl	800a1e8 <USBD_LL_PrepareReceive>
 800838a:	e007      	b.n	800839c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008392:	2340      	movs	r3, #64	@ 0x40
 8008394:	2101      	movs	r1, #1
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 ff26 	bl	800a1e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083b6:	2181      	movs	r1, #129	@ 0x81
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 fe4a 	bl	800a052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083c4:	2101      	movs	r1, #1
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fe43 	bl	800a052 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083d4:	2182      	movs	r1, #130	@ 0x82
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fe3b 	bl	800a052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 ff37 	bl	800a270 <USBD_static_free>
    pdev->pClassData = NULL;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008424:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800843a:	2b00      	cmp	r3, #0
 800843c:	d039      	beq.n	80084b2 <USBD_CDC_Setup+0x9e>
 800843e:	2b20      	cmp	r3, #32
 8008440:	d17f      	bne.n	8008542 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d029      	beq.n	800849e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b25b      	sxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	da11      	bge.n	8008478 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008460:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	88d2      	ldrh	r2, [r2, #6]
 8008466:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008468:	6939      	ldr	r1, [r7, #16]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	461a      	mov	r2, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fa0f 	bl	8009894 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008476:	e06b      	b.n	8008550 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	785a      	ldrb	r2, [r3, #1]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	88db      	ldrh	r3, [r3, #6]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800848e:	6939      	ldr	r1, [r7, #16]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	88db      	ldrh	r3, [r3, #6]
 8008494:	461a      	mov	r2, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fa2a 	bl	80098f0 <USBD_CtlPrepareRx>
      break;
 800849c:	e058      	b.n	8008550 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	7850      	ldrb	r0, [r2, #1]
 80084aa:	2200      	movs	r2, #0
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	4798      	blx	r3
      break;
 80084b0:	e04e      	b.n	8008550 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b0b      	cmp	r3, #11
 80084b8:	d02e      	beq.n	8008518 <USBD_CDC_Setup+0x104>
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	dc38      	bgt.n	8008530 <USBD_CDC_Setup+0x11c>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <USBD_CDC_Setup+0xb4>
 80084c2:	2b0a      	cmp	r3, #10
 80084c4:	d014      	beq.n	80084f0 <USBD_CDC_Setup+0xdc>
 80084c6:	e033      	b.n	8008530 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d107      	bne.n	80084e2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	2202      	movs	r2, #2
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 f9da 	bl	8009894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084e0:	e02e      	b.n	8008540 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f96a 	bl	80097be <USBD_CtlError>
            ret = USBD_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	75fb      	strb	r3, [r7, #23]
          break;
 80084ee:	e027      	b.n	8008540 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d107      	bne.n	800850a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084fa:	f107 030f 	add.w	r3, r7, #15
 80084fe:	2201      	movs	r2, #1
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f9c6 	bl	8009894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008508:	e01a      	b.n	8008540 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 f956 	bl	80097be <USBD_CtlError>
            ret = USBD_FAIL;
 8008512:	2302      	movs	r3, #2
 8008514:	75fb      	strb	r3, [r7, #23]
          break;
 8008516:	e013      	b.n	8008540 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851e:	2b03      	cmp	r3, #3
 8008520:	d00d      	beq.n	800853e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f94a 	bl	80097be <USBD_CtlError>
            ret = USBD_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800852e:	e006      	b.n	800853e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 f943 	bl	80097be <USBD_CtlError>
          ret = USBD_FAIL;
 8008538:	2302      	movs	r3, #2
 800853a:	75fb      	strb	r3, [r7, #23]
          break;
 800853c:	e000      	b.n	8008540 <USBD_CDC_Setup+0x12c>
          break;
 800853e:	bf00      	nop
      }
      break;
 8008540:	e006      	b.n	8008550 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f93a 	bl	80097be <USBD_CtlError>
      ret = USBD_FAIL;
 800854a:	2302      	movs	r3, #2
 800854c:	75fb      	strb	r3, [r7, #23]
      break;
 800854e:	bf00      	nop
  }

  return ret;
 8008550:	7dfb      	ldrb	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008574:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d03a      	beq.n	80085f6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	331c      	adds	r3, #28
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d029      	beq.n	80085ea <USBD_CDC_DataIn+0x90>
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	331c      	adds	r3, #28
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	78f9      	ldrb	r1, [r7, #3]
 80085aa:	68b8      	ldr	r0, [r7, #8]
 80085ac:	460b      	mov	r3, r1
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	4403      	add	r3, r0
 80085b6:	3320      	adds	r3, #32
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	fbb2 f1f3 	udiv	r1, r2, r3
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d110      	bne.n	80085ea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	331c      	adds	r3, #28
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085dc:	78f9      	ldrb	r1, [r7, #3]
 80085de:	2300      	movs	r3, #0
 80085e0:	2200      	movs	r2, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fddd 	bl	800a1a2 <USBD_LL_Transmit>
 80085e8:	e003      	b.n	80085f2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fe08 	bl	800a22e <USBD_LL_GetRxDataSize>
 800861e:	4602      	mov	r2, r0
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00d      	beq.n	800864c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008644:	4611      	mov	r1, r2
 8008646:	4798      	blx	r3

    return USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008664:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800866c:	2b00      	cmp	r3, #0
 800866e:	d014      	beq.n	800869a <USBD_CDC_EP0_RxReady+0x44>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008676:	2bff      	cmp	r3, #255	@ 0xff
 8008678:	d00f      	beq.n	800869a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008688:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008690:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	22ff      	movs	r2, #255	@ 0xff
 8008696:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2243      	movs	r2, #67	@ 0x43
 80086b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80086b2:	4b03      	ldr	r3, [pc, #12]	@ (80086c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000094 	.word	0x20000094

080086c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2243      	movs	r2, #67	@ 0x43
 80086d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086d2:	4b03      	ldr	r3, [pc, #12]	@ (80086e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	20000050 	.word	0x20000050

080086e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2243      	movs	r2, #67	@ 0x43
 80086f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	@ (8008700 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	200000d8 	.word	0x200000d8

08008704 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	220a      	movs	r2, #10
 8008710:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008712:	4b03      	ldr	r3, [pc, #12]	@ (8008720 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	2000000c 	.word	0x2000000c

08008724 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800872e:	2302      	movs	r3, #2
 8008730:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008752:	b480      	push	{r7}
 8008754:	b087      	sub	sp, #28
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008766:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008770:	88fa      	ldrh	r2, [r7, #6]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008796:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01c      	beq.n	8008802 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d115      	bne.n	80087fe <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2181      	movs	r1, #129	@ 0x81
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fcd4 	bl	800a1a2 <USBD_LL_Transmit>

      return USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	e002      	b.n	8008804 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008802:	2302      	movs	r3, #2
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d017      	beq.n	8008856 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7c1b      	ldrb	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008838:	2101      	movs	r1, #1
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 fcd4 	bl	800a1e8 <USBD_LL_PrepareReceive>
 8008840:	e007      	b.n	8008852 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008848:	2340      	movs	r3, #64	@ 0x40
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fccb 	bl	800a1e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008874:	2302      	movs	r3, #2
 8008876:	e01a      	b.n	80088ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f001 fb36 	bl	8009f18 <USBD_LL_Init>

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d006      	beq.n	80088d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
 80088d6:	e001      	b.n	80088dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088d8:	2302      	movs	r3, #2
 80088da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fb6c 	bl	8009fd0 <USBD_LL_Start>

  return USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008924:	2302      	movs	r3, #2
 8008926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00c      	beq.n	800894c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	4798      	blx	r3
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fedb 	bl	800974a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d016      	beq.n	80089e6 <USBD_LL_SetupStage+0x6a>
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d81c      	bhi.n	80089f6 <USBD_LL_SetupStage+0x7a>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <USBD_LL_SetupStage+0x4a>
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d008      	beq.n	80089d6 <USBD_LL_SetupStage+0x5a>
 80089c4:	e017      	b.n	80089f6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9ce 	bl	8008d70 <USBD_StdDevReq>
      break;
 80089d4:	e01a      	b.n	8008a0c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa30 	bl	8008e44 <USBD_StdItfReq>
      break;
 80089e4:	e012      	b.n	8008a0c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa70 	bl	8008ed4 <USBD_StdEPReq>
      break;
 80089f4:	e00a      	b.n	8008a0c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fb43 	bl	800a090 <USBD_LL_StallEP>
      break;
 8008a0a:	bf00      	nop
  }

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b086      	sub	sp, #24
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d14b      	bne.n	8008ac2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d134      	bne.n	8008aa6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d919      	bls.n	8008a7c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	1ad2      	subs	r2, r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d203      	bcs.n	8008a6a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	e002      	b.n	8008a70 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 ff59 	bl	800992c <USBD_CtlContinueRx>
 8008a7a:	e038      	b.n	8008aee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d105      	bne.n	8008a9e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 ff56 	bl	8009950 <USBD_CtlSendStatus>
 8008aa4:	e023      	b.n	8008aee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	d11e      	bne.n	8008aee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ab8:	2100      	movs	r1, #0
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f001 fae8 	bl	800a090 <USBD_LL_StallEP>
 8008ac0:	e015      	b.n	8008aee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d108      	bne.n	8008aea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	7afa      	ldrb	r2, [r7, #11]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	4798      	blx	r3
 8008ae8:	e001      	b.n	8008aee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008aea:	2302      	movs	r3, #2
 8008aec:	e000      	b.n	8008af0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	460b      	mov	r3, r1
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d17f      	bne.n	8008c0c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3314      	adds	r3, #20
 8008b10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d15c      	bne.n	8008bd6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d915      	bls.n	8008b54 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fec3 	bl	80098cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f001 fb4b 	bl	800a1e8 <USBD_LL_PrepareReceive>
 8008b52:	e04e      	b.n	8008bf2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	6912      	ldr	r2, [r2, #16]
 8008b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b60:	fb01 f202 	mul.w	r2, r1, r2
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d11c      	bne.n	8008ba4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d316      	bcc.n	8008ba4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d20f      	bcs.n	8008ba4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fe9f 	bl	80098cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b96:	2300      	movs	r3, #0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 fb23 	bl	800a1e8 <USBD_LL_PrepareReceive>
 8008ba2:	e026      	b.n	8008bf2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d105      	bne.n	8008bc6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fa61 	bl	800a090 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fed1 	bl	8009976 <USBD_CtlReceiveStatus>
 8008bd4:	e00d      	b.n	8008bf2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d004      	beq.n	8008bea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bea:	2180      	movs	r1, #128	@ 0x80
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f001 fa4f 	bl	800a090 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d11d      	bne.n	8008c38 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7ff fe80 	bl	8008902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c0a:	e015      	b.n	8008c38 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00d      	beq.n	8008c34 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d108      	bne.n	8008c34 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	7afa      	ldrb	r2, [r7, #11]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	4798      	blx	r3
 8008c32:	e001      	b.n	8008c38 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c34:	2302      	movs	r3, #2
 8008c36:	e000      	b.n	8008c3a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c4a:	2340      	movs	r3, #64	@ 0x40
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f9d8 	bl	800a006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2240      	movs	r2, #64	@ 0x40
 8008c62:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c66:	2340      	movs	r3, #64	@ 0x40
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2180      	movs	r1, #128	@ 0x80
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f9ca 	bl	800a006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2240      	movs	r2, #64	@ 0x40
 8008c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d009      	beq.n	8008cba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6852      	ldr	r2, [r2, #4]
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3
  }

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d105      	bne.n	8008d2c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d10b      	bne.n	8008d64 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d86:	2b40      	cmp	r3, #64	@ 0x40
 8008d88:	d005      	beq.n	8008d96 <USBD_StdDevReq+0x26>
 8008d8a:	2b40      	cmp	r3, #64	@ 0x40
 8008d8c:	d84f      	bhi.n	8008e2e <USBD_StdDevReq+0xbe>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <USBD_StdDevReq+0x36>
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d14b      	bne.n	8008e2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
      break;
 8008da4:	e048      	b.n	8008e38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d839      	bhi.n	8008e22 <USBD_StdDevReq+0xb2>
 8008dae:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <USBD_StdDevReq+0x44>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008e05 	.word	0x08008e05
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	08008e23 	.word	0x08008e23
 8008dc0:	08008e0f 	.word	0x08008e0f
 8008dc4:	08008e23 	.word	0x08008e23
 8008dc8:	08008de7 	.word	0x08008de7
 8008dcc:	08008ddd 	.word	0x08008ddd
 8008dd0:	08008e23 	.word	0x08008e23
 8008dd4:	08008dfb 	.word	0x08008dfb
 8008dd8:	08008df1 	.word	0x08008df1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f9dc 	bl	800919c <USBD_GetDescriptor>
          break;
 8008de4:	e022      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb3f 	bl	800946c <USBD_SetAddress>
          break;
 8008dee:	e01d      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb7e 	bl	80094f4 <USBD_SetConfig>
          break;
 8008df8:	e018      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc07 	bl	8009610 <USBD_GetConfig>
          break;
 8008e02:	e013      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fc37 	bl	800967a <USBD_GetStatus>
          break;
 8008e0c:	e00e      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fc65 	bl	80096e0 <USBD_SetFeature>
          break;
 8008e16:	e009      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fc74 	bl	8009708 <USBD_ClrFeature>
          break;
 8008e20:	e004      	b.n	8008e2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fcca 	bl	80097be <USBD_CtlError>
          break;
 8008e2a:	bf00      	nop
      }
      break;
 8008e2c:	e004      	b.n	8008e38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fcc4 	bl	80097be <USBD_CtlError>
      break;
 8008e36:	bf00      	nop
  }

  return ret;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop

08008e44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e5a:	2b40      	cmp	r3, #64	@ 0x40
 8008e5c:	d005      	beq.n	8008e6a <USBD_StdItfReq+0x26>
 8008e5e:	2b40      	cmp	r3, #64	@ 0x40
 8008e60:	d82e      	bhi.n	8008ec0 <USBD_StdItfReq+0x7c>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <USBD_StdItfReq+0x26>
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d12a      	bne.n	8008ec0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	3b01      	subs	r3, #1
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d81d      	bhi.n	8008eb2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	889b      	ldrh	r3, [r3, #4]
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d813      	bhi.n	8008ea8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	88db      	ldrh	r3, [r3, #6]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d110      	bne.n	8008ebc <USBD_StdItfReq+0x78>
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10d      	bne.n	8008ebc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd55 	bl	8009950 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ea6:	e009      	b.n	8008ebc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc87 	bl	80097be <USBD_CtlError>
          break;
 8008eb0:	e004      	b.n	8008ebc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fc82 	bl	80097be <USBD_CtlError>
          break;
 8008eba:	e000      	b.n	8008ebe <USBD_StdItfReq+0x7a>
          break;
 8008ebc:	bf00      	nop
      }
      break;
 8008ebe:	e004      	b.n	8008eca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fc7b 	bl	80097be <USBD_CtlError>
      break;
 8008ec8:	bf00      	nop
  }

  return USBD_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	889b      	ldrh	r3, [r3, #4]
 8008ee6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d007      	beq.n	8008f04 <USBD_StdEPReq+0x30>
 8008ef4:	2b40      	cmp	r3, #64	@ 0x40
 8008ef6:	f200 8146 	bhi.w	8009186 <USBD_StdEPReq+0x2b2>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <USBD_StdEPReq+0x40>
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	f040 8141 	bne.w	8009186 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
      break;
 8008f12:	e13d      	b.n	8009190 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d10a      	bne.n	8008f36 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	e12d      	b.n	8009192 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d007      	beq.n	8008f4e <USBD_StdEPReq+0x7a>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	f300 811b 	bgt.w	800917a <USBD_StdEPReq+0x2a6>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d072      	beq.n	800902e <USBD_StdEPReq+0x15a>
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d03a      	beq.n	8008fc2 <USBD_StdEPReq+0xee>
 8008f4c:	e115      	b.n	800917a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d002      	beq.n	8008f5e <USBD_StdEPReq+0x8a>
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d015      	beq.n	8008f88 <USBD_StdEPReq+0xb4>
 8008f5c:	e02b      	b.n	8008fb6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <USBD_StdEPReq+0xaa>
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b80      	cmp	r3, #128	@ 0x80
 8008f68:	d009      	beq.n	8008f7e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 f88e 	bl	800a090 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f74:	2180      	movs	r1, #128	@ 0x80
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 f88a 	bl	800a090 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f7c:	e020      	b.n	8008fc0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc1c 	bl	80097be <USBD_CtlError>
              break;
 8008f86:	e01b      	b.n	8008fc0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	885b      	ldrh	r3, [r3, #2]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10e      	bne.n	8008fae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <USBD_StdEPReq+0xda>
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b80      	cmp	r3, #128	@ 0x80
 8008f9a:	d008      	beq.n	8008fae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	88db      	ldrh	r3, [r3, #6]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d104      	bne.n	8008fae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f871 	bl	800a090 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fcce 	bl	8009950 <USBD_CtlSendStatus>

              break;
 8008fb4:	e004      	b.n	8008fc0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fc00 	bl	80097be <USBD_CtlError>
              break;
 8008fbe:	bf00      	nop
          }
          break;
 8008fc0:	e0e0      	b.n	8009184 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d002      	beq.n	8008fd2 <USBD_StdEPReq+0xfe>
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d015      	beq.n	8008ffc <USBD_StdEPReq+0x128>
 8008fd0:	e026      	b.n	8009020 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00c      	beq.n	8008ff2 <USBD_StdEPReq+0x11e>
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b80      	cmp	r3, #128	@ 0x80
 8008fdc:	d009      	beq.n	8008ff2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 f854 	bl	800a090 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fe8:	2180      	movs	r1, #128	@ 0x80
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f850 	bl	800a090 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff0:	e01c      	b.n	800902c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fbe2 	bl	80097be <USBD_CtlError>
              break;
 8008ffa:	e017      	b.n	800902c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d112      	bne.n	800902a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f85b 	bl	800a0ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc99 	bl	8009950 <USBD_CtlSendStatus>
              }
              break;
 800901e:	e004      	b.n	800902a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fbcb 	bl	80097be <USBD_CtlError>
              break;
 8009028:	e000      	b.n	800902c <USBD_StdEPReq+0x158>
              break;
 800902a:	bf00      	nop
          }
          break;
 800902c:	e0aa      	b.n	8009184 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009034:	2b02      	cmp	r3, #2
 8009036:	d002      	beq.n	800903e <USBD_StdEPReq+0x16a>
 8009038:	2b03      	cmp	r3, #3
 800903a:	d032      	beq.n	80090a2 <USBD_StdEPReq+0x1ce>
 800903c:	e097      	b.n	800916e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <USBD_StdEPReq+0x180>
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b80      	cmp	r3, #128	@ 0x80
 8009048:	d004      	beq.n	8009054 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fbb6 	bl	80097be <USBD_CtlError>
                break;
 8009052:	e091      	b.n	8009178 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	da0b      	bge.n	8009074 <USBD_StdEPReq+0x1a0>
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	3310      	adds	r3, #16
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	e00b      	b.n	800908c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	3304      	adds	r3, #4
 800908c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2202      	movs	r2, #2
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fbfa 	bl	8009894 <USBD_CtlSendData>
              break;
 80090a0:	e06a      	b.n	8009178 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da11      	bge.n	80090ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	3318      	adds	r3, #24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d117      	bne.n	80090f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fb79 	bl	80097be <USBD_CtlError>
                  break;
 80090cc:	e054      	b.n	8009178 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	f003 020f 	and.w	r2, r3, #15
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	440b      	add	r3, r1
 80090e0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fb66 	bl	80097be <USBD_CtlError>
                  break;
 80090f2:	e041      	b.n	8009178 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da0b      	bge.n	8009114 <USBD_StdEPReq+0x240>
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	3310      	adds	r3, #16
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	e00b      	b.n	800912c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800911a:	4613      	mov	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <USBD_StdEPReq+0x266>
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d103      	bne.n	8009142 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e00e      	b.n	8009160 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 ffe0 	bl	800a10c <USBD_LL_IsStallEP>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2201      	movs	r2, #1
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e002      	b.n	8009160 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2202      	movs	r2, #2
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fb94 	bl	8009894 <USBD_CtlSendData>
              break;
 800916c:	e004      	b.n	8009178 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fb24 	bl	80097be <USBD_CtlError>
              break;
 8009176:	bf00      	nop
          }
          break;
 8009178:	e004      	b.n	8009184 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb1e 	bl	80097be <USBD_CtlError>
          break;
 8009182:	bf00      	nop
      }
      break;
 8009184:	e004      	b.n	8009190 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb18 	bl	80097be <USBD_CtlError>
      break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b06      	cmp	r3, #6
 80091be:	f200 8128 	bhi.w	8009412 <USBD_GetDescriptor+0x276>
 80091c2:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <USBD_GetDescriptor+0x2c>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e5 	.word	0x080091e5
 80091cc:	080091fd 	.word	0x080091fd
 80091d0:	0800923d 	.word	0x0800923d
 80091d4:	08009413 	.word	0x08009413
 80091d8:	08009413 	.word	0x08009413
 80091dc:	080093b3 	.word	0x080093b3
 80091e0:	080093df 	.word	0x080093df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
      break;
 80091fa:	e112      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7c1b      	ldrb	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10d      	bne.n	8009220 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	f107 0208 	add.w	r2, r7, #8
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3301      	adds	r3, #1
 800921a:	2202      	movs	r2, #2
 800921c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800921e:	e100      	b.n	8009422 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	f107 0208 	add.w	r2, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	2202      	movs	r2, #2
 8009238:	701a      	strb	r2, [r3, #0]
      break;
 800923a:	e0f2      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b05      	cmp	r3, #5
 8009244:	f200 80ac 	bhi.w	80093a0 <USBD_GetDescriptor+0x204>
 8009248:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <USBD_GetDescriptor+0xb4>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	08009269 	.word	0x08009269
 8009254:	0800929d 	.word	0x0800929d
 8009258:	080092d1 	.word	0x080092d1
 800925c:	08009305 	.word	0x08009305
 8009260:	08009339 	.word	0x08009339
 8009264:	0800936d 	.word	0x0800936d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928a:	e091      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa95 	bl	80097be <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e089      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092be:	e077      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa7b 	bl	80097be <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e06f      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f2:	e05d      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa61 	bl	80097be <USBD_CtlError>
            err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
          break;
 8009302:	e055      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009326:	e043      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa47 	bl	80097be <USBD_CtlError>
            err++;
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	3301      	adds	r3, #1
 8009334:	72fb      	strb	r3, [r7, #11]
          break;
 8009336:	e03b      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935a:	e029      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa2d 	bl	80097be <USBD_CtlError>
            err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
          break;
 800936a:	e021      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938e:	e00f      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa13 	bl	80097be <USBD_CtlError>
            err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
          break;
 800939e:	e007      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa0b 	bl	80097be <USBD_CtlError>
          err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80093ae:	e038      	b.n	8009422 <USBD_GetDescriptor+0x286>
 80093b0:	e037      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093cc:	e029      	b.n	8009422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9f4 	bl	80097be <USBD_CtlError>
        err++;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	3301      	adds	r3, #1
 80093da:	72fb      	strb	r3, [r7, #11]
      break;
 80093dc:	e021      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7c1b      	ldrb	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10d      	bne.n	8009402 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ee:	f107 0208 	add.w	r2, r7, #8
 80093f2:	4610      	mov	r0, r2
 80093f4:	4798      	blx	r3
 80093f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	2207      	movs	r2, #7
 80093fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009400:	e00f      	b.n	8009422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9da 	bl	80097be <USBD_CtlError>
        err++;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	3301      	adds	r3, #1
 800940e:	72fb      	strb	r3, [r7, #11]
      break;
 8009410:	e007      	b.n	8009422 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9d2 	bl	80097be <USBD_CtlError>
      err++;
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	3301      	adds	r3, #1
 800941e:	72fb      	strb	r3, [r7, #11]
      break;
 8009420:	bf00      	nop
  }

  if (err != 0U)
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11c      	bne.n	8009462 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009428:	893b      	ldrh	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d011      	beq.n	8009452 <USBD_GetDescriptor+0x2b6>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00d      	beq.n	8009452 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	88da      	ldrh	r2, [r3, #6]
 800943a:	893b      	ldrh	r3, [r7, #8]
 800943c:	4293      	cmp	r3, r2
 800943e:	bf28      	it	cs
 8009440:	4613      	movcs	r3, r2
 8009442:	b29b      	uxth	r3, r3
 8009444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009446:	893b      	ldrh	r3, [r7, #8]
 8009448:	461a      	mov	r2, r3
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa21 	bl	8009894 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa78 	bl	8009950 <USBD_CtlSendStatus>
 8009460:	e000      	b.n	8009464 <USBD_GetDescriptor+0x2c8>
    return;
 8009462:	bf00      	nop
    }
  }
}
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop

0800946c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	889b      	ldrh	r3, [r3, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d130      	bne.n	80094e0 <USBD_SetAddress+0x74>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	88db      	ldrh	r3, [r3, #6]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d12c      	bne.n	80094e0 <USBD_SetAddress+0x74>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	2b7f      	cmp	r3, #127	@ 0x7f
 800948c:	d828      	bhi.n	80094e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	885b      	ldrh	r3, [r3, #2]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009498:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d104      	bne.n	80094ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f989 	bl	80097be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ac:	e01d      	b.n	80094ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7bfa      	ldrb	r2, [r7, #15]
 80094b2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fe52 	bl	800a164 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa45 	bl	8009950 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	e009      	b.n	80094ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094de:	e004      	b.n	80094ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f96b 	bl	80097be <USBD_CtlError>
  }
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	885b      	ldrh	r3, [r3, #2]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	4b41      	ldr	r3, [pc, #260]	@ (800960c <USBD_SetConfig+0x118>)
 8009506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009508:	4b40      	ldr	r3, [pc, #256]	@ (800960c <USBD_SetConfig+0x118>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d904      	bls.n	800951a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f953 	bl	80097be <USBD_CtlError>
 8009518:	e075      	b.n	8009606 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009520:	2b02      	cmp	r3, #2
 8009522:	d002      	beq.n	800952a <USBD_SetConfig+0x36>
 8009524:	2b03      	cmp	r3, #3
 8009526:	d023      	beq.n	8009570 <USBD_SetConfig+0x7c>
 8009528:	e062      	b.n	80095f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800952a:	4b38      	ldr	r3, [pc, #224]	@ (800960c <USBD_SetConfig+0x118>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01a      	beq.n	8009568 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009532:	4b36      	ldr	r3, [pc, #216]	@ (800960c <USBD_SetConfig+0x118>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2203      	movs	r2, #3
 8009540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009544:	4b31      	ldr	r3, [pc, #196]	@ (800960c <USBD_SetConfig+0x118>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff f9e4 	bl	8008918 <USBD_SetClassConfig>
 8009550:	4603      	mov	r3, r0
 8009552:	2b02      	cmp	r3, #2
 8009554:	d104      	bne.n	8009560 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f930 	bl	80097be <USBD_CtlError>
            return;
 800955e:	e052      	b.n	8009606 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f9f5 	bl	8009950 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009566:	e04e      	b.n	8009606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f9f1 	bl	8009950 <USBD_CtlSendStatus>
        break;
 800956e:	e04a      	b.n	8009606 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009570:	4b26      	ldr	r3, [pc, #152]	@ (800960c <USBD_SetConfig+0x118>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d112      	bne.n	800959e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009580:	4b22      	ldr	r3, [pc, #136]	@ (800960c <USBD_SetConfig+0x118>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800958a:	4b20      	ldr	r3, [pc, #128]	@ (800960c <USBD_SetConfig+0x118>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff f9e0 	bl	8008956 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9da 	bl	8009950 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800959c:	e033      	b.n	8009606 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800959e:	4b1b      	ldr	r3, [pc, #108]	@ (800960c <USBD_SetConfig+0x118>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d01d      	beq.n	80095e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff f9ce 	bl	8008956 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80095ba:	4b14      	ldr	r3, [pc, #80]	@ (800960c <USBD_SetConfig+0x118>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095c4:	4b11      	ldr	r3, [pc, #68]	@ (800960c <USBD_SetConfig+0x118>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff f9a4 	bl	8008918 <USBD_SetClassConfig>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d104      	bne.n	80095e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8f0 	bl	80097be <USBD_CtlError>
            return;
 80095de:	e012      	b.n	8009606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9b5 	bl	8009950 <USBD_CtlSendStatus>
        break;
 80095e6:	e00e      	b.n	8009606 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f9b1 	bl	8009950 <USBD_CtlSendStatus>
        break;
 80095ee:	e00a      	b.n	8009606 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f8e3 	bl	80097be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095f8:	4b04      	ldr	r3, [pc, #16]	@ (800960c <USBD_SetConfig+0x118>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff f9a9 	bl	8008956 <USBD_ClrClassConfig>
        break;
 8009604:	bf00      	nop
    }
  }
}
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000380 	.word	0x20000380

08009610 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	88db      	ldrh	r3, [r3, #6]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d004      	beq.n	800962c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8ca 	bl	80097be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800962a:	e022      	b.n	8009672 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009632:	2b02      	cmp	r3, #2
 8009634:	dc02      	bgt.n	800963c <USBD_GetConfig+0x2c>
 8009636:	2b00      	cmp	r3, #0
 8009638:	dc03      	bgt.n	8009642 <USBD_GetConfig+0x32>
 800963a:	e015      	b.n	8009668 <USBD_GetConfig+0x58>
 800963c:	2b03      	cmp	r3, #3
 800963e:	d00b      	beq.n	8009658 <USBD_GetConfig+0x48>
 8009640:	e012      	b.n	8009668 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3308      	adds	r3, #8
 800964c:	2201      	movs	r2, #1
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f91f 	bl	8009894 <USBD_CtlSendData>
        break;
 8009656:	e00c      	b.n	8009672 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3304      	adds	r3, #4
 800965c:	2201      	movs	r2, #1
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f917 	bl	8009894 <USBD_CtlSendData>
        break;
 8009666:	e004      	b.n	8009672 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f8a7 	bl	80097be <USBD_CtlError>
        break;
 8009670:	bf00      	nop
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800968a:	3b01      	subs	r3, #1
 800968c:	2b02      	cmp	r3, #2
 800968e:	d81e      	bhi.n	80096ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	88db      	ldrh	r3, [r3, #6]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d004      	beq.n	80096a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f88f 	bl	80097be <USBD_CtlError>
        break;
 80096a0:	e01a      	b.n	80096d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f043 0202 	orr.w	r2, r3, #2
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	330c      	adds	r3, #12
 80096c2:	2202      	movs	r2, #2
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8e4 	bl	8009894 <USBD_CtlSendData>
      break;
 80096cc:	e004      	b.n	80096d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f874 	bl	80097be <USBD_CtlError>
      break;
 80096d6:	bf00      	nop
  }
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	885b      	ldrh	r3, [r3, #2]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d106      	bne.n	8009700 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f928 	bl	8009950 <USBD_CtlSendStatus>
  }
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009718:	3b01      	subs	r3, #1
 800971a:	2b02      	cmp	r3, #2
 800971c:	d80b      	bhi.n	8009736 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	885b      	ldrh	r3, [r3, #2]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d10c      	bne.n	8009740 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f90e 	bl	8009950 <USBD_CtlSendStatus>
      }
      break;
 8009734:	e004      	b.n	8009740 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f840 	bl	80097be <USBD_CtlError>
      break;
 800973e:	e000      	b.n	8009742 <USBD_ClrFeature+0x3a>
      break;
 8009740:	bf00      	nop
  }
}
 8009742:	bf00      	nop
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781a      	ldrb	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	785a      	ldrb	r2, [r3, #1]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3302      	adds	r3, #2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	3303      	adds	r3, #3
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	b29b      	uxth	r3, r3
 8009776:	4413      	add	r3, r2
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	3304      	adds	r3, #4
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	3305      	adds	r3, #5
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	b29b      	uxth	r3, r3
 8009790:	4413      	add	r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	3306      	adds	r3, #6
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	3307      	adds	r3, #7
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	4413      	add	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	80da      	strh	r2, [r3, #6]

}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097c8:	2180      	movs	r1, #128	@ 0x80
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc60 	bl	800a090 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097d0:	2100      	movs	r1, #0
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc5c 	bl	800a090 <USBD_LL_StallEP>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d032      	beq.n	800985c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f834 	bl	8009864 <USBD_GetLen>
 80097fc:	4603      	mov	r3, r0
 80097fe:	3301      	adds	r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	75fa      	strb	r2, [r7, #23]
 8009810:	461a      	mov	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4413      	add	r3, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	7812      	ldrb	r2, [r2, #0]
 800981a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	75fa      	strb	r2, [r7, #23]
 8009822:	461a      	mov	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4413      	add	r3, r2
 8009828:	2203      	movs	r2, #3
 800982a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800982c:	e012      	b.n	8009854 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	60fa      	str	r2, [r7, #12]
 8009834:	7dfa      	ldrb	r2, [r7, #23]
 8009836:	1c51      	adds	r1, r2, #1
 8009838:	75f9      	strb	r1, [r7, #23]
 800983a:	4611      	mov	r1, r2
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	440a      	add	r2, r1
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	75fa      	strb	r2, [r7, #23]
 800984a:	461a      	mov	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4413      	add	r3, r2
 8009850:	2200      	movs	r2, #0
 8009852:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e8      	bne.n	800982e <USBD_GetString+0x4e>
    }
  }
}
 800985c:	bf00      	nop
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009870:	e005      	b.n	800987e <USBD_GetLen+0x1a>
  {
    len++;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	3301      	adds	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3301      	adds	r3, #1
 800987c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f5      	bne.n	8009872 <USBD_GetLen+0xe>
  }

  return len;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2202      	movs	r2, #2
 80098a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098b0:	88fa      	ldrh	r2, [r7, #6]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098b6:	88fb      	ldrh	r3, [r7, #6]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 fc70 	bl	800a1a2 <USBD_LL_Transmit>

  return USBD_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098da:	88fb      	ldrh	r3, [r7, #6]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	2100      	movs	r1, #0
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fc5e 	bl	800a1a2 <USBD_LL_Transmit>

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2203      	movs	r2, #3
 8009902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	2100      	movs	r1, #0
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fc63 	bl	800a1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fc51 	bl	800a1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2204      	movs	r2, #4
 800995c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009960:	2300      	movs	r3, #0
 8009962:	2200      	movs	r2, #0
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc1b 	bl	800a1a2 <USBD_LL_Transmit>

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2205      	movs	r2, #5
 8009982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009986:	2300      	movs	r3, #0
 8009988:	2200      	movs	r2, #0
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fc2b 	bl	800a1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099a0:	2200      	movs	r2, #0
 80099a2:	4912      	ldr	r1, [pc, #72]	@ (80099ec <MX_USB_DEVICE_Init+0x50>)
 80099a4:	4812      	ldr	r0, [pc, #72]	@ (80099f0 <MX_USB_DEVICE_Init+0x54>)
 80099a6:	f7fe ff5b 	bl	8008860 <USBD_Init>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099b0:	f7f6 fd9e 	bl	80004f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099b4:	490f      	ldr	r1, [pc, #60]	@ (80099f4 <MX_USB_DEVICE_Init+0x58>)
 80099b6:	480e      	ldr	r0, [pc, #56]	@ (80099f0 <MX_USB_DEVICE_Init+0x54>)
 80099b8:	f7fe ff7d 	bl	80088b6 <USBD_RegisterClass>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099c2:	f7f6 fd95 	bl	80004f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099c6:	490c      	ldr	r1, [pc, #48]	@ (80099f8 <MX_USB_DEVICE_Init+0x5c>)
 80099c8:	4809      	ldr	r0, [pc, #36]	@ (80099f0 <MX_USB_DEVICE_Init+0x54>)
 80099ca:	f7fe feab 	bl	8008724 <USBD_CDC_RegisterInterface>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099d4:	f7f6 fd8c 	bl	80004f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099d8:	4805      	ldr	r0, [pc, #20]	@ (80099f0 <MX_USB_DEVICE_Init+0x54>)
 80099da:	f7fe ff86 	bl	80088ea <USBD_Start>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099e4:	f7f6 fd84 	bl	80004f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099e8:	bf00      	nop
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	2000012c 	.word	0x2000012c
 80099f0:	20000384 	.word	0x20000384
 80099f4:	20000018 	.word	0x20000018
 80099f8:	2000011c 	.word	0x2000011c

080099fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a00:	2200      	movs	r2, #0
 8009a02:	4905      	ldr	r1, [pc, #20]	@ (8009a18 <CDC_Init_FS+0x1c>)
 8009a04:	4805      	ldr	r0, [pc, #20]	@ (8009a1c <CDC_Init_FS+0x20>)
 8009a06:	f7fe fea4 	bl	8008752 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a0a:	4905      	ldr	r1, [pc, #20]	@ (8009a20 <CDC_Init_FS+0x24>)
 8009a0c:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <CDC_Init_FS+0x20>)
 8009a0e:	f7fe feba 	bl	8008786 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000a48 	.word	0x20000a48
 8009a1c:	20000384 	.word	0x20000384
 8009a20:	20000648 	.word	0x20000648

08009a24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
 8009a40:	4613      	mov	r3, r2
 8009a42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b23      	cmp	r3, #35	@ 0x23
 8009a48:	d84a      	bhi.n	8009ae0 <CDC_Control_FS+0xac>
 8009a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a50 <CDC_Control_FS+0x1c>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009ae1 	.word	0x08009ae1
 8009a58:	08009ae1 	.word	0x08009ae1
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009ae1 	.word	0x08009ae1
 8009a64:	08009ae1 	.word	0x08009ae1
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009ae1 	.word	0x08009ae1
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009ae1 	.word	0x08009ae1
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009ae1 	.word	0x08009ae1
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009ae1 	.word	0x08009ae1
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
 8009aac:	08009ae1 	.word	0x08009ae1
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	08009ae1 	.word	0x08009ae1
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae1 	.word	0x08009ae1
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	08009ae1 	.word	0x08009ae1
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009ae1 	.word	0x08009ae1
 8009ad8:	08009ae1 	.word	0x08009ae1
 8009adc:	08009ae1 	.word	0x08009ae1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ae0:	bf00      	nop
  }

  return (USBD_OK);
 8009ae2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4805      	ldr	r0, [pc, #20]	@ (8009b14 <CDC_Receive_FS+0x24>)
 8009afe:	f7fe fe42 	bl	8008786 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b02:	4804      	ldr	r0, [pc, #16]	@ (8009b14 <CDC_Receive_FS+0x24>)
 8009b04:	f7fe fe82 	bl	800880c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000384 	.word	0x20000384

08009b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b28:	4b0d      	ldr	r3, [pc, #52]	@ (8009b60 <CDC_Transmit_FS+0x48>)
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e00b      	b.n	8009b56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b3e:	887b      	ldrh	r3, [r7, #2]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	4806      	ldr	r0, [pc, #24]	@ (8009b60 <CDC_Transmit_FS+0x48>)
 8009b46:	f7fe fe04 	bl	8008752 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b4a:	4805      	ldr	r0, [pc, #20]	@ (8009b60 <CDC_Transmit_FS+0x48>)
 8009b4c:	f7fe fe2f 	bl	80087ae <USBD_CDC_TransmitPacket>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000384 	.word	0x20000384

08009b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2212      	movs	r2, #18
 8009b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b76:	4b03      	ldr	r3, [pc, #12]	@ (8009b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	20000148 	.word	0x20000148

08009b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2204      	movs	r2, #4
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	@ (8009ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	2000015c 	.word	0x2000015c

08009bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4907      	ldr	r1, [pc, #28]	@ (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bc2:	4808      	ldr	r0, [pc, #32]	@ (8009be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bc4:	f7ff fe0c 	bl	80097e0 <USBD_GetString>
 8009bc8:	e004      	b.n	8009bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4904      	ldr	r1, [pc, #16]	@ (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bce:	4805      	ldr	r0, [pc, #20]	@ (8009be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd0:	f7ff fe06 	bl	80097e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd4:	4b02      	ldr	r3, [pc, #8]	@ (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000e48 	.word	0x20000e48
 8009be4:	0800b6b8 	.word	0x0800b6b8

08009be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	4904      	ldr	r1, [pc, #16]	@ (8009c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bf8:	4804      	ldr	r0, [pc, #16]	@ (8009c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bfa:	f7ff fdf1 	bl	80097e0 <USBD_GetString>
  return USBD_StrDesc;
 8009bfe:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000e48 	.word	0x20000e48
 8009c0c:	0800b6d0 	.word	0x0800b6d0

08009c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	221a      	movs	r2, #26
 8009c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c22:	f000 f843 	bl	8009cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c26:	4b02      	ldr	r3, [pc, #8]	@ (8009c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000160 	.word	0x20000160

08009c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4907      	ldr	r1, [pc, #28]	@ (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c4a:	4808      	ldr	r0, [pc, #32]	@ (8009c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c4c:	f7ff fdc8 	bl	80097e0 <USBD_GetString>
 8009c50:	e004      	b.n	8009c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4904      	ldr	r1, [pc, #16]	@ (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c56:	4805      	ldr	r0, [pc, #20]	@ (8009c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c58:	f7ff fdc2 	bl	80097e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c5c:	4b02      	ldr	r3, [pc, #8]	@ (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000e48 	.word	0x20000e48
 8009c6c:	0800b6e4 	.word	0x0800b6e4

08009c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	6039      	str	r1, [r7, #0]
 8009c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4907      	ldr	r1, [pc, #28]	@ (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c86:	4808      	ldr	r0, [pc, #32]	@ (8009ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c88:	f7ff fdaa 	bl	80097e0 <USBD_GetString>
 8009c8c:	e004      	b.n	8009c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4904      	ldr	r1, [pc, #16]	@ (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c92:	4805      	ldr	r0, [pc, #20]	@ (8009ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c94:	f7ff fda4 	bl	80097e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c98:	4b02      	ldr	r3, [pc, #8]	@ (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000e48 	.word	0x20000e48
 8009ca8:	0800b6f0 	.word	0x0800b6f0

08009cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf0 <Get_SerialNum+0x44>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf4 <Get_SerialNum+0x48>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf8 <Get_SerialNum+0x4c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4413      	add	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	4909      	ldr	r1, [pc, #36]	@ (8009cfc <Get_SerialNum+0x50>)
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f814 	bl	8009d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cdc:	2204      	movs	r2, #4
 8009cde:	4908      	ldr	r1, [pc, #32]	@ (8009d00 <Get_SerialNum+0x54>)
 8009ce0:	68b8      	ldr	r0, [r7, #8]
 8009ce2:	f000 f80f 	bl	8009d04 <IntToUnicode>
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	1ffff7ac 	.word	0x1ffff7ac
 8009cf4:	1ffff7b0 	.word	0x1ffff7b0
 8009cf8:	1ffff7b4 	.word	0x1ffff7b4
 8009cfc:	20000162 	.word	0x20000162
 8009d00:	20000172 	.word	0x20000172

08009d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]
 8009d1a:	e027      	b.n	8009d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0f1b      	lsrs	r3, r3, #28
 8009d20:	2b09      	cmp	r3, #9
 8009d22:	d80b      	bhi.n	8009d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0f1b      	lsrs	r3, r3, #28
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	440b      	add	r3, r1
 8009d34:	3230      	adds	r2, #48	@ 0x30
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	e00a      	b.n	8009d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0f1b      	lsrs	r3, r3, #28
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4619      	mov	r1, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3237      	adds	r2, #55	@ 0x37
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]
 8009d6c:	7dfa      	ldrb	r2, [r7, #23]
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d3d3      	bcc.n	8009d1c <IntToUnicode+0x18>
  }
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
	...

08009d84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a11      	ldr	r2, [pc, #68]	@ (8009dd8 <HAL_PCD_MspInit+0x54>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d11b      	bne.n	8009dce <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d96:	4b11      	ldr	r3, [pc, #68]	@ (8009ddc <HAL_PCD_MspInit+0x58>)
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	4a10      	ldr	r2, [pc, #64]	@ (8009ddc <HAL_PCD_MspInit+0x58>)
 8009d9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009da0:	61d3      	str	r3, [r2, #28]
 8009da2:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <HAL_PCD_MspInit+0x58>)
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	2013      	movs	r0, #19
 8009db4:	f7f7 f8bd 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8009db8:	2013      	movs	r0, #19
 8009dba:	f7f7 f8d6 	bl	8000f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	2014      	movs	r0, #20
 8009dc4:	f7f7 f8b5 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009dc8:	2014      	movs	r0, #20
 8009dca:	f7f7 f8ce 	bl	8000f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dce:	bf00      	nop
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	40005c00 	.word	0x40005c00
 8009ddc:	40021000 	.word	0x40021000

08009de0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fe fdc0 	bl	800897c <USBD_LL_SetupStage>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	440b      	add	r3, r1
 8009e24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fe fdf2 	bl	8008a16 <USBD_LL_DataOutStage>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	440b      	add	r3, r1
 8009e5a:	3324      	adds	r3, #36	@ 0x24
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fe fe49 	bl	8008af8 <USBD_LL_DataInStage>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe ff5c 	bl	8008d3a <USBD_LL_SOF>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	795b      	ldrb	r3, [r3, #5]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d001      	beq.n	8009ea2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e9e:	f7f6 fb27 	bl	80004f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ea8:	7bfa      	ldrb	r2, [r7, #15]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe ff09 	bl	8008cc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fec2 	bl	8008c42 <USBD_LL_Reset>
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe ff04 	bl	8008ce4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7a5b      	ldrb	r3, [r3, #9]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ee4:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <HAL_PCD_SuspendCallback+0x30>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	4a03      	ldr	r2, [pc, #12]	@ (8009ef8 <HAL_PCD_SuspendCallback+0x30>)
 8009eea:	f043 0306 	orr.w	r3, r3, #6
 8009eee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	e000ed00 	.word	0xe000ed00

08009efc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe feff 	bl	8008d0e <USBD_LL_Resume>
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f20:	4a29      	ldr	r2, [pc, #164]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a27      	ldr	r2, [pc, #156]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f30:	4b25      	ldr	r3, [pc, #148]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f32:	4a26      	ldr	r2, [pc, #152]	@ (8009fcc <USBD_LL_Init+0xb4>)
 8009f34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f36:	4b24      	ldr	r3, [pc, #144]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f38:	2208      	movs	r2, #8
 8009f3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f3c:	4b22      	ldr	r3, [pc, #136]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f3e:	2202      	movs	r2, #2
 8009f40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f42:	4b21      	ldr	r3, [pc, #132]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f44:	2202      	movs	r2, #2
 8009f46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f48:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f54:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f5a:	481b      	ldr	r0, [pc, #108]	@ (8009fc8 <USBD_LL_Init+0xb0>)
 8009f5c:	f7f7 f9dc 	bl	8001318 <HAL_PCD_Init>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009f66:	f7f6 fac3 	bl	80004f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f70:	2318      	movs	r3, #24
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	f7f8 fe3f 	bl	8002bf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f80:	2358      	movs	r3, #88	@ 0x58
 8009f82:	2200      	movs	r2, #0
 8009f84:	2180      	movs	r1, #128	@ 0x80
 8009f86:	f7f8 fe37 	bl	8002bf8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f90:	23c0      	movs	r3, #192	@ 0xc0
 8009f92:	2200      	movs	r2, #0
 8009f94:	2181      	movs	r1, #129	@ 0x81
 8009f96:	f7f8 fe2f 	bl	8002bf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009fa0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	f7f8 fe26 	bl	8002bf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2182      	movs	r1, #130	@ 0x82
 8009fba:	f7f8 fe1d 	bl	8002bf8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001048 	.word	0x20001048
 8009fcc:	40005c00 	.word	0x40005c00

08009fd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f7 fa5d 	bl	80014a6 <HAL_PCD_Start>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f952 	bl	800a29c <USBD_Get_USB_Status>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	4608      	mov	r0, r1
 800a010:	4611      	mov	r1, r2
 800a012:	461a      	mov	r2, r3
 800a014:	4603      	mov	r3, r0
 800a016:	70fb      	strb	r3, [r7, #3]
 800a018:	460b      	mov	r3, r1
 800a01a:	70bb      	strb	r3, [r7, #2]
 800a01c:	4613      	mov	r3, r2
 800a01e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a02e:	78bb      	ldrb	r3, [r7, #2]
 800a030:	883a      	ldrh	r2, [r7, #0]
 800a032:	78f9      	ldrb	r1, [r7, #3]
 800a034:	f7f7 fb55 	bl	80016e2 <HAL_PCD_EP_Open>
 800a038:	4603      	mov	r3, r0
 800a03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 f92c 	bl	800a29c <USBD_Get_USB_Status>
 800a044:	4603      	mov	r3, r0
 800a046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a048:	7bbb      	ldrb	r3, [r7, #14]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f7f7 fb93 	bl	800179c <HAL_PCD_EP_Close>
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 f90d 	bl	800a29c <USBD_Get_USB_Status>
 800a082:	4603      	mov	r3, r0
 800a084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a086:	7bbb      	ldrb	r3, [r7, #14]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f7 fc3c 	bl	800192c <HAL_PCD_EP_SetStall>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f8ee 	bl	800a29c <USBD_Get_USB_Status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f7 fc6f 	bl	80019d0 <HAL_PCD_EP_ClrStall>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f8cf 	bl	800a29c <USBD_Get_USB_Status>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a102:	7bbb      	ldrb	r3, [r7, #14]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a11e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a124:	2b00      	cmp	r3, #0
 800a126:	da0b      	bge.n	800a140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a12e:	68f9      	ldr	r1, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	440b      	add	r3, r1
 800a13a:	3312      	adds	r3, #18
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	e00b      	b.n	800a158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a146:	68f9      	ldr	r1, [r7, #12]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	440b      	add	r3, r1
 800a152:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a156:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f7f7 fa89 	bl	800169a <HAL_PCD_SetAddress>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f884 	bl	800a29c <USBD_Get_USB_Status>
 800a194:	4603      	mov	r3, r0
 800a196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a198:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b086      	sub	sp, #24
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	72fb      	strb	r3, [r7, #11]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	7af9      	ldrb	r1, [r7, #11]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	f7f7 fb78 	bl	80018be <HAL_PCD_EP_Transmit>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f861 	bl	800a29c <USBD_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1de:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	72fb      	strb	r3, [r7, #11]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a20a:	893b      	ldrh	r3, [r7, #8]
 800a20c:	7af9      	ldrb	r1, [r7, #11]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	f7f7 fb0c 	bl	800182c <HAL_PCD_EP_Receive>
 800a214:	4603      	mov	r3, r0
 800a216:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f83e 	bl	800a29c <USBD_Get_USB_Status>
 800a220:	4603      	mov	r3, r0
 800a222:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a224:	7dbb      	ldrb	r3, [r7, #22]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	460b      	mov	r3, r1
 800a238:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7f7 fb22 	bl	800188e <HAL_PCD_EP_GetRxCount>
 800a24a:	4603      	mov	r3, r0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a25c:	4b03      	ldr	r3, [pc, #12]	@ (800a26c <USBD_static_malloc+0x18>)
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	2000131c 	.word	0x2000131c

0800a270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d817      	bhi.n	800a2e0 <USBD_Get_USB_Status+0x44>
 800a2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <USBD_Get_USB_Status+0x1c>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2c9 	.word	0x0800a2c9
 800a2bc:	0800a2cf 	.word	0x0800a2cf
 800a2c0:	0800a2d5 	.word	0x0800a2d5
 800a2c4:	0800a2db 	.word	0x0800a2db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a2cc:	e00b      	b.n	800a2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d2:	e008      	b.n	800a2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d8:	e005      	b.n	800a2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2da:	2302      	movs	r3, #2
 800a2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2de:	e002      	b.n	800a2e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e4:	bf00      	nop
  }
  return usb_status;
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <rand>:
 800a2f4:	4b16      	ldr	r3, [pc, #88]	@ (800a350 <rand+0x5c>)
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	681c      	ldr	r4, [r3, #0]
 800a2fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2fc:	b9b3      	cbnz	r3, 800a32c <rand+0x38>
 800a2fe:	2018      	movs	r0, #24
 800a300:	f000 fa54 	bl	800a7ac <malloc>
 800a304:	4602      	mov	r2, r0
 800a306:	6320      	str	r0, [r4, #48]	@ 0x30
 800a308:	b920      	cbnz	r0, 800a314 <rand+0x20>
 800a30a:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <rand+0x60>)
 800a30c:	4812      	ldr	r0, [pc, #72]	@ (800a358 <rand+0x64>)
 800a30e:	2152      	movs	r1, #82	@ 0x52
 800a310:	f000 f9e4 	bl	800a6dc <__assert_func>
 800a314:	4911      	ldr	r1, [pc, #68]	@ (800a35c <rand+0x68>)
 800a316:	4b12      	ldr	r3, [pc, #72]	@ (800a360 <rand+0x6c>)
 800a318:	e9c0 1300 	strd	r1, r3, [r0]
 800a31c:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <rand+0x70>)
 800a31e:	6083      	str	r3, [r0, #8]
 800a320:	230b      	movs	r3, #11
 800a322:	8183      	strh	r3, [r0, #12]
 800a324:	2100      	movs	r1, #0
 800a326:	2001      	movs	r0, #1
 800a328:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a32c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a32e:	480e      	ldr	r0, [pc, #56]	@ (800a368 <rand+0x74>)
 800a330:	690b      	ldr	r3, [r1, #16]
 800a332:	694c      	ldr	r4, [r1, #20]
 800a334:	4a0d      	ldr	r2, [pc, #52]	@ (800a36c <rand+0x78>)
 800a336:	4358      	muls	r0, r3
 800a338:	fb02 0004 	mla	r0, r2, r4, r0
 800a33c:	fba3 3202 	umull	r3, r2, r3, r2
 800a340:	3301      	adds	r3, #1
 800a342:	eb40 0002 	adc.w	r0, r0, r2
 800a346:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a34a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a34e:	bd10      	pop	{r4, pc}
 800a350:	20000188 	.word	0x20000188
 800a354:	0800b738 	.word	0x0800b738
 800a358:	0800b74f 	.word	0x0800b74f
 800a35c:	abcd330e 	.word	0xabcd330e
 800a360:	e66d1234 	.word	0xe66d1234
 800a364:	0005deec 	.word	0x0005deec
 800a368:	5851f42d 	.word	0x5851f42d
 800a36c:	4c957f2d 	.word	0x4c957f2d

0800a370 <std>:
 800a370:	2300      	movs	r3, #0
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	e9c0 3300 	strd	r3, r3, [r0]
 800a37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37e:	6083      	str	r3, [r0, #8]
 800a380:	8181      	strh	r1, [r0, #12]
 800a382:	6643      	str	r3, [r0, #100]	@ 0x64
 800a384:	81c2      	strh	r2, [r0, #14]
 800a386:	6183      	str	r3, [r0, #24]
 800a388:	4619      	mov	r1, r3
 800a38a:	2208      	movs	r2, #8
 800a38c:	305c      	adds	r0, #92	@ 0x5c
 800a38e:	f000 f928 	bl	800a5e2 <memset>
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <std+0x58>)
 800a394:	6263      	str	r3, [r4, #36]	@ 0x24
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <std+0x5c>)
 800a398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a39a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d0 <std+0x60>)
 800a39c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x64>)
 800a3a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d8 <std+0x68>)
 800a3a4:	6224      	str	r4, [r4, #32]
 800a3a6:	429c      	cmp	r4, r3
 800a3a8:	d006      	beq.n	800a3b8 <std+0x48>
 800a3aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3ae:	4294      	cmp	r4, r2
 800a3b0:	d002      	beq.n	800a3b8 <std+0x48>
 800a3b2:	33d0      	adds	r3, #208	@ 0xd0
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	d105      	bne.n	800a3c4 <std+0x54>
 800a3b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f000 b988 	b.w	800a6d4 <__retarget_lock_init_recursive>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800a55d 	.word	0x0800a55d
 800a3cc:	0800a57f 	.word	0x0800a57f
 800a3d0:	0800a5b7 	.word	0x0800a5b7
 800a3d4:	0800a5db 	.word	0x0800a5db
 800a3d8:	2000153c 	.word	0x2000153c

0800a3dc <stdio_exit_handler>:
 800a3dc:	4a02      	ldr	r2, [pc, #8]	@ (800a3e8 <stdio_exit_handler+0xc>)
 800a3de:	4903      	ldr	r1, [pc, #12]	@ (800a3ec <stdio_exit_handler+0x10>)
 800a3e0:	4803      	ldr	r0, [pc, #12]	@ (800a3f0 <stdio_exit_handler+0x14>)
 800a3e2:	f000 b869 	b.w	800a4b8 <_fwalk_sglue>
 800a3e6:	bf00      	nop
 800a3e8:	2000017c 	.word	0x2000017c
 800a3ec:	0800afed 	.word	0x0800afed
 800a3f0:	2000018c 	.word	0x2000018c

0800a3f4 <cleanup_stdio>:
 800a3f4:	6841      	ldr	r1, [r0, #4]
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a428 <cleanup_stdio+0x34>)
 800a3f8:	4299      	cmp	r1, r3
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	d001      	beq.n	800a404 <cleanup_stdio+0x10>
 800a400:	f000 fdf4 	bl	800afec <_fflush_r>
 800a404:	68a1      	ldr	r1, [r4, #8]
 800a406:	4b09      	ldr	r3, [pc, #36]	@ (800a42c <cleanup_stdio+0x38>)
 800a408:	4299      	cmp	r1, r3
 800a40a:	d002      	beq.n	800a412 <cleanup_stdio+0x1e>
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fded 	bl	800afec <_fflush_r>
 800a412:	68e1      	ldr	r1, [r4, #12]
 800a414:	4b06      	ldr	r3, [pc, #24]	@ (800a430 <cleanup_stdio+0x3c>)
 800a416:	4299      	cmp	r1, r3
 800a418:	d004      	beq.n	800a424 <cleanup_stdio+0x30>
 800a41a:	4620      	mov	r0, r4
 800a41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a420:	f000 bde4 	b.w	800afec <_fflush_r>
 800a424:	bd10      	pop	{r4, pc}
 800a426:	bf00      	nop
 800a428:	2000153c 	.word	0x2000153c
 800a42c:	200015a4 	.word	0x200015a4
 800a430:	2000160c 	.word	0x2000160c

0800a434 <global_stdio_init.part.0>:
 800a434:	b510      	push	{r4, lr}
 800a436:	4b0b      	ldr	r3, [pc, #44]	@ (800a464 <global_stdio_init.part.0+0x30>)
 800a438:	4c0b      	ldr	r4, [pc, #44]	@ (800a468 <global_stdio_init.part.0+0x34>)
 800a43a:	4a0c      	ldr	r2, [pc, #48]	@ (800a46c <global_stdio_init.part.0+0x38>)
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	4620      	mov	r0, r4
 800a440:	2200      	movs	r2, #0
 800a442:	2104      	movs	r1, #4
 800a444:	f7ff ff94 	bl	800a370 <std>
 800a448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a44c:	2201      	movs	r2, #1
 800a44e:	2109      	movs	r1, #9
 800a450:	f7ff ff8e 	bl	800a370 <std>
 800a454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a458:	2202      	movs	r2, #2
 800a45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45e:	2112      	movs	r1, #18
 800a460:	f7ff bf86 	b.w	800a370 <std>
 800a464:	20001674 	.word	0x20001674
 800a468:	2000153c 	.word	0x2000153c
 800a46c:	0800a3dd 	.word	0x0800a3dd

0800a470 <__sfp_lock_acquire>:
 800a470:	4801      	ldr	r0, [pc, #4]	@ (800a478 <__sfp_lock_acquire+0x8>)
 800a472:	f000 b930 	b.w	800a6d6 <__retarget_lock_acquire_recursive>
 800a476:	bf00      	nop
 800a478:	2000167d 	.word	0x2000167d

0800a47c <__sfp_lock_release>:
 800a47c:	4801      	ldr	r0, [pc, #4]	@ (800a484 <__sfp_lock_release+0x8>)
 800a47e:	f000 b92b 	b.w	800a6d8 <__retarget_lock_release_recursive>
 800a482:	bf00      	nop
 800a484:	2000167d 	.word	0x2000167d

0800a488 <__sinit>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	4604      	mov	r4, r0
 800a48c:	f7ff fff0 	bl	800a470 <__sfp_lock_acquire>
 800a490:	6a23      	ldr	r3, [r4, #32]
 800a492:	b11b      	cbz	r3, 800a49c <__sinit+0x14>
 800a494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a498:	f7ff bff0 	b.w	800a47c <__sfp_lock_release>
 800a49c:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <__sinit+0x28>)
 800a49e:	6223      	str	r3, [r4, #32]
 800a4a0:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <__sinit+0x2c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1f5      	bne.n	800a494 <__sinit+0xc>
 800a4a8:	f7ff ffc4 	bl	800a434 <global_stdio_init.part.0>
 800a4ac:	e7f2      	b.n	800a494 <__sinit+0xc>
 800a4ae:	bf00      	nop
 800a4b0:	0800a3f5 	.word	0x0800a3f5
 800a4b4:	20001674 	.word	0x20001674

0800a4b8 <_fwalk_sglue>:
 800a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4bc:	4607      	mov	r7, r0
 800a4be:	4688      	mov	r8, r1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	2600      	movs	r6, #0
 800a4c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a4cc:	d505      	bpl.n	800a4da <_fwalk_sglue+0x22>
 800a4ce:	6824      	ldr	r4, [r4, #0]
 800a4d0:	2c00      	cmp	r4, #0
 800a4d2:	d1f7      	bne.n	800a4c4 <_fwalk_sglue+0xc>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4da:	89ab      	ldrh	r3, [r5, #12]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d907      	bls.n	800a4f0 <_fwalk_sglue+0x38>
 800a4e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	d003      	beq.n	800a4f0 <_fwalk_sglue+0x38>
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	47c0      	blx	r8
 800a4ee:	4306      	orrs	r6, r0
 800a4f0:	3568      	adds	r5, #104	@ 0x68
 800a4f2:	e7e9      	b.n	800a4c8 <_fwalk_sglue+0x10>

0800a4f4 <sniprintf>:
 800a4f4:	b40c      	push	{r2, r3}
 800a4f6:	b530      	push	{r4, r5, lr}
 800a4f8:	4b17      	ldr	r3, [pc, #92]	@ (800a558 <sniprintf+0x64>)
 800a4fa:	1e0c      	subs	r4, r1, #0
 800a4fc:	681d      	ldr	r5, [r3, #0]
 800a4fe:	b09d      	sub	sp, #116	@ 0x74
 800a500:	da08      	bge.n	800a514 <sniprintf+0x20>
 800a502:	238b      	movs	r3, #139	@ 0x8b
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a50a:	b01d      	add	sp, #116	@ 0x74
 800a50c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a510:	b002      	add	sp, #8
 800a512:	4770      	bx	lr
 800a514:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a518:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a51c:	bf14      	ite	ne
 800a51e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a522:	4623      	moveq	r3, r4
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	9307      	str	r3, [sp, #28]
 800a528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a52c:	9002      	str	r0, [sp, #8]
 800a52e:	9006      	str	r0, [sp, #24]
 800a530:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a534:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a536:	ab21      	add	r3, sp, #132	@ 0x84
 800a538:	a902      	add	r1, sp, #8
 800a53a:	4628      	mov	r0, r5
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	f000 fa47 	bl	800a9d0 <_svfiprintf_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	bfbc      	itt	lt
 800a546:	238b      	movlt	r3, #139	@ 0x8b
 800a548:	602b      	strlt	r3, [r5, #0]
 800a54a:	2c00      	cmp	r4, #0
 800a54c:	d0dd      	beq.n	800a50a <sniprintf+0x16>
 800a54e:	9b02      	ldr	r3, [sp, #8]
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e7d9      	b.n	800a50a <sniprintf+0x16>
 800a556:	bf00      	nop
 800a558:	20000188 	.word	0x20000188

0800a55c <__sread>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	460c      	mov	r4, r1
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	f000 f868 	bl	800a638 <_read_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	bfab      	itete	ge
 800a56c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a56e:	89a3      	ldrhlt	r3, [r4, #12]
 800a570:	181b      	addge	r3, r3, r0
 800a572:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a576:	bfac      	ite	ge
 800a578:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a57a:	81a3      	strhlt	r3, [r4, #12]
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <__swrite>:
 800a57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	461f      	mov	r7, r3
 800a584:	898b      	ldrh	r3, [r1, #12]
 800a586:	05db      	lsls	r3, r3, #23
 800a588:	4605      	mov	r5, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	4616      	mov	r6, r2
 800a58e:	d505      	bpl.n	800a59c <__swrite+0x1e>
 800a590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a594:	2302      	movs	r3, #2
 800a596:	2200      	movs	r2, #0
 800a598:	f000 f83c 	bl	800a614 <_lseek_r>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	f000 b853 	b.w	800a65c <_write_r>

0800a5b6 <__sseek>:
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 f829 	bl	800a614 <_lseek_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	bf15      	itete	ne
 800a5c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5d2:	81a3      	strheq	r3, [r4, #12]
 800a5d4:	bf18      	it	ne
 800a5d6:	81a3      	strhne	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__sclose>:
 800a5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5de:	f000 b809 	b.w	800a5f4 <_close_r>

0800a5e2 <memset>:
 800a5e2:	4402      	add	r2, r0
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d100      	bne.n	800a5ec <memset+0xa>
 800a5ea:	4770      	bx	lr
 800a5ec:	f803 1b01 	strb.w	r1, [r3], #1
 800a5f0:	e7f9      	b.n	800a5e6 <memset+0x4>
	...

0800a5f4 <_close_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d06      	ldr	r5, [pc, #24]	@ (800a610 <_close_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f7f6 f8c2 	bl	8000788 <_close>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_close_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_close_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20001678 	.word	0x20001678

0800a614 <_lseek_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d07      	ldr	r5, [pc, #28]	@ (800a634 <_lseek_r+0x20>)
 800a618:	4604      	mov	r4, r0
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	602a      	str	r2, [r5, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	f7f6 f8d7 	bl	80007d6 <_lseek>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_lseek_r+0x1e>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_lseek_r+0x1e>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20001678 	.word	0x20001678

0800a638 <_read_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	@ (800a658 <_read_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f6 f865 	bl	8000716 <_read>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_read_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_read_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001678 	.word	0x20001678

0800a65c <_write_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	@ (800a67c <_write_r+0x20>)
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f6 f870 	bl	8000750 <_write>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_write_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_write_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001678 	.word	0x20001678

0800a680 <__errno>:
 800a680:	4b01      	ldr	r3, [pc, #4]	@ (800a688 <__errno+0x8>)
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20000188 	.word	0x20000188

0800a68c <__libc_init_array>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	4d0d      	ldr	r5, [pc, #52]	@ (800a6c4 <__libc_init_array+0x38>)
 800a690:	4c0d      	ldr	r4, [pc, #52]	@ (800a6c8 <__libc_init_array+0x3c>)
 800a692:	1b64      	subs	r4, r4, r5
 800a694:	10a4      	asrs	r4, r4, #2
 800a696:	2600      	movs	r6, #0
 800a698:	42a6      	cmp	r6, r4
 800a69a:	d109      	bne.n	800a6b0 <__libc_init_array+0x24>
 800a69c:	4d0b      	ldr	r5, [pc, #44]	@ (800a6cc <__libc_init_array+0x40>)
 800a69e:	4c0c      	ldr	r4, [pc, #48]	@ (800a6d0 <__libc_init_array+0x44>)
 800a6a0:	f000 fff0 	bl	800b684 <_init>
 800a6a4:	1b64      	subs	r4, r4, r5
 800a6a6:	10a4      	asrs	r4, r4, #2
 800a6a8:	2600      	movs	r6, #0
 800a6aa:	42a6      	cmp	r6, r4
 800a6ac:	d105      	bne.n	800a6ba <__libc_init_array+0x2e>
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b4:	4798      	blx	r3
 800a6b6:	3601      	adds	r6, #1
 800a6b8:	e7ee      	b.n	800a698 <__libc_init_array+0xc>
 800a6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6be:	4798      	blx	r3
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	e7f2      	b.n	800a6aa <__libc_init_array+0x1e>
 800a6c4:	0800b820 	.word	0x0800b820
 800a6c8:	0800b820 	.word	0x0800b820
 800a6cc:	0800b820 	.word	0x0800b820
 800a6d0:	0800b824 	.word	0x0800b824

0800a6d4 <__retarget_lock_init_recursive>:
 800a6d4:	4770      	bx	lr

0800a6d6 <__retarget_lock_acquire_recursive>:
 800a6d6:	4770      	bx	lr

0800a6d8 <__retarget_lock_release_recursive>:
 800a6d8:	4770      	bx	lr
	...

0800a6dc <__assert_func>:
 800a6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6de:	4614      	mov	r4, r2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b09      	ldr	r3, [pc, #36]	@ (800a708 <__assert_func+0x2c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	68d8      	ldr	r0, [r3, #12]
 800a6ea:	b954      	cbnz	r4, 800a702 <__assert_func+0x26>
 800a6ec:	4b07      	ldr	r3, [pc, #28]	@ (800a70c <__assert_func+0x30>)
 800a6ee:	461c      	mov	r4, r3
 800a6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6f4:	9100      	str	r1, [sp, #0]
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	4905      	ldr	r1, [pc, #20]	@ (800a710 <__assert_func+0x34>)
 800a6fa:	f000 fc9f 	bl	800b03c <fiprintf>
 800a6fe:	f000 fce7 	bl	800b0d0 <abort>
 800a702:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <__assert_func+0x38>)
 800a704:	e7f4      	b.n	800a6f0 <__assert_func+0x14>
 800a706:	bf00      	nop
 800a708:	20000188 	.word	0x20000188
 800a70c:	0800b7e2 	.word	0x0800b7e2
 800a710:	0800b7b4 	.word	0x0800b7b4
 800a714:	0800b7a7 	.word	0x0800b7a7

0800a718 <_free_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4605      	mov	r5, r0
 800a71c:	2900      	cmp	r1, #0
 800a71e:	d041      	beq.n	800a7a4 <_free_r+0x8c>
 800a720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a724:	1f0c      	subs	r4, r1, #4
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfb8      	it	lt
 800a72a:	18e4      	addlt	r4, r4, r3
 800a72c:	f000 f8e8 	bl	800a900 <__malloc_lock>
 800a730:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a8 <_free_r+0x90>)
 800a732:	6813      	ldr	r3, [r2, #0]
 800a734:	b933      	cbnz	r3, 800a744 <_free_r+0x2c>
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6014      	str	r4, [r2, #0]
 800a73a:	4628      	mov	r0, r5
 800a73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a740:	f000 b8e4 	b.w	800a90c <__malloc_unlock>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d908      	bls.n	800a75a <_free_r+0x42>
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	1821      	adds	r1, r4, r0
 800a74c:	428b      	cmp	r3, r1
 800a74e:	bf01      	itttt	eq
 800a750:	6819      	ldreq	r1, [r3, #0]
 800a752:	685b      	ldreq	r3, [r3, #4]
 800a754:	1809      	addeq	r1, r1, r0
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	e7ed      	b.n	800a736 <_free_r+0x1e>
 800a75a:	461a      	mov	r2, r3
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	b10b      	cbz	r3, 800a764 <_free_r+0x4c>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x42>
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	1850      	adds	r0, r2, r1
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x6c>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	4401      	add	r1, r0
 800a770:	1850      	adds	r0, r2, r1
 800a772:	4283      	cmp	r3, r0
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	d1e0      	bne.n	800a73a <_free_r+0x22>
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	4408      	add	r0, r1
 800a780:	6010      	str	r0, [r2, #0]
 800a782:	e7da      	b.n	800a73a <_free_r+0x22>
 800a784:	d902      	bls.n	800a78c <_free_r+0x74>
 800a786:	230c      	movs	r3, #12
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	e7d6      	b.n	800a73a <_free_r+0x22>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	1821      	adds	r1, r4, r0
 800a790:	428b      	cmp	r3, r1
 800a792:	bf04      	itt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	bf04      	itt	eq
 800a79c:	1809      	addeq	r1, r1, r0
 800a79e:	6021      	streq	r1, [r4, #0]
 800a7a0:	6054      	str	r4, [r2, #4]
 800a7a2:	e7ca      	b.n	800a73a <_free_r+0x22>
 800a7a4:	bd38      	pop	{r3, r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20001684 	.word	0x20001684

0800a7ac <malloc>:
 800a7ac:	4b02      	ldr	r3, [pc, #8]	@ (800a7b8 <malloc+0xc>)
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	f000 b825 	b.w	800a800 <_malloc_r>
 800a7b6:	bf00      	nop
 800a7b8:	20000188 	.word	0x20000188

0800a7bc <sbrk_aligned>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	4e0f      	ldr	r6, [pc, #60]	@ (800a7fc <sbrk_aligned+0x40>)
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	6831      	ldr	r1, [r6, #0]
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	b911      	cbnz	r1, 800a7ce <sbrk_aligned+0x12>
 800a7c8:	f000 fc64 	bl	800b094 <_sbrk_r>
 800a7cc:	6030      	str	r0, [r6, #0]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f000 fc5f 	bl	800b094 <_sbrk_r>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d103      	bne.n	800a7e2 <sbrk_aligned+0x26>
 800a7da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a7de:	4620      	mov	r0, r4
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
 800a7e2:	1cc4      	adds	r4, r0, #3
 800a7e4:	f024 0403 	bic.w	r4, r4, #3
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d0f8      	beq.n	800a7de <sbrk_aligned+0x22>
 800a7ec:	1a21      	subs	r1, r4, r0
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f000 fc50 	bl	800b094 <_sbrk_r>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d1f2      	bne.n	800a7de <sbrk_aligned+0x22>
 800a7f8:	e7ef      	b.n	800a7da <sbrk_aligned+0x1e>
 800a7fa:	bf00      	nop
 800a7fc:	20001680 	.word	0x20001680

0800a800 <_malloc_r>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	1ccd      	adds	r5, r1, #3
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	2d00      	cmp	r5, #0
 800a814:	4606      	mov	r6, r0
 800a816:	db01      	blt.n	800a81c <_malloc_r+0x1c>
 800a818:	42a9      	cmp	r1, r5
 800a81a:	d904      	bls.n	800a826 <_malloc_r+0x26>
 800a81c:	230c      	movs	r3, #12
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	2000      	movs	r0, #0
 800a822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8fc <_malloc_r+0xfc>
 800a82a:	f000 f869 	bl	800a900 <__malloc_lock>
 800a82e:	f8d8 3000 	ldr.w	r3, [r8]
 800a832:	461c      	mov	r4, r3
 800a834:	bb44      	cbnz	r4, 800a888 <_malloc_r+0x88>
 800a836:	4629      	mov	r1, r5
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff ffbf 	bl	800a7bc <sbrk_aligned>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	4604      	mov	r4, r0
 800a842:	d158      	bne.n	800a8f6 <_malloc_r+0xf6>
 800a844:	f8d8 4000 	ldr.w	r4, [r8]
 800a848:	4627      	mov	r7, r4
 800a84a:	2f00      	cmp	r7, #0
 800a84c:	d143      	bne.n	800a8d6 <_malloc_r+0xd6>
 800a84e:	2c00      	cmp	r4, #0
 800a850:	d04b      	beq.n	800a8ea <_malloc_r+0xea>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	4639      	mov	r1, r7
 800a856:	4630      	mov	r0, r6
 800a858:	eb04 0903 	add.w	r9, r4, r3
 800a85c:	f000 fc1a 	bl	800b094 <_sbrk_r>
 800a860:	4581      	cmp	r9, r0
 800a862:	d142      	bne.n	800a8ea <_malloc_r+0xea>
 800a864:	6821      	ldr	r1, [r4, #0]
 800a866:	1a6d      	subs	r5, r5, r1
 800a868:	4629      	mov	r1, r5
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff ffa6 	bl	800a7bc <sbrk_aligned>
 800a870:	3001      	adds	r0, #1
 800a872:	d03a      	beq.n	800a8ea <_malloc_r+0xea>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	442b      	add	r3, r5
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	f8d8 3000 	ldr.w	r3, [r8]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	bb62      	cbnz	r2, 800a8dc <_malloc_r+0xdc>
 800a882:	f8c8 7000 	str.w	r7, [r8]
 800a886:	e00f      	b.n	800a8a8 <_malloc_r+0xa8>
 800a888:	6822      	ldr	r2, [r4, #0]
 800a88a:	1b52      	subs	r2, r2, r5
 800a88c:	d420      	bmi.n	800a8d0 <_malloc_r+0xd0>
 800a88e:	2a0b      	cmp	r2, #11
 800a890:	d917      	bls.n	800a8c2 <_malloc_r+0xc2>
 800a892:	1961      	adds	r1, r4, r5
 800a894:	42a3      	cmp	r3, r4
 800a896:	6025      	str	r5, [r4, #0]
 800a898:	bf18      	it	ne
 800a89a:	6059      	strne	r1, [r3, #4]
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	bf08      	it	eq
 800a8a0:	f8c8 1000 	streq.w	r1, [r8]
 800a8a4:	5162      	str	r2, [r4, r5]
 800a8a6:	604b      	str	r3, [r1, #4]
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f000 f82f 	bl	800a90c <__malloc_unlock>
 800a8ae:	f104 000b 	add.w	r0, r4, #11
 800a8b2:	1d23      	adds	r3, r4, #4
 800a8b4:	f020 0007 	bic.w	r0, r0, #7
 800a8b8:	1ac2      	subs	r2, r0, r3
 800a8ba:	bf1c      	itt	ne
 800a8bc:	1a1b      	subne	r3, r3, r0
 800a8be:	50a3      	strne	r3, [r4, r2]
 800a8c0:	e7af      	b.n	800a822 <_malloc_r+0x22>
 800a8c2:	6862      	ldr	r2, [r4, #4]
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	bf0c      	ite	eq
 800a8c8:	f8c8 2000 	streq.w	r2, [r8]
 800a8cc:	605a      	strne	r2, [r3, #4]
 800a8ce:	e7eb      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	6864      	ldr	r4, [r4, #4]
 800a8d4:	e7ae      	b.n	800a834 <_malloc_r+0x34>
 800a8d6:	463c      	mov	r4, r7
 800a8d8:	687f      	ldr	r7, [r7, #4]
 800a8da:	e7b6      	b.n	800a84a <_malloc_r+0x4a>
 800a8dc:	461a      	mov	r2, r3
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	d1fb      	bne.n	800a8dc <_malloc_r+0xdc>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6053      	str	r3, [r2, #4]
 800a8e8:	e7de      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f000 f80c 	bl	800a90c <__malloc_unlock>
 800a8f4:	e794      	b.n	800a820 <_malloc_r+0x20>
 800a8f6:	6005      	str	r5, [r0, #0]
 800a8f8:	e7d6      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8fa:	bf00      	nop
 800a8fc:	20001684 	.word	0x20001684

0800a900 <__malloc_lock>:
 800a900:	4801      	ldr	r0, [pc, #4]	@ (800a908 <__malloc_lock+0x8>)
 800a902:	f7ff bee8 	b.w	800a6d6 <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	2000167c 	.word	0x2000167c

0800a90c <__malloc_unlock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	@ (800a914 <__malloc_unlock+0x8>)
 800a90e:	f7ff bee3 	b.w	800a6d8 <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	2000167c 	.word	0x2000167c

0800a918 <__ssputs_r>:
 800a918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91c:	688e      	ldr	r6, [r1, #8]
 800a91e:	461f      	mov	r7, r3
 800a920:	42be      	cmp	r6, r7
 800a922:	680b      	ldr	r3, [r1, #0]
 800a924:	4682      	mov	sl, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4690      	mov	r8, r2
 800a92a:	d82d      	bhi.n	800a988 <__ssputs_r+0x70>
 800a92c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a934:	d026      	beq.n	800a984 <__ssputs_r+0x6c>
 800a936:	6965      	ldr	r5, [r4, #20]
 800a938:	6909      	ldr	r1, [r1, #16]
 800a93a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a93e:	eba3 0901 	sub.w	r9, r3, r1
 800a942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a946:	1c7b      	adds	r3, r7, #1
 800a948:	444b      	add	r3, r9
 800a94a:	106d      	asrs	r5, r5, #1
 800a94c:	429d      	cmp	r5, r3
 800a94e:	bf38      	it	cc
 800a950:	461d      	movcc	r5, r3
 800a952:	0553      	lsls	r3, r2, #21
 800a954:	d527      	bpl.n	800a9a6 <__ssputs_r+0x8e>
 800a956:	4629      	mov	r1, r5
 800a958:	f7ff ff52 	bl	800a800 <_malloc_r>
 800a95c:	4606      	mov	r6, r0
 800a95e:	b360      	cbz	r0, 800a9ba <__ssputs_r+0xa2>
 800a960:	6921      	ldr	r1, [r4, #16]
 800a962:	464a      	mov	r2, r9
 800a964:	f000 fba6 	bl	800b0b4 <memcpy>
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a96e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	6126      	str	r6, [r4, #16]
 800a976:	6165      	str	r5, [r4, #20]
 800a978:	444e      	add	r6, r9
 800a97a:	eba5 0509 	sub.w	r5, r5, r9
 800a97e:	6026      	str	r6, [r4, #0]
 800a980:	60a5      	str	r5, [r4, #8]
 800a982:	463e      	mov	r6, r7
 800a984:	42be      	cmp	r6, r7
 800a986:	d900      	bls.n	800a98a <__ssputs_r+0x72>
 800a988:	463e      	mov	r6, r7
 800a98a:	6820      	ldr	r0, [r4, #0]
 800a98c:	4632      	mov	r2, r6
 800a98e:	4641      	mov	r1, r8
 800a990:	f000 fb66 	bl	800b060 <memmove>
 800a994:	68a3      	ldr	r3, [r4, #8]
 800a996:	1b9b      	subs	r3, r3, r6
 800a998:	60a3      	str	r3, [r4, #8]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	4433      	add	r3, r6
 800a99e:	6023      	str	r3, [r4, #0]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	f000 fb99 	bl	800b0de <_realloc_r>
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1e0      	bne.n	800a974 <__ssputs_r+0x5c>
 800a9b2:	6921      	ldr	r1, [r4, #16]
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	f7ff feaf 	bl	800a718 <_free_r>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	f8ca 3000 	str.w	r3, [sl]
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9cc:	e7e9      	b.n	800a9a2 <__ssputs_r+0x8a>
	...

0800a9d0 <_svfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	4698      	mov	r8, r3
 800a9d6:	898b      	ldrh	r3, [r1, #12]
 800a9d8:	061b      	lsls	r3, r3, #24
 800a9da:	b09d      	sub	sp, #116	@ 0x74
 800a9dc:	4607      	mov	r7, r0
 800a9de:	460d      	mov	r5, r1
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	d510      	bpl.n	800aa06 <_svfiprintf_r+0x36>
 800a9e4:	690b      	ldr	r3, [r1, #16]
 800a9e6:	b973      	cbnz	r3, 800aa06 <_svfiprintf_r+0x36>
 800a9e8:	2140      	movs	r1, #64	@ 0x40
 800a9ea:	f7ff ff09 	bl	800a800 <_malloc_r>
 800a9ee:	6028      	str	r0, [r5, #0]
 800a9f0:	6128      	str	r0, [r5, #16]
 800a9f2:	b930      	cbnz	r0, 800aa02 <_svfiprintf_r+0x32>
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9fc:	b01d      	add	sp, #116	@ 0x74
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	2340      	movs	r3, #64	@ 0x40
 800aa04:	616b      	str	r3, [r5, #20]
 800aa06:	2300      	movs	r3, #0
 800aa08:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa10:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa14:	2330      	movs	r3, #48	@ 0x30
 800aa16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abb4 <_svfiprintf_r+0x1e4>
 800aa1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa1e:	f04f 0901 	mov.w	r9, #1
 800aa22:	4623      	mov	r3, r4
 800aa24:	469a      	mov	sl, r3
 800aa26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2a:	b10a      	cbz	r2, 800aa30 <_svfiprintf_r+0x60>
 800aa2c:	2a25      	cmp	r2, #37	@ 0x25
 800aa2e:	d1f9      	bne.n	800aa24 <_svfiprintf_r+0x54>
 800aa30:	ebba 0b04 	subs.w	fp, sl, r4
 800aa34:	d00b      	beq.n	800aa4e <_svfiprintf_r+0x7e>
 800aa36:	465b      	mov	r3, fp
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ff6b 	bl	800a918 <__ssputs_r>
 800aa42:	3001      	adds	r0, #1
 800aa44:	f000 80a7 	beq.w	800ab96 <_svfiprintf_r+0x1c6>
 800aa48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa4a:	445a      	add	r2, fp
 800aa4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa4e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 809f 	beq.w	800ab96 <_svfiprintf_r+0x1c6>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa62:	f10a 0a01 	add.w	sl, sl, #1
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	9307      	str	r3, [sp, #28]
 800aa6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa70:	4654      	mov	r4, sl
 800aa72:	2205      	movs	r2, #5
 800aa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa78:	484e      	ldr	r0, [pc, #312]	@ (800abb4 <_svfiprintf_r+0x1e4>)
 800aa7a:	f7f5 fbb1 	bl	80001e0 <memchr>
 800aa7e:	9a04      	ldr	r2, [sp, #16]
 800aa80:	b9d8      	cbnz	r0, 800aaba <_svfiprintf_r+0xea>
 800aa82:	06d0      	lsls	r0, r2, #27
 800aa84:	bf44      	itt	mi
 800aa86:	2320      	movmi	r3, #32
 800aa88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa8c:	0711      	lsls	r1, r2, #28
 800aa8e:	bf44      	itt	mi
 800aa90:	232b      	movmi	r3, #43	@ 0x2b
 800aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa96:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa9c:	d015      	beq.n	800aaca <_svfiprintf_r+0xfa>
 800aa9e:	9a07      	ldr	r2, [sp, #28]
 800aaa0:	4654      	mov	r4, sl
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f04f 0c0a 	mov.w	ip, #10
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaae:	3b30      	subs	r3, #48	@ 0x30
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	d94b      	bls.n	800ab4c <_svfiprintf_r+0x17c>
 800aab4:	b1b0      	cbz	r0, 800aae4 <_svfiprintf_r+0x114>
 800aab6:	9207      	str	r2, [sp, #28]
 800aab8:	e014      	b.n	800aae4 <_svfiprintf_r+0x114>
 800aaba:	eba0 0308 	sub.w	r3, r0, r8
 800aabe:	fa09 f303 	lsl.w	r3, r9, r3
 800aac2:	4313      	orrs	r3, r2
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	46a2      	mov	sl, r4
 800aac8:	e7d2      	b.n	800aa70 <_svfiprintf_r+0xa0>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d19      	adds	r1, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9103      	str	r1, [sp, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfbb      	ittet	lt
 800aad6:	425b      	neglt	r3, r3
 800aad8:	f042 0202 	orrlt.w	r2, r2, #2
 800aadc:	9307      	strge	r3, [sp, #28]
 800aade:	9307      	strlt	r3, [sp, #28]
 800aae0:	bfb8      	it	lt
 800aae2:	9204      	strlt	r2, [sp, #16]
 800aae4:	7823      	ldrb	r3, [r4, #0]
 800aae6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aae8:	d10a      	bne.n	800ab00 <_svfiprintf_r+0x130>
 800aaea:	7863      	ldrb	r3, [r4, #1]
 800aaec:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaee:	d132      	bne.n	800ab56 <_svfiprintf_r+0x186>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d1a      	adds	r2, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	9203      	str	r2, [sp, #12]
 800aaf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aafc:	3402      	adds	r4, #2
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800abc4 <_svfiprintf_r+0x1f4>
 800ab04:	7821      	ldrb	r1, [r4, #0]
 800ab06:	2203      	movs	r2, #3
 800ab08:	4650      	mov	r0, sl
 800ab0a:	f7f5 fb69 	bl	80001e0 <memchr>
 800ab0e:	b138      	cbz	r0, 800ab20 <_svfiprintf_r+0x150>
 800ab10:	9b04      	ldr	r3, [sp, #16]
 800ab12:	eba0 000a 	sub.w	r0, r0, sl
 800ab16:	2240      	movs	r2, #64	@ 0x40
 800ab18:	4082      	lsls	r2, r0
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	3401      	adds	r4, #1
 800ab1e:	9304      	str	r3, [sp, #16]
 800ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab24:	4824      	ldr	r0, [pc, #144]	@ (800abb8 <_svfiprintf_r+0x1e8>)
 800ab26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab2a:	2206      	movs	r2, #6
 800ab2c:	f7f5 fb58 	bl	80001e0 <memchr>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d036      	beq.n	800aba2 <_svfiprintf_r+0x1d2>
 800ab34:	4b21      	ldr	r3, [pc, #132]	@ (800abbc <_svfiprintf_r+0x1ec>)
 800ab36:	bb1b      	cbnz	r3, 800ab80 <_svfiprintf_r+0x1b0>
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	3307      	adds	r3, #7
 800ab3c:	f023 0307 	bic.w	r3, r3, #7
 800ab40:	3308      	adds	r3, #8
 800ab42:	9303      	str	r3, [sp, #12]
 800ab44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab46:	4433      	add	r3, r6
 800ab48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab4a:	e76a      	b.n	800aa22 <_svfiprintf_r+0x52>
 800ab4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab50:	460c      	mov	r4, r1
 800ab52:	2001      	movs	r0, #1
 800ab54:	e7a8      	b.n	800aaa8 <_svfiprintf_r+0xd8>
 800ab56:	2300      	movs	r3, #0
 800ab58:	3401      	adds	r4, #1
 800ab5a:	9305      	str	r3, [sp, #20]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f04f 0c0a 	mov.w	ip, #10
 800ab62:	4620      	mov	r0, r4
 800ab64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab68:	3a30      	subs	r2, #48	@ 0x30
 800ab6a:	2a09      	cmp	r2, #9
 800ab6c:	d903      	bls.n	800ab76 <_svfiprintf_r+0x1a6>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0c6      	beq.n	800ab00 <_svfiprintf_r+0x130>
 800ab72:	9105      	str	r1, [sp, #20]
 800ab74:	e7c4      	b.n	800ab00 <_svfiprintf_r+0x130>
 800ab76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e7f0      	b.n	800ab62 <_svfiprintf_r+0x192>
 800ab80:	ab03      	add	r3, sp, #12
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	462a      	mov	r2, r5
 800ab86:	4b0e      	ldr	r3, [pc, #56]	@ (800abc0 <_svfiprintf_r+0x1f0>)
 800ab88:	a904      	add	r1, sp, #16
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f3af 8000 	nop.w
 800ab90:	1c42      	adds	r2, r0, #1
 800ab92:	4606      	mov	r6, r0
 800ab94:	d1d6      	bne.n	800ab44 <_svfiprintf_r+0x174>
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	065b      	lsls	r3, r3, #25
 800ab9a:	f53f af2d 	bmi.w	800a9f8 <_svfiprintf_r+0x28>
 800ab9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aba0:	e72c      	b.n	800a9fc <_svfiprintf_r+0x2c>
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	462a      	mov	r2, r5
 800aba8:	4b05      	ldr	r3, [pc, #20]	@ (800abc0 <_svfiprintf_r+0x1f0>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	4638      	mov	r0, r7
 800abae:	f000 f879 	bl	800aca4 <_printf_i>
 800abb2:	e7ed      	b.n	800ab90 <_svfiprintf_r+0x1c0>
 800abb4:	0800b7e3 	.word	0x0800b7e3
 800abb8:	0800b7ed 	.word	0x0800b7ed
 800abbc:	00000000 	.word	0x00000000
 800abc0:	0800a919 	.word	0x0800a919
 800abc4:	0800b7e9 	.word	0x0800b7e9

0800abc8 <_printf_common>:
 800abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	4616      	mov	r6, r2
 800abce:	4698      	mov	r8, r3
 800abd0:	688a      	ldr	r2, [r1, #8]
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abd8:	4293      	cmp	r3, r2
 800abda:	bfb8      	it	lt
 800abdc:	4613      	movlt	r3, r2
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abe4:	4607      	mov	r7, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b10a      	cbz	r2, 800abee <_printf_common+0x26>
 800abea:	3301      	adds	r3, #1
 800abec:	6033      	str	r3, [r6, #0]
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	0699      	lsls	r1, r3, #26
 800abf2:	bf42      	ittt	mi
 800abf4:	6833      	ldrmi	r3, [r6, #0]
 800abf6:	3302      	addmi	r3, #2
 800abf8:	6033      	strmi	r3, [r6, #0]
 800abfa:	6825      	ldr	r5, [r4, #0]
 800abfc:	f015 0506 	ands.w	r5, r5, #6
 800ac00:	d106      	bne.n	800ac10 <_printf_common+0x48>
 800ac02:	f104 0a19 	add.w	sl, r4, #25
 800ac06:	68e3      	ldr	r3, [r4, #12]
 800ac08:	6832      	ldr	r2, [r6, #0]
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc26      	bgt.n	800ac5e <_printf_common+0x96>
 800ac10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac14:	6822      	ldr	r2, [r4, #0]
 800ac16:	3b00      	subs	r3, #0
 800ac18:	bf18      	it	ne
 800ac1a:	2301      	movne	r3, #1
 800ac1c:	0692      	lsls	r2, r2, #26
 800ac1e:	d42b      	bmi.n	800ac78 <_printf_common+0xb0>
 800ac20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac24:	4641      	mov	r1, r8
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c8      	blx	r9
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d01e      	beq.n	800ac6c <_printf_common+0xa4>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	6922      	ldr	r2, [r4, #16]
 800ac32:	f003 0306 	and.w	r3, r3, #6
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	bf02      	ittt	eq
 800ac3a:	68e5      	ldreq	r5, [r4, #12]
 800ac3c:	6833      	ldreq	r3, [r6, #0]
 800ac3e:	1aed      	subeq	r5, r5, r3
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	bf0c      	ite	eq
 800ac44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac48:	2500      	movne	r5, #0
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	bfc4      	itt	gt
 800ac4e:	1a9b      	subgt	r3, r3, r2
 800ac50:	18ed      	addgt	r5, r5, r3
 800ac52:	2600      	movs	r6, #0
 800ac54:	341a      	adds	r4, #26
 800ac56:	42b5      	cmp	r5, r6
 800ac58:	d11a      	bne.n	800ac90 <_printf_common+0xc8>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e008      	b.n	800ac70 <_printf_common+0xa8>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4652      	mov	r2, sl
 800ac62:	4641      	mov	r1, r8
 800ac64:	4638      	mov	r0, r7
 800ac66:	47c8      	blx	r9
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d103      	bne.n	800ac74 <_printf_common+0xac>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac74:	3501      	adds	r5, #1
 800ac76:	e7c6      	b.n	800ac06 <_printf_common+0x3e>
 800ac78:	18e1      	adds	r1, r4, r3
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	2030      	movs	r0, #48	@ 0x30
 800ac7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac82:	4422      	add	r2, r4
 800ac84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	e7c7      	b.n	800ac20 <_printf_common+0x58>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4622      	mov	r2, r4
 800ac94:	4641      	mov	r1, r8
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c8      	blx	r9
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d0e6      	beq.n	800ac6c <_printf_common+0xa4>
 800ac9e:	3601      	adds	r6, #1
 800aca0:	e7d9      	b.n	800ac56 <_printf_common+0x8e>
	...

0800aca4 <_printf_i>:
 800aca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	7e0f      	ldrb	r7, [r1, #24]
 800acaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acac:	2f78      	cmp	r7, #120	@ 0x78
 800acae:	4691      	mov	r9, r2
 800acb0:	4680      	mov	r8, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	469a      	mov	sl, r3
 800acb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acba:	d807      	bhi.n	800accc <_printf_i+0x28>
 800acbc:	2f62      	cmp	r7, #98	@ 0x62
 800acbe:	d80a      	bhi.n	800acd6 <_printf_i+0x32>
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	f000 80d2 	beq.w	800ae6a <_printf_i+0x1c6>
 800acc6:	2f58      	cmp	r7, #88	@ 0x58
 800acc8:	f000 80b9 	beq.w	800ae3e <_printf_i+0x19a>
 800accc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acd4:	e03a      	b.n	800ad4c <_printf_i+0xa8>
 800acd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acda:	2b15      	cmp	r3, #21
 800acdc:	d8f6      	bhi.n	800accc <_printf_i+0x28>
 800acde:	a101      	add	r1, pc, #4	@ (adr r1, 800ace4 <_printf_i+0x40>)
 800ace0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad51 	.word	0x0800ad51
 800acec:	0800accd 	.word	0x0800accd
 800acf0:	0800accd 	.word	0x0800accd
 800acf4:	0800accd 	.word	0x0800accd
 800acf8:	0800accd 	.word	0x0800accd
 800acfc:	0800ad51 	.word	0x0800ad51
 800ad00:	0800accd 	.word	0x0800accd
 800ad04:	0800accd 	.word	0x0800accd
 800ad08:	0800accd 	.word	0x0800accd
 800ad0c:	0800accd 	.word	0x0800accd
 800ad10:	0800ae51 	.word	0x0800ae51
 800ad14:	0800ad7b 	.word	0x0800ad7b
 800ad18:	0800ae0b 	.word	0x0800ae0b
 800ad1c:	0800accd 	.word	0x0800accd
 800ad20:	0800accd 	.word	0x0800accd
 800ad24:	0800ae73 	.word	0x0800ae73
 800ad28:	0800accd 	.word	0x0800accd
 800ad2c:	0800ad7b 	.word	0x0800ad7b
 800ad30:	0800accd 	.word	0x0800accd
 800ad34:	0800accd 	.word	0x0800accd
 800ad38:	0800ae13 	.word	0x0800ae13
 800ad3c:	6833      	ldr	r3, [r6, #0]
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6032      	str	r2, [r6, #0]
 800ad44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e09d      	b.n	800ae8c <_printf_i+0x1e8>
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	1d19      	adds	r1, r3, #4
 800ad56:	6031      	str	r1, [r6, #0]
 800ad58:	0606      	lsls	r6, r0, #24
 800ad5a:	d501      	bpl.n	800ad60 <_printf_i+0xbc>
 800ad5c:	681d      	ldr	r5, [r3, #0]
 800ad5e:	e003      	b.n	800ad68 <_printf_i+0xc4>
 800ad60:	0645      	lsls	r5, r0, #25
 800ad62:	d5fb      	bpl.n	800ad5c <_printf_i+0xb8>
 800ad64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	da03      	bge.n	800ad74 <_printf_i+0xd0>
 800ad6c:	232d      	movs	r3, #45	@ 0x2d
 800ad6e:	426d      	negs	r5, r5
 800ad70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad74:	4859      	ldr	r0, [pc, #356]	@ (800aedc <_printf_i+0x238>)
 800ad76:	230a      	movs	r3, #10
 800ad78:	e011      	b.n	800ad9e <_printf_i+0xfa>
 800ad7a:	6821      	ldr	r1, [r4, #0]
 800ad7c:	6833      	ldr	r3, [r6, #0]
 800ad7e:	0608      	lsls	r0, r1, #24
 800ad80:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad84:	d402      	bmi.n	800ad8c <_printf_i+0xe8>
 800ad86:	0649      	lsls	r1, r1, #25
 800ad88:	bf48      	it	mi
 800ad8a:	b2ad      	uxthmi	r5, r5
 800ad8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad8e:	4853      	ldr	r0, [pc, #332]	@ (800aedc <_printf_i+0x238>)
 800ad90:	6033      	str	r3, [r6, #0]
 800ad92:	bf14      	ite	ne
 800ad94:	230a      	movne	r3, #10
 800ad96:	2308      	moveq	r3, #8
 800ad98:	2100      	movs	r1, #0
 800ad9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad9e:	6866      	ldr	r6, [r4, #4]
 800ada0:	60a6      	str	r6, [r4, #8]
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	bfa2      	ittt	ge
 800ada6:	6821      	ldrge	r1, [r4, #0]
 800ada8:	f021 0104 	bicge.w	r1, r1, #4
 800adac:	6021      	strge	r1, [r4, #0]
 800adae:	b90d      	cbnz	r5, 800adb4 <_printf_i+0x110>
 800adb0:	2e00      	cmp	r6, #0
 800adb2:	d04b      	beq.n	800ae4c <_printf_i+0x1a8>
 800adb4:	4616      	mov	r6, r2
 800adb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800adba:	fb03 5711 	mls	r7, r3, r1, r5
 800adbe:	5dc7      	ldrb	r7, [r0, r7]
 800adc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adc4:	462f      	mov	r7, r5
 800adc6:	42bb      	cmp	r3, r7
 800adc8:	460d      	mov	r5, r1
 800adca:	d9f4      	bls.n	800adb6 <_printf_i+0x112>
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d10b      	bne.n	800ade8 <_printf_i+0x144>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	07df      	lsls	r7, r3, #31
 800add4:	d508      	bpl.n	800ade8 <_printf_i+0x144>
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	6861      	ldr	r1, [r4, #4]
 800adda:	4299      	cmp	r1, r3
 800addc:	bfde      	ittt	le
 800adde:	2330      	movle	r3, #48	@ 0x30
 800ade0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ade4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ade8:	1b92      	subs	r2, r2, r6
 800adea:	6122      	str	r2, [r4, #16]
 800adec:	f8cd a000 	str.w	sl, [sp]
 800adf0:	464b      	mov	r3, r9
 800adf2:	aa03      	add	r2, sp, #12
 800adf4:	4621      	mov	r1, r4
 800adf6:	4640      	mov	r0, r8
 800adf8:	f7ff fee6 	bl	800abc8 <_printf_common>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d14a      	bne.n	800ae96 <_printf_i+0x1f2>
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae04:	b004      	add	sp, #16
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	f043 0320 	orr.w	r3, r3, #32
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	4833      	ldr	r0, [pc, #204]	@ (800aee0 <_printf_i+0x23c>)
 800ae14:	2778      	movs	r7, #120	@ 0x78
 800ae16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	6831      	ldr	r1, [r6, #0]
 800ae1e:	061f      	lsls	r7, r3, #24
 800ae20:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae24:	d402      	bmi.n	800ae2c <_printf_i+0x188>
 800ae26:	065f      	lsls	r7, r3, #25
 800ae28:	bf48      	it	mi
 800ae2a:	b2ad      	uxthmi	r5, r5
 800ae2c:	6031      	str	r1, [r6, #0]
 800ae2e:	07d9      	lsls	r1, r3, #31
 800ae30:	bf44      	itt	mi
 800ae32:	f043 0320 	orrmi.w	r3, r3, #32
 800ae36:	6023      	strmi	r3, [r4, #0]
 800ae38:	b11d      	cbz	r5, 800ae42 <_printf_i+0x19e>
 800ae3a:	2310      	movs	r3, #16
 800ae3c:	e7ac      	b.n	800ad98 <_printf_i+0xf4>
 800ae3e:	4827      	ldr	r0, [pc, #156]	@ (800aedc <_printf_i+0x238>)
 800ae40:	e7e9      	b.n	800ae16 <_printf_i+0x172>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	f023 0320 	bic.w	r3, r3, #32
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	e7f6      	b.n	800ae3a <_printf_i+0x196>
 800ae4c:	4616      	mov	r6, r2
 800ae4e:	e7bd      	b.n	800adcc <_printf_i+0x128>
 800ae50:	6833      	ldr	r3, [r6, #0]
 800ae52:	6825      	ldr	r5, [r4, #0]
 800ae54:	6961      	ldr	r1, [r4, #20]
 800ae56:	1d18      	adds	r0, r3, #4
 800ae58:	6030      	str	r0, [r6, #0]
 800ae5a:	062e      	lsls	r6, r5, #24
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	d501      	bpl.n	800ae64 <_printf_i+0x1c0>
 800ae60:	6019      	str	r1, [r3, #0]
 800ae62:	e002      	b.n	800ae6a <_printf_i+0x1c6>
 800ae64:	0668      	lsls	r0, r5, #25
 800ae66:	d5fb      	bpl.n	800ae60 <_printf_i+0x1bc>
 800ae68:	8019      	strh	r1, [r3, #0]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	4616      	mov	r6, r2
 800ae70:	e7bc      	b.n	800adec <_printf_i+0x148>
 800ae72:	6833      	ldr	r3, [r6, #0]
 800ae74:	1d1a      	adds	r2, r3, #4
 800ae76:	6032      	str	r2, [r6, #0]
 800ae78:	681e      	ldr	r6, [r3, #0]
 800ae7a:	6862      	ldr	r2, [r4, #4]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f7f5 f9ae 	bl	80001e0 <memchr>
 800ae84:	b108      	cbz	r0, 800ae8a <_printf_i+0x1e6>
 800ae86:	1b80      	subs	r0, r0, r6
 800ae88:	6060      	str	r0, [r4, #4]
 800ae8a:	6863      	ldr	r3, [r4, #4]
 800ae8c:	6123      	str	r3, [r4, #16]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae94:	e7aa      	b.n	800adec <_printf_i+0x148>
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	47d0      	blx	sl
 800aea0:	3001      	adds	r0, #1
 800aea2:	d0ad      	beq.n	800ae00 <_printf_i+0x15c>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	079b      	lsls	r3, r3, #30
 800aea8:	d413      	bmi.n	800aed2 <_printf_i+0x22e>
 800aeaa:	68e0      	ldr	r0, [r4, #12]
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	4298      	cmp	r0, r3
 800aeb0:	bfb8      	it	lt
 800aeb2:	4618      	movlt	r0, r3
 800aeb4:	e7a6      	b.n	800ae04 <_printf_i+0x160>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4649      	mov	r1, r9
 800aebc:	4640      	mov	r0, r8
 800aebe:	47d0      	blx	sl
 800aec0:	3001      	adds	r0, #1
 800aec2:	d09d      	beq.n	800ae00 <_printf_i+0x15c>
 800aec4:	3501      	adds	r5, #1
 800aec6:	68e3      	ldr	r3, [r4, #12]
 800aec8:	9903      	ldr	r1, [sp, #12]
 800aeca:	1a5b      	subs	r3, r3, r1
 800aecc:	42ab      	cmp	r3, r5
 800aece:	dcf2      	bgt.n	800aeb6 <_printf_i+0x212>
 800aed0:	e7eb      	b.n	800aeaa <_printf_i+0x206>
 800aed2:	2500      	movs	r5, #0
 800aed4:	f104 0619 	add.w	r6, r4, #25
 800aed8:	e7f5      	b.n	800aec6 <_printf_i+0x222>
 800aeda:	bf00      	nop
 800aedc:	0800b7f4 	.word	0x0800b7f4
 800aee0:	0800b805 	.word	0x0800b805

0800aee4 <__sflush_r>:
 800aee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	0716      	lsls	r6, r2, #28
 800aeee:	4605      	mov	r5, r0
 800aef0:	460c      	mov	r4, r1
 800aef2:	d454      	bmi.n	800af9e <__sflush_r+0xba>
 800aef4:	684b      	ldr	r3, [r1, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dc02      	bgt.n	800af00 <__sflush_r+0x1c>
 800aefa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd48      	ble.n	800af92 <__sflush_r+0xae>
 800af00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af02:	2e00      	cmp	r6, #0
 800af04:	d045      	beq.n	800af92 <__sflush_r+0xae>
 800af06:	2300      	movs	r3, #0
 800af08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af0c:	682f      	ldr	r7, [r5, #0]
 800af0e:	6a21      	ldr	r1, [r4, #32]
 800af10:	602b      	str	r3, [r5, #0]
 800af12:	d030      	beq.n	800af76 <__sflush_r+0x92>
 800af14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	0759      	lsls	r1, r3, #29
 800af1a:	d505      	bpl.n	800af28 <__sflush_r+0x44>
 800af1c:	6863      	ldr	r3, [r4, #4]
 800af1e:	1ad2      	subs	r2, r2, r3
 800af20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af22:	b10b      	cbz	r3, 800af28 <__sflush_r+0x44>
 800af24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af26:	1ad2      	subs	r2, r2, r3
 800af28:	2300      	movs	r3, #0
 800af2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af2c:	6a21      	ldr	r1, [r4, #32]
 800af2e:	4628      	mov	r0, r5
 800af30:	47b0      	blx	r6
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	d106      	bne.n	800af46 <__sflush_r+0x62>
 800af38:	6829      	ldr	r1, [r5, #0]
 800af3a:	291d      	cmp	r1, #29
 800af3c:	d82b      	bhi.n	800af96 <__sflush_r+0xb2>
 800af3e:	4a2a      	ldr	r2, [pc, #168]	@ (800afe8 <__sflush_r+0x104>)
 800af40:	410a      	asrs	r2, r1
 800af42:	07d6      	lsls	r6, r2, #31
 800af44:	d427      	bmi.n	800af96 <__sflush_r+0xb2>
 800af46:	2200      	movs	r2, #0
 800af48:	6062      	str	r2, [r4, #4]
 800af4a:	04d9      	lsls	r1, r3, #19
 800af4c:	6922      	ldr	r2, [r4, #16]
 800af4e:	6022      	str	r2, [r4, #0]
 800af50:	d504      	bpl.n	800af5c <__sflush_r+0x78>
 800af52:	1c42      	adds	r2, r0, #1
 800af54:	d101      	bne.n	800af5a <__sflush_r+0x76>
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	b903      	cbnz	r3, 800af5c <__sflush_r+0x78>
 800af5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af5e:	602f      	str	r7, [r5, #0]
 800af60:	b1b9      	cbz	r1, 800af92 <__sflush_r+0xae>
 800af62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af66:	4299      	cmp	r1, r3
 800af68:	d002      	beq.n	800af70 <__sflush_r+0x8c>
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7ff fbd4 	bl	800a718 <_free_r>
 800af70:	2300      	movs	r3, #0
 800af72:	6363      	str	r3, [r4, #52]	@ 0x34
 800af74:	e00d      	b.n	800af92 <__sflush_r+0xae>
 800af76:	2301      	movs	r3, #1
 800af78:	4628      	mov	r0, r5
 800af7a:	47b0      	blx	r6
 800af7c:	4602      	mov	r2, r0
 800af7e:	1c50      	adds	r0, r2, #1
 800af80:	d1c9      	bne.n	800af16 <__sflush_r+0x32>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0c6      	beq.n	800af16 <__sflush_r+0x32>
 800af88:	2b1d      	cmp	r3, #29
 800af8a:	d001      	beq.n	800af90 <__sflush_r+0xac>
 800af8c:	2b16      	cmp	r3, #22
 800af8e:	d11e      	bne.n	800afce <__sflush_r+0xea>
 800af90:	602f      	str	r7, [r5, #0]
 800af92:	2000      	movs	r0, #0
 800af94:	e022      	b.n	800afdc <__sflush_r+0xf8>
 800af96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af9a:	b21b      	sxth	r3, r3
 800af9c:	e01b      	b.n	800afd6 <__sflush_r+0xf2>
 800af9e:	690f      	ldr	r7, [r1, #16]
 800afa0:	2f00      	cmp	r7, #0
 800afa2:	d0f6      	beq.n	800af92 <__sflush_r+0xae>
 800afa4:	0793      	lsls	r3, r2, #30
 800afa6:	680e      	ldr	r6, [r1, #0]
 800afa8:	bf08      	it	eq
 800afaa:	694b      	ldreq	r3, [r1, #20]
 800afac:	600f      	str	r7, [r1, #0]
 800afae:	bf18      	it	ne
 800afb0:	2300      	movne	r3, #0
 800afb2:	eba6 0807 	sub.w	r8, r6, r7
 800afb6:	608b      	str	r3, [r1, #8]
 800afb8:	f1b8 0f00 	cmp.w	r8, #0
 800afbc:	dde9      	ble.n	800af92 <__sflush_r+0xae>
 800afbe:	6a21      	ldr	r1, [r4, #32]
 800afc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afc2:	4643      	mov	r3, r8
 800afc4:	463a      	mov	r2, r7
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b0      	blx	r6
 800afca:	2800      	cmp	r0, #0
 800afcc:	dc08      	bgt.n	800afe0 <__sflush_r+0xfc>
 800afce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe0:	4407      	add	r7, r0
 800afe2:	eba8 0800 	sub.w	r8, r8, r0
 800afe6:	e7e7      	b.n	800afb8 <__sflush_r+0xd4>
 800afe8:	dfbffffe 	.word	0xdfbffffe

0800afec <_fflush_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	690b      	ldr	r3, [r1, #16]
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b913      	cbnz	r3, 800affc <_fflush_r+0x10>
 800aff6:	2500      	movs	r5, #0
 800aff8:	4628      	mov	r0, r5
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	b118      	cbz	r0, 800b006 <_fflush_r+0x1a>
 800affe:	6a03      	ldr	r3, [r0, #32]
 800b000:	b90b      	cbnz	r3, 800b006 <_fflush_r+0x1a>
 800b002:	f7ff fa41 	bl	800a488 <__sinit>
 800b006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0f3      	beq.n	800aff6 <_fflush_r+0xa>
 800b00e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b010:	07d0      	lsls	r0, r2, #31
 800b012:	d404      	bmi.n	800b01e <_fflush_r+0x32>
 800b014:	0599      	lsls	r1, r3, #22
 800b016:	d402      	bmi.n	800b01e <_fflush_r+0x32>
 800b018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b01a:	f7ff fb5c 	bl	800a6d6 <__retarget_lock_acquire_recursive>
 800b01e:	4628      	mov	r0, r5
 800b020:	4621      	mov	r1, r4
 800b022:	f7ff ff5f 	bl	800aee4 <__sflush_r>
 800b026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b028:	07da      	lsls	r2, r3, #31
 800b02a:	4605      	mov	r5, r0
 800b02c:	d4e4      	bmi.n	800aff8 <_fflush_r+0xc>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	059b      	lsls	r3, r3, #22
 800b032:	d4e1      	bmi.n	800aff8 <_fflush_r+0xc>
 800b034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b036:	f7ff fb4f 	bl	800a6d8 <__retarget_lock_release_recursive>
 800b03a:	e7dd      	b.n	800aff8 <_fflush_r+0xc>

0800b03c <fiprintf>:
 800b03c:	b40e      	push	{r1, r2, r3}
 800b03e:	b503      	push	{r0, r1, lr}
 800b040:	4601      	mov	r1, r0
 800b042:	ab03      	add	r3, sp, #12
 800b044:	4805      	ldr	r0, [pc, #20]	@ (800b05c <fiprintf+0x20>)
 800b046:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04a:	6800      	ldr	r0, [r0, #0]
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	f000 f89d 	bl	800b18c <_vfiprintf_r>
 800b052:	b002      	add	sp, #8
 800b054:	f85d eb04 	ldr.w	lr, [sp], #4
 800b058:	b003      	add	sp, #12
 800b05a:	4770      	bx	lr
 800b05c:	20000188 	.word	0x20000188

0800b060 <memmove>:
 800b060:	4288      	cmp	r0, r1
 800b062:	b510      	push	{r4, lr}
 800b064:	eb01 0402 	add.w	r4, r1, r2
 800b068:	d902      	bls.n	800b070 <memmove+0x10>
 800b06a:	4284      	cmp	r4, r0
 800b06c:	4623      	mov	r3, r4
 800b06e:	d807      	bhi.n	800b080 <memmove+0x20>
 800b070:	1e43      	subs	r3, r0, #1
 800b072:	42a1      	cmp	r1, r4
 800b074:	d008      	beq.n	800b088 <memmove+0x28>
 800b076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b07a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07e:	e7f8      	b.n	800b072 <memmove+0x12>
 800b080:	4402      	add	r2, r0
 800b082:	4601      	mov	r1, r0
 800b084:	428a      	cmp	r2, r1
 800b086:	d100      	bne.n	800b08a <memmove+0x2a>
 800b088:	bd10      	pop	{r4, pc}
 800b08a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b092:	e7f7      	b.n	800b084 <memmove+0x24>

0800b094 <_sbrk_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	@ (800b0b0 <_sbrk_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f5 fba6 	bl	80007f0 <_sbrk>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_sbrk_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_sbrk_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20001678 	.word	0x20001678

0800b0b4 <memcpy>:
 800b0b4:	440a      	add	r2, r1
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b0bc:	d100      	bne.n	800b0c0 <memcpy+0xc>
 800b0be:	4770      	bx	lr
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ca:	4291      	cmp	r1, r2
 800b0cc:	d1f9      	bne.n	800b0c2 <memcpy+0xe>
 800b0ce:	bd10      	pop	{r4, pc}

0800b0d0 <abort>:
 800b0d0:	b508      	push	{r3, lr}
 800b0d2:	2006      	movs	r0, #6
 800b0d4:	f000 fa2e 	bl	800b534 <raise>
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f7f5 fb11 	bl	8000700 <_exit>

0800b0de <_realloc_r>:
 800b0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e2:	4680      	mov	r8, r0
 800b0e4:	4615      	mov	r5, r2
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b921      	cbnz	r1, 800b0f4 <_realloc_r+0x16>
 800b0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	f7ff bb86 	b.w	800a800 <_malloc_r>
 800b0f4:	b92a      	cbnz	r2, 800b102 <_realloc_r+0x24>
 800b0f6:	f7ff fb0f 	bl	800a718 <_free_r>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b102:	f000 fa33 	bl	800b56c <_malloc_usable_size_r>
 800b106:	4285      	cmp	r5, r0
 800b108:	4606      	mov	r6, r0
 800b10a:	d802      	bhi.n	800b112 <_realloc_r+0x34>
 800b10c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b110:	d8f4      	bhi.n	800b0fc <_realloc_r+0x1e>
 800b112:	4629      	mov	r1, r5
 800b114:	4640      	mov	r0, r8
 800b116:	f7ff fb73 	bl	800a800 <_malloc_r>
 800b11a:	4607      	mov	r7, r0
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d0ec      	beq.n	800b0fa <_realloc_r+0x1c>
 800b120:	42b5      	cmp	r5, r6
 800b122:	462a      	mov	r2, r5
 800b124:	4621      	mov	r1, r4
 800b126:	bf28      	it	cs
 800b128:	4632      	movcs	r2, r6
 800b12a:	f7ff ffc3 	bl	800b0b4 <memcpy>
 800b12e:	4621      	mov	r1, r4
 800b130:	4640      	mov	r0, r8
 800b132:	f7ff faf1 	bl	800a718 <_free_r>
 800b136:	463c      	mov	r4, r7
 800b138:	e7e0      	b.n	800b0fc <_realloc_r+0x1e>

0800b13a <__sfputc_r>:
 800b13a:	6893      	ldr	r3, [r2, #8]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	b410      	push	{r4}
 800b142:	6093      	str	r3, [r2, #8]
 800b144:	da08      	bge.n	800b158 <__sfputc_r+0x1e>
 800b146:	6994      	ldr	r4, [r2, #24]
 800b148:	42a3      	cmp	r3, r4
 800b14a:	db01      	blt.n	800b150 <__sfputc_r+0x16>
 800b14c:	290a      	cmp	r1, #10
 800b14e:	d103      	bne.n	800b158 <__sfputc_r+0x1e>
 800b150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b154:	f000 b932 	b.w	800b3bc <__swbuf_r>
 800b158:	6813      	ldr	r3, [r2, #0]
 800b15a:	1c58      	adds	r0, r3, #1
 800b15c:	6010      	str	r0, [r2, #0]
 800b15e:	7019      	strb	r1, [r3, #0]
 800b160:	4608      	mov	r0, r1
 800b162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <__sfputs_r>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	4606      	mov	r6, r0
 800b16c:	460f      	mov	r7, r1
 800b16e:	4614      	mov	r4, r2
 800b170:	18d5      	adds	r5, r2, r3
 800b172:	42ac      	cmp	r4, r5
 800b174:	d101      	bne.n	800b17a <__sfputs_r+0x12>
 800b176:	2000      	movs	r0, #0
 800b178:	e007      	b.n	800b18a <__sfputs_r+0x22>
 800b17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17e:	463a      	mov	r2, r7
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff ffda 	bl	800b13a <__sfputc_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d1f3      	bne.n	800b172 <__sfputs_r+0xa>
 800b18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b18c <_vfiprintf_r>:
 800b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	460d      	mov	r5, r1
 800b192:	b09d      	sub	sp, #116	@ 0x74
 800b194:	4614      	mov	r4, r2
 800b196:	4698      	mov	r8, r3
 800b198:	4606      	mov	r6, r0
 800b19a:	b118      	cbz	r0, 800b1a4 <_vfiprintf_r+0x18>
 800b19c:	6a03      	ldr	r3, [r0, #32]
 800b19e:	b90b      	cbnz	r3, 800b1a4 <_vfiprintf_r+0x18>
 800b1a0:	f7ff f972 	bl	800a488 <__sinit>
 800b1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a6:	07d9      	lsls	r1, r3, #31
 800b1a8:	d405      	bmi.n	800b1b6 <_vfiprintf_r+0x2a>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	059a      	lsls	r2, r3, #22
 800b1ae:	d402      	bmi.n	800b1b6 <_vfiprintf_r+0x2a>
 800b1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b2:	f7ff fa90 	bl	800a6d6 <__retarget_lock_acquire_recursive>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	071b      	lsls	r3, r3, #28
 800b1ba:	d501      	bpl.n	800b1c0 <_vfiprintf_r+0x34>
 800b1bc:	692b      	ldr	r3, [r5, #16]
 800b1be:	b99b      	cbnz	r3, 800b1e8 <_vfiprintf_r+0x5c>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f000 f938 	bl	800b438 <__swsetup_r>
 800b1c8:	b170      	cbz	r0, 800b1e8 <_vfiprintf_r+0x5c>
 800b1ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1cc:	07dc      	lsls	r4, r3, #31
 800b1ce:	d504      	bpl.n	800b1da <_vfiprintf_r+0x4e>
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1d4:	b01d      	add	sp, #116	@ 0x74
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	0598      	lsls	r0, r3, #22
 800b1de:	d4f7      	bmi.n	800b1d0 <_vfiprintf_r+0x44>
 800b1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e2:	f7ff fa79 	bl	800a6d8 <__retarget_lock_release_recursive>
 800b1e6:	e7f3      	b.n	800b1d0 <_vfiprintf_r+0x44>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f6:	2330      	movs	r3, #48	@ 0x30
 800b1f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a8 <_vfiprintf_r+0x21c>
 800b1fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b200:	f04f 0901 	mov.w	r9, #1
 800b204:	4623      	mov	r3, r4
 800b206:	469a      	mov	sl, r3
 800b208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b20c:	b10a      	cbz	r2, 800b212 <_vfiprintf_r+0x86>
 800b20e:	2a25      	cmp	r2, #37	@ 0x25
 800b210:	d1f9      	bne.n	800b206 <_vfiprintf_r+0x7a>
 800b212:	ebba 0b04 	subs.w	fp, sl, r4
 800b216:	d00b      	beq.n	800b230 <_vfiprintf_r+0xa4>
 800b218:	465b      	mov	r3, fp
 800b21a:	4622      	mov	r2, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	4630      	mov	r0, r6
 800b220:	f7ff ffa2 	bl	800b168 <__sfputs_r>
 800b224:	3001      	adds	r0, #1
 800b226:	f000 80a7 	beq.w	800b378 <_vfiprintf_r+0x1ec>
 800b22a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b22c:	445a      	add	r2, fp
 800b22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 809f 	beq.w	800b378 <_vfiprintf_r+0x1ec>
 800b23a:	2300      	movs	r3, #0
 800b23c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b244:	f10a 0a01 	add.w	sl, sl, #1
 800b248:	9304      	str	r3, [sp, #16]
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b250:	931a      	str	r3, [sp, #104]	@ 0x68
 800b252:	4654      	mov	r4, sl
 800b254:	2205      	movs	r2, #5
 800b256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25a:	4853      	ldr	r0, [pc, #332]	@ (800b3a8 <_vfiprintf_r+0x21c>)
 800b25c:	f7f4 ffc0 	bl	80001e0 <memchr>
 800b260:	9a04      	ldr	r2, [sp, #16]
 800b262:	b9d8      	cbnz	r0, 800b29c <_vfiprintf_r+0x110>
 800b264:	06d1      	lsls	r1, r2, #27
 800b266:	bf44      	itt	mi
 800b268:	2320      	movmi	r3, #32
 800b26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26e:	0713      	lsls	r3, r2, #28
 800b270:	bf44      	itt	mi
 800b272:	232b      	movmi	r3, #43	@ 0x2b
 800b274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b278:	f89a 3000 	ldrb.w	r3, [sl]
 800b27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27e:	d015      	beq.n	800b2ac <_vfiprintf_r+0x120>
 800b280:	9a07      	ldr	r2, [sp, #28]
 800b282:	4654      	mov	r4, sl
 800b284:	2000      	movs	r0, #0
 800b286:	f04f 0c0a 	mov.w	ip, #10
 800b28a:	4621      	mov	r1, r4
 800b28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b290:	3b30      	subs	r3, #48	@ 0x30
 800b292:	2b09      	cmp	r3, #9
 800b294:	d94b      	bls.n	800b32e <_vfiprintf_r+0x1a2>
 800b296:	b1b0      	cbz	r0, 800b2c6 <_vfiprintf_r+0x13a>
 800b298:	9207      	str	r2, [sp, #28]
 800b29a:	e014      	b.n	800b2c6 <_vfiprintf_r+0x13a>
 800b29c:	eba0 0308 	sub.w	r3, r0, r8
 800b2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	9304      	str	r3, [sp, #16]
 800b2a8:	46a2      	mov	sl, r4
 800b2aa:	e7d2      	b.n	800b252 <_vfiprintf_r+0xc6>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	1d19      	adds	r1, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9103      	str	r1, [sp, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfbb      	ittet	lt
 800b2b8:	425b      	neglt	r3, r3
 800b2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b2be:	9307      	strge	r3, [sp, #28]
 800b2c0:	9307      	strlt	r3, [sp, #28]
 800b2c2:	bfb8      	it	lt
 800b2c4:	9204      	strlt	r2, [sp, #16]
 800b2c6:	7823      	ldrb	r3, [r4, #0]
 800b2c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ca:	d10a      	bne.n	800b2e2 <_vfiprintf_r+0x156>
 800b2cc:	7863      	ldrb	r3, [r4, #1]
 800b2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d0:	d132      	bne.n	800b338 <_vfiprintf_r+0x1ac>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	1d1a      	adds	r2, r3, #4
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	9203      	str	r2, [sp, #12]
 800b2da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2de:	3402      	adds	r4, #2
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b8 <_vfiprintf_r+0x22c>
 800b2e6:	7821      	ldrb	r1, [r4, #0]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f7f4 ff78 	bl	80001e0 <memchr>
 800b2f0:	b138      	cbz	r0, 800b302 <_vfiprintf_r+0x176>
 800b2f2:	9b04      	ldr	r3, [sp, #16]
 800b2f4:	eba0 000a 	sub.w	r0, r0, sl
 800b2f8:	2240      	movs	r2, #64	@ 0x40
 800b2fa:	4082      	lsls	r2, r0
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	3401      	adds	r4, #1
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b306:	4829      	ldr	r0, [pc, #164]	@ (800b3ac <_vfiprintf_r+0x220>)
 800b308:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b30c:	2206      	movs	r2, #6
 800b30e:	f7f4 ff67 	bl	80001e0 <memchr>
 800b312:	2800      	cmp	r0, #0
 800b314:	d03f      	beq.n	800b396 <_vfiprintf_r+0x20a>
 800b316:	4b26      	ldr	r3, [pc, #152]	@ (800b3b0 <_vfiprintf_r+0x224>)
 800b318:	bb1b      	cbnz	r3, 800b362 <_vfiprintf_r+0x1d6>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	3307      	adds	r3, #7
 800b31e:	f023 0307 	bic.w	r3, r3, #7
 800b322:	3308      	adds	r3, #8
 800b324:	9303      	str	r3, [sp, #12]
 800b326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b328:	443b      	add	r3, r7
 800b32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32c:	e76a      	b.n	800b204 <_vfiprintf_r+0x78>
 800b32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b332:	460c      	mov	r4, r1
 800b334:	2001      	movs	r0, #1
 800b336:	e7a8      	b.n	800b28a <_vfiprintf_r+0xfe>
 800b338:	2300      	movs	r3, #0
 800b33a:	3401      	adds	r4, #1
 800b33c:	9305      	str	r3, [sp, #20]
 800b33e:	4619      	mov	r1, r3
 800b340:	f04f 0c0a 	mov.w	ip, #10
 800b344:	4620      	mov	r0, r4
 800b346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34a:	3a30      	subs	r2, #48	@ 0x30
 800b34c:	2a09      	cmp	r2, #9
 800b34e:	d903      	bls.n	800b358 <_vfiprintf_r+0x1cc>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d0c6      	beq.n	800b2e2 <_vfiprintf_r+0x156>
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	e7c4      	b.n	800b2e2 <_vfiprintf_r+0x156>
 800b358:	fb0c 2101 	mla	r1, ip, r1, r2
 800b35c:	4604      	mov	r4, r0
 800b35e:	2301      	movs	r3, #1
 800b360:	e7f0      	b.n	800b344 <_vfiprintf_r+0x1b8>
 800b362:	ab03      	add	r3, sp, #12
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	462a      	mov	r2, r5
 800b368:	4b12      	ldr	r3, [pc, #72]	@ (800b3b4 <_vfiprintf_r+0x228>)
 800b36a:	a904      	add	r1, sp, #16
 800b36c:	4630      	mov	r0, r6
 800b36e:	f3af 8000 	nop.w
 800b372:	4607      	mov	r7, r0
 800b374:	1c78      	adds	r0, r7, #1
 800b376:	d1d6      	bne.n	800b326 <_vfiprintf_r+0x19a>
 800b378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_vfiprintf_r+0x1fe>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d402      	bmi.n	800b38a <_vfiprintf_r+0x1fe>
 800b384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b386:	f7ff f9a7 	bl	800a6d8 <__retarget_lock_release_recursive>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	065b      	lsls	r3, r3, #25
 800b38e:	f53f af1f 	bmi.w	800b1d0 <_vfiprintf_r+0x44>
 800b392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b394:	e71e      	b.n	800b1d4 <_vfiprintf_r+0x48>
 800b396:	ab03      	add	r3, sp, #12
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	462a      	mov	r2, r5
 800b39c:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <_vfiprintf_r+0x228>)
 800b39e:	a904      	add	r1, sp, #16
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f7ff fc7f 	bl	800aca4 <_printf_i>
 800b3a6:	e7e4      	b.n	800b372 <_vfiprintf_r+0x1e6>
 800b3a8:	0800b7e3 	.word	0x0800b7e3
 800b3ac:	0800b7ed 	.word	0x0800b7ed
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	0800b169 	.word	0x0800b169
 800b3b8:	0800b7e9 	.word	0x0800b7e9

0800b3bc <__swbuf_r>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	460e      	mov	r6, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	b118      	cbz	r0, 800b3ce <__swbuf_r+0x12>
 800b3c6:	6a03      	ldr	r3, [r0, #32]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <__swbuf_r+0x12>
 800b3ca:	f7ff f85d 	bl	800a488 <__sinit>
 800b3ce:	69a3      	ldr	r3, [r4, #24]
 800b3d0:	60a3      	str	r3, [r4, #8]
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	071a      	lsls	r2, r3, #28
 800b3d6:	d501      	bpl.n	800b3dc <__swbuf_r+0x20>
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	b943      	cbnz	r3, 800b3ee <__swbuf_r+0x32>
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 f82a 	bl	800b438 <__swsetup_r>
 800b3e4:	b118      	cbz	r0, 800b3ee <__swbuf_r+0x32>
 800b3e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	6922      	ldr	r2, [r4, #16]
 800b3f2:	1a98      	subs	r0, r3, r2
 800b3f4:	6963      	ldr	r3, [r4, #20]
 800b3f6:	b2f6      	uxtb	r6, r6
 800b3f8:	4283      	cmp	r3, r0
 800b3fa:	4637      	mov	r7, r6
 800b3fc:	dc05      	bgt.n	800b40a <__swbuf_r+0x4e>
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	f7ff fdf3 	bl	800afec <_fflush_r>
 800b406:	2800      	cmp	r0, #0
 800b408:	d1ed      	bne.n	800b3e6 <__swbuf_r+0x2a>
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	701e      	strb	r6, [r3, #0]
 800b418:	6962      	ldr	r2, [r4, #20]
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d004      	beq.n	800b42a <__swbuf_r+0x6e>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	07db      	lsls	r3, r3, #31
 800b424:	d5e1      	bpl.n	800b3ea <__swbuf_r+0x2e>
 800b426:	2e0a      	cmp	r6, #10
 800b428:	d1df      	bne.n	800b3ea <__swbuf_r+0x2e>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f7ff fddd 	bl	800afec <_fflush_r>
 800b432:	2800      	cmp	r0, #0
 800b434:	d0d9      	beq.n	800b3ea <__swbuf_r+0x2e>
 800b436:	e7d6      	b.n	800b3e6 <__swbuf_r+0x2a>

0800b438 <__swsetup_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4b29      	ldr	r3, [pc, #164]	@ (800b4e0 <__swsetup_r+0xa8>)
 800b43c:	4605      	mov	r5, r0
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	460c      	mov	r4, r1
 800b442:	b118      	cbz	r0, 800b44c <__swsetup_r+0x14>
 800b444:	6a03      	ldr	r3, [r0, #32]
 800b446:	b90b      	cbnz	r3, 800b44c <__swsetup_r+0x14>
 800b448:	f7ff f81e 	bl	800a488 <__sinit>
 800b44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b450:	0719      	lsls	r1, r3, #28
 800b452:	d422      	bmi.n	800b49a <__swsetup_r+0x62>
 800b454:	06da      	lsls	r2, r3, #27
 800b456:	d407      	bmi.n	800b468 <__swsetup_r+0x30>
 800b458:	2209      	movs	r2, #9
 800b45a:	602a      	str	r2, [r5, #0]
 800b45c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b466:	e033      	b.n	800b4d0 <__swsetup_r+0x98>
 800b468:	0758      	lsls	r0, r3, #29
 800b46a:	d512      	bpl.n	800b492 <__swsetup_r+0x5a>
 800b46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b46e:	b141      	cbz	r1, 800b482 <__swsetup_r+0x4a>
 800b470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b474:	4299      	cmp	r1, r3
 800b476:	d002      	beq.n	800b47e <__swsetup_r+0x46>
 800b478:	4628      	mov	r0, r5
 800b47a:	f7ff f94d 	bl	800a718 <_free_r>
 800b47e:	2300      	movs	r3, #0
 800b480:	6363      	str	r3, [r4, #52]	@ 0x34
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b488:	81a3      	strh	r3, [r4, #12]
 800b48a:	2300      	movs	r3, #0
 800b48c:	6063      	str	r3, [r4, #4]
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f043 0308 	orr.w	r3, r3, #8
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	6923      	ldr	r3, [r4, #16]
 800b49c:	b94b      	cbnz	r3, 800b4b2 <__swsetup_r+0x7a>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a8:	d003      	beq.n	800b4b2 <__swsetup_r+0x7a>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f000 f88b 	bl	800b5c8 <__smakebuf_r>
 800b4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b6:	f013 0201 	ands.w	r2, r3, #1
 800b4ba:	d00a      	beq.n	800b4d2 <__swsetup_r+0x9a>
 800b4bc:	2200      	movs	r2, #0
 800b4be:	60a2      	str	r2, [r4, #8]
 800b4c0:	6962      	ldr	r2, [r4, #20]
 800b4c2:	4252      	negs	r2, r2
 800b4c4:	61a2      	str	r2, [r4, #24]
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	b942      	cbnz	r2, 800b4dc <__swsetup_r+0xa4>
 800b4ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4ce:	d1c5      	bne.n	800b45c <__swsetup_r+0x24>
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	0799      	lsls	r1, r3, #30
 800b4d4:	bf58      	it	pl
 800b4d6:	6962      	ldrpl	r2, [r4, #20]
 800b4d8:	60a2      	str	r2, [r4, #8]
 800b4da:	e7f4      	b.n	800b4c6 <__swsetup_r+0x8e>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	e7f7      	b.n	800b4d0 <__swsetup_r+0x98>
 800b4e0:	20000188 	.word	0x20000188

0800b4e4 <_raise_r>:
 800b4e4:	291f      	cmp	r1, #31
 800b4e6:	b538      	push	{r3, r4, r5, lr}
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	d904      	bls.n	800b4f8 <_raise_r+0x14>
 800b4ee:	2316      	movs	r3, #22
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4fa:	b112      	cbz	r2, 800b502 <_raise_r+0x1e>
 800b4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b500:	b94b      	cbnz	r3, 800b516 <_raise_r+0x32>
 800b502:	4628      	mov	r0, r5
 800b504:	f000 f830 	bl	800b568 <_getpid_r>
 800b508:	4622      	mov	r2, r4
 800b50a:	4601      	mov	r1, r0
 800b50c:	4628      	mov	r0, r5
 800b50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b512:	f000 b817 	b.w	800b544 <_kill_r>
 800b516:	2b01      	cmp	r3, #1
 800b518:	d00a      	beq.n	800b530 <_raise_r+0x4c>
 800b51a:	1c59      	adds	r1, r3, #1
 800b51c:	d103      	bne.n	800b526 <_raise_r+0x42>
 800b51e:	2316      	movs	r3, #22
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	2001      	movs	r0, #1
 800b524:	e7e7      	b.n	800b4f6 <_raise_r+0x12>
 800b526:	2100      	movs	r1, #0
 800b528:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b52c:	4620      	mov	r0, r4
 800b52e:	4798      	blx	r3
 800b530:	2000      	movs	r0, #0
 800b532:	e7e0      	b.n	800b4f6 <_raise_r+0x12>

0800b534 <raise>:
 800b534:	4b02      	ldr	r3, [pc, #8]	@ (800b540 <raise+0xc>)
 800b536:	4601      	mov	r1, r0
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	f7ff bfd3 	b.w	800b4e4 <_raise_r>
 800b53e:	bf00      	nop
 800b540:	20000188 	.word	0x20000188

0800b544 <_kill_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d07      	ldr	r5, [pc, #28]	@ (800b564 <_kill_r+0x20>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	4611      	mov	r1, r2
 800b550:	602b      	str	r3, [r5, #0]
 800b552:	f7f5 f8c5 	bl	80006e0 <_kill>
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	d102      	bne.n	800b560 <_kill_r+0x1c>
 800b55a:	682b      	ldr	r3, [r5, #0]
 800b55c:	b103      	cbz	r3, 800b560 <_kill_r+0x1c>
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	bd38      	pop	{r3, r4, r5, pc}
 800b562:	bf00      	nop
 800b564:	20001678 	.word	0x20001678

0800b568 <_getpid_r>:
 800b568:	f7f5 b8b2 	b.w	80006d0 <_getpid>

0800b56c <_malloc_usable_size_r>:
 800b56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b570:	1f18      	subs	r0, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	bfbc      	itt	lt
 800b576:	580b      	ldrlt	r3, [r1, r0]
 800b578:	18c0      	addlt	r0, r0, r3
 800b57a:	4770      	bx	lr

0800b57c <__swhatbuf_r>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	460c      	mov	r4, r1
 800b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b584:	2900      	cmp	r1, #0
 800b586:	b096      	sub	sp, #88	@ 0x58
 800b588:	4615      	mov	r5, r2
 800b58a:	461e      	mov	r6, r3
 800b58c:	da0d      	bge.n	800b5aa <__swhatbuf_r+0x2e>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b594:	f04f 0100 	mov.w	r1, #0
 800b598:	bf14      	ite	ne
 800b59a:	2340      	movne	r3, #64	@ 0x40
 800b59c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	6031      	str	r1, [r6, #0]
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	b016      	add	sp, #88	@ 0x58
 800b5a8:	bd70      	pop	{r4, r5, r6, pc}
 800b5aa:	466a      	mov	r2, sp
 800b5ac:	f000 f848 	bl	800b640 <_fstat_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dbec      	blt.n	800b58e <__swhatbuf_r+0x12>
 800b5b4:	9901      	ldr	r1, [sp, #4]
 800b5b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5be:	4259      	negs	r1, r3
 800b5c0:	4159      	adcs	r1, r3
 800b5c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5c6:	e7eb      	b.n	800b5a0 <__swhatbuf_r+0x24>

0800b5c8 <__smakebuf_r>:
 800b5c8:	898b      	ldrh	r3, [r1, #12]
 800b5ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5cc:	079d      	lsls	r5, r3, #30
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	d507      	bpl.n	800b5e4 <__smakebuf_r+0x1c>
 800b5d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	6163      	str	r3, [r4, #20]
 800b5e0:	b003      	add	sp, #12
 800b5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e4:	ab01      	add	r3, sp, #4
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f7ff ffc8 	bl	800b57c <__swhatbuf_r>
 800b5ec:	9f00      	ldr	r7, [sp, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7ff f904 	bl	800a800 <_malloc_r>
 800b5f8:	b948      	cbnz	r0, 800b60e <__smakebuf_r+0x46>
 800b5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fe:	059a      	lsls	r2, r3, #22
 800b600:	d4ee      	bmi.n	800b5e0 <__smakebuf_r+0x18>
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	f043 0302 	orr.w	r3, r3, #2
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	e7e2      	b.n	800b5d4 <__smakebuf_r+0xc>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	6020      	str	r0, [r4, #0]
 800b612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b616:	81a3      	strh	r3, [r4, #12]
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b61e:	b15b      	cbz	r3, 800b638 <__smakebuf_r+0x70>
 800b620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b624:	4630      	mov	r0, r6
 800b626:	f000 f81d 	bl	800b664 <_isatty_r>
 800b62a:	b128      	cbz	r0, 800b638 <__smakebuf_r+0x70>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f023 0303 	bic.w	r3, r3, #3
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	431d      	orrs	r5, r3
 800b63c:	81a5      	strh	r5, [r4, #12]
 800b63e:	e7cf      	b.n	800b5e0 <__smakebuf_r+0x18>

0800b640 <_fstat_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d07      	ldr	r5, [pc, #28]	@ (800b660 <_fstat_r+0x20>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	4611      	mov	r1, r2
 800b64c:	602b      	str	r3, [r5, #0]
 800b64e:	f7f5 f8a7 	bl	80007a0 <_fstat>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d102      	bne.n	800b65c <_fstat_r+0x1c>
 800b656:	682b      	ldr	r3, [r5, #0]
 800b658:	b103      	cbz	r3, 800b65c <_fstat_r+0x1c>
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	bd38      	pop	{r3, r4, r5, pc}
 800b65e:	bf00      	nop
 800b660:	20001678 	.word	0x20001678

0800b664 <_isatty_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d06      	ldr	r5, [pc, #24]	@ (800b680 <_isatty_r+0x1c>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	f7f5 f8a6 	bl	80007c0 <_isatty>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_isatty_r+0x1a>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_isatty_r+0x1a>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20001678 	.word	0x20001678

0800b684 <_init>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr

0800b690 <_fini>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	bf00      	nop
 800b694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b696:	bc08      	pop	{r3}
 800b698:	469e      	mov	lr, r3
 800b69a:	4770      	bx	lr
