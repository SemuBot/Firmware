
L476RGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08010df8  08010df8  00011df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011364  08011364  000132f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801136c  0801136c  000132f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801136c  0801136c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011370  08011370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  20000000  08011374  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  200002f4  08011668  000132f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002244  08011668  00014244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed6b  00000000  00000000  00013324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a0b  00000000  00000000  0003208f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00036aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001311  00000000  00000000  00038390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba75  00000000  00000000  000396a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8a9  00000000  00000000  00065116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9144  00000000  00000000  000849bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017db03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e84  00000000  00000000  0017db48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001859cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f4 	.word	0x200002f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010de0 	.word	0x08010de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	08010de0 	.word	0x08010de0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <USART_Receive_CmdVel>:
#define BUFFER_SIZE 128

static char usart_buffer[BUFFER_SIZE];
static uint8_t rx_data;

void USART_Receive_CmdVel(UART_HandleTypeDef *huart, CmdVel *cmd_vel) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    static uint16_t index = 0;

    if (rx_data == '\n' || index >= BUFFER_SIZE - 1) {
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <USART_Receive_CmdVel+0x9c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d003      	beq.n	8000ffe <USART_Receive_CmdVel+0x1a>
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <USART_Receive_CmdVel+0xa0>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ffc:	d92c      	bls.n	8001058 <USART_Receive_CmdVel+0x74>
        usart_buffer[index] = '\0';
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <USART_Receive_CmdVel+0xa0>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <USART_Receive_CmdVel+0xa4>)
 8001006:	2100      	movs	r1, #0
 8001008:	5499      	strb	r1, [r3, r2]
        index = 0;
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <USART_Receive_CmdVel+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]

        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001010:	491e      	ldr	r1, [pc, #120]	@ (800108c <USART_Receive_CmdVel+0xa8>)
 8001012:	481d      	ldr	r0, [pc, #116]	@ (8001088 <USART_Receive_CmdVel+0xa4>)
 8001014:	f00b feff 	bl	800ce16 <strstr>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00e      	beq.n	800103c <USART_Receive_CmdVel+0x58>
 800101e:	491c      	ldr	r1, [pc, #112]	@ (8001090 <USART_Receive_CmdVel+0xac>)
 8001020:	4819      	ldr	r0, [pc, #100]	@ (8001088 <USART_Receive_CmdVel+0xa4>)
 8001022:	f00b fef8 	bl	800ce16 <strstr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <USART_Receive_CmdVel+0x58>
            sscanf(usart_buffer, "{linear_x:%f,angular_z:%f}", &cmd_vel->linear_x, &cmd_vel->angular_z);
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	4918      	ldr	r1, [pc, #96]	@ (8001094 <USART_Receive_CmdVel+0xb0>)
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <USART_Receive_CmdVel+0xa4>)
 8001036:	f00b fe77 	bl	800cd28 <siscanf>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 800103a:	e018      	b.n	800106e <USART_Receive_CmdVel+0x8a>
            //Process_CmdVel(cmd_vel);
        } else {
            const char *error_msg = "Invalid cmd_vel format\n";
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <USART_Receive_CmdVel+0xb4>)
 800103e:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff f915 	bl	8000270 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104e:	68f9      	ldr	r1, [r7, #12]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f005 faef 	bl	8006634 <HAL_UART_Transmit>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001056:	e00a      	b.n	800106e <USART_Receive_CmdVel+0x8a>
        }
    } else {
        usart_buffer[index++] = rx_data;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <USART_Receive_CmdVel+0xa0>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	b291      	uxth	r1, r2
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <USART_Receive_CmdVel+0xa0>)
 8001062:	8011      	strh	r1, [r2, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <USART_Receive_CmdVel+0x9c>)
 8001068:	7819      	ldrb	r1, [r3, #0]
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <USART_Receive_CmdVel+0xa4>)
 800106c:	5499      	strb	r1, [r3, r2]
    }

    HAL_UART_Receive_IT(huart, &rx_data, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	4903      	ldr	r1, [pc, #12]	@ (8001080 <USART_Receive_CmdVel+0x9c>)
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f005 fb68 	bl	8006748 <HAL_UART_Receive_IT>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000390 	.word	0x20000390
 8001084:	20000392 	.word	0x20000392
 8001088:	20000310 	.word	0x20000310
 800108c:	08010df8 	.word	0x08010df8
 8001090:	08010e04 	.word	0x08010e04
 8001094:	08010e10 	.word	0x08010e10
 8001098:	08010e2c 	.word	0x08010e2c

0800109c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b36      	ldr	r3, [pc, #216]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	4a35      	ldr	r2, [pc, #212]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010be:	4b33      	ldr	r3, [pc, #204]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	4b30      	ldr	r3, [pc, #192]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a2f      	ldr	r2, [pc, #188]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a29      	ldr	r2, [pc, #164]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <MX_GPIO_Init+0xf0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <MX_GPIO_Init+0xf0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_GPIO_Init+0xf0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f001 fa73 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|DIR_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001124:	481a      	ldr	r0, [pc, #104]	@ (8001190 <MX_GPIO_Init+0xf4>)
 8001126:	f001 fa6d 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001130:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_GPIO_Init+0xf4>)
 8001142:	f001 f8b5 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001146:	2320      	movs	r3, #32
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f001 f8a6 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|DIR_Pin;
 8001164:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_GPIO_Init+0xf4>)
 800117e:	f001 f897 	bl	80022b0 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	48000800 	.word	0x48000800

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fe5a 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f846 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f7ff ff7c 	bl	800109c <MX_GPIO_Init>
  MX_TIM1_Init();
 80011a4:	f000 fb6a 	bl	800187c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80011a8:	f000 fd94 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80011ac:	f00a f804 	bl	800b1b8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80011b0:	f000 fbf4 	bl	800199c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b4:	f000 fc4c 	bl	8001a50 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80011b8:	4816      	ldr	r0, [pc, #88]	@ (8001214 <main+0x80>)
 80011ba:	f003 ff21 	bl	8005000 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80011be:	2100      	movs	r1, #0
 80011c0:	4814      	ldr	r0, [pc, #80]	@ (8001214 <main+0x80>)
 80011c2:	f004 f981 	bl	80054c8 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	4913      	ldr	r1, [pc, #76]	@ (8001218 <main+0x84>)
 80011ca:	4814      	ldr	r0, [pc, #80]	@ (800121c <main+0x88>)
 80011cc:	f005 fabc 	bl	8006748 <HAL_UART_Receive_IT>

  motor_init(&motor, &motor_pinout, &htim1);
 80011d0:	4a10      	ldr	r2, [pc, #64]	@ (8001214 <main+0x80>)
 80011d2:	4913      	ldr	r1, [pc, #76]	@ (8001220 <main+0x8c>)
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <main+0x90>)
 80011d6:	f000 f8ad 	bl	8001334 <motor_init>

  motor_setDutyCycleLimit(&motor, 100);
 80011da:	2164      	movs	r1, #100	@ 0x64
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <main+0x90>)
 80011de:	f000 f9d3 	bl	8001588 <motor_setDutyCycleLimit>

  //motor.duty_cycle = 80.0;
  motor_update(&motor);
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <main+0x90>)
 80011e4:	f000 f8c6 	bl	8001374 <motor_update>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//motor.duty_cycle = 50.0;
	motor_update(&motor);
 80011e8:	480e      	ldr	r0, [pc, #56]	@ (8001224 <main+0x90>)
 80011ea:	f000 f8c3 	bl	8001374 <motor_update>
    set_motor_speed(&motor, cmd_vel_data.linear_x);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <main+0x94>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9a8 	bl	8000548 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b10 	vmov	d0, r2, r3
 8001200:	4808      	ldr	r0, [pc, #32]	@ (8001224 <main+0x90>)
 8001202:	f000 f94d 	bl	80014a0 <set_motor_speed>

	//HAL_Delay(2000);
	//motor.duty_cycle = -20.0;
	//motor_update(&motor);
	  HAL_Delay(2000);
 8001206:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800120a:	f000 fe9d 	bl	8001f48 <HAL_Delay>
  {
 800120e:	bf00      	nop
 8001210:	e7ea      	b.n	80011e8 <main+0x54>
 8001212:	bf00      	nop
 8001214:	200003a4 	.word	0x200003a4
 8001218:	2000039c 	.word	0x2000039c
 800121c:	20000488 	.word	0x20000488
 8001220:	20000000 	.word	0x20000000
 8001224:	20000008 	.word	0x20000008
 8001228:	20000394 	.word	0x20000394

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2244      	movs	r2, #68	@ 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00b fde3 	bl	800ce06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001252:	f002 fba3 	bl	800399c <HAL_PWREx_ControlVoltageScaling>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800125c:	f000 f864 	bl	8001328 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001260:	f002 fb7e 	bl	8003960 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <SystemClock_Config+0xc0>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126a:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <SystemClock_Config+0xc0>)
 800126c:	f023 0318 	bic.w	r3, r3, #24
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001274:	2314      	movs	r3, #20
 8001276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001284:	2360      	movs	r3, #96	@ 0x60
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800128c:	2301      	movs	r3, #1
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001294:	2324      	movs	r3, #36	@ 0x24
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001298:	2307      	movs	r3, #7
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fbdd 	bl	8003a68 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f838 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2303      	movs	r3, #3
 80012be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	2104      	movs	r1, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 ffa5 	bl	8004220 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012dc:	f000 f824 	bl	8001328 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012e0:	f003 fcac 	bl	8004c3c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012e4:	bf00      	nop
 80012e6:	3758      	adds	r7, #88	@ 0x58
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_UART_RxCpltCallback+0x2c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d108      	bne.n	8001314 <HAL_UART_RxCpltCallback+0x24>
        USART_Receive_CmdVel(huart, &cmd_vel_data);
 8001302:	4907      	ldr	r1, [pc, #28]	@ (8001320 <HAL_UART_RxCpltCallback+0x30>)
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fe6d 	bl	8000fe4 <USART_Receive_CmdVel>
        HAL_UART_Receive_IT(huart, &rx_data, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	4905      	ldr	r1, [pc, #20]	@ (8001324 <HAL_UART_RxCpltCallback+0x34>)
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f005 fa1a 	bl	8006748 <HAL_UART_Receive_IT>
    }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40004400 	.word	0x40004400
 8001320:	20000394 	.word	0x20000394
 8001324:	2000039c 	.word	0x2000039c

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <Error_Handler+0x8>

08001334 <motor_init>:

static uint8_t duty_cycle_limit;


void motor_init(Motor_data *motor_handler, Motor_pinout *pinout, TIM_HandleTypeDef *pwm_timer)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
    motor_handler->pinout = pinout;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	601a      	str	r2, [r3, #0]
    motor_handler->pwm_timer = pwm_timer;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
    motor_handler->duty_cycle = 0.0f;
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9c1 2304 	strd	r2, r3, [r1, #16]

    duty_cycle_limit = DUTY_CYCLE_LIMIT_DEFAULT;
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <motor_init+0x3c>)
 800135c:	2264      	movs	r2, #100	@ 0x64
 800135e:	701a      	strb	r2, [r3, #0]

    motor_disable(motor_handler);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f903 	bl	800156c <motor_disable>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000039d 	.word	0x2000039d

08001374 <motor_update>:



void motor_update(Motor_data *motor_handler)
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b094      	sub	sp, #80	@ 0x50
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
    uint16_t scaled_duty_cycle;
    uint16_t arr_value = __HAL_TIM_GET_AUTORELOAD(motor_handler->pwm_timer);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001384:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    // Check if the motor is enabled
    if (motor_handler->duty_cycle >= 0)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f7ff fbb5 	bl	8000b04 <__aeabi_dcmpge>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00d      	beq.n	80013bc <motor_update+0x48>
    {
        motor_enable(motor_handler);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f8d5 	bl	8001550 <motor_enable>
        HAL_GPIO_WritePin(motor_handler->pinout->dir_port, motor_handler->pinout->dir_pin, GPIO_PIN_SET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	889b      	ldrh	r3, [r3, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	f001 f925 	bl	8002604 <HAL_GPIO_WritePin>
 80013ba:	e01d      	b.n	80013f8 <motor_update+0x84>
    }
    else if (motor_handler->duty_cycle < 0)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f7ff fb87 	bl	8000adc <__aeabi_dcmplt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00d      	beq.n	80013f0 <motor_update+0x7c>
    {
        HAL_GPIO_WritePin(motor_handler->pinout->dir_port, motor_handler->pinout->dir_pin, GPIO_PIN_RESET);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f001 f90e 	bl	8002604 <HAL_GPIO_WritePin>
        motor_enable(motor_handler);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f8b1 	bl	8001550 <motor_enable>
 80013ee:	e003      	b.n	80013f8 <motor_update+0x84>
    }
    else
    {
        motor_disable(motor_handler);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f8bb 	bl	800156c <motor_disable>
 80013f6:	e049      	b.n	800148c <motor_update+0x118>
        return;
    }

    // Scale the duty cycle based on the motor's duty cycle
    scaled_duty_cycle = (uint16_t)((fabs(motor_handler->duty_cycle) / 100.0f) * arr_value);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013fe:	4614      	mov	r4, r2
 8001400:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <motor_update+0x120>)
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff fa1d 	bl	800084c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f880 	bl	8000524 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbb6 	bl	8000ba8 <__aeabi_d2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (scaled_duty_cycle > arr_value)
 8001442:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800144a:	429a      	cmp	r2, r3
 800144c:	d903      	bls.n	8001456 <motor_update+0xe2>
    {
        scaled_duty_cycle = arr_value;
 800144e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001452:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    // Update the PWM compare value
    __HAL_TIM_SET_COMPARE(motor_handler->pwm_timer, TIM_CHANNEL_1, scaled_duty_cycle);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
    char duty_cycle_str[50];
    int len = snprintf(duty_cycle_str, sizeof(duty_cycle_str), "Duty Cycle: %.2f\n", motor_handler->duty_cycle);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001468:	f107 000c 	add.w	r0, r7, #12
 800146c:	e9cd 2300 	strd	r2, r3, [sp]
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <motor_update+0x124>)
 8001472:	2132      	movs	r1, #50	@ 0x32
 8001474:	f00b fc04 	bl	800cc80 <sniprintf>
 8001478:	6438      	str	r0, [r7, #64]	@ 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)duty_cycle_str, len, HAL_MAX_DELAY);
 800147a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 010c 	add.w	r1, r7, #12
 8001482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <motor_update+0x128>)
 8001488:	f005 f8d4 	bl	8006634 <HAL_UART_Transmit>
}
 800148c:	3748      	adds	r7, #72	@ 0x48
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
 8001492:	bf00      	nop
 8001494:	40590000 	.word	0x40590000
 8001498:	08010e68 	.word	0x08010e68
 800149c:	20000488 	.word	0x20000488

080014a0 <set_motor_speed>:

void set_motor_speed(Motor_data *motor_handler, float linear_x)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	ed87 0a00 	vstr	s0, [r7]
    // Map the linear velocity to PWM range
    motor_handler->duty_cycle = (linear_x / MAX_LINEAR_VELOCITY) * 100.0f;
 80014ac:	edd7 7a00 	vldr	s15, [r7]
 80014b0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001548 <set_motor_speed+0xa8>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	ee17 0a90 	vmov	r0, s15
 80014bc:	f7ff f844 	bl	8000548 <__aeabi_f2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Ensure the duty cycle stays within valid limits
    if (motor_handler->duty_cycle > duty_cycle_limit)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <set_motor_speed+0xac>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f825 	bl	8000524 <__aeabi_i2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7ff fb19 	bl	8000b18 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <set_motor_speed+0x60>
        motor_handler->duty_cycle = duty_cycle_limit;
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <set_motor_speed+0xac>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f807 	bl	8000504 <__aeabi_ui2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (motor_handler->duty_cycle < -duty_cycle_limit)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <set_motor_speed+0xac>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	425b      	negs	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f809 	bl	8000524 <__aeabi_i2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7ff fadf 	bl	8000adc <__aeabi_dcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00a      	beq.n	800153a <set_motor_speed+0x9a>
        motor_handler->duty_cycle = -duty_cycle_limit;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <set_motor_speed+0xac>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	425b      	negs	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_i2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Call motor update to apply changes to the motor
    motor_update(motor_handler);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ff1a 	bl	8001374 <motor_update>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bdb0      	pop	{r4, r5, r7, pc}
 8001548:	42c80000 	.word	0x42c80000
 800154c:	2000039d 	.word	0x2000039d

08001550 <motor_enable>:


void motor_enable(Motor_data *motor_handler)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Start(motor_handler->pwm_timer, TIM_CHANNEL_1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fe16 	bl	8005190 <HAL_TIM_PWM_Start>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <motor_disable>:


void motor_disable(Motor_data *motor_handler)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(motor_handler->pwm_timer, TIM_CHANNEL_1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f003 ff0e 	bl	800539c <HAL_TIM_PWM_Stop>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <motor_setDutyCycleLimit>:

void motor_setDutyCycleLimit(Motor_data *motor_handler, uint8_t limit)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
    duty_cycle_limit = limit;
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <motor_setDutyCycleLimit+0x20>)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	7013      	strb	r3, [r2, #0]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000039d 	.word	0x2000039d

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <NMI_Handler+0x4>

080015fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <MemManage_Handler+0x4>

0800160c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <UsageFault_Handler+0x4>

0800161c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164a:	f000 fc5d 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800165a:	f004 f889 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003a4 	.word	0x200003a4

08001668 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800166e:	f004 f87f 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200003a4 	.word	0x200003a4

0800167c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001682:	f004 f875 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200003a4 	.word	0x200003a4

08001690 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <TIM1_CC_IRQHandler+0x10>)
 8001696:	f004 f86b 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200003a4 	.word	0x200003a4

080016a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <USART2_IRQHandler+0x10>)
 80016aa:	f005 f899 	bl	80067e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000488 	.word	0x20000488

080016b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <OTG_FS_IRQHandler+0x10>)
 80016be:	f001 f8f7 	bl	80028b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200019f4 	.word	0x200019f4

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016e6:	f00b fbf7 	bl	800ced8 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
  return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800170e:	bf00      	nop
 8001710:	e7fd      	b.n	800170e <_exit+0x12>

08001712 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00a      	b.n	800173a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001724:	f3af 8000 	nop.w
 8001728:	4601      	mov	r1, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	60ba      	str	r2, [r7, #8]
 8001730:	b2ca      	uxtb	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	dbf0      	blt.n	8001724 <_read+0x12>
  }

  return len;
 8001742:	687b      	ldr	r3, [r7, #4]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e009      	b.n	8001772 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	60ba      	str	r2, [r7, #8]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbf1      	blt.n	800175e <_write+0x12>
  }
  return len;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_close>:

int _close(int file)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ac:	605a      	str	r2, [r3, #4]
  return 0;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_isatty>:

int _isatty(int file)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f00b fb5c 	bl	800ced8 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20018000 	.word	0x20018000
 800184c:	00000400 	.word	0x00000400
 8001850:	200003a0 	.word	0x200003a0
 8001854:	20002248 	.word	0x20002248

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b096      	sub	sp, #88	@ 0x58
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	222c      	movs	r2, #44	@ 0x2c
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f00b faac 	bl	800ce06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ae:	4b39      	ldr	r3, [pc, #228]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018b0:	4a39      	ldr	r2, [pc, #228]	@ (8001998 <MX_TIM1_Init+0x11c>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80018b4:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018b6:	2247      	movs	r2, #71	@ 0x47
 80018b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b36      	ldr	r3, [pc, #216]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80018c0:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018da:	482e      	ldr	r0, [pc, #184]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018dc:	f003 fc00 	bl	80050e0 <HAL_TIM_PWM_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f7ff fd1f 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018fa:	4619      	mov	r1, r3
 80018fc:	4825      	ldr	r0, [pc, #148]	@ (8001994 <MX_TIM1_Init+0x118>)
 80018fe:	f004 fd27 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001908:	f7ff fd0e 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	@ 0x60
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001928:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	4818      	ldr	r0, [pc, #96]	@ (8001994 <MX_TIM1_Init+0x118>)
 8001932:	f004 f825 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800193c:	f7ff fcf4 	bl	8001328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001962:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM1_Init+0x118>)
 8001976:	f004 fd73 	bl	8006460 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001980:	f7ff fcd2 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM1_Init+0x118>)
 8001986:	f000 f923 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3758      	adds	r7, #88	@ 0x58
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003a4 	.word	0x200003a4
 8001998:	40012c00 	.word	0x40012c00

0800199c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c0:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019c2:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <MX_TIM3_Init+0xb0>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019c8:	2247      	movs	r2, #71	@ 0x47
 80019ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <MX_TIM3_Init+0xac>)
 80019e8:	f003 fb7a 	bl	80050e0 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80019f2:	f7ff fc99 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	@ (8001a48 <MX_TIM3_Init+0xac>)
 8001a06:	f004 fca3 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a10:	f7ff fc8a 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	@ 0x60
 8001a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <MX_TIM3_Init+0xac>)
 8001a2c:	f003 ffa8 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a36:	f7ff fc77 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3a:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <MX_TIM3_Init+0xac>)
 8001a3c:	f000 f8c8 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200003f0 	.word	0x200003f0
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a76:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <MX_TIM4_Init+0xb0>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 77;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a7c:	224d      	movs	r2, #77	@ 0x4d
 8001a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a9a:	4818      	ldr	r0, [pc, #96]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001a9c:	f003 fb20 	bl	80050e0 <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001aa6:	f7ff fc3f 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4810      	ldr	r0, [pc, #64]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001aba:	f004 fc49 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ac4:	f7ff fc30 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	@ 0x60
 8001aca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001ae0:	f003 ff4e 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001aea:	f7ff fc1d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001aee:	4803      	ldr	r0, [pc, #12]	@ (8001afc <MX_TIM4_Init+0xac>)
 8001af0:	f000 f86e 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	@ 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000043c 	.word	0x2000043c
 8001b00:	40000800 	.word	0x40000800

08001b04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc0 <HAL_TIM_PWM_MspInit+0xbc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12c      	bne.n	8001b70 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2018      	movs	r0, #24
 8001b34:	f000 fb07 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001b38:	2018      	movs	r0, #24
 8001b3a:	f000 fb20 	bl	800217e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2019      	movs	r0, #25
 8001b44:	f000 faff 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b48:	2019      	movs	r0, #25
 8001b4a:	f000 fb18 	bl	800217e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201a      	movs	r0, #26
 8001b54:	f000 faf7 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b58:	201a      	movs	r0, #26
 8001b5a:	f000 fb10 	bl	800217e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	201b      	movs	r0, #27
 8001b64:	f000 faef 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b68:	201b      	movs	r0, #27
 8001b6a:	f000 fb08 	bl	800217e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b6e:	e022      	b.n	8001bb6 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM3)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10c      	bne.n	8001b94 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7a:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
}
 8001b92:	e010      	b.n	8001bb6 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <HAL_TIM_PWM_MspInit+0xc8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_TIM_PWM_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800

08001bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a34      	ldr	r2, [pc, #208]	@ (8001cc0 <HAL_TIM_MspPostInit+0xf0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11e      	bne.n	8001c30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a33      	ldr	r2, [pc, #204]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2a:	f000 fb41 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c2e:	e043      	b.n	8001cb8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a24      	ldr	r2, [pc, #144]	@ (8001cc8 <HAL_TIM_MspPostInit+0xf8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11d      	bne.n	8001c76 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c52:	2340      	movs	r3, #64	@ 0x40
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c62:	2302      	movs	r3, #2
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c70:	f000 fb1e 	bl	80022b0 <HAL_GPIO_Init>
}
 8001c74:	e020      	b.n	8001cb8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <HAL_TIM_MspPostInit+0xfc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_TIM_MspPostInit+0xf4>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c98:	2340      	movs	r3, #64	@ 0x40
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <HAL_TIM_MspPostInit+0x100>)
 8001cb4:	f000 fafc 	bl	80022b0 <HAL_GPIO_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <MX_USART2_UART_Init+0x5c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d18:	f004 fc3e 	bl	8006598 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d22:	f7ff fb01 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000488 	.word	0x20000488
 8001d30:	40004400 	.word	0x40004400

08001d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0ac      	sub	sp, #176	@ 0xb0
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2288      	movs	r2, #136	@ 0x88
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00b f856 	bl	800ce06 <memset>
  if(uartHandle->Instance==USART2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_UART_MspInit+0xc0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d143      	bne.n	8001dec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 fc79 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d7c:	f7ff fad4 	bl	8001328 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	4a1c      	ldr	r2, [pc, #112]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_UART_MspInit+0xc4>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001db0:	230c      	movs	r3, #12
 8001db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd8:	f000 fa6a 	bl	80022b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2026      	movs	r0, #38	@ 0x26
 8001de2:	f000 f9b0 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de6:	2026      	movs	r0, #38	@ 0x26
 8001de8:	f000 f9c9 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	37b0      	adds	r7, #176	@ 0xb0
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40004400 	.word	0x40004400
 8001df8:	40021000 	.word	0x40021000

08001dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff fd2a 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e06:	490d      	ldr	r1, [pc, #52]	@ (8001e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <LoopForever+0xe>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e48 <LoopForever+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f00b f85b 	bl	800cee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2e:	f7ff f9b1 	bl	8001194 <main>

08001e32 <LoopForever>:

LoopForever:
    b LoopForever
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8001e40:	08011374 	.word	0x08011374
  ldr r2, =_sbss
 8001e44:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8001e48:	20002244 	.word	0x20002244

08001e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_2_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_Init+0x3c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_Init+0x3c>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e66:	2003      	movs	r0, #3
 8001e68:	f000 f962 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f80f 	bl	8001e90 <HAL_InitTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	e001      	b.n	8001e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7e:	f7ff fb95 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <HAL_InitTick+0x6c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ea4:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_InitTick+0x70>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <HAL_InitTick+0x6c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f96d 	bl	800219a <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d809      	bhi.n	8001ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed4:	f000 f937 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_InitTick+0x74>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e007      	b.n	8001ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e004      	b.n	8001ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e001      	b.n	8001ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000028 	.word	0x20000028
 8001f00:	20000020 	.word	0x20000020
 8001f04:	20000024 	.word	0x20000024

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000028 	.word	0x20000028
 8001f2c:	20000510 	.word	0x20000510

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000510 	.word	0x20000510

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000028 	.word	0x20000028

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	@ (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e022      	b.n	8002222 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020e 	bic.w	r2, r2, #14
 80021ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	f003 021c 	and.w	r2, r3, #28
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d005      	beq.n	8002252 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e029      	b.n	80022a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020e 	bic.w	r2, r2, #14
 8002260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f003 021c 	and.w	r2, r3, #28
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
    }
  }
  return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e17f      	b.n	80025c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8171 	beq.w	80025ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d005      	beq.n	80022f0 <HAL_GPIO_Init+0x40>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b03      	cmp	r3, #3
 800235c:	d118      	bne.n	8002390 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b03      	cmp	r3, #3
 800239a:	d017      	beq.n	80023cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d123      	bne.n	8002420 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	6939      	ldr	r1, [r7, #16]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ac 	beq.w	80025ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <HAL_GPIO_Init+0x330>)
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	4a5e      	ldr	r2, [pc, #376]	@ (80025e0 <HAL_GPIO_Init+0x330>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6613      	str	r3, [r2, #96]	@ 0x60
 800246e:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <HAL_GPIO_Init+0x330>)
 8002470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800247a:	4a5a      	ldr	r2, [pc, #360]	@ (80025e4 <HAL_GPIO_Init+0x334>)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024a4:	d025      	beq.n	80024f2 <HAL_GPIO_Init+0x242>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4f      	ldr	r2, [pc, #316]	@ (80025e8 <HAL_GPIO_Init+0x338>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <HAL_GPIO_Init+0x23e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4e      	ldr	r2, [pc, #312]	@ (80025ec <HAL_GPIO_Init+0x33c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x23a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	@ (80025f0 <HAL_GPIO_Init+0x340>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x236>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	@ (80025f4 <HAL_GPIO_Init+0x344>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x232>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4b      	ldr	r2, [pc, #300]	@ (80025f8 <HAL_GPIO_Init+0x348>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	@ (80025fc <HAL_GPIO_Init+0x34c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x22a>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00c      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00a      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024de:	2305      	movs	r3, #5
 80024e0:	e008      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x244>
 80024f2:	2300      	movs	r3, #0
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	f002 0203 	and.w	r2, r2, #3
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4093      	lsls	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002504:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <HAL_GPIO_Init+0x334>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002512:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_GPIO_Init+0x350>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002536:	4a32      	ldr	r2, [pc, #200]	@ (8002600 <HAL_GPIO_Init+0x350>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800253c:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <HAL_GPIO_Init+0x350>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002560:	4a27      	ldr	r2, [pc, #156]	@ (8002600 <HAL_GPIO_Init+0x350>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002566:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_GPIO_Init+0x350>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800258a:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_GPIO_Init+0x350>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_GPIO_Init+0x350>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b4:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <HAL_GPIO_Init+0x350>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f ae78 	bne.w	80022c0 <HAL_GPIO_Init+0x10>
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010000 	.word	0x40010000
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	48000c00 	.word	0x48000c00
 80025f4:	48001000 	.word	0x48001000
 80025f8:	48001400 	.word	0x48001400
 80025fc:	48001800 	.word	0x48001800
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002620:	e002      	b.n	8002628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e101      	b.n	800284a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f008 ff9e 	bl	800b59c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2203      	movs	r2, #3
 8002664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f005 fc55 	bl	8007f22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7c1a      	ldrb	r2, [r3, #16]
 8002680:	f88d 2000 	strb.w	r2, [sp]
 8002684:	3304      	adds	r3, #4
 8002686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002688:	f005 fb70 	bl	8007d6c <USB_CoreInit>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0d5      	b.n	800284a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fc4d 	bl	8007f44 <USB_SetCurrentMode>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0c6      	b.n	800284a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e04a      	b.n	8002758 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3315      	adds	r3, #21
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3314      	adds	r3, #20
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	b298      	uxth	r0, r3
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	332e      	adds	r3, #46	@ 0x2e
 80026fe:	4602      	mov	r2, r0
 8002700:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3318      	adds	r3, #24
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	331c      	adds	r3, #28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3320      	adds	r3, #32
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3324      	adds	r3, #36	@ 0x24
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	791b      	ldrb	r3, [r3, #4]
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3af      	bcc.n	80026c2 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3b5      	bcc.n	8002768 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7c1a      	ldrb	r2, [r3, #16]
 8002804:	f88d 2000 	strb.w	r2, [sp]
 8002808:	3304      	adds	r3, #4
 800280a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280c:	f005 fbe6 	bl	8007fdc <USB_DevInit>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e013      	b.n	800284a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7b1b      	ldrb	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f86d 	bl	8003918 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f006 fb9d 	bl	8008f82 <USB_DevDisconnect>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_PCD_Start+0x1c>
 800286a:	2302      	movs	r3, #2
 800286c:	e01c      	b.n	80028a8 <HAL_PCD_Start+0x56>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7b5b      	ldrb	r3, [r3, #13]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f005 fb36 	bl	8007f00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f006 fb51 	bl	8008f40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b08d      	sub	sp, #52	@ 0x34
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fc0f 	bl	80090ea <USB_GetMode>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8481 	bne.w	80031d6 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 fb73 	bl	8008fc4 <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8477 	beq.w	80031d4 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f006 fb60 	bl	8008fc4 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d107      	bne.n	800291e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 0202 	and.w	r2, r2, #2
 800291c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f006 fb4e 	bl	8008fc4 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b10      	cmp	r3, #16
 8002930:	d161      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0210 	bic.w	r2, r2, #16
 8002940:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f003 020f 	and.w	r2, r3, #15
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	0c5b      	lsrs	r3, r3, #17
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	2b02      	cmp	r3, #2
 800296c:	d124      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d035      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6a38      	ldr	r0, [r7, #32]
 800298e:	f006 f985 	bl	8008c9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299e:	441a      	add	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	615a      	str	r2, [r3, #20]
 80029b6:	e016      	b.n	80029e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	0c5b      	lsrs	r3, r3, #17
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d110      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ca:	2208      	movs	r2, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	6a38      	ldr	r0, [r7, #32]
 80029d0:	f006 f964 	bl	8008c9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e0:	441a      	add	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0210 	orr.w	r2, r2, #16
 80029f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f006 fae2 	bl	8008fc4 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a0a:	f040 80a7 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f006 fae7 	bl	8008fea <USB_ReadDevAllOutEpInterrupt>
 8002a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a1e:	e099      	b.n	8002b54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 808e 	beq.w	8002b48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 fb0b 	bl	8009052 <USB_ReadDevOutEPInterrupt>
 8002a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	2301      	movs	r3, #1
 8002a58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fe81 	bl	8003764 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 febd 	bl	8003800 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d030      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b80      	cmp	r3, #128	@ 0x80
 8002ab6:	d109      	bne.n	8002acc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	78db      	ldrb	r3, [r3, #3]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f008 fea4 	bl	800b844 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	2320      	movs	r3, #32
 8002b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f47f af62 	bne.w	8002a20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 fa2f 	bl	8008fc4 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b70:	f040 80a4 	bne.w	8002cbc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f006 fa50 	bl	800901e <USB_ReadDevAllInEpInterrupt>
 8002b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b84:	e096      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808b 	beq.w	8002ca8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f006 fa76 	bl	800908e <USB_ReadDevInEPInterrupt>
 8002ba2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d020      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69f9      	ldr	r1, [r7, #28]
 8002bca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bce:	4013      	ands	r3, r2
 8002bd0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bde:	461a      	mov	r2, r3
 8002be0:	2301      	movs	r3, #1
 8002be2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f008 fd95 	bl	800b71a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c06:	461a      	mov	r2, r3
 8002c08:	2308      	movs	r3, #8
 8002c0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c22:	461a      	mov	r2, r3
 8002c24:	2310      	movs	r3, #16
 8002c26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2340      	movs	r3, #64	@ 0x40
 8002c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d023      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c50:	6a38      	ldr	r0, [r7, #32]
 8002c52:	f005 fb0b 	bl	800826c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3310      	adds	r3, #16
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	78db      	ldrb	r3, [r3, #3]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f008 fdf2 	bl	800b868 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c90:	461a      	mov	r2, r3
 8002c92:	2302      	movs	r3, #2
 8002c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fcd6 	bl	8003654 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	3301      	adds	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f47f af65 	bne.w	8002b86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f006 f97f 	bl	8008fc4 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd0:	d122      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f009 f826 	bl	800bd4c <HAL_PCDEx_LPM_Callback>
 8002d00:	e002      	b.n	8002d08 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f008 fd76 	bl	800b7f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f006 f951 	bl	8008fc4 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2c:	d112      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f008 fd32 	bl	800b7a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f006 f933 	bl	8008fc4 <USB_ReadInterrupts>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d68:	d121      	bne.n	8002dae <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d9e:	2101      	movs	r1, #1
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f008 ffd3 	bl	800bd4c <HAL_PCDEx_LPM_Callback>
 8002da6:	e002      	b.n	8002dae <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f008 fcfd 	bl	800b7a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 f906 	bl	8008fc4 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc2:	f040 80b6 	bne.w	8002f32 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2110      	movs	r1, #16
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 fa43 	bl	800826c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dea:	e046      	b.n	8002e7a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e64:	0151      	lsls	r1, r2, #5
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	440a      	add	r2, r1
 8002e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	3301      	adds	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	791b      	ldrb	r3, [r3, #4]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d3b2      	bcc.n	8002dec <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e94:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7bdb      	ldrb	r3, [r3, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb2:	f043 030b 	orr.w	r3, r3, #11
 8002eb6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec8:	f043 030b 	orr.w	r3, r3, #11
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	e015      	b.n	8002efc <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ede:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ee2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ee6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef6:	f043 030b 	orr.w	r3, r3, #11
 8002efa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f006 f915 	bl	800914c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f006 f844 	bl	8008fc4 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f46:	d123      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f006 f8da 	bl	8009106 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fa01 	bl	800835e <USB_GetDevSpeed>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681c      	ldr	r4, [r3, #0]
 8002f68:	f001 fae6 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	4620      	mov	r0, r4
 8002f76:	f004 ff27 	bl	8007dc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f008 fbf5 	bl	800b76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f006 f815 	bl	8008fc4 <USB_ReadInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d10a      	bne.n	8002fba <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f008 fbd2 	bl	800b74e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 0208 	and.w	r2, r2, #8
 8002fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f006 f800 	bl	8008fc4 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b80      	cmp	r3, #128	@ 0x80
 8002fcc:	d123      	bne.n	8003016 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fde:	e014      	b.n	800300a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 faf7 	bl	80035f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	3301      	adds	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	791b      	ldrb	r3, [r3, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	4293      	cmp	r3, r2
 8003014:	d3e4      	bcc.n	8002fe0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f005 ffd2 	bl	8008fc4 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302a:	d13c      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302c:	2301      	movs	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003030:	e02b      	b.n	800308a <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3318      	adds	r3, #24
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d115      	bne.n	8003084 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003058:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800305a:	2b00      	cmp	r3, #0
 800305c:	da12      	bge.n	8003084 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3317      	adds	r3, #23
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fab7 	bl	80035f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	3301      	adds	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	4293      	cmp	r3, r2
 8003094:	d3cd      	bcc.n	8003032 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f005 ff8a 	bl	8008fc4 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ba:	d156      	bne.n	800316a <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030bc:	2301      	movs	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c0:	e045      	b.n	800314e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d12e      	bne.n	8003148 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da2b      	bge.n	8003148 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003100:	429a      	cmp	r2, r3
 8003102:	d121      	bne.n	8003148 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003144:	6053      	str	r3, [r2, #4]
            break;
 8003146:	e008      	b.n	800315a <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	791b      	ldrb	r3, [r3, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	4293      	cmp	r3, r2
 8003158:	d3b3      	bcc.n	80030c2 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f005 ff28 	bl	8008fc4 <USB_ReadInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317e:	d10a      	bne.n	8003196 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f008 fb83 	bl	800b88c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f005 ff12 	bl	8008fc4 <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d115      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f008 fb73 	bl	800b8a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e000      	b.n	80031d6 <HAL_PCD_IRQHandler+0x926>
      return;
 80031d4:	bf00      	nop
    }
  }
}
 80031d6:	3734      	adds	r7, #52	@ 0x34
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}

080031dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_PCD_SetAddress+0x1a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e012      	b.n	800321c <HAL_PCD_SetAddress+0x40>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f005 fe71 	bl	8008ef4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	460b      	mov	r3, r1
 8003238:	803b      	strh	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da0f      	bge.n	800326a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3310      	adds	r3, #16
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e00f      	b.n	800328a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003296:	883b      	ldrh	r3, [r7, #0]
 8003298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	78ba      	ldrb	r2, [r7, #2]
 80032a4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032b8:	78bb      	ldrb	r3, [r7, #2]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d102      	bne.n	80032c4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_PCD_EP_Open+0xae>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e00e      	b.n	80032f0 <HAL_PCD_EP_Open+0xcc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 f85b 	bl	800839c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da0f      	bge.n	800332c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3310      	adds	r3, #16
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	705a      	strb	r2, [r3, #1]
 800332a:	e00f      	b.n	800334c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_EP_Close+0x6e>
 8003362:	2302      	movs	r3, #2
 8003364:	e00e      	b.n	8003384 <HAL_PCD_EP_Close+0x8c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 f899 	bl	80084ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6979      	ldr	r1, [r7, #20]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 f93f 	bl	8008664 <USB_EPStartXfer>

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3310      	adds	r3, #16
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2201      	movs	r2, #1
 800345e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	b2da      	uxtb	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	4618      	mov	r0, r3
 8003474:	f005 f8f6 	bl	8008664 <USB_EPStartXfer>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	7912      	ldrb	r2, [r2, #4]
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e04e      	b.n	800353e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da0f      	bge.n	80034c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3310      	adds	r3, #16
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	705a      	strb	r2, [r3, #1]
 80034c6:	e00d      	b.n	80034e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_PCD_EP_SetStall+0x82>
 8003500:	2302      	movs	r3, #2
 8003502:	e01c      	b.n	800353e <HAL_PCD_EP_SetStall+0xbc>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f005 fc1a 	bl	8008d4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f005 fe0c 	bl	800914c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	7912      	ldrb	r2, [r2, #4]
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e042      	b.n	80035ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da0f      	bge.n	800358c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	3310      	adds	r3, #16
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	705a      	strb	r2, [r3, #1]
 800358a:	e00f      	b.n	80035ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_EP_ClrStall+0x86>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e00e      	b.n	80035ea <HAL_PCD_EP_ClrStall+0xa4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 fc24 	bl	8008e28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da0c      	bge.n	8003620 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3310      	adds	r3, #16
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e00c      	b.n	800363a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f005 fa47 	bl	8008ad4 <USB_EPStopXfer>
 8003646:	4603      	mov	r3, r0
 8003648:	72fb      	strb	r3, [r7, #11]

  return ret;
 800364a:	7afb      	ldrb	r3, [r7, #11]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	3310      	adds	r3, #16
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d901      	bls.n	800368c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e067      	b.n	800375c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d902      	bls.n	80036a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3303      	adds	r3, #3
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b0:	e026      	b.n	8003700 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d902      	bls.n	80036ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3303      	adds	r3, #3
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f005 faa0 	bl	8008c28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	429a      	cmp	r2, r3
 8003714:	d809      	bhi.n	800372a <PCD_WriteEmptyTxFifo+0xd6>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800371e:	429a      	cmp	r2, r3
 8003720:	d203      	bcs.n	800372a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1c3      	bne.n	80036b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	429a      	cmp	r2, r3
 8003734:	d811      	bhi.n	800375a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	43db      	mvns	r3, r3
 8003750:	6939      	ldr	r1, [r7, #16]
 8003752:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003756:	4013      	ands	r3, r2
 8003758:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	333c      	adds	r3, #60	@ 0x3c
 800377c:	3304      	adds	r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a19      	ldr	r2, [pc, #100]	@ (80037fc <PCD_EP_OutXfrComplete_int+0x98>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d124      	bne.n	80037e4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b6:	6093      	str	r3, [r2, #8]
 80037b8:	e01a      	b.n	80037f0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2320      	movs	r3, #32
 80037d4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f007 ff81 	bl	800b6e4 <HAL_PCD_DataOutStageCallback>
 80037e2:	e005      	b.n	80037f0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f007 ff7a 	bl	800b6e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	4f54310a 	.word	0x4f54310a

08003800 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	333c      	adds	r3, #60	@ 0x3c
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a0c      	ldr	r2, [pc, #48]	@ (8003864 <PCD_EP_OutSetupPacket_int+0x64>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d90e      	bls.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003852:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f007 ff33 	bl	800b6c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	4f54300a 	.word	0x4f54300a

08003868 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
 8003874:	4613      	mov	r3, r2
 8003876:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003886:	883b      	ldrh	r3, [r7, #0]
 8003888:	0419      	lsls	r1, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	430a      	orrs	r2, r1
 8003892:	629a      	str	r2, [r3, #40]	@ 0x28
 8003894:	e028      	b.n	80038e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4413      	add	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	e00d      	b.n	80038c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3340      	adds	r3, #64	@ 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	3301      	adds	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3ec      	bcc.n	80038aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038d0:	883b      	ldrh	r3, [r7, #0]
 80038d2:	0418      	lsls	r0, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	3b01      	subs	r3, #1
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4302      	orrs	r2, r0
 80038e0:	3340      	adds	r3, #64	@ 0x40
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	f043 0303 	orr.w	r3, r3, #3
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a04      	ldr	r2, [pc, #16]	@ (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003984:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <HAL_PWREx_GetVoltageRange+0x18>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40007000 	.word	0x40007000

0800399c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039aa:	d130      	bne.n	8003a0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ac:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b8:	d038      	beq.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039c2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2232      	movs	r2, #50	@ 0x32
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e0:	e002      	b.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e8:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f4:	d102      	bne.n	80039fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f2      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a08:	d110      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1a:	d007      	beq.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a1c:	4b07      	ldr	r3, [pc, #28]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a24:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	20000020 	.word	0x20000020
 8003a44:	431bde83 	.word	0x431bde83

08003a48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a56:	6053      	str	r3, [r2, #4]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40007000 	.word	0x40007000

08003a68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e3ca      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7a:	4b97      	ldr	r3, [pc, #604]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a84:	4b94      	ldr	r3, [pc, #592]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80e4 	beq.w	8003c64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4a>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	f040 808b 	bne.w	8003bc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 8087 	bne.w	8003bc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab2:	4b89      	ldr	r3, [pc, #548]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e3a2      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7c>
 8003ada:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae2:	e005      	b.n	8003af0 <HAL_RCC_OscConfig+0x88>
 8003ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d223      	bcs.n	8003b3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fd55 	bl	80045a8 <RCC_SetFlashLatencyFromMSIRange>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e383      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b08:	4b73      	ldr	r3, [pc, #460]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a72      	ldr	r2, [pc, #456]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	f043 0308 	orr.w	r3, r3, #8
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	496d      	ldr	r1, [pc, #436]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b26:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	4968      	ldr	r1, [pc, #416]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
 8003b3a:	e025      	b.n	8003b88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	f043 0308 	orr.w	r3, r3, #8
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4960      	ldr	r1, [pc, #384]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	495b      	ldr	r1, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fd15 	bl	80045a8 <RCC_SetFlashLatencyFromMSIRange>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e343      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b88:	f000 fc4a 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	4950      	ldr	r1, [pc, #320]	@ (8003cdc <HAL_RCC_OscConfig+0x274>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba4:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce0 <HAL_RCC_OscConfig+0x278>)
 8003ba6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8003ce4 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe f96f 	bl	8001e90 <HAL_InitTick>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d052      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	e327      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d032      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f9ac 	bl	8001f30 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f9a8 	bl	8001f30 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e310      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bee:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bfa:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a36      	ldr	r2, [pc, #216]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4931      	ldr	r1, [pc, #196]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c18:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	492c      	ldr	r1, [pc, #176]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
 8003c2c:	e01a      	b.n	8003c64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c3a:	f7fe f979 	bl	8001f30 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c42:	f7fe f975 	bl	8001f30 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e2dd      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x1da>
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d074      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x21a>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d10e      	bne.n	8003c9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d10b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d064      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2f0>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d160      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e2ba      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x24a>
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e026      	b.n	8003d00 <HAL_RCC_OscConfig+0x298>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cba:	d115      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x280>
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a02      	ldr	r2, [pc, #8]	@ (8003cd8 <HAL_RCC_OscConfig+0x270>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x298>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	08010ed0 	.word	0x08010ed0
 8003ce0:	20000020 	.word	0x20000020
 8003ce4:	20000024 	.word	0x20000024
 8003ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a9f      	ldr	r2, [pc, #636]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe f912 	bl	8001f30 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe f90e 	bl	8001f30 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e276      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d22:	4b92      	ldr	r3, [pc, #584]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x2a8>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe f8fe 	bl	8001f30 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fe f8fa 	bl	8001f30 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e262      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d4a:	4b88      	ldr	r3, [pc, #544]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x2d0>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d060      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_OscConfig+0x310>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d119      	bne.n	8003da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d116      	bne.n	8003da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d78:	4b7c      	ldr	r3, [pc, #496]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x328>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e23f      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b76      	ldr	r3, [pc, #472]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	4973      	ldr	r1, [pc, #460]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da4:	e040      	b.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d023      	beq.n	8003df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dae:	4b6f      	ldr	r3, [pc, #444]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe f8b9 	bl	8001f30 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe f8b5 	bl	8001f30 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e21d      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd4:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b62      	ldr	r3, [pc, #392]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	495f      	ldr	r1, [pc, #380]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5c      	ldr	r2, [pc, #368]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fe f895 	bl	8001f30 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe f891 	bl	8001f30 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1f9      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e1c:	4b53      	ldr	r3, [pc, #332]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03c      	beq.n	8003eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e42:	4a4a      	ldr	r2, [pc, #296]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe f870 	bl	8001f30 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fe f86c 	bl	8001f30 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1d4      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e66:	4b41      	ldr	r3, [pc, #260]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ef      	beq.n	8003e54 <HAL_RCC_OscConfig+0x3ec>
 8003e74:	e01b      	b.n	8003eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e76:	4b3d      	ldr	r3, [pc, #244]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe f853 	bl	8001f30 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7fe f84f 	bl	8001f30 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e1b7      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea0:	4b32      	ldr	r3, [pc, #200]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ef      	bne.n	8003e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a6 	beq.w	8004008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <HAL_RCC_OscConfig+0x508>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d118      	bne.n	8003f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <HAL_RCC_OscConfig+0x508>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_RCC_OscConfig+0x508>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f00:	f7fe f816 	bl	8001f30 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fe f812 	bl	8001f30 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e17a      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_RCC_OscConfig+0x508>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4d8>
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	4a0d      	ldr	r2, [pc, #52]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f3e:	e029      	b.n	8003f94 <HAL_RCC_OscConfig+0x52c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d115      	bne.n	8003f74 <HAL_RCC_OscConfig+0x50c>
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	4a03      	ldr	r2, [pc, #12]	@ (8003f6c <HAL_RCC_OscConfig+0x504>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f68:	e014      	b.n	8003f94 <HAL_RCC_OscConfig+0x52c>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	4b9c      	ldr	r3, [pc, #624]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7a:	4a9b      	ldr	r2, [pc, #620]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f84:	4b98      	ldr	r3, [pc, #608]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	4a97      	ldr	r2, [pc, #604]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d016      	beq.n	8003fca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd ffc8 	bl	8001f30 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fd ffc4 	bl	8001f30 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e12a      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	4b8b      	ldr	r3, [pc, #556]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ed      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x53c>
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd ffb1 	bl	8001f30 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd ffad 	bl	8001f30 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e113      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ed      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	4a79      	ldr	r2, [pc, #484]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80fe 	beq.w	800420e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	2b02      	cmp	r3, #2
 8004018:	f040 80d0 	bne.w	80041bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800401c:	4b72      	ldr	r3, [pc, #456]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0203 	and.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d130      	bne.n	8004092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	3b01      	subs	r3, #1
 800403c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d127      	bne.n	8004092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d11f      	bne.n	8004092 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800405c:	2a07      	cmp	r2, #7
 800405e:	bf14      	ite	ne
 8004060:	2201      	movne	r2, #1
 8004062:	2200      	moveq	r2, #0
 8004064:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004066:	4293      	cmp	r3, r2
 8004068:	d113      	bne.n	8004092 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d109      	bne.n	8004092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	3b01      	subs	r3, #1
 800408c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d06e      	beq.n	8004170 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d069      	beq.n	800416c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040a4:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0ad      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040b4:	4b4c      	ldr	r3, [pc, #304]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a4b      	ldr	r2, [pc, #300]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040c0:	f7fd ff36 	bl	8001f30 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd ff32 	bl	8001f30 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e09a      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040da:	4b43      	ldr	r3, [pc, #268]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e6:	4b40      	ldr	r3, [pc, #256]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <HAL_RCC_OscConfig+0x784>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040f6:	3a01      	subs	r2, #1
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004100:	0212      	lsls	r2, r2, #8
 8004102:	4311      	orrs	r1, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004108:	0852      	lsrs	r2, r2, #1
 800410a:	3a01      	subs	r2, #1
 800410c:	0552      	lsls	r2, r2, #21
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004114:	0852      	lsrs	r2, r2, #1
 8004116:	3a01      	subs	r2, #1
 8004118:	0652      	lsls	r2, r2, #25
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004120:	0912      	lsrs	r2, r2, #4
 8004122:	0452      	lsls	r2, r2, #17
 8004124:	430a      	orrs	r2, r1
 8004126:	4930      	ldr	r1, [pc, #192]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004128:	4313      	orrs	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800412c:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004138:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004144:	f7fd fef4 	bl	8001f30 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd fef0 	bl	8001f30 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e058      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800416a:	e050      	b.n	800420e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e04f      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004170:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d148      	bne.n	800420e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800417c:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 8004182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004188:	4b17      	ldr	r3, [pc, #92]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a16      	ldr	r2, [pc, #88]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004194:	f7fd fecc 	bl	8001f30 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd fec8 	bl	8001f30 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e030      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x734>
 80041ba:	e028      	b.n	800420e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d023      	beq.n	800420a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a08      	ldr	r2, [pc, #32]	@ (80041e8 <HAL_RCC_OscConfig+0x780>)
 80041c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd feaf 	bl	8001f30 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d4:	e00c      	b.n	80041f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd feab 	bl	8001f30 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d905      	bls.n	80041f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e013      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_OscConfig+0x7b0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ec      	bne.n	80041d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCC_OscConfig+0x7b0>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	4905      	ldr	r1, [pc, #20]	@ (8004218 <HAL_RCC_OscConfig+0x7b0>)
 8004202:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_RCC_OscConfig+0x7b4>)
 8004204:	4013      	ands	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
 8004208:	e001      	b.n	800420e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	feeefffc 	.word	0xfeeefffc

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0e7      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b75      	ldr	r3, [pc, #468]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 0207 	bic.w	r2, r3, #7
 800424a:	4970      	ldr	r1, [pc, #448]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b6e      	ldr	r3, [pc, #440]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cf      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b66      	ldr	r3, [pc, #408]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b63      	ldr	r3, [pc, #396]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4960      	ldr	r1, [pc, #384]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04c      	beq.n	8004338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d121      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0a6      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	4b54      	ldr	r3, [pc, #336]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d115      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e09a      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e08e      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e086      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4943      	ldr	r1, [pc, #268]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004308:	f7fd fe12 	bl	8001f30 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fd fe0e 	bl	8001f30 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e06e      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b31      	ldr	r3, [pc, #196]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004350:	429a      	cmp	r2, r3
 8004352:	d208      	bcs.n	8004366 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	4b2e      	ldr	r3, [pc, #184]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	492b      	ldr	r1, [pc, #172]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d210      	bcs.n	8004396 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004374:	4b25      	ldr	r3, [pc, #148]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 0207 	bic.w	r2, r3, #7
 800437c:	4923      	ldr	r1, [pc, #140]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004384:	4b21      	ldr	r3, [pc, #132]	@ (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d001      	beq.n	8004396 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e036      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4918      	ldr	r1, [pc, #96]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c0:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4910      	ldr	r1, [pc, #64]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d4:	f000 f824 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	490b      	ldr	r1, [pc, #44]	@ (8004414 <HAL_RCC_ClockConfig+0x1f4>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	4a09      	ldr	r2, [pc, #36]	@ (8004418 <HAL_RCC_ClockConfig+0x1f8>)
 80043f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043f4:	4b09      	ldr	r3, [pc, #36]	@ (800441c <HAL_RCC_ClockConfig+0x1fc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fd49 	bl	8001e90 <HAL_InitTick>
 80043fe:	4603      	mov	r3, r0
 8004400:	72fb      	strb	r3, [r7, #11]

  return status;
 8004402:	7afb      	ldrb	r3, [r7, #11]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	08010ed0 	.word	0x08010ed0
 8004418:	20000020 	.word	0x20000020
 800441c:	20000024 	.word	0x20000024

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442e:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004438:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d121      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d11e      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004454:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004460:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e005      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004470:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800447c:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_RCC_GetSysClockFreq+0x10c>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d102      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e004      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a4:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d134      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d003      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0xac>
 80044c4:	e005      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044cc:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ce:	617b      	str	r3, [r7, #20]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	617b      	str	r3, [r7, #20]
      break;
 80044d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	fb03 f202 	mul.w	r2, r3, r2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	0e5b      	lsrs	r3, r3, #25
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	3301      	adds	r3, #1
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004518:	69bb      	ldr	r3, [r7, #24]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	@ 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	08010ee8 	.word	0x08010ee8
 8004530:	00f42400 	.word	0x00f42400
 8004534:	007a1200 	.word	0x007a1200

08004538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000020 	.word	0x20000020

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004554:	f7ff fff0 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	08010ee0 	.word	0x08010ee0

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004580:	f7ff ffda 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0adb      	lsrs	r3, r3, #11
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4904      	ldr	r1, [pc, #16]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08010ee0 	.word	0x08010ee0

080045a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045c0:	f7ff f9de 	bl	8003980 <HAL_PWREx_GetVoltageRange>
 80045c4:	6178      	str	r0, [r7, #20]
 80045c6:	e014      	b.n	80045f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	4a24      	ldr	r2, [pc, #144]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045d4:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045e0:	f7ff f9ce 	bl	8003980 <HAL_PWREx_GetVoltageRange>
 80045e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f8:	d10b      	bne.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b80      	cmp	r3, #128	@ 0x80
 80045fe:	d919      	bls.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2ba0      	cmp	r3, #160	@ 0xa0
 8004604:	d902      	bls.n	800460c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004606:	2302      	movs	r3, #2
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e013      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800460c:	2301      	movs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e010      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d902      	bls.n	800461e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004618:	2303      	movs	r3, #3
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	e00a      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b80      	cmp	r3, #128	@ 0x80
 8004622:	d102      	bne.n	800462a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004624:	2302      	movs	r3, #2
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e004      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b70      	cmp	r3, #112	@ 0x70
 800462e:	d101      	bne.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004630:	2301      	movs	r3, #1
 8004632:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 0207 	bic.w	r2, r3, #7
 800463c:	4909      	ldr	r1, [pc, #36]	@ (8004664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004644:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	429a      	cmp	r2, r3
 8004650:	d001      	beq.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	40022000 	.word	0x40022000

08004668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004670:	2300      	movs	r3, #0
 8004672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004674:	2300      	movs	r3, #0
 8004676:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004680:	2b00      	cmp	r3, #0
 8004682:	d041      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004688:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800468c:	d02a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800468e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004692:	d824      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004694:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004698:	d008      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800469a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800469e:	d81e      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046a8:	d010      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046aa:	e018      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046ac:	4b86      	ldr	r3, [pc, #536]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a85      	ldr	r2, [pc, #532]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b8:	e015      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 facb 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ca:	e00c      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3320      	adds	r3, #32
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fbb6 	bl	8004e44 <RCCEx_PLLSAI2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	74fb      	strb	r3, [r7, #19]
      break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046fa:	4973      	ldr	r1, [pc, #460]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004702:	e001      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d041      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800471c:	d02a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800471e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004722:	d824      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800472a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800472e:	d81e      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004738:	d010      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800473a:	e018      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800473c:	4b62      	ldr	r3, [pc, #392]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a61      	ldr	r2, [pc, #388]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004746:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004748:	e015      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fa83 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800475a:	e00c      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3320      	adds	r3, #32
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb6e 	bl	8004e44 <RCCEx_PLLSAI2_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	74fb      	strb	r3, [r7, #19]
      break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800477c:	4b52      	ldr	r3, [pc, #328]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478a:	494f      	ldr	r1, [pc, #316]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a0 	beq.w	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047aa:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b41      	ldr	r3, [pc, #260]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	4a40      	ldr	r2, [pc, #256]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80047cc:	4b3e      	ldr	r3, [pc, #248]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d8:	2301      	movs	r3, #1
 80047da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3a      	ldr	r2, [pc, #232]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e8:	f7fd fba2 	bl	8001f30 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ee:	e009      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fd fb9e 	bl	8001f30 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d902      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	74fb      	strb	r3, [r7, #19]
        break;
 8004802:	e005      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004804:	4b31      	ldr	r3, [pc, #196]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ef      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d15c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004816:	4b2c      	ldr	r3, [pc, #176]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004820:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01f      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	d019      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004834:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800483e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004840:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	4a20      	ldr	r2, [pc, #128]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	4a1c      	ldr	r2, [pc, #112]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004860:	4a19      	ldr	r2, [pc, #100]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fb5d 	bl	8001f30 <HAL_GetTick>
 8004876:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004878:	e00b      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fd fb59 	bl	8001f30 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d902      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	74fb      	strb	r3, [r7, #19]
            break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ec      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a6:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b6:	4904      	ldr	r1, [pc, #16]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
 80048c4:	e006      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d4:	7c7b      	ldrb	r3, [r7, #17]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b9e      	ldr	r3, [pc, #632]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	4a9d      	ldr	r2, [pc, #628]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f2:	4b98      	ldr	r3, [pc, #608]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f023 0203 	bic.w	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	4994      	ldr	r1, [pc, #592]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004914:	4b8f      	ldr	r3, [pc, #572]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f023 020c 	bic.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	498c      	ldr	r1, [pc, #560]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004936:	4b87      	ldr	r3, [pc, #540]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	4983      	ldr	r1, [pc, #524]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004958:	4b7e      	ldr	r3, [pc, #504]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	497b      	ldr	r1, [pc, #492]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800497a:	4b76      	ldr	r3, [pc, #472]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004988:	4972      	ldr	r1, [pc, #456]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800499c:	4b6d      	ldr	r3, [pc, #436]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	496a      	ldr	r1, [pc, #424]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049be:	4b65      	ldr	r3, [pc, #404]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	4961      	ldr	r1, [pc, #388]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	4959      	ldr	r1, [pc, #356]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a02:	4b54      	ldr	r3, [pc, #336]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	4950      	ldr	r1, [pc, #320]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a24:	4b4b      	ldr	r3, [pc, #300]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	4948      	ldr	r1, [pc, #288]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a46:	4b43      	ldr	r3, [pc, #268]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	493f      	ldr	r1, [pc, #252]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d028      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a68:	4b3a      	ldr	r3, [pc, #232]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a76:	4937      	ldr	r1, [pc, #220]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a86:	d106      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a88:	4b32      	ldr	r3, [pc, #200]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a31      	ldr	r2, [pc, #196]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a92:	60d3      	str	r3, [r2, #12]
 8004a94:	e011      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a9e:	d10c      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f8d8 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ac6:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	491f      	ldr	r1, [pc, #124]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af0:	60d3      	str	r3, [r2, #12]
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2101      	movs	r1, #1
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f8a9 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b32:	4908      	ldr	r1, [pc, #32]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b44:	4b03      	ldr	r3, [pc, #12]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a02      	ldr	r2, [pc, #8]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e014      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f877 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b88:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b96:	4928      	ldr	r1, [pc, #160]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	2102      	movs	r1, #2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f854 	bl	8004c5c <RCCEx_PLLSAI1_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	74bb      	strb	r3, [r7, #18]
 8004bc2:	e011      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3320      	adds	r3, #32
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f935 	bl	8004e44 <RCCEx_PLLSAI2_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bf4:	4b10      	ldr	r3, [pc, #64]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c02:	490d      	ldr	r1, [pc, #52]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c16:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	4904      	ldr	r1, [pc, #16]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c46:	f043 0304 	orr.w	r3, r3, #4
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c6a:	4b75      	ldr	r3, [pc, #468]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c76:	4b72      	ldr	r3, [pc, #456]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0203 	and.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
       ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d047      	beq.n	8004d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e044      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d018      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0x86>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d825      	bhi.n	8004d00 <RCCEx_PLLSAI1_Config+0xa4>
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d002      	beq.n	8004cbe <RCCEx_PLLSAI1_Config+0x62>
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d009      	beq.n	8004cd0 <RCCEx_PLLSAI1_Config+0x74>
 8004cbc:	e020      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cbe:	4b60      	ldr	r3, [pc, #384]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11d      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cce:	e01a      	b.n	8004d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce0:	e013      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ce2:	4b57      	ldr	r3, [pc, #348]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cee:	4b54      	ldr	r3, [pc, #336]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cfe:	e006      	b.n	8004d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e004      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d16:	4b4a      	ldr	r3, [pc, #296]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	4944      	ldr	r1, [pc, #272]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d17d      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d38:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a40      	ldr	r2, [pc, #256]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd f8f4 	bl	8001f30 <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d4a:	e009      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d4c:	f7fd f8f0 	bl	8001f30 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d902      	bls.n	8004d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5e:	e005      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d60:	4b37      	ldr	r3, [pc, #220]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ef      	bne.n	8004d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d160      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d111      	bne.n	8004d9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d78:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	0211      	lsls	r1, r2, #8
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	0912      	lsrs	r2, r2, #4
 8004d90:	0452      	lsls	r2, r2, #17
 8004d92:	430a      	orrs	r2, r1
 8004d94:	492a      	ldr	r1, [pc, #168]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
 8004d9a:	e027      	b.n	8004dec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d112      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004da2:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004daa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6892      	ldr	r2, [r2, #8]
 8004db2:	0211      	lsls	r1, r2, #8
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6912      	ldr	r2, [r2, #16]
 8004db8:	0852      	lsrs	r2, r2, #1
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	0552      	lsls	r2, r2, #21
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	491f      	ldr	r1, [pc, #124]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	610b      	str	r3, [r1, #16]
 8004dc6:	e011      	b.n	8004dec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004dd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	0211      	lsls	r1, r2, #8
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6952      	ldr	r2, [r2, #20]
 8004dde:	0852      	lsrs	r2, r2, #1
 8004de0:	3a01      	subs	r2, #1
 8004de2:	0652      	lsls	r2, r2, #25
 8004de4:	430a      	orrs	r2, r1
 8004de6:	4916      	ldr	r1, [pc, #88]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dec:	4b14      	ldr	r3, [pc, #80]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a13      	ldr	r2, [pc, #76]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd f89a 	bl	8001f30 <HAL_GetTick>
 8004dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dfe:	e009      	b.n	8004e14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e00:	f7fd f896 	bl	8001f30 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d902      	bls.n	8004e14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	73fb      	strb	r3, [r7, #15]
          break;
 8004e12:	e005      	b.n	8004e20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ef      	beq.n	8004e00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	4904      	ldr	r1, [pc, #16]	@ (8004e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000

08004e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e52:	4b6a      	ldr	r3, [pc, #424]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e5e:	4b67      	ldr	r3, [pc, #412]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0203 	and.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d10d      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
       ||
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e76:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
       ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d047      	beq.n	8004f1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
 8004e8e:	e044      	b.n	8004f1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d018      	beq.n	8004eca <RCCEx_PLLSAI2_Config+0x86>
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d825      	bhi.n	8004ee8 <RCCEx_PLLSAI2_Config+0xa4>
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d002      	beq.n	8004ea6 <RCCEx_PLLSAI2_Config+0x62>
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d009      	beq.n	8004eb8 <RCCEx_PLLSAI2_Config+0x74>
 8004ea4:	e020      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ea6:	4b55      	ldr	r3, [pc, #340]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11d      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb6:	e01a      	b.n	8004eee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eb8:	4b50      	ldr	r3, [pc, #320]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d116      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec8:	e013      	b.n	8004ef2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eca:	4b4c      	ldr	r3, [pc, #304]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ed6:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ee6:	e006      	b.n	8004ef6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      break;
 8004eec:	e004      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004efe:	4b3f      	ldr	r3, [pc, #252]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	430b      	orrs	r3, r1
 8004f14:	4939      	ldr	r1, [pc, #228]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d167      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f20:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a35      	ldr	r2, [pc, #212]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fd f800 	bl	8001f30 <HAL_GetTick>
 8004f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f32:	e009      	b.n	8004f48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f34:	f7fc fffc 	bl	8001f30 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d902      	bls.n	8004f48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	73fb      	strb	r3, [r7, #15]
        break;
 8004f46:	e005      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f48:	4b2c      	ldr	r3, [pc, #176]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ef      	bne.n	8004f34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d14a      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f60:	4b26      	ldr	r3, [pc, #152]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6892      	ldr	r2, [r2, #8]
 8004f70:	0211      	lsls	r1, r2, #8
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68d2      	ldr	r2, [r2, #12]
 8004f76:	0912      	lsrs	r2, r2, #4
 8004f78:	0452      	lsls	r2, r2, #17
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	491f      	ldr	r1, [pc, #124]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	614b      	str	r3, [r1, #20]
 8004f82:	e011      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
 8004f94:	0211      	lsls	r1, r2, #8
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6912      	ldr	r2, [r2, #16]
 8004f9a:	0852      	lsrs	r2, r2, #1
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	0652      	lsls	r2, r2, #25
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	4916      	ldr	r1, [pc, #88]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fa8:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a13      	ldr	r2, [pc, #76]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fc ffbc 	bl	8001f30 <HAL_GetTick>
 8004fb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fba:	e009      	b.n	8004fd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fbc:	f7fc ffb8 	bl	8001f30 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fce:	e005      	b.n	8004fdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4904      	ldr	r1, [pc, #16]	@ (8004ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000

08005000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04f      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a23      	ldr	r2, [pc, #140]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005042:	d018      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1f      	ldr	r2, [pc, #124]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	@ (80050cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1b      	ldr	r2, [pc, #108]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x76>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d115      	bne.n	80050a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <HAL_TIM_Base_Start_IT+0xdc>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d015      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508e:	d011      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a0:	e008      	b.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e000      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	00010007 	.word	0x00010007

080050e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fcfc 	bl	8001b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fd74 	bl	8005c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <HAL_TIM_PWM_Start+0x24>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e03c      	b.n	800522e <HAL_TIM_PWM_Start+0x9e>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d109      	bne.n	80051ce <HAL_TIM_PWM_Start+0x3e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	bf14      	ite	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	2300      	moveq	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e02f      	b.n	800522e <HAL_TIM_PWM_Start+0x9e>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d109      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x58>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e022      	b.n	800522e <HAL_TIM_PWM_Start+0x9e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d109      	bne.n	8005202 <HAL_TIM_PWM_Start+0x72>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e015      	b.n	800522e <HAL_TIM_PWM_Start+0x9e>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b10      	cmp	r3, #16
 8005206:	d109      	bne.n	800521c <HAL_TIM_PWM_Start+0x8c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	e008      	b.n	800522e <HAL_TIM_PWM_Start+0x9e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e09c      	b.n	8005370 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xb6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005244:	e023      	b.n	800528e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b04      	cmp	r3, #4
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xc6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005254:	e01b      	b.n	800528e <HAL_TIM_PWM_Start+0xfe>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xd6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005264:	e013      	b.n	800528e <HAL_TIM_PWM_Start+0xfe>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0xe6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005274:	e00b      	b.n	800528e <HAL_TIM_PWM_Start+0xfe>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xf6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	e003      	b.n	800528e <HAL_TIM_PWM_Start+0xfe>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f001 f834 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <HAL_TIM_PWM_Start+0x1e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_TIM_PWM_Start+0x13e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a34      	ldr	r2, [pc, #208]	@ (800537c <HAL_TIM_PWM_Start+0x1ec>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_PWM_Start+0x13e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a32      	ldr	r2, [pc, #200]	@ (8005380 <HAL_TIM_PWM_Start+0x1f0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_PWM_Start+0x13e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a31      	ldr	r2, [pc, #196]	@ (8005384 <HAL_TIM_PWM_Start+0x1f4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start+0x13e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <HAL_TIM_PWM_Start+0x1f8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x142>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_PWM_Start+0x144>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <HAL_TIM_PWM_Start+0x1e8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01d      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fa:	d018      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a22      	ldr	r2, [pc, #136]	@ (800538c <HAL_TIM_PWM_Start+0x1fc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a21      	ldr	r2, [pc, #132]	@ (8005390 <HAL_TIM_PWM_Start+0x200>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	@ (8005394 <HAL_TIM_PWM_Start+0x204>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <HAL_TIM_PWM_Start+0x1ec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIM_PWM_Start+0x19e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <HAL_TIM_PWM_Start+0x1f0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d115      	bne.n	800535a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <HAL_TIM_PWM_Start+0x208>)
 8005336:	4013      	ands	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b06      	cmp	r3, #6
 800533e:	d015      	beq.n	800536c <HAL_TIM_PWM_Start+0x1dc>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005346:	d011      	beq.n	800536c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	e008      	b.n	800536c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e000      	b.n	800536e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	00010007 	.word	0x00010007

0800539c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ffa8 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a3e      	ldr	r2, [pc, #248]	@ (80054b4 <HAL_TIM_PWM_Stop+0x118>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIM_PWM_Stop+0x4a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3d      	ldr	r2, [pc, #244]	@ (80054b8 <HAL_TIM_PWM_Stop+0x11c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIM_PWM_Stop+0x4a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a3b      	ldr	r2, [pc, #236]	@ (80054bc <HAL_TIM_PWM_Stop+0x120>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIM_PWM_Stop+0x4a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a3a      	ldr	r2, [pc, #232]	@ (80054c0 <HAL_TIM_PWM_Stop+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIM_PWM_Stop+0x4a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a38      	ldr	r2, [pc, #224]	@ (80054c4 <HAL_TIM_PWM_Stop+0x128>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PWM_Stop+0x4e>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_TIM_PWM_Stop+0x50>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_TIM_PWM_Stop+0x84>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f240 4344 	movw	r3, #1092	@ 0x444
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <HAL_TIM_PWM_Stop+0x84>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	f241 1311 	movw	r3, #4369	@ 0x1111
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <HAL_TIM_PWM_Stop+0xb4>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	f240 4344 	movw	r3, #1092	@ 0x444
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_TIM_PWM_Stop+0xb4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_TIM_PWM_Stop+0xc4>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545e:	e023      	b.n	80054a8 <HAL_TIM_PWM_Stop+0x10c>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b04      	cmp	r3, #4
 8005464:	d104      	bne.n	8005470 <HAL_TIM_PWM_Stop+0xd4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546e:	e01b      	b.n	80054a8 <HAL_TIM_PWM_Stop+0x10c>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b08      	cmp	r3, #8
 8005474:	d104      	bne.n	8005480 <HAL_TIM_PWM_Stop+0xe4>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547e:	e013      	b.n	80054a8 <HAL_TIM_PWM_Stop+0x10c>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d104      	bne.n	8005490 <HAL_TIM_PWM_Stop+0xf4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548e:	e00b      	b.n	80054a8 <HAL_TIM_PWM_Stop+0x10c>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b10      	cmp	r3, #16
 8005494:	d104      	bne.n	80054a0 <HAL_TIM_PWM_Stop+0x104>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800549e:	e003      	b.n	80054a8 <HAL_TIM_PWM_Stop+0x10c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800

080054c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_TIM_PWM_Start_IT+0x28>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e03c      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xa2>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d109      	bne.n	800550a <HAL_TIM_PWM_Start_IT+0x42>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e02f      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xa2>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start_IT+0x5c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xa2>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d109      	bne.n	800553e <HAL_TIM_PWM_Start_IT+0x76>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xa2>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b10      	cmp	r3, #16
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start_IT+0x90>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0e7      	b.n	8005742 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start_IT+0xba>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005580:	e023      	b.n	80055ca <HAL_TIM_PWM_Start_IT+0x102>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start_IT+0xca>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005590:	e01b      	b.n	80055ca <HAL_TIM_PWM_Start_IT+0x102>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start_IT+0xda>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a0:	e013      	b.n	80055ca <HAL_TIM_PWM_Start_IT+0x102>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start_IT+0xea>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055b0:	e00b      	b.n	80055ca <HAL_TIM_PWM_Start_IT+0x102>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start_IT+0xfa>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c0:	e003      	b.n	80055ca <HAL_TIM_PWM_Start_IT+0x102>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d841      	bhi.n	8005654 <HAL_TIM_PWM_Start_IT+0x18c>
 80055d0:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <HAL_TIM_PWM_Start_IT+0x110>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005655 	.word	0x08005655
 80055e8:	0800561f 	.word	0x0800561f
 80055ec:	08005655 	.word	0x08005655
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005655 	.word	0x08005655
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005643 	.word	0x08005643
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0202 	orr.w	r2, r2, #2
 800561a:	60da      	str	r2, [r3, #12]
      break;
 800561c:	e01d      	b.n	800565a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0204 	orr.w	r2, r2, #4
 800562c:	60da      	str	r2, [r3, #12]
      break;
 800562e:	e014      	b.n	800565a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0208 	orr.w	r2, r2, #8
 800563e:	60da      	str	r2, [r3, #12]
      break;
 8005640:	e00b      	b.n	800565a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0210 	orr.w	r2, r2, #16
 8005650:	60da      	str	r2, [r3, #12]
      break;
 8005652:	e002      	b.n	800565a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      break;
 8005658:	bf00      	nop
  }

  if (status == HAL_OK)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d16f      	bne.n	8005740 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fe4b 	bl	8006304 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a36      	ldr	r2, [pc, #216]	@ (800574c <HAL_TIM_PWM_Start_IT+0x284>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a34      	ldr	r2, [pc, #208]	@ (8005750 <HAL_TIM_PWM_Start_IT+0x288>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a33      	ldr	r2, [pc, #204]	@ (8005754 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a31      	ldr	r2, [pc, #196]	@ (8005758 <HAL_TIM_PWM_Start_IT+0x290>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a30      	ldr	r2, [pc, #192]	@ (800575c <HAL_TIM_PWM_Start_IT+0x294>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_PWM_Start_IT+0x1dc>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <HAL_TIM_PWM_Start_IT+0x1de>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a23      	ldr	r2, [pc, #140]	@ (800574c <HAL_TIM_PWM_Start_IT+0x284>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d01d      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056cc:	d018      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a23      	ldr	r2, [pc, #140]	@ (8005760 <HAL_TIM_PWM_Start_IT+0x298>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a21      	ldr	r2, [pc, #132]	@ (8005764 <HAL_TIM_PWM_Start_IT+0x29c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a20      	ldr	r2, [pc, #128]	@ (8005768 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <HAL_TIM_PWM_Start_IT+0x288>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_TIM_PWM_Start_IT+0x238>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <HAL_TIM_PWM_Start_IT+0x28c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d115      	bne.n	800572c <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	4b19      	ldr	r3, [pc, #100]	@ (800576c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b06      	cmp	r3, #6
 8005710:	d015      	beq.n	800573e <HAL_TIM_PWM_Start_IT+0x276>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005718:	d011      	beq.n	800573e <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572a:	e008      	b.n	800573e <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e000      	b.n	8005740 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	00010007 	.word	0x00010007

08005770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01b      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0202 	mvn.w	r2, #2
 80057a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa08 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9fa 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa0b 	bl	8005be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0204 	mvn.w	r2, #4
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9e2 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f9d4 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f9e5 	bl	8005be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9bc 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ae 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9bf 	bl	8005be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	d020      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0210 	mvn.w	r2, #16
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2208      	movs	r2, #8
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f996 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f988 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f999 	bl	8005be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0201 	mvn.w	r2, #1
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f966 	bl	8005ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fe33 	bl	8006570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fe2b 	bl	8006584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800594a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f953 	bl	8005bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0220 	mvn.w	r2, #32
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fdf3 	bl	800655c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800599a:	2302      	movs	r3, #2
 800599c:	e0ff      	b.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b14      	cmp	r3, #20
 80059aa:	f200 80f0 	bhi.w	8005b8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005b8f 	.word	0x08005b8f
 80059bc:	08005b8f 	.word	0x08005b8f
 80059c0:	08005b8f 	.word	0x08005b8f
 80059c4:	08005a49 	.word	0x08005a49
 80059c8:	08005b8f 	.word	0x08005b8f
 80059cc:	08005b8f 	.word	0x08005b8f
 80059d0:	08005b8f 	.word	0x08005b8f
 80059d4:	08005a8b 	.word	0x08005a8b
 80059d8:	08005b8f 	.word	0x08005b8f
 80059dc:	08005b8f 	.word	0x08005b8f
 80059e0:	08005b8f 	.word	0x08005b8f
 80059e4:	08005acb 	.word	0x08005acb
 80059e8:	08005b8f 	.word	0x08005b8f
 80059ec:	08005b8f 	.word	0x08005b8f
 80059f0:	08005b8f 	.word	0x08005b8f
 80059f4:	08005b0d 	.word	0x08005b0d
 80059f8:	08005b8f 	.word	0x08005b8f
 80059fc:	08005b8f 	.word	0x08005b8f
 8005a00:	08005b8f 	.word	0x08005b8f
 8005a04:	08005b4d 	.word	0x08005b4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f9a2 	bl	8005d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	619a      	str	r2, [r3, #24]
      break;
 8005a46:	e0a5      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa12 	bl	8005e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]
      break;
 8005a88:	e084      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fa7b 	bl	8005f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
      break;
 8005ac8:	e064      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fae3 	bl	800609c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	61da      	str	r2, [r3, #28]
      break;
 8005b0a:	e043      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fb2c 	bl	8006170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0208 	orr.w	r2, r2, #8
 8005b26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0204 	bic.w	r2, r2, #4
 8005b36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b4a:	e023      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fb70 	bl	8006238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b8c:	e002      	b.n	8005b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
      break;
 8005b92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop

08005ba8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a46      	ldr	r2, [pc, #280]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d013      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2a:	d00f      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a43      	ldr	r2, [pc, #268]	@ (8005d3c <TIM_Base_SetConfig+0x130>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a42      	ldr	r2, [pc, #264]	@ (8005d40 <TIM_Base_SetConfig+0x134>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a41      	ldr	r2, [pc, #260]	@ (8005d44 <TIM_Base_SetConfig+0x138>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a40      	ldr	r2, [pc, #256]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d108      	bne.n	8005c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a35      	ldr	r2, [pc, #212]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01f      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6c:	d01b      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <TIM_Base_SetConfig+0x130>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d017      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a31      	ldr	r2, [pc, #196]	@ (8005d40 <TIM_Base_SetConfig+0x134>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a30      	ldr	r2, [pc, #192]	@ (8005d44 <TIM_Base_SetConfig+0x138>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00f      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2e      	ldr	r2, [pc, #184]	@ (8005d4c <TIM_Base_SetConfig+0x140>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <TIM_Base_SetConfig+0x144>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_Base_SetConfig+0x9a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <TIM_Base_SetConfig+0x148>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a16      	ldr	r2, [pc, #88]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a17      	ldr	r2, [pc, #92]	@ (8005d4c <TIM_Base_SetConfig+0x140>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a16      	ldr	r2, [pc, #88]	@ (8005d50 <TIM_Base_SetConfig+0x144>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a15      	ldr	r2, [pc, #84]	@ (8005d54 <TIM_Base_SetConfig+0x148>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0201 	bic.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e64 <TIM_OC1_SetConfig+0x10c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00f      	beq.n	8005dd8 <TIM_OC1_SetConfig+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a2b      	ldr	r2, [pc, #172]	@ (8005e68 <TIM_OC1_SetConfig+0x110>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_OC1_SetConfig+0x80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e6c <TIM_OC1_SetConfig+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_OC1_SetConfig+0x80>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <TIM_OC1_SetConfig+0x118>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_OC1_SetConfig+0x80>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a28      	ldr	r2, [pc, #160]	@ (8005e74 <TIM_OC1_SetConfig+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10c      	bne.n	8005df2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0308 	bic.w	r3, r3, #8
 8005dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e64 <TIM_OC1_SetConfig+0x10c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00f      	beq.n	8005e1a <TIM_OC1_SetConfig+0xc2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e68 <TIM_OC1_SetConfig+0x110>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_OC1_SetConfig+0xc2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a19      	ldr	r2, [pc, #100]	@ (8005e6c <TIM_OC1_SetConfig+0x114>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_OC1_SetConfig+0xc2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <TIM_OC1_SetConfig+0x118>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_OC1_SetConfig+0xc2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a17      	ldr	r2, [pc, #92]	@ (8005e74 <TIM_OC1_SetConfig+0x11c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0210 	bic.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0320 	bic.w	r3, r3, #32
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a28      	ldr	r2, [pc, #160]	@ (8005f78 <TIM_OC2_SetConfig+0x100>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a27      	ldr	r2, [pc, #156]	@ (8005f7c <TIM_OC2_SetConfig+0x104>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d10d      	bne.n	8005f00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005efe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <TIM_OC2_SetConfig+0x100>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_OC2_SetConfig+0xb0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <TIM_OC2_SetConfig+0x104>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <TIM_OC2_SetConfig+0xb0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <TIM_OC2_SetConfig+0x108>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC2_SetConfig+0xb0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f84 <TIM_OC2_SetConfig+0x10c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC2_SetConfig+0xb0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <TIM_OC2_SetConfig+0x110>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d113      	bne.n	8005f50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a27      	ldr	r2, [pc, #156]	@ (8006088 <TIM_OC3_SetConfig+0xfc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC3_SetConfig+0x6a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a26      	ldr	r2, [pc, #152]	@ (800608c <TIM_OC3_SetConfig+0x100>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10d      	bne.n	8006012 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <TIM_OC3_SetConfig+0xfc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_OC3_SetConfig+0xae>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1b      	ldr	r2, [pc, #108]	@ (800608c <TIM_OC3_SetConfig+0x100>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_OC3_SetConfig+0xae>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1a      	ldr	r2, [pc, #104]	@ (8006090 <TIM_OC3_SetConfig+0x104>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_OC3_SetConfig+0xae>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <TIM_OC3_SetConfig+0x108>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC3_SetConfig+0xae>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a18      	ldr	r2, [pc, #96]	@ (8006098 <TIM_OC3_SetConfig+0x10c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40013400 	.word	0x40013400
 8006090:	40014000 	.word	0x40014000
 8006094:	40014400 	.word	0x40014400
 8006098:	40014800 	.word	0x40014800

0800609c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <TIM_OC4_SetConfig+0xc0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00f      	beq.n	8006120 <TIM_OC4_SetConfig+0x84>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a17      	ldr	r2, [pc, #92]	@ (8006160 <TIM_OC4_SetConfig+0xc4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_OC4_SetConfig+0x84>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a16      	ldr	r2, [pc, #88]	@ (8006164 <TIM_OC4_SetConfig+0xc8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <TIM_OC4_SetConfig+0x84>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <TIM_OC4_SetConfig+0xcc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_OC4_SetConfig+0x84>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a14      	ldr	r2, [pc, #80]	@ (800616c <TIM_OC4_SetConfig+0xd0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d109      	bne.n	8006134 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800

08006170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a17      	ldr	r2, [pc, #92]	@ (8006224 <TIM_OC5_SetConfig+0xb4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00f      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <TIM_OC5_SetConfig+0xb8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <TIM_OC5_SetConfig+0xbc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a14      	ldr	r2, [pc, #80]	@ (8006230 <TIM_OC5_SetConfig+0xc0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a13      	ldr	r2, [pc, #76]	@ (8006234 <TIM_OC5_SetConfig+0xc4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d109      	bne.n	80061fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800627e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	051b      	lsls	r3, r3, #20
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <TIM_OC6_SetConfig+0xb8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a17      	ldr	r2, [pc, #92]	@ (80062f4 <TIM_OC6_SetConfig+0xbc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC6_SetConfig+0xc0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <TIM_OC6_SetConfig+0xc4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_OC6_SetConfig+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e068      	b.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2e      	ldr	r2, [pc, #184]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2d      	ldr	r2, [pc, #180]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d108      	bne.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01d      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063da:	d018      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a13      	ldr	r2, [pc, #76]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a14      	ldr	r2, [pc, #80]	@ (800645c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10c      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4313      	orrs	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40014000 	.word	0x40014000

08006460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006478:	2302      	movs	r3, #2
 800647a:	e065      	b.n	8006548 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a14      	ldr	r2, [pc, #80]	@ (8006558 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d115      	bne.n	8006536 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	051b      	lsls	r3, r3, #20
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400

0800655c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e040      	b.n	800662c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fb fbba 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	@ 0x24
 80065c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fedc 	bl	800739c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc21 	bl	8006e2c <UART_SetConfig>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e01b      	b.n	800662c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ff5b 	bl	80074e0 <UART_CheckIdleState>
 800662a:	4603      	mov	r3, r0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	@ 0x28
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006648:	2b20      	cmp	r3, #32
 800664a:	d177      	bne.n	800673c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_UART_Transmit+0x24>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e070      	b.n	800673e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2221      	movs	r2, #33	@ 0x21
 8006668:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666a:	f7fb fc61 	bl	8001f30 <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006688:	d108      	bne.n	800669c <HAL_UART_Transmit+0x68>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e003      	b.n	80066a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066a4:	e02f      	b.n	8006706 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2180      	movs	r1, #128	@ 0x80
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 ffbd 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e03b      	b.n	800673e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	881a      	ldrh	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d8:	b292      	uxth	r2, r2
 80066da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	3302      	adds	r3, #2
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e007      	b.n	80066f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c9      	bne.n	80066a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	2140      	movs	r1, #64	@ 0x40
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 ff87 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e005      	b.n	800673e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	@ 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675c:	2b20      	cmp	r3, #32
 800675e:	d137      	bne.n	80067d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Receive_IT+0x24>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e030      	b.n	80067d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_UART_Receive_IT+0x94>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d01f      	beq.n	80067c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	613b      	str	r3, [r7, #16]
   return(result);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	6a3a      	ldr	r2, [r7, #32]
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 ffa0 	bl	800770c <UART_Start_Receive_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	@ 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40008000 	.word	0x40008000

080067e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0ba      	sub	sp, #232	@ 0xe8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800680a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800680e:	4013      	ands	r3, r2
 8006810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d115      	bne.n	8006848 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00f      	beq.n	8006848 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 82ca 	beq.w	8006dd2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
      }
      return;
 8006846:	e2c4      	b.n	8006dd2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8117 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800685e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006862:	4b85      	ldr	r3, [pc, #532]	@ (8006a78 <HAL_UART_IRQHandler+0x298>)
 8006864:	4013      	ands	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 810a 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d011      	beq.n	800689c <HAL_UART_IRQHandler+0xbc>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006892:	f043 0201 	orr.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d011      	beq.n	80068cc <HAL_UART_IRQHandler+0xec>
 80068a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2202      	movs	r2, #2
 80068ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d011      	beq.n	80068fc <HAL_UART_IRQHandler+0x11c>
 80068d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2204      	movs	r2, #4
 80068ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f2:	f043 0202 	orr.w	r2, r3, #2
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006918:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2208      	movs	r2, #8
 8006926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800692e:	f043 0208 	orr.w	r2, r3, #8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006940:	2b00      	cmp	r3, #0
 8006942:	d012      	beq.n	800696a <HAL_UART_IRQHandler+0x18a>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00c      	beq.n	800696a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8230 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b2:	2b40      	cmp	r3, #64	@ 0x40
 80069b4:	d005      	beq.n	80069c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04f      	beq.n	8006a62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 ff68 	bl	8007898 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b40      	cmp	r3, #64	@ 0x40
 80069d4:	d141      	bne.n	8006a5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1d9      	bne.n	80069d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <HAL_UART_IRQHandler+0x29c>)
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fb fbf9 	bl	800222e <HAL_DMA_Abort_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d017      	beq.n	8006a72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00f      	b.n	8006a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9d4 	bl	8006e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00b      	b.n	8006a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9d0 	bl	8006e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e007      	b.n	8006a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9cc 	bl	8006e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a70:	e1b1      	b.n	8006dd6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a72:	bf00      	nop
    return;
 8006a74:	e1af      	b.n	8006dd6 <HAL_UART_IRQHandler+0x5f6>
 8006a76:	bf00      	nop
 8006a78:	04000120 	.word	0x04000120
 8006a7c:	08007961 	.word	0x08007961

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 816a 	bne.w	8006d5e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8163 	beq.w	8006d5e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 815c 	beq.w	8006d5e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b40      	cmp	r3, #64	@ 0x40
 8006aba:	f040 80d4 	bne.w	8006c66 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80ad 	beq.w	8006c2e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	f080 80a5 	bcs.w	8006c2e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8086 	bne.w	8006c0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1da      	bne.n	8006b00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e1      	bne.n	8006b4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006baa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e3      	bne.n	8006b86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bdc:	f023 0310 	bic.w	r3, r3, #16
 8006be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e4      	bne.n	8006bcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fb fad3 	bl	80021b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f8f4 	bl	8006e14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c2c:	e0d5      	b.n	8006dda <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	f040 80ce 	bne.w	8006dda <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	f040 80c5 	bne.w	8006dda <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8d8 	bl	8006e14 <HAL_UARTEx_RxEventCallback>
      return;
 8006c64:	e0b9      	b.n	8006dda <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80ab 	beq.w	8006dde <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80a6 	beq.w	8006dde <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cec:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e3      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0310 	bic.w	r3, r3, #16
 8006d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	69b9      	ldr	r1, [r7, #24]
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	617b      	str	r3, [r7, #20]
   return(result);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e4      	bne.n	8006d14 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f85c 	bl	8006e14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d5c:	e03f      	b.n	8006dde <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <HAL_UART_IRQHandler+0x5a8>
 8006d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d008      	beq.n	8006d88 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 ffe9 	bl	8007d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d86:	e02d      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01c      	beq.n	8006de2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
    }
    return;
 8006db0:	e017      	b.n	8006de2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <HAL_UART_IRQHandler+0x604>
 8006dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fdde 	bl	800798c <UART_EndTransmit_IT>
    return;
 8006dd0:	e008      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
      return;
 8006dd2:	bf00      	nop
 8006dd4:	e006      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
    return;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
      return;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
      return;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_UART_IRQHandler+0x604>
    return;
 8006de2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006de4:	37e8      	adds	r7, #232	@ 0xe8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e30:	b08a      	sub	sp, #40	@ 0x28
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4ba4      	ldr	r3, [pc, #656]	@ (80070ec <UART_SetConfig+0x2c0>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a99      	ldr	r2, [pc, #612]	@ (80070f0 <UART_SetConfig+0x2c4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e94:	4313      	orrs	r3, r2
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a90      	ldr	r2, [pc, #576]	@ (80070f4 <UART_SetConfig+0x2c8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d126      	bne.n	8006f04 <UART_SetConfig+0xd8>
 8006eb6:	4b90      	ldr	r3, [pc, #576]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d81b      	bhi.n	8006efc <UART_SetConfig+0xd0>
 8006ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <UART_SetConfig+0xa0>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e116      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e112      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e10e      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e10a      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e106      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a7c      	ldr	r2, [pc, #496]	@ (80070fc <UART_SetConfig+0x2d0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d138      	bne.n	8006f80 <UART_SetConfig+0x154>
 8006f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d82d      	bhi.n	8006f78 <UART_SetConfig+0x14c>
 8006f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f24 <UART_SetConfig+0xf8>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f79 	.word	0x08006f79
 8006f2c:	08006f79 	.word	0x08006f79
 8006f30:	08006f79 	.word	0x08006f79
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	08006f79 	.word	0x08006f79
 8006f3c:	08006f79 	.word	0x08006f79
 8006f40:	08006f79 	.word	0x08006f79
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	08006f79 	.word	0x08006f79
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	08006f79 	.word	0x08006f79
 8006f54:	08006f71 	.word	0x08006f71
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e0d8      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f60:	2302      	movs	r3, #2
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e0d4      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e0d0      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e0cc      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7e:	e0c8      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5e      	ldr	r2, [pc, #376]	@ (8007100 <UART_SetConfig+0x2d4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d125      	bne.n	8006fd6 <UART_SetConfig+0x1aa>
 8006f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8006f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f94:	2b30      	cmp	r3, #48	@ 0x30
 8006f96:	d016      	beq.n	8006fc6 <UART_SetConfig+0x19a>
 8006f98:	2b30      	cmp	r3, #48	@ 0x30
 8006f9a:	d818      	bhi.n	8006fce <UART_SetConfig+0x1a2>
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d00a      	beq.n	8006fb6 <UART_SetConfig+0x18a>
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d814      	bhi.n	8006fce <UART_SetConfig+0x1a2>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <UART_SetConfig+0x182>
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d008      	beq.n	8006fbe <UART_SetConfig+0x192>
 8006fac:	e00f      	b.n	8006fce <UART_SetConfig+0x1a2>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb4:	e0ad      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbc:	e0a9      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006fbe:	2304      	movs	r3, #4
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc4:	e0a5      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fcc:	e0a1      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006fce:	2310      	movs	r3, #16
 8006fd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd4:	e09d      	b.n	8007112 <UART_SetConfig+0x2e6>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a4a      	ldr	r2, [pc, #296]	@ (8007104 <UART_SetConfig+0x2d8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d125      	bne.n	800702c <UART_SetConfig+0x200>
 8006fe0:	4b45      	ldr	r3, [pc, #276]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8006fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fec:	d016      	beq.n	800701c <UART_SetConfig+0x1f0>
 8006fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff0:	d818      	bhi.n	8007024 <UART_SetConfig+0x1f8>
 8006ff2:	2b80      	cmp	r3, #128	@ 0x80
 8006ff4:	d00a      	beq.n	800700c <UART_SetConfig+0x1e0>
 8006ff6:	2b80      	cmp	r3, #128	@ 0x80
 8006ff8:	d814      	bhi.n	8007024 <UART_SetConfig+0x1f8>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <UART_SetConfig+0x1d8>
 8006ffe:	2b40      	cmp	r3, #64	@ 0x40
 8007000:	d008      	beq.n	8007014 <UART_SetConfig+0x1e8>
 8007002:	e00f      	b.n	8007024 <UART_SetConfig+0x1f8>
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700a:	e082      	b.n	8007112 <UART_SetConfig+0x2e6>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e07e      	b.n	8007112 <UART_SetConfig+0x2e6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e07a      	b.n	8007112 <UART_SetConfig+0x2e6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e076      	b.n	8007112 <UART_SetConfig+0x2e6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e072      	b.n	8007112 <UART_SetConfig+0x2e6>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a35      	ldr	r2, [pc, #212]	@ (8007108 <UART_SetConfig+0x2dc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d12a      	bne.n	800708c <UART_SetConfig+0x260>
 8007036:	4b30      	ldr	r3, [pc, #192]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007044:	d01a      	beq.n	800707c <UART_SetConfig+0x250>
 8007046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800704a:	d81b      	bhi.n	8007084 <UART_SetConfig+0x258>
 800704c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007050:	d00c      	beq.n	800706c <UART_SetConfig+0x240>
 8007052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007056:	d815      	bhi.n	8007084 <UART_SetConfig+0x258>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <UART_SetConfig+0x238>
 800705c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007060:	d008      	beq.n	8007074 <UART_SetConfig+0x248>
 8007062:	e00f      	b.n	8007084 <UART_SetConfig+0x258>
 8007064:	2300      	movs	r3, #0
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e052      	b.n	8007112 <UART_SetConfig+0x2e6>
 800706c:	2302      	movs	r3, #2
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e04e      	b.n	8007112 <UART_SetConfig+0x2e6>
 8007074:	2304      	movs	r3, #4
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e04a      	b.n	8007112 <UART_SetConfig+0x2e6>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007082:	e046      	b.n	8007112 <UART_SetConfig+0x2e6>
 8007084:	2310      	movs	r3, #16
 8007086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708a:	e042      	b.n	8007112 <UART_SetConfig+0x2e6>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a17      	ldr	r2, [pc, #92]	@ (80070f0 <UART_SetConfig+0x2c4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d13a      	bne.n	800710c <UART_SetConfig+0x2e0>
 8007096:	4b18      	ldr	r3, [pc, #96]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070a4:	d01a      	beq.n	80070dc <UART_SetConfig+0x2b0>
 80070a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070aa:	d81b      	bhi.n	80070e4 <UART_SetConfig+0x2b8>
 80070ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070b0:	d00c      	beq.n	80070cc <UART_SetConfig+0x2a0>
 80070b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070b6:	d815      	bhi.n	80070e4 <UART_SetConfig+0x2b8>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <UART_SetConfig+0x298>
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c0:	d008      	beq.n	80070d4 <UART_SetConfig+0x2a8>
 80070c2:	e00f      	b.n	80070e4 <UART_SetConfig+0x2b8>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e022      	b.n	8007112 <UART_SetConfig+0x2e6>
 80070cc:	2302      	movs	r3, #2
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e01e      	b.n	8007112 <UART_SetConfig+0x2e6>
 80070d4:	2304      	movs	r3, #4
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e01a      	b.n	8007112 <UART_SetConfig+0x2e6>
 80070dc:	2308      	movs	r3, #8
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e016      	b.n	8007112 <UART_SetConfig+0x2e6>
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ea:	e012      	b.n	8007112 <UART_SetConfig+0x2e6>
 80070ec:	efff69f3 	.word	0xefff69f3
 80070f0:	40008000 	.word	0x40008000
 80070f4:	40013800 	.word	0x40013800
 80070f8:	40021000 	.word	0x40021000
 80070fc:	40004400 	.word	0x40004400
 8007100:	40004800 	.word	0x40004800
 8007104:	40004c00 	.word	0x40004c00
 8007108:	40005000 	.word	0x40005000
 800710c:	2310      	movs	r3, #16
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a9f      	ldr	r2, [pc, #636]	@ (8007394 <UART_SetConfig+0x568>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d17a      	bne.n	8007212 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800711c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007120:	2b08      	cmp	r3, #8
 8007122:	d824      	bhi.n	800716e <UART_SetConfig+0x342>
 8007124:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <UART_SetConfig+0x300>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007151 	.word	0x08007151
 8007130:	0800716f 	.word	0x0800716f
 8007134:	08007159 	.word	0x08007159
 8007138:	0800716f 	.word	0x0800716f
 800713c:	0800715f 	.word	0x0800715f
 8007140:	0800716f 	.word	0x0800716f
 8007144:	0800716f 	.word	0x0800716f
 8007148:	0800716f 	.word	0x0800716f
 800714c:	08007167 	.word	0x08007167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007150:	f7fd f9fe 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8007154:	61f8      	str	r0, [r7, #28]
        break;
 8007156:	e010      	b.n	800717a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b8f      	ldr	r3, [pc, #572]	@ (8007398 <UART_SetConfig+0x56c>)
 800715a:	61fb      	str	r3, [r7, #28]
        break;
 800715c:	e00d      	b.n	800717a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fd f95f 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8007162:	61f8      	str	r0, [r7, #28]
        break;
 8007164:	e009      	b.n	800717a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800716a:	61fb      	str	r3, [r7, #28]
        break;
 800716c:	e005      	b.n	800717a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80fb 	beq.w	8007378 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	429a      	cmp	r2, r3
 8007190:	d305      	bcc.n	800719e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	429a      	cmp	r2, r3
 800719c:	d903      	bls.n	80071a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071a4:	e0e8      	b.n	8007378 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2200      	movs	r2, #0
 80071aa:	461c      	mov	r4, r3
 80071ac:	4615      	mov	r5, r2
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	022b      	lsls	r3, r5, #8
 80071b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071bc:	0222      	lsls	r2, r4, #8
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	6849      	ldr	r1, [r1, #4]
 80071c2:	0849      	lsrs	r1, r1, #1
 80071c4:	2000      	movs	r0, #0
 80071c6:	4688      	mov	r8, r1
 80071c8:	4681      	mov	r9, r0
 80071ca:	eb12 0a08 	adds.w	sl, r2, r8
 80071ce:	eb43 0b09 	adc.w	fp, r3, r9
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e0:	4650      	mov	r0, sl
 80071e2:	4659      	mov	r1, fp
 80071e4:	f7f9 fd50 	bl	8000c88 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4613      	mov	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f6:	d308      	bcc.n	800720a <UART_SetConfig+0x3de>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fe:	d204      	bcs.n	800720a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	60da      	str	r2, [r3, #12]
 8007208:	e0b6      	b.n	8007378 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007210:	e0b2      	b.n	8007378 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721a:	d15e      	bne.n	80072da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800721c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007220:	2b08      	cmp	r3, #8
 8007222:	d828      	bhi.n	8007276 <UART_SetConfig+0x44a>
 8007224:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x400>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	08007277 	.word	0x08007277
 800723c:	08007267 	.word	0x08007267
 8007240:	08007277 	.word	0x08007277
 8007244:	08007277 	.word	0x08007277
 8007248:	08007277 	.word	0x08007277
 800724c:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fd f97e 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8007254:	61f8      	str	r0, [r7, #28]
        break;
 8007256:	e014      	b.n	8007282 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007258:	f7fd f990 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 800725c:	61f8      	str	r0, [r7, #28]
        break;
 800725e:	e010      	b.n	8007282 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b4d      	ldr	r3, [pc, #308]	@ (8007398 <UART_SetConfig+0x56c>)
 8007262:	61fb      	str	r3, [r7, #28]
        break;
 8007264:	e00d      	b.n	8007282 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fd f8db 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 800726a:	61f8      	str	r0, [r7, #28]
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007272:	61fb      	str	r3, [r7, #28]
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d077      	beq.n	8007378 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	005a      	lsls	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	441a      	add	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b0f      	cmp	r3, #15
 80072a2:	d916      	bls.n	80072d2 <UART_SetConfig+0x4a6>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072aa:	d212      	bcs.n	80072d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f023 030f 	bic.w	r3, r3, #15
 80072b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	8afb      	ldrh	r3, [r7, #22]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	8afa      	ldrh	r2, [r7, #22]
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	e052      	b.n	8007378 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072d8:	e04e      	b.n	8007378 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d827      	bhi.n	8007332 <UART_SetConfig+0x506>
 80072e2:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <UART_SetConfig+0x4bc>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007315 	.word	0x08007315
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	08007333 	.word	0x08007333
 80072f8:	08007323 	.word	0x08007323
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007333 	.word	0x08007333
 8007304:	08007333 	.word	0x08007333
 8007308:	0800732b 	.word	0x0800732b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800730c:	f7fd f920 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8007310:	61f8      	str	r0, [r7, #28]
        break;
 8007312:	e014      	b.n	800733e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007314:	f7fd f932 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8007318:	61f8      	str	r0, [r7, #28]
        break;
 800731a:	e010      	b.n	800733e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800731c:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <UART_SetConfig+0x56c>)
 800731e:	61fb      	str	r3, [r7, #28]
        break;
 8007320:	e00d      	b.n	800733e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007322:	f7fd f87d 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8007326:	61f8      	str	r0, [r7, #28]
        break;
 8007328:	e009      	b.n	800733e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732e:	61fb      	str	r3, [r7, #28]
        break;
 8007330:	e005      	b.n	800733e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800733c:	bf00      	nop
    }

    if (pclk != 0U)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d019      	beq.n	8007378 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	085a      	lsrs	r2, r3, #1
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b0f      	cmp	r3, #15
 800735c:	d909      	bls.n	8007372 <UART_SetConfig+0x546>
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007364:	d205      	bcs.n	8007372 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	@ 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007392:	bf00      	nop
 8007394:	40008000 	.word	0x40008000
 8007398:	00f42400 	.word	0x00f42400

0800739c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800749a:	d10a      	bne.n	80074b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b098      	sub	sp, #96	@ 0x60
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f0:	f7fa fd1e 	bl	8001f30 <HAL_GetTick>
 80074f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b08      	cmp	r3, #8
 8007502:	d12e      	bne.n	8007562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800750c:	2200      	movs	r2, #0
 800750e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f88c 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d021      	beq.n	8007562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007532:	653b      	str	r3, [r7, #80]	@ 0x50
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800753c:	647b      	str	r3, [r7, #68]	@ 0x44
 800753e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800754a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e062      	b.n	8007628 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b04      	cmp	r3, #4
 800756e:	d149      	bne.n	8007604 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007570:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007578:	2200      	movs	r2, #0
 800757a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f856 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d03c      	beq.n	8007604 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	623b      	str	r3, [r7, #32]
   return(result);
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800759e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3308      	adds	r3, #8
 80075da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075dc:	61fa      	str	r2, [r7, #28]
 80075de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	69b9      	ldr	r1, [r7, #24]
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e5      	bne.n	80075bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e011      	b.n	8007628 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3758      	adds	r7, #88	@ 0x58
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007640:	e04f      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007648:	d04b      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fa fc71 	bl	8001f30 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <UART_WaitOnFlagUntilTimeout+0x30>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e04e      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d037      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b80      	cmp	r3, #128	@ 0x80
 8007676:	d034      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b40      	cmp	r3, #64	@ 0x40
 800767c:	d031      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b08      	cmp	r3, #8
 800768a:	d110      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f8ff 	bl	8007898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2208      	movs	r2, #8
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e029      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076bc:	d111      	bne.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f8e5 	bl	8007898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e00f      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4013      	ands	r3, r2
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bf0c      	ite	eq
 80076f2:	2301      	moveq	r3, #1
 80076f4:	2300      	movne	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d0a0      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800770c:	b480      	push	{r7}
 800770e:	b097      	sub	sp, #92	@ 0x5c
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800773e:	d10e      	bne.n	800775e <UART_Start_Receive_IT+0x52>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <UART_Start_Receive_IT+0x48>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800774e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007752:	e02d      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	22ff      	movs	r2, #255	@ 0xff
 8007758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800775c:	e028      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <UART_Start_Receive_IT+0x76>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <UART_Start_Receive_IT+0x6c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	22ff      	movs	r2, #255	@ 0xff
 8007772:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007776:	e01b      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	227f      	movs	r2, #127	@ 0x7f
 800777c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007780:	e016      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778a:	d10d      	bne.n	80077a8 <UART_Start_Receive_IT+0x9c>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <UART_Start_Receive_IT+0x92>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	227f      	movs	r2, #127	@ 0x7f
 8007798:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800779c:	e008      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	223f      	movs	r2, #63	@ 0x3f
 80077a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077a6:	e003      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2222      	movs	r2, #34	@ 0x22
 80077bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fc:	d107      	bne.n	800780e <UART_Start_Receive_IT+0x102>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a21      	ldr	r2, [pc, #132]	@ (8007890 <UART_Start_Receive_IT+0x184>)
 800780a:	669a      	str	r2, [r3, #104]	@ 0x68
 800780c:	e002      	b.n	8007814 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a20      	ldr	r2, [pc, #128]	@ (8007894 <UART_Start_Receive_IT+0x188>)
 8007812:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d019      	beq.n	8007850 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_Start_Receive_IT+0x110>
 800784e:	e018      	b.n	8007882 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	613b      	str	r3, [r7, #16]
   return(result);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f043 0320 	orr.w	r3, r3, #32
 8007864:	653b      	str	r3, [r7, #80]	@ 0x50
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786e:	623b      	str	r3, [r7, #32]
 8007870:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	69f9      	ldr	r1, [r7, #28]
 8007874:	6a3a      	ldr	r2, [r7, #32]
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	61bb      	str	r3, [r7, #24]
   return(result);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e6      	bne.n	8007850 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	375c      	adds	r7, #92	@ 0x5c
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	08007b9d 	.word	0x08007b9d
 8007894:	080079e1 	.word	0x080079e1

08007898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b095      	sub	sp, #84	@ 0x54
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078be:	643b      	str	r3, [r7, #64]	@ 0x40
 80078c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e6      	bne.n	80078a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800790a:	2b01      	cmp	r3, #1
 800790c:	d118      	bne.n	8007940 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	60bb      	str	r3, [r7, #8]
   return(result);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0310 	bic.w	r3, r3, #16
 8007922:	647b      	str	r3, [r7, #68]	@ 0x44
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6979      	ldr	r1, [r7, #20]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	613b      	str	r3, [r7, #16]
   return(result);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007954:	bf00      	nop
 8007956:	3754      	adds	r7, #84	@ 0x54
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fa3e 	bl	8006e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6979      	ldr	r1, [r7, #20]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	613b      	str	r3, [r7, #16]
   return(result);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fa0a 	bl	8006dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d8:	bf00      	nop
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b09c      	sub	sp, #112	@ 0x70
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f8:	2b22      	cmp	r3, #34	@ 0x22
 80079fa:	f040 80be 	bne.w	8007b7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a0c:	b2d9      	uxtb	r1, r3
 8007a0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a18:	400a      	ands	r2, r1
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f040 80a3 	bne.w	8007b8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e6      	bne.n	8007a48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e5      	bne.n	8007a7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a34      	ldr	r2, [pc, #208]	@ (8007b98 <UART_RxISR_8BIT+0x1b8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d01f      	beq.n	8007b0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d12e      	bne.n	8007b72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0310 	bic.w	r3, r3, #16
 8007b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	617b      	str	r3, [r7, #20]
   return(result);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d103      	bne.n	8007b62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f952 	bl	8006e14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b70:	e00d      	b.n	8007b8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7f9 fbbc 	bl	80012f0 <HAL_UART_RxCpltCallback>
}
 8007b78:	e009      	b.n	8007b8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	8b1b      	ldrh	r3, [r3, #24]
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0208 	orr.w	r2, r2, #8
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	831a      	strh	r2, [r3, #24]
}
 8007b8e:	bf00      	nop
 8007b90:	3770      	adds	r7, #112	@ 0x70
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40008000 	.word	0x40008000

08007b9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b09c      	sub	sp, #112	@ 0x70
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007baa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb4:	2b22      	cmp	r3, #34	@ 0x22
 8007bb6:	f040 80be 	bne.w	8007d36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007bc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007bce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 80a3 	bne.w	8007d4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e6      	bne.n	8007c04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c56:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e5      	bne.n	8007c36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a34      	ldr	r2, [pc, #208]	@ (8007d54 <UART_RxISR_16BIT+0x1b8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d01f      	beq.n	8007cc8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d018      	beq.n	8007cc8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cb6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d12e      	bne.n	8007d2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6979      	ldr	r1, [r7, #20]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	613b      	str	r3, [r7, #16]
   return(result);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e6      	bne.n	8007cd6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d103      	bne.n	8007d1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff f874 	bl	8006e14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d2c:	e00d      	b.n	8007d4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7f9 fade 	bl	80012f0 <HAL_UART_RxCpltCallback>
}
 8007d34:	e009      	b.n	8007d4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	8b1b      	ldrh	r3, [r3, #24]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0208 	orr.w	r2, r2, #8
 8007d46:	b292      	uxth	r2, r2
 8007d48:	831a      	strh	r2, [r3, #24]
}
 8007d4a:	bf00      	nop
 8007d4c:	3770      	adds	r7, #112	@ 0x70
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40008000 	.word	0x40008000

08007d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	f107 001c 	add.w	r0, r7, #28
 8007d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fa26 	bl	80091dc <USB_CoreReset>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007da8:	e005      	b.n	8007db6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dc2:	b004      	add	sp, #16
 8007dc4:	4770      	bx	lr
	...

08007dc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d165      	bne.n	8007ea8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4a3e      	ldr	r2, [pc, #248]	@ (8007ed8 <USB_SetTurnaroundTime+0x110>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d906      	bls.n	8007df2 <USB_SetTurnaroundTime+0x2a>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4a3d      	ldr	r2, [pc, #244]	@ (8007edc <USB_SetTurnaroundTime+0x114>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d202      	bcs.n	8007df2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007dec:	230f      	movs	r3, #15
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e05c      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4a39      	ldr	r2, [pc, #228]	@ (8007edc <USB_SetTurnaroundTime+0x114>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d306      	bcc.n	8007e08 <USB_SetTurnaroundTime+0x40>
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4a38      	ldr	r2, [pc, #224]	@ (8007ee0 <USB_SetTurnaroundTime+0x118>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d202      	bcs.n	8007e08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e02:	230e      	movs	r3, #14
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	e051      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4a35      	ldr	r2, [pc, #212]	@ (8007ee0 <USB_SetTurnaroundTime+0x118>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d306      	bcc.n	8007e1e <USB_SetTurnaroundTime+0x56>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4a34      	ldr	r2, [pc, #208]	@ (8007ee4 <USB_SetTurnaroundTime+0x11c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d202      	bcs.n	8007e1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e18:	230d      	movs	r3, #13
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e046      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4a30      	ldr	r2, [pc, #192]	@ (8007ee4 <USB_SetTurnaroundTime+0x11c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d306      	bcc.n	8007e34 <USB_SetTurnaroundTime+0x6c>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee8 <USB_SetTurnaroundTime+0x120>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d802      	bhi.n	8007e34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e2e:	230c      	movs	r3, #12
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	e03b      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee8 <USB_SetTurnaroundTime+0x120>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d906      	bls.n	8007e4a <USB_SetTurnaroundTime+0x82>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007eec <USB_SetTurnaroundTime+0x124>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d802      	bhi.n	8007e4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e44:	230b      	movs	r3, #11
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e030      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	4a27      	ldr	r2, [pc, #156]	@ (8007eec <USB_SetTurnaroundTime+0x124>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d906      	bls.n	8007e60 <USB_SetTurnaroundTime+0x98>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4a26      	ldr	r2, [pc, #152]	@ (8007ef0 <USB_SetTurnaroundTime+0x128>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d802      	bhi.n	8007e60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	617b      	str	r3, [r7, #20]
 8007e5e:	e025      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a23      	ldr	r2, [pc, #140]	@ (8007ef0 <USB_SetTurnaroundTime+0x128>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d906      	bls.n	8007e76 <USB_SetTurnaroundTime+0xae>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4a22      	ldr	r2, [pc, #136]	@ (8007ef4 <USB_SetTurnaroundTime+0x12c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d202      	bcs.n	8007e76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e70:	2309      	movs	r3, #9
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e01a      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4a1e      	ldr	r2, [pc, #120]	@ (8007ef4 <USB_SetTurnaroundTime+0x12c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d306      	bcc.n	8007e8c <USB_SetTurnaroundTime+0xc4>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <USB_SetTurnaroundTime+0x130>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d802      	bhi.n	8007e8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e86:	2308      	movs	r3, #8
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	e00f      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ef8 <USB_SetTurnaroundTime+0x130>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d906      	bls.n	8007ea2 <USB_SetTurnaroundTime+0xda>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4a19      	ldr	r2, [pc, #100]	@ (8007efc <USB_SetTurnaroundTime+0x134>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d202      	bcs.n	8007ea2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e9c:	2307      	movs	r3, #7
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e004      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007ea2:	2306      	movs	r3, #6
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e001      	b.n	8007eac <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ea8:	2309      	movs	r3, #9
 8007eaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	00d8acbf 	.word	0x00d8acbf
 8007edc:	00e4e1c0 	.word	0x00e4e1c0
 8007ee0:	00f42400 	.word	0x00f42400
 8007ee4:	01067380 	.word	0x01067380
 8007ee8:	011a499f 	.word	0x011a499f
 8007eec:	01312cff 	.word	0x01312cff
 8007ef0:	014ca43f 	.word	0x014ca43f
 8007ef4:	016e3600 	.word	0x016e3600
 8007ef8:	01a6ab1f 	.word	0x01a6ab1f
 8007efc:	01e84800 	.word	0x01e84800

08007f00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f043 0201 	orr.w	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f023 0201 	bic.w	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d115      	bne.n	8007f92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f72:	200a      	movs	r0, #10
 8007f74:	f7f9 ffe8 	bl	8001f48 <HAL_Delay>
      ms += 10U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	330a      	adds	r3, #10
 8007f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 f8b3 	bl	80090ea <USB_GetMode>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d01e      	beq.n	8007fc8 <USB_SetCurrentMode+0x84>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f8e:	d9f0      	bls.n	8007f72 <USB_SetCurrentMode+0x2e>
 8007f90:	e01a      	b.n	8007fc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d115      	bne.n	8007fc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fa4:	200a      	movs	r0, #10
 8007fa6:	f7f9 ffcf 	bl	8001f48 <HAL_Delay>
      ms += 10U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	330a      	adds	r3, #10
 8007fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f89a 	bl	80090ea <USB_GetMode>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <USB_SetCurrentMode+0x84>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fc0:	d9f0      	bls.n	8007fa4 <USB_SetCurrentMode+0x60>
 8007fc2:	e001      	b.n	8007fc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e005      	b.n	8007fd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2bc8      	cmp	r3, #200	@ 0xc8
 8007fcc:	d101      	bne.n	8007fd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fdc:	b084      	sub	sp, #16
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	e009      	b.n	8008010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3340      	adds	r3, #64	@ 0x40
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	2200      	movs	r2, #0
 8008008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3301      	adds	r3, #1
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b0e      	cmp	r3, #14
 8008014:	d9f2      	bls.n	8007ffc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008016:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11c      	bne.n	8008058 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e005      	b.n	8008064 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800806a:	461a      	mov	r2, r3
 800806c:	2300      	movs	r3, #0
 800806e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008070:	2103      	movs	r1, #3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f95a 	bl	800832c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008078:	2110      	movs	r1, #16
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8f6 	bl	800826c <USB_FlushTxFifo>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f920 	bl	80082d0 <USB_FlushRxFifo>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a0:	461a      	mov	r2, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ac:	461a      	mov	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b8:	461a      	mov	r2, r3
 80080ba:	2300      	movs	r3, #0
 80080bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e043      	b.n	800814c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080da:	d118      	bne.n	800810e <USB_DevInit+0x132>
    {
      if (i == 0U)
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ee:	461a      	mov	r2, r3
 80080f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	e013      	b.n	8008120 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008104:	461a      	mov	r2, r3
 8008106:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	e008      	b.n	8008120 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	461a      	mov	r2, r3
 800811c:	2300      	movs	r3, #0
 800811e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800812c:	461a      	mov	r2, r3
 800812e:	2300      	movs	r3, #0
 8008130:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813e:	461a      	mov	r2, r3
 8008140:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008144:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	3301      	adds	r3, #1
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008150:	461a      	mov	r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4293      	cmp	r3, r2
 8008156:	d3b5      	bcc.n	80080c4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	e043      	b.n	80081e6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008174:	d118      	bne.n	80081a8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	461a      	mov	r2, r3
 800818a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e013      	b.n	80081ba <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819e:	461a      	mov	r2, r3
 80081a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	e008      	b.n	80081ba <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	461a      	mov	r2, r3
 80081b6:	2300      	movs	r3, #0
 80081b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	461a      	mov	r2, r3
 80081c8:	2300      	movs	r3, #0
 80081ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d8:	461a      	mov	r2, r3
 80081da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	3301      	adds	r3, #1
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081ea:	461a      	mov	r2, r3
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d3b5      	bcc.n	800815e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008204:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008212:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f043 0210 	orr.w	r2, r3, #16
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	4b10      	ldr	r3, [pc, #64]	@ (8008268 <USB_DevInit+0x28c>)
 8008226:	4313      	orrs	r3, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800822c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f043 0208 	orr.w	r2, r3, #8
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008240:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008244:	2b01      	cmp	r3, #1
 8008246:	d107      	bne.n	8008258 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008250:	f043 0304 	orr.w	r3, r3, #4
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr
 8008268:	803c3800 	.word	0x803c3800

0800826c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008286:	d901      	bls.n	800828c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e01b      	b.n	80082c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	daf2      	bge.n	800827a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	019b      	lsls	r3, r3, #6
 800829c:	f043 0220 	orr.w	r2, r3, #32
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082b0:	d901      	bls.n	80082b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e006      	b.n	80082c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d0f0      	beq.n	80082a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3301      	adds	r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e8:	d901      	bls.n	80082ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e018      	b.n	8008320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	daf2      	bge.n	80082dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2210      	movs	r2, #16
 80082fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800830c:	d901      	bls.n	8008312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e006      	b.n	8008320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b10      	cmp	r3, #16
 800831c:	d0f0      	beq.n	8008300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800834c:	4313      	orrs	r3, r2
 800834e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800835e:	b480      	push	{r7}
 8008360:	b087      	sub	sp, #28
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0306 	and.w	r3, r3, #6
 8008376:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d002      	beq.n	8008384 <USB_GetDevSpeed+0x26>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b06      	cmp	r3, #6
 8008382:	d102      	bne.n	800838a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008384:	2302      	movs	r3, #2
 8008386:	75fb      	strb	r3, [r7, #23]
 8008388:	e001      	b.n	800838e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800838a:	230f      	movs	r3, #15
 800838c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d13a      	bne.n	800842e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	2101      	movs	r1, #1
 80083ca:	fa01 f303 	lsl.w	r3, r1, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d155      	bne.n	800849c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	791b      	ldrb	r3, [r3, #4]
 800840a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800840c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	059b      	lsls	r3, r3, #22
 8008412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008414:	4313      	orrs	r3, r2
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e036      	b.n	800849c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008434:	69da      	ldr	r2, [r3, #28]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	2101      	movs	r1, #1
 8008440:	fa01 f303 	lsl.w	r3, r1, r3
 8008444:	041b      	lsls	r3, r3, #16
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800844c:	4313      	orrs	r3, r2
 800844e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d11a      	bne.n	800849c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008482:	430b      	orrs	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	440a      	add	r2, r1
 800848e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800849a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
	...

080084ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d161      	bne.n	800858c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084de:	d11f      	bne.n	8008520 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	440a      	add	r2, r1
 8008516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800851a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800851e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	2101      	movs	r1, #1
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	b29b      	uxth	r3, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008540:	4013      	ands	r3, r2
 8008542:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	2101      	movs	r1, #1
 8008556:	fa01 f303 	lsl.w	r3, r1, r3
 800855a:	b29b      	uxth	r3, r3
 800855c:	43db      	mvns	r3, r3
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008564:	4013      	ands	r3, r2
 8008566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	0159      	lsls	r1, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	440b      	add	r3, r1
 800857e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008582:	4619      	mov	r1, r3
 8008584:	4b35      	ldr	r3, [pc, #212]	@ (800865c <USB_DeactivateEndpoint+0x1b0>)
 8008586:	4013      	ands	r3, r2
 8008588:	600b      	str	r3, [r1, #0]
 800858a:	e060      	b.n	800864e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800859e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085a2:	d11f      	bne.n	80085e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	2101      	movs	r1, #1
 80085f6:	fa01 f303 	lsl.w	r3, r1, r3
 80085fa:	041b      	lsls	r3, r3, #16
 80085fc:	43db      	mvns	r3, r3
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008604:	4013      	ands	r3, r2
 8008606:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	2101      	movs	r1, #1
 800861a:	fa01 f303 	lsl.w	r3, r1, r3
 800861e:	041b      	lsls	r3, r3, #16
 8008620:	43db      	mvns	r3, r3
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008628:	4013      	ands	r3, r2
 800862a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	0159      	lsls	r1, r3, #5
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	440b      	add	r3, r1
 8008642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008646:	4619      	mov	r1, r3
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <USB_DeactivateEndpoint+0x1b4>)
 800864a:	4013      	ands	r3, r2
 800864c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	ec337800 	.word	0xec337800
 8008660:	eff37800 	.word	0xeff37800

08008664 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b01      	cmp	r3, #1
 800867e:	f040 812d 	bne.w	80088dc <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d132      	bne.n	80086f0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80086a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80086ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086e8:	0cdb      	lsrs	r3, r3, #19
 80086ea:	04db      	lsls	r3, r3, #19
 80086ec:	6113      	str	r3, [r2, #16]
 80086ee:	e097      	b.n	8008820 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800870a:	0cdb      	lsrs	r3, r3, #19
 800870c:	04db      	lsls	r3, r3, #19
 800870e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	440a      	add	r2, r1
 8008726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800872a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800872e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008732:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11a      	bne.n	8008770 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	429a      	cmp	r2, r3
 8008744:	d903      	bls.n	800874e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008768:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800876c:	6113      	str	r3, [r2, #16]
 800876e:	e044      	b.n	80087fa <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4413      	add	r3, r2
 800877a:	1e5a      	subs	r2, r3, #1
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	89fb      	ldrh	r3, [r7, #14]
 8008796:	04d9      	lsls	r1, r3, #19
 8008798:	4b8f      	ldr	r3, [pc, #572]	@ (80089d8 <USB_EPStartXfer+0x374>)
 800879a:	400b      	ands	r3, r1
 800879c:	6939      	ldr	r1, [r7, #16]
 800879e:	0148      	lsls	r0, r1, #5
 80087a0:	6979      	ldr	r1, [r7, #20]
 80087a2:	4401      	add	r1, r0
 80087a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087a8:	4313      	orrs	r3, r2
 80087aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	791b      	ldrb	r3, [r3, #4]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d122      	bne.n	80087fa <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80087d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	89fb      	ldrh	r3, [r7, #14]
 80087e4:	075b      	lsls	r3, r3, #29
 80087e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80087ea:	6939      	ldr	r1, [r7, #16]
 80087ec:	0148      	lsls	r0, r1, #5
 80087ee:	6979      	ldr	r1, [r7, #20]
 80087f0:	4401      	add	r1, r0
 80087f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087f6:	4313      	orrs	r3, r2
 80087f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008810:	6939      	ldr	r1, [r7, #16]
 8008812:	0148      	lsls	r0, r1, #5
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	4401      	add	r1, r0
 8008818:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800881c:	4313      	orrs	r3, r2
 800881e:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	440a      	add	r2, r1
 8008836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800883a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800883e:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d015      	beq.n	8008874 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 813a 	beq.w	8008ac6 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	2101      	movs	r1, #1
 8008864:	fa01 f303 	lsl.w	r3, r1, r3
 8008868:	6979      	ldr	r1, [r7, #20]
 800886a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800886e:	4313      	orrs	r3, r2
 8008870:	634b      	str	r3, [r1, #52]	@ 0x34
 8008872:	e128      	b.n	8008ac6 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	d110      	bne.n	80088a6 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800889e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	e00f      	b.n	80088c6 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c4:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68d9      	ldr	r1, [r3, #12]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f9a7 	bl	8008c28 <USB_WritePacket>
 80088da:	e0f4      	b.n	8008ac6 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f6:	0cdb      	lsrs	r3, r3, #19
 80088f8:	04db      	lsls	r3, r3, #19
 80088fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008916:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800891a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800891e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d12f      	bne.n	8008986 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008954:	6939      	ldr	r1, [r7, #16]
 8008956:	0148      	lsls	r0, r1, #5
 8008958:	6979      	ldr	r1, [r7, #20]
 800895a:	4401      	add	r1, r0
 800895c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008960:	4313      	orrs	r3, r2
 8008962:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	0151      	lsls	r1, r2, #5
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	440a      	add	r2, r1
 800897a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800897e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008982:	6113      	str	r3, [r2, #16]
 8008984:	e062      	b.n	8008a4c <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d126      	bne.n	80089dc <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a4:	6939      	ldr	r1, [r7, #16]
 80089a6:	0148      	lsls	r0, r1, #5
 80089a8:	6979      	ldr	r1, [r7, #20]
 80089aa:	4401      	add	r1, r0
 80089ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089b0:	4313      	orrs	r3, r2
 80089b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089d2:	6113      	str	r3, [r2, #16]
 80089d4:	e03a      	b.n	8008a4c <USB_EPStartXfer+0x3e8>
 80089d6:	bf00      	nop
 80089d8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	1e5a      	subs	r2, r3, #1
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	89fa      	ldrh	r2, [r7, #14]
 80089f8:	fb03 f202 	mul.w	r2, r3, r2
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
 8008a10:	04d9      	lsls	r1, r3, #19
 8008a12:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad0 <USB_EPStartXfer+0x46c>)
 8008a14:	400b      	ands	r3, r1
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	0148      	lsls	r0, r1, #5
 8008a1a:	6979      	ldr	r1, [r7, #20]
 8008a1c:	4401      	add	r1, r0
 8008a1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a22:	4313      	orrs	r3, r2
 8008a24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3c:	6939      	ldr	r1, [r7, #16]
 8008a3e:	0148      	lsls	r0, r1, #5
 8008a40:	6979      	ldr	r1, [r7, #20]
 8008a42:	4401      	add	r1, r0
 8008a44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d128      	bne.n	8008aa6 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d110      	bne.n	8008a86 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e00f      	b.n	8008aa6 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	1ff80000 	.word	0x1ff80000

08008ad4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d14a      	bne.n	8008b88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b0a:	f040 8086 	bne.w	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d902      	bls.n	8008b6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6a:	e056      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b84:	d0e7      	beq.n	8008b56 <USB_EPStopXfer+0x82>
 8008b86:	e048      	b.n	8008c1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ba0:	d13b      	bne.n	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d902      	bls.n	8008c00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfe:	e00c      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c18:	d0e7      	beq.n	8008bea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b089      	sub	sp, #36	@ 0x24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	460b      	mov	r3, r1
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008c46:	88bb      	ldrh	r3, [r7, #4]
 8008c48:	3303      	adds	r3, #3
 8008c4a:	089b      	lsrs	r3, r3, #2
 8008c4c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	e018      	b.n	8008c86 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	031a      	lsls	r2, r3, #12
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c60:	461a      	mov	r2, r3
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3301      	adds	r3, #1
 8008c72:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3e2      	bcc.n	8008c54 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3724      	adds	r7, #36	@ 0x24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b08b      	sub	sp, #44	@ 0x2c
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	089b      	lsrs	r3, r3, #2
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	e014      	b.n	8008cf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	3301      	adds	r3, #1
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	3301      	adds	r3, #1
 8008cea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	6a3a      	ldr	r2, [r7, #32]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d3e6      	bcc.n	8008cc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cfa:	8bfb      	ldrh	r3, [r7, #30]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01e      	beq.n	8008d3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	701a      	strb	r2, [r3, #0]
      i++;
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	3301      	adds	r3, #1
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d32:	8bfb      	ldrh	r3, [r7, #30]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d38:	8bfb      	ldrh	r3, [r7, #30]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1ea      	bne.n	8008d14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	372c      	adds	r7, #44	@ 0x2c
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d12c      	bne.n	8008dc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	db12      	blt.n	8008da0 <USB_EPSetStall+0x54>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	e02b      	b.n	8008e1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db12      	blt.n	8008dfa <USB_EPSetStall+0xae>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008df8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d128      	bne.n	8008e96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	791b      	ldrb	r3, [r3, #4]
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d003      	beq.n	8008e74 <USB_EPClearStall+0x4c>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d138      	bne.n	8008ee6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	e027      	b.n	8008ee6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008eb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	791b      	ldrb	r3, [r3, #4]
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d003      	beq.n	8008ec6 <USB_EPClearStall+0x9e>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	791b      	ldrb	r3, [r3, #4]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d10f      	bne.n	8008ee6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ee4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f5a:	f023 0303 	bic.w	r3, r3, #3
 8008f5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f6e:	f023 0302 	bic.w	r3, r3, #2
 8008f72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fb0:	f043 0302 	orr.w	r3, r3, #2
 8008fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4013      	ands	r3, r2
 800900c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	0c1b      	lsrs	r3, r3, #16
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	b29b      	uxth	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4013      	ands	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009080:	68bb      	ldr	r3, [r7, #8]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800908e:	b480      	push	{r7}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	fa22 f303 	lsr.w	r3, r2, r3
 80090be:	01db      	lsls	r3, r3, #7
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4013      	ands	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090dc:	68bb      	ldr	r3, [r7, #8]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f003 0301 	and.w	r3, r3, #1
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009120:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009124:	f023 0307 	bic.w	r3, r3, #7
 8009128:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800913c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	333c      	adds	r3, #60	@ 0x3c
 800915e:	3304      	adds	r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <USB_EP0_OutStart+0x8c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d90a      	bls.n	8009182 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800917c:	d101      	bne.n	8009182 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e024      	b.n	80091cc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091b0:	f043 0318 	orr.w	r3, r3, #24
 80091b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80091c8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	4f54300a 	.word	0x4f54300a

080091dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091f4:	d901      	bls.n	80091fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e01b      	b.n	8009232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	daf2      	bge.n	80091e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f043 0201 	orr.w	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800921e:	d901      	bls.n	8009224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e006      	b.n	8009232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b01      	cmp	r3, #1
 800922e:	d0f0      	beq.n	8009212 <USB_CoreReset+0x36>

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800924c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009250:	f002 fdca 	bl	800bde8 <USBD_static_malloc>
 8009254:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d109      	bne.n	8009270 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32b0      	adds	r2, #176	@ 0xb0
 8009266:	2100      	movs	r1, #0
 8009268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800926c:	2302      	movs	r3, #2
 800926e:	e0d4      	b.n	800941a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009270:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009274:	2100      	movs	r1, #0
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f003 fdc5 	bl	800ce06 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32b0      	adds	r2, #176	@ 0xb0
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	32b0      	adds	r2, #176	@ 0xb0
 8009296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7c1b      	ldrb	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d138      	bne.n	800931a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092a8:	4b5e      	ldr	r3, [pc, #376]	@ (8009424 <USBD_CDC_Init+0x1e4>)
 80092aa:	7819      	ldrb	r1, [r3, #0]
 80092ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092b0:	2202      	movs	r2, #2
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f002 fb84 	bl	800b9c0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009424 <USBD_CDC_Init+0x1e4>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	3324      	adds	r3, #36	@ 0x24
 80092ce:	2201      	movs	r2, #1
 80092d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092d2:	4b55      	ldr	r3, [pc, #340]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 80092d4:	7819      	ldrb	r1, [r3, #0]
 80092d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092da:	2202      	movs	r2, #2
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f002 fb6f 	bl	800b9c0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092e2:	4b51      	ldr	r3, [pc, #324]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092fa:	2201      	movs	r2, #1
 80092fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092fe:	4b4b      	ldr	r3, [pc, #300]	@ (800942c <USBD_CDC_Init+0x1ec>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	f003 020f 	and.w	r2, r3, #15
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	3326      	adds	r3, #38	@ 0x26
 8009314:	2210      	movs	r2, #16
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	e035      	b.n	8009386 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800931a:	4b42      	ldr	r3, [pc, #264]	@ (8009424 <USBD_CDC_Init+0x1e4>)
 800931c:	7819      	ldrb	r1, [r3, #0]
 800931e:	2340      	movs	r3, #64	@ 0x40
 8009320:	2202      	movs	r2, #2
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f002 fb4c 	bl	800b9c0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009328:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <USBD_CDC_Init+0x1e4>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 020f 	and.w	r2, r3, #15
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	3324      	adds	r3, #36	@ 0x24
 800933e:	2201      	movs	r2, #1
 8009340:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009342:	4b39      	ldr	r3, [pc, #228]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 8009344:	7819      	ldrb	r1, [r3, #0]
 8009346:	2340      	movs	r3, #64	@ 0x40
 8009348:	2202      	movs	r2, #2
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f002 fb38 	bl	800b9c0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009350:	4b35      	ldr	r3, [pc, #212]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009368:	2201      	movs	r2, #1
 800936a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800936c:	4b2f      	ldr	r3, [pc, #188]	@ (800942c <USBD_CDC_Init+0x1ec>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	3326      	adds	r3, #38	@ 0x26
 8009382:	2210      	movs	r2, #16
 8009384:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009386:	4b29      	ldr	r3, [pc, #164]	@ (800942c <USBD_CDC_Init+0x1ec>)
 8009388:	7819      	ldrb	r1, [r3, #0]
 800938a:	2308      	movs	r3, #8
 800938c:	2203      	movs	r2, #3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f002 fb16 	bl	800b9c0 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009394:	4b25      	ldr	r3, [pc, #148]	@ (800942c <USBD_CDC_Init+0x1ec>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 020f 	and.w	r2, r3, #15
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	440b      	add	r3, r1
 80093a8:	3324      	adds	r3, #36	@ 0x24
 80093aa:	2201      	movs	r2, #1
 80093ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	33b0      	adds	r3, #176	@ 0xb0
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e018      	b.n	800941a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7c1b      	ldrb	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 80093f2:	7819      	ldrb	r1, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f002 fc58 	bl	800bcb4 <USBD_LL_PrepareReceive>
 8009404:	e008      	b.n	8009418 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009406:	4b08      	ldr	r3, [pc, #32]	@ (8009428 <USBD_CDC_Init+0x1e8>)
 8009408:	7819      	ldrb	r1, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009410:	2340      	movs	r3, #64	@ 0x40
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f002 fc4e 	bl	800bcb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200000b3 	.word	0x200000b3
 8009428:	200000b4 	.word	0x200000b4
 800942c:	200000b5 	.word	0x200000b5

08009430 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800943c:	4b3a      	ldr	r3, [pc, #232]	@ (8009528 <USBD_CDC_DeInit+0xf8>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 fafa 	bl	800ba3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009448:	4b37      	ldr	r3, [pc, #220]	@ (8009528 <USBD_CDC_DeInit+0xf8>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3324      	adds	r3, #36	@ 0x24
 800945e:	2200      	movs	r2, #0
 8009460:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009462:	4b32      	ldr	r3, [pc, #200]	@ (800952c <USBD_CDC_DeInit+0xfc>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f002 fae7 	bl	800ba3c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800946e:	4b2f      	ldr	r3, [pc, #188]	@ (800952c <USBD_CDC_DeInit+0xfc>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	f003 020f 	and.w	r2, r3, #15
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009486:	2200      	movs	r2, #0
 8009488:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800948a:	4b29      	ldr	r3, [pc, #164]	@ (8009530 <USBD_CDC_DeInit+0x100>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f002 fad3 	bl	800ba3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009496:	4b26      	ldr	r3, [pc, #152]	@ (8009530 <USBD_CDC_DeInit+0x100>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	f003 020f 	and.w	r2, r3, #15
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	3324      	adds	r3, #36	@ 0x24
 80094ac:	2200      	movs	r2, #0
 80094ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80094b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009530 <USBD_CDC_DeInit+0x100>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 020f 	and.w	r2, r3, #15
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	3326      	adds	r3, #38	@ 0x26
 80094c6:	2200      	movs	r2, #0
 80094c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	32b0      	adds	r2, #176	@ 0xb0
 80094d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01f      	beq.n	800951c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	33b0      	adds	r3, #176	@ 0xb0
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	32b0      	adds	r2, #176	@ 0xb0
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	4618      	mov	r0, r3
 8009500:	f002 fc80 	bl	800be04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32b0      	adds	r2, #176	@ 0xb0
 800950e:	2100      	movs	r1, #0
 8009510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	200000b3 	.word	0x200000b3
 800952c:	200000b4 	.word	0x200000b4
 8009530:	200000b5 	.word	0x200000b5

08009534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	32b0      	adds	r2, #176	@ 0xb0
 8009548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009552:	2300      	movs	r3, #0
 8009554:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009560:	2303      	movs	r3, #3
 8009562:	e0bf      	b.n	80096e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800956c:	2b00      	cmp	r3, #0
 800956e:	d050      	beq.n	8009612 <USBD_CDC_Setup+0xde>
 8009570:	2b20      	cmp	r3, #32
 8009572:	f040 80af 	bne.w	80096d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d03a      	beq.n	80095f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b25b      	sxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	da1b      	bge.n	80095c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	33b0      	adds	r3, #176	@ 0xb0
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800959e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	88d2      	ldrh	r2, [r2, #6]
 80095a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b07      	cmp	r3, #7
 80095ac:	bf28      	it	cs
 80095ae:	2307      	movcs	r3, #7
 80095b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	89fa      	ldrh	r2, [r7, #14]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fd7d 	bl	800b0b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095be:	e090      	b.n	80096e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	785a      	ldrb	r2, [r3, #1]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	88db      	ldrh	r3, [r3, #6]
 80095ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80095d0:	d803      	bhi.n	80095da <USBD_CDC_Setup+0xa6>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	e000      	b.n	80095dc <USBD_CDC_Setup+0xa8>
 80095da:	2240      	movs	r2, #64	@ 0x40
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095e2:	6939      	ldr	r1, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80095ea:	461a      	mov	r2, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 fd8f 	bl	800b110 <USBD_CtlPrepareRx>
      break;
 80095f2:	e076      	b.n	80096e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	33b0      	adds	r3, #176	@ 0xb0
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	7850      	ldrb	r0, [r2, #1]
 800960a:	2200      	movs	r2, #0
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	4798      	blx	r3
      break;
 8009610:	e067      	b.n	80096e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b0b      	cmp	r3, #11
 8009618:	d851      	bhi.n	80096be <USBD_CDC_Setup+0x18a>
 800961a:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <USBD_CDC_Setup+0xec>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009651 	.word	0x08009651
 8009624:	080096cd 	.word	0x080096cd
 8009628:	080096bf 	.word	0x080096bf
 800962c:	080096bf 	.word	0x080096bf
 8009630:	080096bf 	.word	0x080096bf
 8009634:	080096bf 	.word	0x080096bf
 8009638:	080096bf 	.word	0x080096bf
 800963c:	080096bf 	.word	0x080096bf
 8009640:	080096bf 	.word	0x080096bf
 8009644:	080096bf 	.word	0x080096bf
 8009648:	0800967b 	.word	0x0800967b
 800964c:	080096a5 	.word	0x080096a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b03      	cmp	r3, #3
 800965a:	d107      	bne.n	800966c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800965c:	f107 030a 	add.w	r3, r7, #10
 8009660:	2202      	movs	r2, #2
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 fd27 	bl	800b0b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800966a:	e032      	b.n	80096d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 fca5 	bl	800afbe <USBD_CtlError>
            ret = USBD_FAIL;
 8009674:	2303      	movs	r3, #3
 8009676:	75fb      	strb	r3, [r7, #23]
          break;
 8009678:	e02b      	b.n	80096d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d107      	bne.n	8009696 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009686:	f107 030d 	add.w	r3, r7, #13
 800968a:	2201      	movs	r2, #1
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fd12 	bl	800b0b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009694:	e01d      	b.n	80096d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fc90 	bl	800afbe <USBD_CtlError>
            ret = USBD_FAIL;
 800969e:	2303      	movs	r3, #3
 80096a0:	75fb      	strb	r3, [r7, #23]
          break;
 80096a2:	e016      	b.n	80096d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d00f      	beq.n	80096d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fc83 	bl	800afbe <USBD_CtlError>
            ret = USBD_FAIL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096bc:	e008      	b.n	80096d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 fc7c 	bl	800afbe <USBD_CtlError>
          ret = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	75fb      	strb	r3, [r7, #23]
          break;
 80096ca:	e002      	b.n	80096d2 <USBD_CDC_Setup+0x19e>
          break;
 80096cc:	bf00      	nop
 80096ce:	e008      	b.n	80096e2 <USBD_CDC_Setup+0x1ae>
          break;
 80096d0:	bf00      	nop
      }
      break;
 80096d2:	e006      	b.n	80096e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fc71 	bl	800afbe <USBD_CtlError>
      ret = USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	75fb      	strb	r3, [r7, #23]
      break;
 80096e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	32b0      	adds	r2, #176	@ 0xb0
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	e065      	b.n	80097e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	32b0      	adds	r2, #176	@ 0xb0
 8009720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009724:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	f003 020f 	and.w	r2, r3, #15
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	3318      	adds	r3, #24
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d02f      	beq.n	80097a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	f003 020f 	and.w	r2, r3, #15
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3318      	adds	r3, #24
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	f003 010f 	and.w	r1, r3, #15
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	460b      	mov	r3, r1
 8009760:	00db      	lsls	r3, r3, #3
 8009762:	440b      	add	r3, r1
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4403      	add	r3, r0
 8009768:	331c      	adds	r3, #28
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009770:	fb01 f303 	mul.w	r3, r1, r3
 8009774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009776:	2b00      	cmp	r3, #0
 8009778:	d112      	bne.n	80097a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	f003 020f 	and.w	r2, r3, #15
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	3318      	adds	r3, #24
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009792:	78f9      	ldrb	r1, [r7, #3]
 8009794:	2300      	movs	r3, #0
 8009796:	2200      	movs	r2, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f002 fa53 	bl	800bc44 <USBD_LL_Transmit>
 800979e:	e01f      	b.n	80097e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	33b0      	adds	r3, #176	@ 0xb0
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d010      	beq.n	80097e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	33b0      	adds	r3, #176	@ 0xb0
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	32b0      	adds	r2, #176	@ 0xb0
 8009800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009804:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	32b0      	adds	r2, #176	@ 0xb0
 8009810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009818:	2303      	movs	r3, #3
 800981a:	e01a      	b.n	8009852 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f002 fa7f 	bl	800bd24 <USBD_LL_GetRxDataSize>
 8009826:	4602      	mov	r2, r0
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	33b0      	adds	r3, #176	@ 0xb0
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800984c:	4611      	mov	r1, r2
 800984e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	32b0      	adds	r2, #176	@ 0xb0
 800986c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009870:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	e024      	b.n	80098c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	33b0      	adds	r3, #176	@ 0xb0
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d019      	beq.n	80098c4 <USBD_CDC_EP0_RxReady+0x6a>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009896:	2bff      	cmp	r3, #255	@ 0xff
 8009898:	d014      	beq.n	80098c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	33b0      	adds	r3, #176	@ 0xb0
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80098b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	22ff      	movs	r2, #255	@ 0xff
 80098c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098d8:	2182      	movs	r1, #130	@ 0x82
 80098da:	4818      	ldr	r0, [pc, #96]	@ (800993c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098dc:	f000 fd0f 	bl	800a2fe <USBD_GetEpDesc>
 80098e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098e2:	2101      	movs	r1, #1
 80098e4:	4815      	ldr	r0, [pc, #84]	@ (800993c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098e6:	f000 fd0a 	bl	800a2fe <USBD_GetEpDesc>
 80098ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098ec:	2181      	movs	r1, #129	@ 0x81
 80098ee:	4813      	ldr	r0, [pc, #76]	@ (800993c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098f0:	f000 fd05 	bl	800a2fe <USBD_GetEpDesc>
 80098f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2210      	movs	r2, #16
 8009900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2200      	movs	r2, #0
 800990c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009910:	711a      	strb	r2, [r3, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d006      	beq.n	800992a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009924:	711a      	strb	r2, [r3, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2243      	movs	r2, #67	@ 0x43
 800992e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009930:	4b02      	ldr	r3, [pc, #8]	@ (800993c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000070 	.word	0x20000070

08009940 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009948:	2182      	movs	r1, #130	@ 0x82
 800994a:	4818      	ldr	r0, [pc, #96]	@ (80099ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800994c:	f000 fcd7 	bl	800a2fe <USBD_GetEpDesc>
 8009950:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009952:	2101      	movs	r1, #1
 8009954:	4815      	ldr	r0, [pc, #84]	@ (80099ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009956:	f000 fcd2 	bl	800a2fe <USBD_GetEpDesc>
 800995a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800995c:	2181      	movs	r1, #129	@ 0x81
 800995e:	4813      	ldr	r0, [pc, #76]	@ (80099ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009960:	f000 fccd 	bl	800a2fe <USBD_GetEpDesc>
 8009964:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2210      	movs	r2, #16
 8009970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d006      	beq.n	8009986 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	2200      	movs	r2, #0
 800997c:	711a      	strb	r2, [r3, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f042 0202 	orr.w	r2, r2, #2
 8009984:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	711a      	strb	r2, [r3, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f042 0202 	orr.w	r2, r2, #2
 8009998:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2243      	movs	r2, #67	@ 0x43
 800999e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099a0:	4b02      	ldr	r3, [pc, #8]	@ (80099ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000070 	.word	0x20000070

080099b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099b8:	2182      	movs	r1, #130	@ 0x82
 80099ba:	4818      	ldr	r0, [pc, #96]	@ (8009a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099bc:	f000 fc9f 	bl	800a2fe <USBD_GetEpDesc>
 80099c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099c2:	2101      	movs	r1, #1
 80099c4:	4815      	ldr	r0, [pc, #84]	@ (8009a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099c6:	f000 fc9a 	bl	800a2fe <USBD_GetEpDesc>
 80099ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099cc:	2181      	movs	r1, #129	@ 0x81
 80099ce:	4813      	ldr	r0, [pc, #76]	@ (8009a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099d0:	f000 fc95 	bl	800a2fe <USBD_GetEpDesc>
 80099d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2210      	movs	r2, #16
 80099e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d006      	beq.n	80099f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099f0:	711a      	strb	r2, [r3, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d006      	beq.n	8009a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a04:	711a      	strb	r2, [r3, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2243      	movs	r2, #67	@ 0x43
 8009a0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a10:	4b02      	ldr	r3, [pc, #8]	@ (8009a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000070 	.word	0x20000070

08009a20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	220a      	movs	r2, #10
 8009a2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a2e:	4b03      	ldr	r3, [pc, #12]	@ (8009a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	2000002c 	.word	0x2000002c

08009a40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e009      	b.n	8009a68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	33b0      	adds	r3, #176	@ 0xb0
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	32b0      	adds	r2, #176	@ 0xb0
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e008      	b.n	8009aac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	32b0      	adds	r2, #176	@ 0xb0
 8009acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e004      	b.n	8009ae6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	32b0      	adds	r2, #176	@ 0xb0
 8009b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32b0      	adds	r2, #176	@ 0xb0
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e018      	b.n	8009b54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	7c1b      	ldrb	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <USBD_CDC_ReceivePacket+0x68>)
 8009b2c:	7819      	ldrb	r1, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f002 f8bb 	bl	800bcb4 <USBD_LL_PrepareReceive>
 8009b3e:	e008      	b.n	8009b52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b40:	4b06      	ldr	r3, [pc, #24]	@ (8009b5c <USBD_CDC_ReceivePacket+0x68>)
 8009b42:	7819      	ldrb	r1, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b4a:	2340      	movs	r3, #64	@ 0x40
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f002 f8b1 	bl	800bcb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	200000b4 	.word	0x200000b4

08009b60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e01f      	b.n	8009bb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	79fa      	ldrb	r2, [r7, #7]
 8009baa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f001 fe89 	bl	800b8c4 <USBD_LL_Init>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e025      	b.n	8009c24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	32ae      	adds	r2, #174	@ 0xae
 8009bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00f      	beq.n	8009c14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	32ae      	adds	r2, #174	@ 0xae
 8009bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c04:	f107 020e 	add.w	r2, r7, #14
 8009c08:	4610      	mov	r0, r2
 8009c0a:	4798      	blx	r3
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 fe91 	bl	800b95c <USBD_LL_Start>
 8009c3a:	4603      	mov	r3, r0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	78fa      	ldrb	r2, [r7, #3]
 8009c7e:	4611      	mov	r1, r2
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	4611      	mov	r1, r2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 f936 	bl	800af4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d01a      	beq.n	8009d38 <USBD_LL_SetupStage+0x72>
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d822      	bhi.n	8009d4c <USBD_LL_SetupStage+0x86>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <USBD_LL_SetupStage+0x4a>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d00a      	beq.n	8009d24 <USBD_LL_SetupStage+0x5e>
 8009d0e:	e01d      	b.n	8009d4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb63 	bl	800a3e4 <USBD_StdDevReq>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
      break;
 8009d22:	e020      	b.n	8009d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fbcb 	bl	800a4c8 <USBD_StdItfReq>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]
      break;
 8009d36:	e016      	b.n	8009d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fc2d 	bl	800a5a0 <USBD_StdEPReq>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
      break;
 8009d4a:	e00c      	b.n	8009d66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d52:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fea4 	bl	800baa8 <USBD_LL_StallEP>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
      break;
 8009d64:	bf00      	nop
  }

  return ret;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d82:	7afb      	ldrb	r3, [r7, #11]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d16e      	bne.n	8009e66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	f040 8098 	bne.w	8009ecc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d913      	bls.n	8009dd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	bf28      	it	cs
 8009dc2:	4613      	movcs	r3, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f001 f9be 	bl	800b14a <USBD_CtlContinueRx>
 8009dce:	e07d      	b.n	8009ecc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dd6:	f003 031f 	and.w	r3, r3, #31
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d014      	beq.n	8009e08 <USBD_LL_DataOutStage+0x98>
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d81d      	bhi.n	8009e1e <USBD_LL_DataOutStage+0xae>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <USBD_LL_DataOutStage+0x7c>
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d003      	beq.n	8009df2 <USBD_LL_DataOutStage+0x82>
 8009dea:	e018      	b.n	8009e1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75bb      	strb	r3, [r7, #22]
            break;
 8009df0:	e018      	b.n	8009e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fa64 	bl	800a2ca <USBD_CoreFindIF>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75bb      	strb	r3, [r7, #22]
            break;
 8009e06:	e00d      	b.n	8009e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4619      	mov	r1, r3
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fa66 	bl	800a2e4 <USBD_CoreFindEP>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75bb      	strb	r3, [r7, #22]
            break;
 8009e1c:	e002      	b.n	8009e24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75bb      	strb	r3, [r7, #22]
            break;
 8009e22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e24:	7dbb      	ldrb	r3, [r7, #22]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d119      	bne.n	8009e5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d113      	bne.n	8009e5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e36:	7dba      	ldrb	r2, [r7, #22]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	32ae      	adds	r2, #174	@ 0xae
 8009e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e46:	7dba      	ldrb	r2, [r7, #22]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e4e:	7dba      	ldrb	r2, [r7, #22]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	32ae      	adds	r2, #174	@ 0xae
 8009e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f001 f984 	bl	800b16c <USBD_CtlSendStatus>
 8009e64:	e032      	b.n	8009ecc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fa37 	bl	800a2e4 <USBD_CoreFindEP>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e7a:	7dbb      	ldrb	r3, [r7, #22]
 8009e7c:	2bff      	cmp	r3, #255	@ 0xff
 8009e7e:	d025      	beq.n	8009ecc <USBD_LL_DataOutStage+0x15c>
 8009e80:	7dbb      	ldrb	r3, [r7, #22]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d122      	bne.n	8009ecc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d117      	bne.n	8009ec2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e92:	7dba      	ldrb	r2, [r7, #22]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	32ae      	adds	r2, #174	@ 0xae
 8009e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00f      	beq.n	8009ec2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009ea2:	7dba      	ldrb	r2, [r7, #22]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009eaa:	7dba      	ldrb	r2, [r7, #22]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	32ae      	adds	r2, #174	@ 0xae
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	7afa      	ldrb	r2, [r7, #11]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	e000      	b.n	8009ece <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b086      	sub	sp, #24
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	607a      	str	r2, [r7, #4]
 8009ee2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d16f      	bne.n	8009fca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3314      	adds	r3, #20
 8009eee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d15a      	bne.n	8009fb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d914      	bls.n	8009f30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f001 f8e6 	bl	800b0ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f22:	2300      	movs	r3, #0
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f001 fec3 	bl	800bcb4 <USBD_LL_PrepareReceive>
 8009f2e:	e03f      	b.n	8009fb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d11c      	bne.n	8009f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d316      	bcc.n	8009f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d20f      	bcs.n	8009f76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f56:	2200      	movs	r2, #0
 8009f58:	2100      	movs	r1, #0
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f001 f8c7 	bl	800b0ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f001 fea0 	bl	800bcb4 <USBD_LL_PrepareReceive>
 8009f74:	e01c      	b.n	8009fb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d10f      	bne.n	8009fa2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fa2:	2180      	movs	r1, #128	@ 0x80
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f001 fd7f 	bl	800baa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f001 f8f1 	bl	800b192 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d03a      	beq.n	800a030 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fe42 	bl	8009c44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009fc8:	e032      	b.n	800a030 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f985 	bl	800a2e4 <USBD_CoreFindEP>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	2bff      	cmp	r3, #255	@ 0xff
 8009fe2:	d025      	beq.n	800a030 <USBD_LL_DataInStage+0x15a>
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d122      	bne.n	800a030 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d11c      	bne.n	800a030 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009ff6:	7dfa      	ldrb	r2, [r7, #23]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	32ae      	adds	r2, #174	@ 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d014      	beq.n	800a030 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a006:	7dfa      	ldrb	r2, [r7, #23]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a00e:	7dfa      	ldrb	r2, [r7, #23]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	32ae      	adds	r2, #174	@ 0xae
 800a014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	7afa      	ldrb	r2, [r7, #11]
 800a01c:	4611      	mov	r1, r2
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	4798      	blx	r3
 800a022:	4603      	mov	r3, r0
 800a024:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a026:	7dbb      	ldrb	r3, [r7, #22]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
 800a02e:	e000      	b.n	800a032 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d014      	beq.n	800a0a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00e      	beq.n	800a0a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6852      	ldr	r2, [r2, #4]
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	4611      	mov	r1, r2
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0a0:	2340      	movs	r3, #64	@ 0x40
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fc8a 	bl	800b9c0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2240      	movs	r2, #64	@ 0x40
 800a0b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0bc:	2340      	movs	r3, #64	@ 0x40
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2180      	movs	r1, #128	@ 0x80
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fc7c 	bl	800b9c0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2240      	movs	r2, #64	@ 0x40
 800a0d2:	621a      	str	r2, [r3, #32]

  return ret;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d006      	beq.n	800a120 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2204      	movs	r2, #4
 800a124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b04      	cmp	r3, #4
 800a148:	d106      	bne.n	800a158 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a150:	b2da      	uxtb	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d110      	bne.n	800a19c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	32ae      	adds	r2, #174	@ 0xae
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e01c      	b.n	800a202 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d115      	bne.n	800a200 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	32ae      	adds	r2, #174	@ 0xae
 800a1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32ae      	adds	r2, #174	@ 0xae
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	32ae      	adds	r2, #174	@ 0xae
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	e01c      	b.n	800a266 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b03      	cmp	r3, #3
 800a236:	d115      	bne.n	800a264 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	@ 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	32ae      	adds	r2, #174	@ 0xae
 800a256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	4611      	mov	r1, r2
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6852      	ldr	r2, [r2, #4]
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	7812      	ldrb	r2, [r2, #0]
 800a320:	4293      	cmp	r3, r2
 800a322:	d91f      	bls.n	800a364 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a32a:	e013      	b.n	800a354 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a32c:	f107 030a 	add.w	r3, r7, #10
 800a330:	4619      	mov	r1, r3
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f000 f81b 	bl	800a36e <USBD_GetNextDesc>
 800a338:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d108      	bne.n	800a354 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	789b      	ldrb	r3, [r3, #2]
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d008      	beq.n	800a362 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	885b      	ldrh	r3, [r3, #2]
 800a358:	b29a      	uxth	r2, r3
 800a35a:	897b      	ldrh	r3, [r7, #10]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d8e5      	bhi.n	800a32c <USBD_GetEpDesc+0x2e>
 800a360:	e000      	b.n	800a364 <USBD_GetEpDesc+0x66>
          break;
 800a362:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a364:	693b      	ldr	r3, [r7, #16]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	4413      	add	r3, r2
 800a386:	b29a      	uxth	r2, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3c4:	8a3b      	ldrh	r3, [r7, #16]
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	b21a      	sxth	r2, r3
 800a3ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b21b      	sxth	r3, r3
 800a3d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3d4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3fa:	2b40      	cmp	r3, #64	@ 0x40
 800a3fc:	d005      	beq.n	800a40a <USBD_StdDevReq+0x26>
 800a3fe:	2b40      	cmp	r3, #64	@ 0x40
 800a400:	d857      	bhi.n	800a4b2 <USBD_StdDevReq+0xce>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00f      	beq.n	800a426 <USBD_StdDevReq+0x42>
 800a406:	2b20      	cmp	r3, #32
 800a408:	d153      	bne.n	800a4b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	32ae      	adds	r2, #174	@ 0xae
 800a414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]
      break;
 800a424:	e04a      	b.n	800a4bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d83b      	bhi.n	800a4a6 <USBD_StdDevReq+0xc2>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <USBD_StdDevReq+0x50>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a489 	.word	0x0800a489
 800a438:	0800a49d 	.word	0x0800a49d
 800a43c:	0800a4a7 	.word	0x0800a4a7
 800a440:	0800a493 	.word	0x0800a493
 800a444:	0800a4a7 	.word	0x0800a4a7
 800a448:	0800a467 	.word	0x0800a467
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a4a7 	.word	0x0800a4a7
 800a454:	0800a47f 	.word	0x0800a47f
 800a458:	0800a471 	.word	0x0800a471
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa3c 	bl	800a8dc <USBD_GetDescriptor>
          break;
 800a464:	e024      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fbcb 	bl	800ac04 <USBD_SetAddress>
          break;
 800a46e:	e01f      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fc0a 	bl	800ac8c <USBD_SetConfig>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
          break;
 800a47c:	e018      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fcad 	bl	800ade0 <USBD_GetConfig>
          break;
 800a486:	e013      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fcde 	bl	800ae4c <USBD_GetStatus>
          break;
 800a490:	e00e      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fd0d 	bl	800aeb4 <USBD_SetFeature>
          break;
 800a49a:	e009      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fd31 	bl	800af06 <USBD_ClrFeature>
          break;
 800a4a4:	e004      	b.n	800a4b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fd88 	bl	800afbe <USBD_CtlError>
          break;
 800a4ae:	bf00      	nop
      }
      break;
 800a4b0:	e004      	b.n	800a4bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fd82 	bl	800afbe <USBD_CtlError>
      break;
 800a4ba:	bf00      	nop
  }

  return ret;
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop

0800a4c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4de:	2b40      	cmp	r3, #64	@ 0x40
 800a4e0:	d005      	beq.n	800a4ee <USBD_StdItfReq+0x26>
 800a4e2:	2b40      	cmp	r3, #64	@ 0x40
 800a4e4:	d852      	bhi.n	800a58c <USBD_StdItfReq+0xc4>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <USBD_StdItfReq+0x26>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d14e      	bne.n	800a58c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d840      	bhi.n	800a57e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	889b      	ldrh	r3, [r3, #4]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b01      	cmp	r3, #1
 800a504:	d836      	bhi.n	800a574 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	889b      	ldrh	r3, [r3, #4]
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fedb 	bl	800a2ca <USBD_CoreFindIF>
 800a514:	4603      	mov	r3, r0
 800a516:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2bff      	cmp	r3, #255	@ 0xff
 800a51c:	d01d      	beq.n	800a55a <USBD_StdItfReq+0x92>
 800a51e:	7bbb      	ldrb	r3, [r7, #14]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d11a      	bne.n	800a55a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a524:	7bba      	ldrb	r2, [r7, #14]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32ae      	adds	r2, #174	@ 0xae
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a534:	7bba      	ldrb	r2, [r7, #14]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a53c:	7bba      	ldrb	r2, [r7, #14]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	32ae      	adds	r2, #174	@ 0xae
 800a542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	4798      	blx	r3
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a552:	e004      	b.n	800a55e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a554:	2303      	movs	r3, #3
 800a556:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a558:	e001      	b.n	800a55e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	88db      	ldrh	r3, [r3, #6]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d110      	bne.n	800a588 <USBD_StdItfReq+0xc0>
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10d      	bne.n	800a588 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fdfd 	bl	800b16c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a572:	e009      	b.n	800a588 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fd21 	bl	800afbe <USBD_CtlError>
          break;
 800a57c:	e004      	b.n	800a588 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fd1c 	bl	800afbe <USBD_CtlError>
          break;
 800a586:	e000      	b.n	800a58a <USBD_StdItfReq+0xc2>
          break;
 800a588:	bf00      	nop
      }
      break;
 800a58a:	e004      	b.n	800a596 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fd15 	bl	800afbe <USBD_CtlError>
      break;
 800a594:	bf00      	nop
  }

  return ret;
 800a596:	7bfb      	ldrb	r3, [r7, #15]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	889b      	ldrh	r3, [r3, #4]
 800a5b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5bc:	2b40      	cmp	r3, #64	@ 0x40
 800a5be:	d007      	beq.n	800a5d0 <USBD_StdEPReq+0x30>
 800a5c0:	2b40      	cmp	r3, #64	@ 0x40
 800a5c2:	f200 817f 	bhi.w	800a8c4 <USBD_StdEPReq+0x324>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d02a      	beq.n	800a620 <USBD_StdEPReq+0x80>
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	f040 817a 	bne.w	800a8c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff fe85 	bl	800a2e4 <USBD_CoreFindEP>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5de:	7b7b      	ldrb	r3, [r7, #13]
 800a5e0:	2bff      	cmp	r3, #255	@ 0xff
 800a5e2:	f000 8174 	beq.w	800a8ce <USBD_StdEPReq+0x32e>
 800a5e6:	7b7b      	ldrb	r3, [r7, #13]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f040 8170 	bne.w	800a8ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5ee:	7b7a      	ldrb	r2, [r7, #13]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5f6:	7b7a      	ldrb	r2, [r7, #13]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	32ae      	adds	r2, #174	@ 0xae
 800a5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 8163 	beq.w	800a8ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a608:	7b7a      	ldrb	r2, [r7, #13]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32ae      	adds	r2, #174	@ 0xae
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a61e:	e156      	b.n	800a8ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	2b03      	cmp	r3, #3
 800a626:	d008      	beq.n	800a63a <USBD_StdEPReq+0x9a>
 800a628:	2b03      	cmp	r3, #3
 800a62a:	f300 8145 	bgt.w	800a8b8 <USBD_StdEPReq+0x318>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 809b 	beq.w	800a76a <USBD_StdEPReq+0x1ca>
 800a634:	2b01      	cmp	r3, #1
 800a636:	d03c      	beq.n	800a6b2 <USBD_StdEPReq+0x112>
 800a638:	e13e      	b.n	800a8b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b02      	cmp	r3, #2
 800a644:	d002      	beq.n	800a64c <USBD_StdEPReq+0xac>
 800a646:	2b03      	cmp	r3, #3
 800a648:	d016      	beq.n	800a678 <USBD_StdEPReq+0xd8>
 800a64a:	e02c      	b.n	800a6a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00d      	beq.n	800a66e <USBD_StdEPReq+0xce>
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	2b80      	cmp	r3, #128	@ 0x80
 800a656:	d00a      	beq.n	800a66e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 fa23 	bl	800baa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a662:	2180      	movs	r1, #128	@ 0x80
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 fa1f 	bl	800baa8 <USBD_LL_StallEP>
 800a66a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a66c:	e020      	b.n	800a6b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fca4 	bl	800afbe <USBD_CtlError>
              break;
 800a676:	e01b      	b.n	800a6b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	885b      	ldrh	r3, [r3, #2]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10e      	bne.n	800a69e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <USBD_StdEPReq+0xfe>
 800a686:	7bbb      	ldrb	r3, [r7, #14]
 800a688:	2b80      	cmp	r3, #128	@ 0x80
 800a68a:	d008      	beq.n	800a69e <USBD_StdEPReq+0xfe>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	88db      	ldrh	r3, [r3, #6]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 fa05 	bl	800baa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fd64 	bl	800b16c <USBD_CtlSendStatus>

              break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fc88 	bl	800afbe <USBD_CtlError>
              break;
 800a6ae:	bf00      	nop
          }
          break;
 800a6b0:	e107      	b.n	800a8c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d002      	beq.n	800a6c4 <USBD_StdEPReq+0x124>
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d016      	beq.n	800a6f0 <USBD_StdEPReq+0x150>
 800a6c2:	e04b      	b.n	800a75c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00d      	beq.n	800a6e6 <USBD_StdEPReq+0x146>
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	2b80      	cmp	r3, #128	@ 0x80
 800a6ce:	d00a      	beq.n	800a6e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 f9e7 	bl	800baa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6da:	2180      	movs	r1, #128	@ 0x80
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 f9e3 	bl	800baa8 <USBD_LL_StallEP>
 800a6e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6e4:	e040      	b.n	800a768 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc68 	bl	800afbe <USBD_CtlError>
              break;
 800a6ee:	e03b      	b.n	800a768 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	885b      	ldrh	r3, [r3, #2]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d136      	bne.n	800a766 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a702:	7bbb      	ldrb	r3, [r7, #14]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fa04 	bl	800bb14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fd2d 	bl	800b16c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fde4 	bl	800a2e4 <USBD_CoreFindEP>
 800a71c:	4603      	mov	r3, r0
 800a71e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a720:	7b7b      	ldrb	r3, [r7, #13]
 800a722:	2bff      	cmp	r3, #255	@ 0xff
 800a724:	d01f      	beq.n	800a766 <USBD_StdEPReq+0x1c6>
 800a726:	7b7b      	ldrb	r3, [r7, #13]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d11c      	bne.n	800a766 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a72c:	7b7a      	ldrb	r2, [r7, #13]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a734:	7b7a      	ldrb	r2, [r7, #13]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	32ae      	adds	r2, #174	@ 0xae
 800a73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d010      	beq.n	800a766 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a744:	7b7a      	ldrb	r2, [r7, #13]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	32ae      	adds	r2, #174	@ 0xae
 800a74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	4798      	blx	r3
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a75a:	e004      	b.n	800a766 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fc2d 	bl	800afbe <USBD_CtlError>
              break;
 800a764:	e000      	b.n	800a768 <USBD_StdEPReq+0x1c8>
              break;
 800a766:	bf00      	nop
          }
          break;
 800a768:	e0ab      	b.n	800a8c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b02      	cmp	r3, #2
 800a774:	d002      	beq.n	800a77c <USBD_StdEPReq+0x1dc>
 800a776:	2b03      	cmp	r3, #3
 800a778:	d032      	beq.n	800a7e0 <USBD_StdEPReq+0x240>
 800a77a:	e097      	b.n	800a8ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <USBD_StdEPReq+0x1f2>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b80      	cmp	r3, #128	@ 0x80
 800a786:	d004      	beq.n	800a792 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fc17 	bl	800afbe <USBD_CtlError>
                break;
 800a790:	e091      	b.n	800a8b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a796:	2b00      	cmp	r3, #0
 800a798:	da0b      	bge.n	800a7b2 <USBD_StdEPReq+0x212>
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	3310      	adds	r3, #16
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	e00b      	b.n	800a7ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fc6d 	bl	800b0b8 <USBD_CtlSendData>
              break;
 800a7de:	e06a      	b.n	800a8b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da11      	bge.n	800a80c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	f003 020f 	and.w	r2, r3, #15
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	440b      	add	r3, r1
 800a7fa:	3324      	adds	r3, #36	@ 0x24
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d117      	bne.n	800a832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fbda 	bl	800afbe <USBD_CtlError>
                  break;
 800a80a:	e054      	b.n	800a8b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	f003 020f 	and.w	r2, r3, #15
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	4613      	mov	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	440b      	add	r3, r1
 800a81e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fbc7 	bl	800afbe <USBD_CtlError>
                  break;
 800a830:	e041      	b.n	800a8b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a836:	2b00      	cmp	r3, #0
 800a838:	da0b      	bge.n	800a852 <USBD_StdEPReq+0x2b2>
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	3310      	adds	r3, #16
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	3304      	adds	r3, #4
 800a850:	e00b      	b.n	800a86a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	4413      	add	r3, r2
 800a868:	3304      	adds	r3, #4
 800a86a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <USBD_StdEPReq+0x2d8>
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b80      	cmp	r3, #128	@ 0x80
 800a876:	d103      	bne.n	800a880 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e00e      	b.n	800a89e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 f97b 	bl	800bb80 <USBD_LL_IsStallEP>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	e002      	b.n	800a89e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2200      	movs	r2, #0
 800a89c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fc07 	bl	800b0b8 <USBD_CtlSendData>
              break;
 800a8aa:	e004      	b.n	800a8b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fb85 	bl	800afbe <USBD_CtlError>
              break;
 800a8b4:	bf00      	nop
          }
          break;
 800a8b6:	e004      	b.n	800a8c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fb7f 	bl	800afbe <USBD_CtlError>
          break;
 800a8c0:	bf00      	nop
      }
      break;
 800a8c2:	e005      	b.n	800a8d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fb79 	bl	800afbe <USBD_CtlError>
      break;
 800a8cc:	e000      	b.n	800a8d0 <USBD_StdEPReq+0x330>
      break;
 800a8ce:	bf00      	nop
  }

  return ret;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	885b      	ldrh	r3, [r3, #2]
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	2b0e      	cmp	r3, #14
 800a8fe:	f200 8152 	bhi.w	800aba6 <USBD_GetDescriptor+0x2ca>
 800a902:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <USBD_GetDescriptor+0x2c>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a979 	.word	0x0800a979
 800a90c:	0800a991 	.word	0x0800a991
 800a910:	0800a9d1 	.word	0x0800a9d1
 800a914:	0800aba7 	.word	0x0800aba7
 800a918:	0800aba7 	.word	0x0800aba7
 800a91c:	0800ab47 	.word	0x0800ab47
 800a920:	0800ab73 	.word	0x0800ab73
 800a924:	0800aba7 	.word	0x0800aba7
 800a928:	0800aba7 	.word	0x0800aba7
 800a92c:	0800aba7 	.word	0x0800aba7
 800a930:	0800aba7 	.word	0x0800aba7
 800a934:	0800aba7 	.word	0x0800aba7
 800a938:	0800aba7 	.word	0x0800aba7
 800a93c:	0800aba7 	.word	0x0800aba7
 800a940:	0800a945 	.word	0x0800a945
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7c12      	ldrb	r2, [r2, #16]
 800a95c:	f107 0108 	add.w	r1, r7, #8
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
 800a964:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a966:	e126      	b.n	800abb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fb27 	bl	800afbe <USBD_CtlError>
        err++;
 800a970:	7afb      	ldrb	r3, [r7, #11]
 800a972:	3301      	adds	r3, #1
 800a974:	72fb      	strb	r3, [r7, #11]
      break;
 800a976:	e11e      	b.n	800abb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	7c12      	ldrb	r2, [r2, #16]
 800a984:	f107 0108 	add.w	r1, r7, #8
 800a988:	4610      	mov	r0, r2
 800a98a:	4798      	blx	r3
 800a98c:	60f8      	str	r0, [r7, #12]
      break;
 800a98e:	e112      	b.n	800abb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	7c1b      	ldrb	r3, [r3, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10d      	bne.n	800a9b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f107 0208 	add.w	r2, r7, #8
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9b2:	e100      	b.n	800abb6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9bc:	f107 0208 	add.w	r2, r7, #8
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4798      	blx	r3
 800a9c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	701a      	strb	r2, [r3, #0]
      break;
 800a9ce:	e0f2      	b.n	800abb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	f200 80ac 	bhi.w	800ab34 <USBD_GetDescriptor+0x258>
 800a9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e4 <USBD_GetDescriptor+0x108>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800a9fd 	.word	0x0800a9fd
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa65 	.word	0x0800aa65
 800a9f0:	0800aa99 	.word	0x0800aa99
 800a9f4:	0800aacd 	.word	0x0800aacd
 800a9f8:	0800ab01 	.word	0x0800ab01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	7c12      	ldrb	r2, [r2, #16]
 800aa14:	f107 0108 	add.w	r1, r7, #8
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4798      	blx	r3
 800aa1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa1e:	e091      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 facb 	bl	800afbe <USBD_CtlError>
            err++;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa2e:	e089      	b.n	800ab44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	7c12      	ldrb	r2, [r2, #16]
 800aa48:	f107 0108 	add.w	r1, r7, #8
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa52:	e077      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fab1 	bl	800afbe <USBD_CtlError>
            err++;
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	72fb      	strb	r3, [r7, #11]
          break;
 800aa62:	e06f      	b.n	800ab44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	7c12      	ldrb	r2, [r2, #16]
 800aa7c:	f107 0108 	add.w	r1, r7, #8
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa86:	e05d      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa97 	bl	800afbe <USBD_CtlError>
            err++;
 800aa90:	7afb      	ldrb	r3, [r7, #11]
 800aa92:	3301      	adds	r3, #1
 800aa94:	72fb      	strb	r3, [r7, #11]
          break;
 800aa96:	e055      	b.n	800ab44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7c12      	ldrb	r2, [r2, #16]
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaba:	e043      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa7d 	bl	800afbe <USBD_CtlError>
            err++;
 800aac4:	7afb      	ldrb	r3, [r7, #11]
 800aac6:	3301      	adds	r3, #1
 800aac8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaca:	e03b      	b.n	800ab44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	7c12      	ldrb	r2, [r2, #16]
 800aae4:	f107 0108 	add.w	r1, r7, #8
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
 800aaec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaee:	e029      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fa63 	bl	800afbe <USBD_CtlError>
            err++;
 800aaf8:	7afb      	ldrb	r3, [r7, #11]
 800aafa:	3301      	adds	r3, #1
 800aafc:	72fb      	strb	r3, [r7, #11]
          break;
 800aafe:	e021      	b.n	800ab44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7c12      	ldrb	r2, [r2, #16]
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab22:	e00f      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fa49 	bl	800afbe <USBD_CtlError>
            err++;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	72fb      	strb	r3, [r7, #11]
          break;
 800ab32:	e007      	b.n	800ab44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa41 	bl	800afbe <USBD_CtlError>
          err++;
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab42:	bf00      	nop
      }
      break;
 800ab44:	e037      	b.n	800abb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	7c1b      	ldrb	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab56:	f107 0208 	add.w	r2, r7, #8
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	4798      	blx	r3
 800ab5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab60:	e029      	b.n	800abb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fa2a 	bl	800afbe <USBD_CtlError>
        err++;
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab70:	e021      	b.n	800abb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	7c1b      	ldrb	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10d      	bne.n	800ab96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab82:	f107 0208 	add.w	r2, r7, #8
 800ab86:	4610      	mov	r0, r2
 800ab88:	4798      	blx	r3
 800ab8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	2207      	movs	r2, #7
 800ab92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab94:	e00f      	b.n	800abb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fa10 	bl	800afbe <USBD_CtlError>
        err++;
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	3301      	adds	r3, #1
 800aba2:	72fb      	strb	r3, [r7, #11]
      break;
 800aba4:	e007      	b.n	800abb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fa08 	bl	800afbe <USBD_CtlError>
      err++;
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	3301      	adds	r3, #1
 800abb2:	72fb      	strb	r3, [r7, #11]
      break;
 800abb4:	bf00      	nop
  }

  if (err != 0U)
 800abb6:	7afb      	ldrb	r3, [r7, #11]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d11e      	bne.n	800abfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	88db      	ldrh	r3, [r3, #6]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d016      	beq.n	800abf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800abc4:	893b      	ldrh	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88da      	ldrh	r2, [r3, #6]
 800abce:	893b      	ldrh	r3, [r7, #8]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bf28      	it	cs
 800abd4:	4613      	movcs	r3, r2
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abda:	893b      	ldrh	r3, [r7, #8]
 800abdc:	461a      	mov	r2, r3
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fa69 	bl	800b0b8 <USBD_CtlSendData>
 800abe6:	e009      	b.n	800abfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f9e7 	bl	800afbe <USBD_CtlError>
 800abf0:	e004      	b.n	800abfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 faba 	bl	800b16c <USBD_CtlSendStatus>
 800abf8:	e000      	b.n	800abfc <USBD_GetDescriptor+0x320>
    return;
 800abfa:	bf00      	nop
  }
}
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop

0800ac04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	889b      	ldrh	r3, [r3, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d131      	bne.n	800ac7a <USBD_SetAddress+0x76>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	88db      	ldrh	r3, [r3, #6]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d12d      	bne.n	800ac7a <USBD_SetAddress+0x76>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	885b      	ldrh	r3, [r3, #2]
 800ac22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac24:	d829      	bhi.n	800ac7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	885b      	ldrh	r3, [r3, #2]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d104      	bne.n	800ac48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f9bc 	bl	800afbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	e01d      	b.n	800ac84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7bfa      	ldrb	r2, [r7, #15]
 800ac4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 ffbf 	bl	800bbd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa86 	bl	800b16c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d004      	beq.n	800ac70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac6e:	e009      	b.n	800ac84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac78:	e004      	b.n	800ac84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f99e 	bl	800afbe <USBD_CtlError>
  }
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	885b      	ldrh	r3, [r3, #2]
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	4b4e      	ldr	r3, [pc, #312]	@ (800addc <USBD_SetConfig+0x150>)
 800aca2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aca4:	4b4d      	ldr	r3, [pc, #308]	@ (800addc <USBD_SetConfig+0x150>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d905      	bls.n	800acb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f985 	bl	800afbe <USBD_CtlError>
    return USBD_FAIL;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e08c      	b.n	800add2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d002      	beq.n	800acca <USBD_SetConfig+0x3e>
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d029      	beq.n	800ad1c <USBD_SetConfig+0x90>
 800acc8:	e075      	b.n	800adb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800acca:	4b44      	ldr	r3, [pc, #272]	@ (800addc <USBD_SetConfig+0x150>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d020      	beq.n	800ad14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800acd2:	4b42      	ldr	r3, [pc, #264]	@ (800addc <USBD_SetConfig+0x150>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acdc:	4b3f      	ldr	r3, [pc, #252]	@ (800addc <USBD_SetConfig+0x150>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fe ffb9 	bl	8009c5a <USBD_SetClassConfig>
 800ace8:	4603      	mov	r3, r0
 800acea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d008      	beq.n	800ad04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f962 	bl	800afbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2202      	movs	r2, #2
 800acfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad02:	e065      	b.n	800add0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fa31 	bl	800b16c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2203      	movs	r2, #3
 800ad0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad12:	e05d      	b.n	800add0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fa29 	bl	800b16c <USBD_CtlSendStatus>
      break;
 800ad1a:	e059      	b.n	800add0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad1c:	4b2f      	ldr	r3, [pc, #188]	@ (800addc <USBD_SetConfig+0x150>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d112      	bne.n	800ad4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ad2c:	4b2b      	ldr	r3, [pc, #172]	@ (800addc <USBD_SetConfig+0x150>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad36:	4b29      	ldr	r3, [pc, #164]	@ (800addc <USBD_SetConfig+0x150>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7fe ffa8 	bl	8009c92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa12 	bl	800b16c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad48:	e042      	b.n	800add0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad4a:	4b24      	ldr	r3, [pc, #144]	@ (800addc <USBD_SetConfig+0x150>)
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d02a      	beq.n	800adae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7fe ff96 	bl	8009c92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad66:	4b1d      	ldr	r3, [pc, #116]	@ (800addc <USBD_SetConfig+0x150>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad70:	4b1a      	ldr	r3, [pc, #104]	@ (800addc <USBD_SetConfig+0x150>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7fe ff6f 	bl	8009c5a <USBD_SetClassConfig>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00f      	beq.n	800ada6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f918 	bl	800afbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7fe ff7b 	bl	8009c92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ada4:	e014      	b.n	800add0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f9e0 	bl	800b16c <USBD_CtlSendStatus>
      break;
 800adac:	e010      	b.n	800add0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f9dc 	bl	800b16c <USBD_CtlSendStatus>
      break;
 800adb4:	e00c      	b.n	800add0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f900 	bl	800afbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adbe:	4b07      	ldr	r3, [pc, #28]	@ (800addc <USBD_SetConfig+0x150>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fe ff64 	bl	8009c92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800adca:	2303      	movs	r3, #3
 800adcc:	73fb      	strb	r3, [r7, #15]
      break;
 800adce:	bf00      	nop
  }

  return ret;
 800add0:	7bfb      	ldrb	r3, [r7, #15]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000514 	.word	0x20000514

0800ade0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d004      	beq.n	800adfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f8e2 	bl	800afbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adfa:	e023      	b.n	800ae44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	dc02      	bgt.n	800ae0e <USBD_GetConfig+0x2e>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc03      	bgt.n	800ae14 <USBD_GetConfig+0x34>
 800ae0c:	e015      	b.n	800ae3a <USBD_GetConfig+0x5a>
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d00b      	beq.n	800ae2a <USBD_GetConfig+0x4a>
 800ae12:	e012      	b.n	800ae3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	2201      	movs	r2, #1
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f948 	bl	800b0b8 <USBD_CtlSendData>
        break;
 800ae28:	e00c      	b.n	800ae44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	2201      	movs	r2, #1
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f940 	bl	800b0b8 <USBD_CtlSendData>
        break;
 800ae38:	e004      	b.n	800ae44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f8be 	bl	800afbe <USBD_CtlError>
        break;
 800ae42:	bf00      	nop
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d81e      	bhi.n	800aea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	88db      	ldrh	r3, [r3, #6]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d004      	beq.n	800ae76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f8a5 	bl	800afbe <USBD_CtlError>
        break;
 800ae74:	e01a      	b.n	800aeac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d005      	beq.n	800ae92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f043 0202 	orr.w	r2, r3, #2
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	330c      	adds	r3, #12
 800ae96:	2202      	movs	r2, #2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f90c 	bl	800b0b8 <USBD_CtlSendData>
      break;
 800aea0:	e004      	b.n	800aeac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f88a 	bl	800afbe <USBD_CtlError>
      break;
 800aeaa:	bf00      	nop
  }
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	885b      	ldrh	r3, [r3, #2]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d107      	bne.n	800aed6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f94c 	bl	800b16c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aed4:	e013      	b.n	800aefe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d10b      	bne.n	800aef6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	889b      	ldrh	r3, [r3, #4]
 800aee2:	0a1b      	lsrs	r3, r3, #8
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f93c 	bl	800b16c <USBD_CtlSendStatus>
}
 800aef4:	e003      	b.n	800aefe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f860 	bl	800afbe <USBD_CtlError>
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af16:	b2db      	uxtb	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d80b      	bhi.n	800af36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	885b      	ldrh	r3, [r3, #2]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10c      	bne.n	800af40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f91c 	bl	800b16c <USBD_CtlSendStatus>
      }
      break;
 800af34:	e004      	b.n	800af40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f840 	bl	800afbe <USBD_CtlError>
      break;
 800af3e:	e000      	b.n	800af42 <USBD_ClrFeature+0x3c>
      break;
 800af40:	bf00      	nop
  }
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3301      	adds	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3301      	adds	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fa16 	bl	800a3a6 <SWAPBYTE>
 800af7a:	4603      	mov	r3, r0
 800af7c:	461a      	mov	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3301      	adds	r3, #1
 800af86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3301      	adds	r3, #1
 800af8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff fa09 	bl	800a3a6 <SWAPBYTE>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7ff f9fc 	bl	800a3a6 <SWAPBYTE>
 800afae:	4603      	mov	r3, r0
 800afb0:	461a      	mov	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	80da      	strh	r2, [r3, #6]
}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afc8:	2180      	movs	r1, #128	@ 0x80
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fd6c 	bl	800baa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afd0:	2100      	movs	r1, #0
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fd68 	bl	800baa8 <USBD_LL_StallEP>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d042      	beq.n	800b07c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800affa:	6938      	ldr	r0, [r7, #16]
 800affc:	f000 f842 	bl	800b084 <USBD_GetLen>
 800b000:	4603      	mov	r3, r0
 800b002:	3301      	adds	r3, #1
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b00a:	d808      	bhi.n	800b01e <USBD_GetString+0x3e>
 800b00c:	6938      	ldr	r0, [r7, #16]
 800b00e:	f000 f839 	bl	800b084 <USBD_GetLen>
 800b012:	4603      	mov	r3, r0
 800b014:	3301      	adds	r3, #1
 800b016:	b29b      	uxth	r3, r3
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	e001      	b.n	800b022 <USBD_GetString+0x42>
 800b01e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	4413      	add	r3, r2
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7812      	ldrb	r2, [r2, #0]
 800b030:	701a      	strb	r2, [r3, #0]
  idx++;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	3301      	adds	r3, #1
 800b036:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	4413      	add	r3, r2
 800b03e:	2203      	movs	r2, #3
 800b040:	701a      	strb	r2, [r3, #0]
  idx++;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	3301      	adds	r3, #1
 800b046:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b048:	e013      	b.n	800b072 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	4413      	add	r3, r2
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	7812      	ldrb	r2, [r2, #0]
 800b054:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	3301      	adds	r3, #1
 800b05a:	613b      	str	r3, [r7, #16]
    idx++;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	3301      	adds	r3, #1
 800b060:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	4413      	add	r3, r2
 800b068:	2200      	movs	r2, #0
 800b06a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	3301      	adds	r3, #1
 800b070:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e7      	bne.n	800b04a <USBD_GetString+0x6a>
 800b07a:	e000      	b.n	800b07e <USBD_GetString+0x9e>
    return;
 800b07c:	bf00      	nop
  }
}
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b094:	e005      	b.n	800b0a2 <USBD_GetLen+0x1e>
  {
    len++;
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	3301      	adds	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f5      	bne.n	800b096 <USBD_GetLen+0x12>
  }

  return len;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	2100      	movs	r1, #0
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 fdb0 	bl	800bc44 <USBD_LL_Transmit>

  return USBD_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	2100      	movs	r1, #0
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 fd9f 	bl	800bc44 <USBD_LL_Transmit>

  return USBD_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2203      	movs	r2, #3
 800b120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	2100      	movs	r1, #0
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fdba 	bl	800bcb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	2100      	movs	r1, #0
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fda9 	bl	800bcb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2204      	movs	r2, #4
 800b178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b17c:	2300      	movs	r3, #0
 800b17e:	2200      	movs	r2, #0
 800b180:	2100      	movs	r1, #0
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fd5e 	bl	800bc44 <USBD_LL_Transmit>

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2205      	movs	r2, #5
 800b19e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fd83 	bl	800bcb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4912      	ldr	r1, [pc, #72]	@ (800b208 <MX_USB_DEVICE_Init+0x50>)
 800b1c0:	4812      	ldr	r0, [pc, #72]	@ (800b20c <MX_USB_DEVICE_Init+0x54>)
 800b1c2:	f7fe fccd 	bl	8009b60 <USBD_Init>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1cc:	f7f6 f8ac 	bl	8001328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1d0:	490f      	ldr	r1, [pc, #60]	@ (800b210 <MX_USB_DEVICE_Init+0x58>)
 800b1d2:	480e      	ldr	r0, [pc, #56]	@ (800b20c <MX_USB_DEVICE_Init+0x54>)
 800b1d4:	f7fe fcf4 	bl	8009bc0 <USBD_RegisterClass>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1de:	f7f6 f8a3 	bl	8001328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1e2:	490c      	ldr	r1, [pc, #48]	@ (800b214 <MX_USB_DEVICE_Init+0x5c>)
 800b1e4:	4809      	ldr	r0, [pc, #36]	@ (800b20c <MX_USB_DEVICE_Init+0x54>)
 800b1e6:	f7fe fc2b 	bl	8009a40 <USBD_CDC_RegisterInterface>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1f0:	f7f6 f89a 	bl	8001328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1f4:	4805      	ldr	r0, [pc, #20]	@ (800b20c <MX_USB_DEVICE_Init+0x54>)
 800b1f6:	f7fe fd19 	bl	8009c2c <USBD_Start>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b200:	f7f6 f892 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b204:	bf00      	nop
 800b206:	bd80      	pop	{r7, pc}
 800b208:	200000cc 	.word	0x200000cc
 800b20c:	20000518 	.word	0x20000518
 800b210:	20000038 	.word	0x20000038
 800b214:	200000b8 	.word	0x200000b8

0800b218 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b21c:	2200      	movs	r2, #0
 800b21e:	4905      	ldr	r1, [pc, #20]	@ (800b234 <CDC_Init_FS+0x1c>)
 800b220:	4805      	ldr	r0, [pc, #20]	@ (800b238 <CDC_Init_FS+0x20>)
 800b222:	f7fe fc27 	bl	8009a74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b226:	4905      	ldr	r1, [pc, #20]	@ (800b23c <CDC_Init_FS+0x24>)
 800b228:	4803      	ldr	r0, [pc, #12]	@ (800b238 <CDC_Init_FS+0x20>)
 800b22a:	f7fe fc45 	bl	8009ab8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b22e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b230:	4618      	mov	r0, r3
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20000ff4 	.word	0x20000ff4
 800b238:	20000518 	.word	0x20000518
 800b23c:	200007f4 	.word	0x200007f4

0800b240 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	6039      	str	r1, [r7, #0]
 800b25a:	71fb      	strb	r3, [r7, #7]
 800b25c:	4613      	mov	r3, r2
 800b25e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	2b23      	cmp	r3, #35	@ 0x23
 800b264:	d84a      	bhi.n	800b2fc <CDC_Control_FS+0xac>
 800b266:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <CDC_Control_FS+0x1c>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b2fd 	.word	0x0800b2fd
 800b270:	0800b2fd 	.word	0x0800b2fd
 800b274:	0800b2fd 	.word	0x0800b2fd
 800b278:	0800b2fd 	.word	0x0800b2fd
 800b27c:	0800b2fd 	.word	0x0800b2fd
 800b280:	0800b2fd 	.word	0x0800b2fd
 800b284:	0800b2fd 	.word	0x0800b2fd
 800b288:	0800b2fd 	.word	0x0800b2fd
 800b28c:	0800b2fd 	.word	0x0800b2fd
 800b290:	0800b2fd 	.word	0x0800b2fd
 800b294:	0800b2fd 	.word	0x0800b2fd
 800b298:	0800b2fd 	.word	0x0800b2fd
 800b29c:	0800b2fd 	.word	0x0800b2fd
 800b2a0:	0800b2fd 	.word	0x0800b2fd
 800b2a4:	0800b2fd 	.word	0x0800b2fd
 800b2a8:	0800b2fd 	.word	0x0800b2fd
 800b2ac:	0800b2fd 	.word	0x0800b2fd
 800b2b0:	0800b2fd 	.word	0x0800b2fd
 800b2b4:	0800b2fd 	.word	0x0800b2fd
 800b2b8:	0800b2fd 	.word	0x0800b2fd
 800b2bc:	0800b2fd 	.word	0x0800b2fd
 800b2c0:	0800b2fd 	.word	0x0800b2fd
 800b2c4:	0800b2fd 	.word	0x0800b2fd
 800b2c8:	0800b2fd 	.word	0x0800b2fd
 800b2cc:	0800b2fd 	.word	0x0800b2fd
 800b2d0:	0800b2fd 	.word	0x0800b2fd
 800b2d4:	0800b2fd 	.word	0x0800b2fd
 800b2d8:	0800b2fd 	.word	0x0800b2fd
 800b2dc:	0800b2fd 	.word	0x0800b2fd
 800b2e0:	0800b2fd 	.word	0x0800b2fd
 800b2e4:	0800b2fd 	.word	0x0800b2fd
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b2fd 	.word	0x0800b2fd
 800b2f0:	0800b2fd 	.word	0x0800b2fd
 800b2f4:	0800b2fd 	.word	0x0800b2fd
 800b2f8:	0800b2fd 	.word	0x0800b2fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2fc:	bf00      	nop
  }

  return (USBD_OK);
 800b2fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	4805      	ldr	r0, [pc, #20]	@ (800b330 <CDC_Receive_FS+0x24>)
 800b31a:	f7fe fbcd 	bl	8009ab8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b31e:	4804      	ldr	r0, [pc, #16]	@ (800b330 <CDC_Receive_FS+0x24>)
 800b320:	f7fe fbe8 	bl	8009af4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b324:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000518 	.word	0x20000518

0800b334 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4613      	mov	r3, r2
 800b340:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	371c      	adds	r7, #28
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
	...

0800b358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2212      	movs	r2, #18
 800b368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b36a:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	200000ec 	.word	0x200000ec

0800b37c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2204      	movs	r2, #4
 800b38c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b38e:	4b03      	ldr	r3, [pc, #12]	@ (800b39c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	2000010c 	.word	0x2000010c

0800b3a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d105      	bne.n	800b3be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4907      	ldr	r1, [pc, #28]	@ (800b3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3b6:	4808      	ldr	r0, [pc, #32]	@ (800b3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3b8:	f7ff fe12 	bl	800afe0 <USBD_GetString>
 800b3bc:	e004      	b.n	800b3c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	4904      	ldr	r1, [pc, #16]	@ (800b3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3c2:	4805      	ldr	r0, [pc, #20]	@ (800b3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3c4:	f7ff fe0c 	bl	800afe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3c8:	4b02      	ldr	r3, [pc, #8]	@ (800b3d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	200017f4 	.word	0x200017f4
 800b3d8:	08010e7c 	.word	0x08010e7c

0800b3dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	6039      	str	r1, [r7, #0]
 800b3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	4904      	ldr	r1, [pc, #16]	@ (800b3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3ec:	4804      	ldr	r0, [pc, #16]	@ (800b400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3ee:	f7ff fdf7 	bl	800afe0 <USBD_GetString>
  return USBD_StrDesc;
 800b3f2:	4b02      	ldr	r3, [pc, #8]	@ (800b3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	200017f4 	.word	0x200017f4
 800b400:	08010e94 	.word	0x08010e94

0800b404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	6039      	str	r1, [r7, #0]
 800b40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	221a      	movs	r2, #26
 800b414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b416:	f000 f855 	bl	800b4c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b41a:	4b02      	ldr	r3, [pc, #8]	@ (800b424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20000110 	.word	0x20000110

0800b428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d105      	bne.n	800b446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4907      	ldr	r1, [pc, #28]	@ (800b45c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b43e:	4808      	ldr	r0, [pc, #32]	@ (800b460 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b440:	f7ff fdce 	bl	800afe0 <USBD_GetString>
 800b444:	e004      	b.n	800b450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4904      	ldr	r1, [pc, #16]	@ (800b45c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b44a:	4805      	ldr	r0, [pc, #20]	@ (800b460 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b44c:	f7ff fdc8 	bl	800afe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b450:	4b02      	ldr	r3, [pc, #8]	@ (800b45c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200017f4 	.word	0x200017f4
 800b460:	08010ea8 	.word	0x08010ea8

0800b464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4907      	ldr	r1, [pc, #28]	@ (800b498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b47a:	4808      	ldr	r0, [pc, #32]	@ (800b49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b47c:	f7ff fdb0 	bl	800afe0 <USBD_GetString>
 800b480:	e004      	b.n	800b48c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4904      	ldr	r1, [pc, #16]	@ (800b498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b488:	f7ff fdaa 	bl	800afe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200017f4 	.word	0x200017f4
 800b49c:	08010eb4 	.word	0x08010eb4

0800b4a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	220c      	movs	r2, #12
 800b4b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b4b2:	4b03      	ldr	r3, [pc, #12]	@ (800b4c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000100 	.word	0x20000100

0800b4c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <Get_SerialNum+0x44>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b50c <Get_SerialNum+0x48>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b510 <Get_SerialNum+0x4c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d009      	beq.n	800b4fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ea:	2208      	movs	r2, #8
 800b4ec:	4909      	ldr	r1, [pc, #36]	@ (800b514 <Get_SerialNum+0x50>)
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 f814 	bl	800b51c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	4908      	ldr	r1, [pc, #32]	@ (800b518 <Get_SerialNum+0x54>)
 800b4f8:	68b8      	ldr	r0, [r7, #8]
 800b4fa:	f000 f80f 	bl	800b51c <IntToUnicode>
  }
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	1fff7590 	.word	0x1fff7590
 800b50c:	1fff7594 	.word	0x1fff7594
 800b510:	1fff7598 	.word	0x1fff7598
 800b514:	20000112 	.word	0x20000112
 800b518:	20000122 	.word	0x20000122

0800b51c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	4613      	mov	r3, r2
 800b528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b52e:	2300      	movs	r3, #0
 800b530:	75fb      	strb	r3, [r7, #23]
 800b532:	e027      	b.n	800b584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	0f1b      	lsrs	r3, r3, #28
 800b538:	2b09      	cmp	r3, #9
 800b53a:	d80b      	bhi.n	800b554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	0f1b      	lsrs	r3, r3, #28
 800b540:	b2da      	uxtb	r2, r3
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	4619      	mov	r1, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	440b      	add	r3, r1
 800b54c:	3230      	adds	r2, #48	@ 0x30
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	e00a      	b.n	800b56a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	0f1b      	lsrs	r3, r3, #28
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4619      	mov	r1, r3
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	440b      	add	r3, r1
 800b564:	3237      	adds	r2, #55	@ 0x37
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	3301      	adds	r3, #1
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	4413      	add	r3, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	3301      	adds	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
 800b584:	7dfa      	ldrb	r2, [r7, #23]
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d3d3      	bcc.n	800b534 <IntToUnicode+0x18>
  }
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
	...

0800b59c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b0ac      	sub	sp, #176	@ 0xb0
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	605a      	str	r2, [r3, #4]
 800b5ae:	609a      	str	r2, [r3, #8]
 800b5b0:	60da      	str	r2, [r3, #12]
 800b5b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	2288      	movs	r2, #136	@ 0x88
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 fc22 	bl	800ce06 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5ca:	d173      	bne.n	800b6b4 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b5cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b5d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b5d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b5d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b5e2:	2318      	movs	r3, #24
 800b5e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b5e6:	2307      	movs	r3, #7
 800b5e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b5f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b5f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b5f8:	f107 0314 	add.w	r3, r7, #20
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f9 f833 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800b608:	f7f5 fe8e 	bl	8001328 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b60c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b610:	4a2a      	ldr	r2, [pc, #168]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b612:	f043 0301 	orr.w	r3, r3, #1
 800b616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b618:	4b28      	ldr	r3, [pc, #160]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b61a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b624:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b62c:	2302      	movs	r3, #2
 800b62e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b632:	2300      	movs	r3, #0
 800b634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b638:	2303      	movs	r3, #3
 800b63a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b63e:	230a      	movs	r3, #10
 800b640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b644:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b648:	4619      	mov	r1, r3
 800b64a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b64e:	f7f6 fe2f 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b652:	4b1a      	ldr	r3, [pc, #104]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b656:	4a19      	ldr	r2, [pc, #100]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b65c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b65e:	4b17      	ldr	r3, [pc, #92]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b66a:	4b14      	ldr	r3, [pc, #80]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b66c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b66e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d114      	bne.n	800b6a0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b676:	4b11      	ldr	r3, [pc, #68]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b67a:	4a10      	ldr	r2, [pc, #64]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b67c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b680:	6593      	str	r3, [r2, #88]	@ 0x58
 800b682:	4b0e      	ldr	r3, [pc, #56]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b68a:	60bb      	str	r3, [r7, #8]
 800b68c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b68e:	f7f8 f9db 	bl	8003a48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b692:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b696:	4a09      	ldr	r2, [pc, #36]	@ (800b6bc <HAL_PCD_MspInit+0x120>)
 800b698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b69c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b69e:	e001      	b.n	800b6a4 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b6a0:	f7f8 f9d2 	bl	8003a48 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	2043      	movs	r0, #67	@ 0x43
 800b6aa:	f7f6 fd4c 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6ae:	2043      	movs	r0, #67	@ 0x43
 800b6b0:	f7f6 fd65 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	37b0      	adds	r7, #176	@ 0xb0
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40021000 	.word	0x40021000

0800b6c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe faf5 	bl	8009cc6 <USBD_LL_SetupStage>
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b6f6:	78fa      	ldrb	r2, [r7, #3]
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7fe fb2f 	bl	8009d70 <USBD_LL_DataOutStage>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	4613      	mov	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	440b      	add	r3, r1
 800b73a:	3320      	adds	r3, #32
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	4619      	mov	r1, r3
 800b742:	f7fe fbc8 	bl	8009ed6 <USBD_LL_DataInStage>
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe fd02 	bl	800a166 <USBD_LL_SOF>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b772:	2301      	movs	r3, #1
 800b774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	79db      	ldrb	r3, [r3, #7]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d001      	beq.n	800b782 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b77e:	f7f5 fdd3 	bl	8001328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b788:	7bfa      	ldrb	r2, [r7, #15]
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fca6 	bl	800a0de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fc4e 	bl	800a03a <USBD_LL_Reset>
}
 800b79e:	bf00      	nop
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6812      	ldr	r2, [r2, #0]
 800b7be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7c2:	f043 0301 	orr.w	r3, r3, #1
 800b7c6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fc95 	bl	800a0fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7adb      	ldrb	r3, [r3, #11]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7dc:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <HAL_PCD_SuspendCallback+0x48>)
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	4a03      	ldr	r2, [pc, #12]	@ (800b7f0 <HAL_PCD_SuspendCallback+0x48>)
 800b7e2:	f043 0306 	orr.w	r3, r3, #6
 800b7e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	e000ed00 	.word	0xe000ed00

0800b7f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b80e:	f023 0301 	bic.w	r3, r3, #1
 800b812:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	7adb      	ldrb	r3, [r3, #11]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d007      	beq.n	800b82c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b81c:	4b08      	ldr	r3, [pc, #32]	@ (800b840 <HAL_PCD_ResumeCallback+0x4c>)
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	4a07      	ldr	r2, [pc, #28]	@ (800b840 <HAL_PCD_ResumeCallback+0x4c>)
 800b822:	f023 0306 	bic.w	r3, r3, #6
 800b826:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b828:	f000 faf6 	bl	800be18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fc7f 	bl	800a136 <USBD_LL_Resume>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	e000ed00 	.word	0xe000ed00

0800b844 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fcd5 	bl	800a20a <USBD_LL_IsoOUTIncomplete>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fc91 	bl	800a1a6 <USBD_LL_IsoINIncomplete>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fce7 	bl	800a26e <USBD_LL_DevConnected>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fce4 	bl	800a284 <USBD_LL_DevDisconnected>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d13c      	bne.n	800b94e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8d4:	4a20      	ldr	r2, [pc, #128]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1e      	ldr	r2, [pc, #120]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8ee:	2206      	movs	r2, #6
 800b8f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8f2:	4b19      	ldr	r3, [pc, #100]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8f8:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <USBD_LL_Init+0x94>)
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8fe:	4b16      	ldr	r3, [pc, #88]	@ (800b958 <USBD_LL_Init+0x94>)
 800b900:	2200      	movs	r2, #0
 800b902:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b904:	4b14      	ldr	r3, [pc, #80]	@ (800b958 <USBD_LL_Init+0x94>)
 800b906:	2200      	movs	r2, #0
 800b908:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b90a:	4b13      	ldr	r3, [pc, #76]	@ (800b958 <USBD_LL_Init+0x94>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b910:	4b11      	ldr	r3, [pc, #68]	@ (800b958 <USBD_LL_Init+0x94>)
 800b912:	2200      	movs	r2, #0
 800b914:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b916:	4b10      	ldr	r3, [pc, #64]	@ (800b958 <USBD_LL_Init+0x94>)
 800b918:	2200      	movs	r2, #0
 800b91a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b91c:	4b0e      	ldr	r3, [pc, #56]	@ (800b958 <USBD_LL_Init+0x94>)
 800b91e:	2200      	movs	r2, #0
 800b920:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b922:	480d      	ldr	r0, [pc, #52]	@ (800b958 <USBD_LL_Init+0x94>)
 800b924:	f7f6 fe86 	bl	8002634 <HAL_PCD_Init>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b92e:	f7f5 fcfb 	bl	8001328 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b932:	2180      	movs	r1, #128	@ 0x80
 800b934:	4808      	ldr	r0, [pc, #32]	@ (800b958 <USBD_LL_Init+0x94>)
 800b936:	f7f7 ffde 	bl	80038f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b93a:	2240      	movs	r2, #64	@ 0x40
 800b93c:	2100      	movs	r1, #0
 800b93e:	4806      	ldr	r0, [pc, #24]	@ (800b958 <USBD_LL_Init+0x94>)
 800b940:	f7f7 ff92 	bl	8003868 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b944:	2280      	movs	r2, #128	@ 0x80
 800b946:	2101      	movs	r1, #1
 800b948:	4803      	ldr	r0, [pc, #12]	@ (800b958 <USBD_LL_Init+0x94>)
 800b94a:	f7f7 ff8d 	bl	8003868 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	200019f4 	.word	0x200019f4

0800b95c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b972:	4618      	mov	r0, r3
 800b974:	f7f6 ff6d 	bl	8002852 <HAL_PCD_Start>
 800b978:	4603      	mov	r3, r0
 800b97a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b97c:	7bbb      	ldrb	r3, [r7, #14]
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d816      	bhi.n	800b9b0 <USBD_LL_Start+0x54>
 800b982:	a201      	add	r2, pc, #4	@ (adr r2, 800b988 <USBD_LL_Start+0x2c>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b999 	.word	0x0800b999
 800b98c:	0800b99f 	.word	0x0800b99f
 800b990:	0800b9a5 	.word	0x0800b9a5
 800b994:	0800b9ab 	.word	0x0800b9ab
    case HAL_OK :
      usb_status = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
    break;
 800b99c:	e00b      	b.n	800b9b6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a2:	e008      	b.n	800b9b6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a8:	e005      	b.n	800b9b6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ae:	e002      	b.n	800b9b6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b4:	bf00      	nop
  }
  return usb_status;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	70fb      	strb	r3, [r7, #3]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70bb      	strb	r3, [r7, #2]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9e8:	78bb      	ldrb	r3, [r7, #2]
 800b9ea:	883a      	ldrh	r2, [r7, #0]
 800b9ec:	78f9      	ldrb	r1, [r7, #3]
 800b9ee:	f7f7 fc19 	bl	8003224 <HAL_PCD_EP_Open>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d817      	bhi.n	800ba2c <USBD_LL_OpenEP+0x6c>
 800b9fc:	a201      	add	r2, pc, #4	@ (adr r2, 800ba04 <USBD_LL_OpenEP+0x44>)
 800b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba02:	bf00      	nop
 800ba04:	0800ba15 	.word	0x0800ba15
 800ba08:	0800ba1b 	.word	0x0800ba1b
 800ba0c:	0800ba21 	.word	0x0800ba21
 800ba10:	0800ba27 	.word	0x0800ba27
    case HAL_OK :
      usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
    break;
 800ba18:	e00b      	b.n	800ba32 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1e:	e008      	b.n	800ba32 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba20:	2301      	movs	r3, #1
 800ba22:	73fb      	strb	r3, [r7, #15]
    break;
 800ba24:	e005      	b.n	800ba32 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba26:	2303      	movs	r3, #3
 800ba28:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2a:	e002      	b.n	800ba32 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba30:	bf00      	nop
  }
  return usb_status;
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f7 fc4c 	bl	80032f8 <HAL_PCD_EP_Close>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d816      	bhi.n	800ba98 <USBD_LL_CloseEP+0x5c>
 800ba6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba70 <USBD_LL_CloseEP+0x34>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800ba87 	.word	0x0800ba87
 800ba78:	0800ba8d 	.word	0x0800ba8d
 800ba7c:	0800ba93 	.word	0x0800ba93
    case HAL_OK :
      usb_status = USBD_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
    break;
 800ba84:	e00b      	b.n	800ba9e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba86:	2303      	movs	r3, #3
 800ba88:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8a:	e008      	b.n	800ba9e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba90:	e005      	b.n	800ba9e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba92:	2303      	movs	r3, #3
 800ba94:	73fb      	strb	r3, [r7, #15]
    break;
 800ba96:	e002      	b.n	800ba9e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9c:	bf00      	nop
  }
  return usb_status;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bac2:	78fa      	ldrb	r2, [r7, #3]
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f7 fcdb 	bl	8003482 <HAL_PCD_EP_SetStall>
 800bacc:	4603      	mov	r3, r0
 800bace:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d816      	bhi.n	800bb04 <USBD_LL_StallEP+0x5c>
 800bad6:	a201      	add	r2, pc, #4	@ (adr r2, 800badc <USBD_LL_StallEP+0x34>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800baed 	.word	0x0800baed
 800bae0:	0800baf3 	.word	0x0800baf3
 800bae4:	0800baf9 	.word	0x0800baf9
 800bae8:	0800baff 	.word	0x0800baff
    case HAL_OK :
      usb_status = USBD_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
    break;
 800baf0:	e00b      	b.n	800bb0a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baf2:	2303      	movs	r3, #3
 800baf4:	73fb      	strb	r3, [r7, #15]
    break;
 800baf6:	e008      	b.n	800bb0a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baf8:	2301      	movs	r3, #1
 800bafa:	73fb      	strb	r3, [r7, #15]
    break;
 800bafc:	e005      	b.n	800bb0a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bafe:	2303      	movs	r3, #3
 800bb00:	73fb      	strb	r3, [r7, #15]
    break;
 800bb02:	e002      	b.n	800bb0a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
    break;
 800bb08:	bf00      	nop
  }
  return usb_status;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb2e:	78fa      	ldrb	r2, [r7, #3]
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7f7 fd07 	bl	8003546 <HAL_PCD_EP_ClrStall>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d816      	bhi.n	800bb70 <USBD_LL_ClearStallEP+0x5c>
 800bb42:	a201      	add	r2, pc, #4	@ (adr r2, 800bb48 <USBD_LL_ClearStallEP+0x34>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb59 	.word	0x0800bb59
 800bb4c:	0800bb5f 	.word	0x0800bb5f
 800bb50:	0800bb65 	.word	0x0800bb65
 800bb54:	0800bb6b 	.word	0x0800bb6b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5c:	e00b      	b.n	800bb76 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	73fb      	strb	r3, [r7, #15]
    break;
 800bb62:	e008      	b.n	800bb76 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb64:	2301      	movs	r3, #1
 800bb66:	73fb      	strb	r3, [r7, #15]
    break;
 800bb68:	e005      	b.n	800bb76 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6e:	e002      	b.n	800bb76 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb70:	2303      	movs	r3, #3
 800bb72:	73fb      	strb	r3, [r7, #15]
    break;
 800bb74:	bf00      	nop
  }
  return usb_status;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	da0b      	bge.n	800bbb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	4613      	mov	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	440b      	add	r3, r1
 800bbae:	3316      	adds	r3, #22
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	e00b      	b.n	800bbcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbba:	68f9      	ldr	r1, [r7, #12]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	440b      	add	r3, r1
 800bbc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bbca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f7 faf0 	bl	80031dc <HAL_PCD_SetAddress>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d816      	bhi.n	800bc34 <USBD_LL_SetUSBAddress+0x5c>
 800bc06:	a201      	add	r2, pc, #4	@ (adr r2, 800bc0c <USBD_LL_SetUSBAddress+0x34>)
 800bc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0c:	0800bc1d 	.word	0x0800bc1d
 800bc10:	0800bc23 	.word	0x0800bc23
 800bc14:	0800bc29 	.word	0x0800bc29
 800bc18:	0800bc2f 	.word	0x0800bc2f
    case HAL_OK :
      usb_status = USBD_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc20:	e00b      	b.n	800bc3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc22:	2303      	movs	r3, #3
 800bc24:	73fb      	strb	r3, [r7, #15]
    break;
 800bc26:	e008      	b.n	800bc3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2c:	e005      	b.n	800bc3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	73fb      	strb	r3, [r7, #15]
    break;
 800bc32:	e002      	b.n	800bc3a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc34:	2303      	movs	r3, #3
 800bc36:	73fb      	strb	r3, [r7, #15]
    break;
 800bc38:	bf00      	nop
  }
  return usb_status;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	607a      	str	r2, [r7, #4]
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	460b      	mov	r3, r1
 800bc52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc62:	7af9      	ldrb	r1, [r7, #11]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	f7f7 fbda 	bl	8003420 <HAL_PCD_EP_Transmit>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bc70:	7dbb      	ldrb	r3, [r7, #22]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d816      	bhi.n	800bca4 <USBD_LL_Transmit+0x60>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <USBD_LL_Transmit+0x38>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc93 	.word	0x0800bc93
 800bc84:	0800bc99 	.word	0x0800bc99
 800bc88:	0800bc9f 	.word	0x0800bc9f
    case HAL_OK :
      usb_status = USBD_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	75fb      	strb	r3, [r7, #23]
    break;
 800bc90:	e00b      	b.n	800bcaa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc92:	2303      	movs	r3, #3
 800bc94:	75fb      	strb	r3, [r7, #23]
    break;
 800bc96:	e008      	b.n	800bcaa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc9c:	e005      	b.n	800bcaa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	75fb      	strb	r3, [r7, #23]
    break;
 800bca2:	e002      	b.n	800bcaa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	75fb      	strb	r3, [r7, #23]
    break;
 800bca8:	bf00      	nop
  }
  return usb_status;
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	607a      	str	r2, [r7, #4]
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bcd2:	7af9      	ldrb	r1, [r7, #11]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	f7f7 fb58 	bl	800338c <HAL_PCD_EP_Receive>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d816      	bhi.n	800bd14 <USBD_LL_PrepareReceive+0x60>
 800bce6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <USBD_LL_PrepareReceive+0x38>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bcfd 	.word	0x0800bcfd
 800bcf0:	0800bd03 	.word	0x0800bd03
 800bcf4:	0800bd09 	.word	0x0800bd09
 800bcf8:	0800bd0f 	.word	0x0800bd0f
    case HAL_OK :
      usb_status = USBD_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	75fb      	strb	r3, [r7, #23]
    break;
 800bd00:	e00b      	b.n	800bd1a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd02:	2303      	movs	r3, #3
 800bd04:	75fb      	strb	r3, [r7, #23]
    break;
 800bd06:	e008      	b.n	800bd1a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	75fb      	strb	r3, [r7, #23]
    break;
 800bd0c:	e005      	b.n	800bd1a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	75fb      	strb	r3, [r7, #23]
    break;
 800bd12:	e002      	b.n	800bd1a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bd14:	2303      	movs	r3, #3
 800bd16:	75fb      	strb	r3, [r7, #23]
    break;
 800bd18:	bf00      	nop
  }
  return usb_status;
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd36:	78fa      	ldrb	r2, [r7, #3]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f7 fb58 	bl	80033f0 <HAL_PCD_EP_GetRxCount>
 800bd40:	4603      	mov	r3, r0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_PCDEx_LPM_Callback+0x18>
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d01f      	beq.n	800bda2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bd62:	e03b      	b.n	800bddc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7adb      	ldrb	r3, [r3, #11]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bd6c:	f000 f854 	bl	800be18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd70:	4b1c      	ldr	r3, [pc, #112]	@ (800bde4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	4a1b      	ldr	r2, [pc, #108]	@ (800bde4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bd76:	f023 0306 	bic.w	r3, r3, #6
 800bd7a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6812      	ldr	r2, [r2, #0]
 800bd8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe f9cb 	bl	800a136 <USBD_LL_Resume>
    break;
 800bda0:	e01c      	b.n	800bddc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6812      	ldr	r2, [r2, #0]
 800bdb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bdb4:	f043 0301 	orr.w	r3, r3, #1
 800bdb8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe f99c 	bl	800a0fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	7adb      	ldrb	r3, [r3, #11]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdce:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	4a04      	ldr	r2, [pc, #16]	@ (800bde4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bdd4:	f043 0306 	orr.w	r3, r3, #6
 800bdd8:	6113      	str	r3, [r2, #16]
    break;
 800bdda:	bf00      	nop
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	e000ed00 	.word	0xe000ed00

0800bde8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdf0:	4b03      	ldr	r3, [pc, #12]	@ (800be00 <USBD_static_malloc+0x18>)
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20001ed8 	.word	0x20001ed8

0800be04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]

}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800be1c:	f7f5 fa06 	bl	800122c <SystemClock_Config>
}
 800be20:	bf00      	nop
 800be22:	bd80      	pop	{r7, pc}

0800be24 <__cvt>:
 800be24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	ec57 6b10 	vmov	r6, r7, d0
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	460c      	mov	r4, r1
 800be30:	4619      	mov	r1, r3
 800be32:	463b      	mov	r3, r7
 800be34:	bfbb      	ittet	lt
 800be36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be3a:	461f      	movlt	r7, r3
 800be3c:	2300      	movge	r3, #0
 800be3e:	232d      	movlt	r3, #45	@ 0x2d
 800be40:	700b      	strb	r3, [r1, #0]
 800be42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be48:	4691      	mov	r9, r2
 800be4a:	f023 0820 	bic.w	r8, r3, #32
 800be4e:	bfbc      	itt	lt
 800be50:	4632      	movlt	r2, r6
 800be52:	4616      	movlt	r6, r2
 800be54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be58:	d005      	beq.n	800be66 <__cvt+0x42>
 800be5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be5e:	d100      	bne.n	800be62 <__cvt+0x3e>
 800be60:	3401      	adds	r4, #1
 800be62:	2102      	movs	r1, #2
 800be64:	e000      	b.n	800be68 <__cvt+0x44>
 800be66:	2103      	movs	r1, #3
 800be68:	ab03      	add	r3, sp, #12
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	ab02      	add	r3, sp, #8
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	ec47 6b10 	vmov	d0, r6, r7
 800be74:	4653      	mov	r3, sl
 800be76:	4622      	mov	r2, r4
 800be78:	f001 f8ea 	bl	800d050 <_dtoa_r>
 800be7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be80:	4605      	mov	r5, r0
 800be82:	d119      	bne.n	800beb8 <__cvt+0x94>
 800be84:	f019 0f01 	tst.w	r9, #1
 800be88:	d00e      	beq.n	800bea8 <__cvt+0x84>
 800be8a:	eb00 0904 	add.w	r9, r0, r4
 800be8e:	2200      	movs	r2, #0
 800be90:	2300      	movs	r3, #0
 800be92:	4630      	mov	r0, r6
 800be94:	4639      	mov	r1, r7
 800be96:	f7f4 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 800be9a:	b108      	cbz	r0, 800bea0 <__cvt+0x7c>
 800be9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bea0:	2230      	movs	r2, #48	@ 0x30
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	454b      	cmp	r3, r9
 800bea6:	d31e      	bcc.n	800bee6 <__cvt+0xc2>
 800bea8:	9b03      	ldr	r3, [sp, #12]
 800beaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beac:	1b5b      	subs	r3, r3, r5
 800beae:	4628      	mov	r0, r5
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	b004      	add	sp, #16
 800beb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bebc:	eb00 0904 	add.w	r9, r0, r4
 800bec0:	d1e5      	bne.n	800be8e <__cvt+0x6a>
 800bec2:	7803      	ldrb	r3, [r0, #0]
 800bec4:	2b30      	cmp	r3, #48	@ 0x30
 800bec6:	d10a      	bne.n	800bede <__cvt+0xba>
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	4630      	mov	r0, r6
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bed4:	b918      	cbnz	r0, 800bede <__cvt+0xba>
 800bed6:	f1c4 0401 	rsb	r4, r4, #1
 800beda:	f8ca 4000 	str.w	r4, [sl]
 800bede:	f8da 3000 	ldr.w	r3, [sl]
 800bee2:	4499      	add	r9, r3
 800bee4:	e7d3      	b.n	800be8e <__cvt+0x6a>
 800bee6:	1c59      	adds	r1, r3, #1
 800bee8:	9103      	str	r1, [sp, #12]
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e7d9      	b.n	800bea2 <__cvt+0x7e>

0800beee <__exponent>:
 800beee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef0:	2900      	cmp	r1, #0
 800bef2:	bfba      	itte	lt
 800bef4:	4249      	neglt	r1, r1
 800bef6:	232d      	movlt	r3, #45	@ 0x2d
 800bef8:	232b      	movge	r3, #43	@ 0x2b
 800befa:	2909      	cmp	r1, #9
 800befc:	7002      	strb	r2, [r0, #0]
 800befe:	7043      	strb	r3, [r0, #1]
 800bf00:	dd29      	ble.n	800bf56 <__exponent+0x68>
 800bf02:	f10d 0307 	add.w	r3, sp, #7
 800bf06:	461d      	mov	r5, r3
 800bf08:	270a      	movs	r7, #10
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf10:	fb07 1416 	mls	r4, r7, r6, r1
 800bf14:	3430      	adds	r4, #48	@ 0x30
 800bf16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	2c63      	cmp	r4, #99	@ 0x63
 800bf1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bf22:	4631      	mov	r1, r6
 800bf24:	dcf1      	bgt.n	800bf0a <__exponent+0x1c>
 800bf26:	3130      	adds	r1, #48	@ 0x30
 800bf28:	1e94      	subs	r4, r2, #2
 800bf2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf2e:	1c41      	adds	r1, r0, #1
 800bf30:	4623      	mov	r3, r4
 800bf32:	42ab      	cmp	r3, r5
 800bf34:	d30a      	bcc.n	800bf4c <__exponent+0x5e>
 800bf36:	f10d 0309 	add.w	r3, sp, #9
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	42ac      	cmp	r4, r5
 800bf3e:	bf88      	it	hi
 800bf40:	2300      	movhi	r3, #0
 800bf42:	3302      	adds	r3, #2
 800bf44:	4403      	add	r3, r0
 800bf46:	1a18      	subs	r0, r3, r0
 800bf48:	b003      	add	sp, #12
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf54:	e7ed      	b.n	800bf32 <__exponent+0x44>
 800bf56:	2330      	movs	r3, #48	@ 0x30
 800bf58:	3130      	adds	r1, #48	@ 0x30
 800bf5a:	7083      	strb	r3, [r0, #2]
 800bf5c:	70c1      	strb	r1, [r0, #3]
 800bf5e:	1d03      	adds	r3, r0, #4
 800bf60:	e7f1      	b.n	800bf46 <__exponent+0x58>
	...

0800bf64 <_printf_float>:
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	b08d      	sub	sp, #52	@ 0x34
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf70:	4616      	mov	r6, r2
 800bf72:	461f      	mov	r7, r3
 800bf74:	4605      	mov	r5, r0
 800bf76:	f000 ff65 	bl	800ce44 <_localeconv_r>
 800bf7a:	6803      	ldr	r3, [r0, #0]
 800bf7c:	9304      	str	r3, [sp, #16]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f4 f976 	bl	8000270 <strlen>
 800bf84:	2300      	movs	r3, #0
 800bf86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf88:	f8d8 3000 	ldr.w	r3, [r8]
 800bf8c:	9005      	str	r0, [sp, #20]
 800bf8e:	3307      	adds	r3, #7
 800bf90:	f023 0307 	bic.w	r3, r3, #7
 800bf94:	f103 0208 	add.w	r2, r3, #8
 800bf98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bf9c:	f8d4 b000 	ldr.w	fp, [r4]
 800bfa0:	f8c8 2000 	str.w	r2, [r8]
 800bfa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfa8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bfac:	9307      	str	r3, [sp, #28]
 800bfae:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bfb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfba:	4b9c      	ldr	r3, [pc, #624]	@ (800c22c <_printf_float+0x2c8>)
 800bfbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfc0:	f7f4 fdb4 	bl	8000b2c <__aeabi_dcmpun>
 800bfc4:	bb70      	cbnz	r0, 800c024 <_printf_float+0xc0>
 800bfc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfca:	4b98      	ldr	r3, [pc, #608]	@ (800c22c <_printf_float+0x2c8>)
 800bfcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfd0:	f7f4 fd8e 	bl	8000af0 <__aeabi_dcmple>
 800bfd4:	bb30      	cbnz	r0, 800c024 <_printf_float+0xc0>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	f7f4 fd7d 	bl	8000adc <__aeabi_dcmplt>
 800bfe2:	b110      	cbz	r0, 800bfea <_printf_float+0x86>
 800bfe4:	232d      	movs	r3, #45	@ 0x2d
 800bfe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfea:	4a91      	ldr	r2, [pc, #580]	@ (800c230 <_printf_float+0x2cc>)
 800bfec:	4b91      	ldr	r3, [pc, #580]	@ (800c234 <_printf_float+0x2d0>)
 800bfee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bff2:	bf94      	ite	ls
 800bff4:	4690      	movls	r8, r2
 800bff6:	4698      	movhi	r8, r3
 800bff8:	2303      	movs	r3, #3
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	f02b 0304 	bic.w	r3, fp, #4
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	9700      	str	r7, [sp, #0]
 800c008:	4633      	mov	r3, r6
 800c00a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c00c:	4621      	mov	r1, r4
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 f9d2 	bl	800c3b8 <_printf_common>
 800c014:	3001      	adds	r0, #1
 800c016:	f040 808d 	bne.w	800c134 <_printf_float+0x1d0>
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c01e:	b00d      	add	sp, #52	@ 0x34
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	4642      	mov	r2, r8
 800c026:	464b      	mov	r3, r9
 800c028:	4640      	mov	r0, r8
 800c02a:	4649      	mov	r1, r9
 800c02c:	f7f4 fd7e 	bl	8000b2c <__aeabi_dcmpun>
 800c030:	b140      	cbz	r0, 800c044 <_printf_float+0xe0>
 800c032:	464b      	mov	r3, r9
 800c034:	2b00      	cmp	r3, #0
 800c036:	bfbc      	itt	lt
 800c038:	232d      	movlt	r3, #45	@ 0x2d
 800c03a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c03e:	4a7e      	ldr	r2, [pc, #504]	@ (800c238 <_printf_float+0x2d4>)
 800c040:	4b7e      	ldr	r3, [pc, #504]	@ (800c23c <_printf_float+0x2d8>)
 800c042:	e7d4      	b.n	800bfee <_printf_float+0x8a>
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c04a:	9206      	str	r2, [sp, #24]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	d13b      	bne.n	800c0c8 <_printf_float+0x164>
 800c050:	2306      	movs	r3, #6
 800c052:	6063      	str	r3, [r4, #4]
 800c054:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c058:	2300      	movs	r3, #0
 800c05a:	6022      	str	r2, [r4, #0]
 800c05c:	9303      	str	r3, [sp, #12]
 800c05e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c060:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c064:	ab09      	add	r3, sp, #36	@ 0x24
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	6861      	ldr	r1, [r4, #4]
 800c06a:	ec49 8b10 	vmov	d0, r8, r9
 800c06e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c072:	4628      	mov	r0, r5
 800c074:	f7ff fed6 	bl	800be24 <__cvt>
 800c078:	9b06      	ldr	r3, [sp, #24]
 800c07a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c07c:	2b47      	cmp	r3, #71	@ 0x47
 800c07e:	4680      	mov	r8, r0
 800c080:	d129      	bne.n	800c0d6 <_printf_float+0x172>
 800c082:	1cc8      	adds	r0, r1, #3
 800c084:	db02      	blt.n	800c08c <_printf_float+0x128>
 800c086:	6863      	ldr	r3, [r4, #4]
 800c088:	4299      	cmp	r1, r3
 800c08a:	dd41      	ble.n	800c110 <_printf_float+0x1ac>
 800c08c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c090:	fa5f fa8a 	uxtb.w	sl, sl
 800c094:	3901      	subs	r1, #1
 800c096:	4652      	mov	r2, sl
 800c098:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c09c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c09e:	f7ff ff26 	bl	800beee <__exponent>
 800c0a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0a4:	1813      	adds	r3, r2, r0
 800c0a6:	2a01      	cmp	r2, #1
 800c0a8:	4681      	mov	r9, r0
 800c0aa:	6123      	str	r3, [r4, #16]
 800c0ac:	dc02      	bgt.n	800c0b4 <_printf_float+0x150>
 800c0ae:	6822      	ldr	r2, [r4, #0]
 800c0b0:	07d2      	lsls	r2, r2, #31
 800c0b2:	d501      	bpl.n	800c0b8 <_printf_float+0x154>
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0a2      	beq.n	800c006 <_printf_float+0xa2>
 800c0c0:	232d      	movs	r3, #45	@ 0x2d
 800c0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0c6:	e79e      	b.n	800c006 <_printf_float+0xa2>
 800c0c8:	9a06      	ldr	r2, [sp, #24]
 800c0ca:	2a47      	cmp	r2, #71	@ 0x47
 800c0cc:	d1c2      	bne.n	800c054 <_printf_float+0xf0>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1c0      	bne.n	800c054 <_printf_float+0xf0>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e7bd      	b.n	800c052 <_printf_float+0xee>
 800c0d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0da:	d9db      	bls.n	800c094 <_printf_float+0x130>
 800c0dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0e0:	d118      	bne.n	800c114 <_printf_float+0x1b0>
 800c0e2:	2900      	cmp	r1, #0
 800c0e4:	6863      	ldr	r3, [r4, #4]
 800c0e6:	dd0b      	ble.n	800c100 <_printf_float+0x19c>
 800c0e8:	6121      	str	r1, [r4, #16]
 800c0ea:	b913      	cbnz	r3, 800c0f2 <_printf_float+0x18e>
 800c0ec:	6822      	ldr	r2, [r4, #0]
 800c0ee:	07d0      	lsls	r0, r2, #31
 800c0f0:	d502      	bpl.n	800c0f8 <_printf_float+0x194>
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	440b      	add	r3, r1
 800c0f6:	6123      	str	r3, [r4, #16]
 800c0f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c0fa:	f04f 0900 	mov.w	r9, #0
 800c0fe:	e7db      	b.n	800c0b8 <_printf_float+0x154>
 800c100:	b913      	cbnz	r3, 800c108 <_printf_float+0x1a4>
 800c102:	6822      	ldr	r2, [r4, #0]
 800c104:	07d2      	lsls	r2, r2, #31
 800c106:	d501      	bpl.n	800c10c <_printf_float+0x1a8>
 800c108:	3302      	adds	r3, #2
 800c10a:	e7f4      	b.n	800c0f6 <_printf_float+0x192>
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f2      	b.n	800c0f6 <_printf_float+0x192>
 800c110:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c116:	4299      	cmp	r1, r3
 800c118:	db05      	blt.n	800c126 <_printf_float+0x1c2>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	6121      	str	r1, [r4, #16]
 800c11e:	07d8      	lsls	r0, r3, #31
 800c120:	d5ea      	bpl.n	800c0f8 <_printf_float+0x194>
 800c122:	1c4b      	adds	r3, r1, #1
 800c124:	e7e7      	b.n	800c0f6 <_printf_float+0x192>
 800c126:	2900      	cmp	r1, #0
 800c128:	bfd4      	ite	le
 800c12a:	f1c1 0202 	rsble	r2, r1, #2
 800c12e:	2201      	movgt	r2, #1
 800c130:	4413      	add	r3, r2
 800c132:	e7e0      	b.n	800c0f6 <_printf_float+0x192>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	055a      	lsls	r2, r3, #21
 800c138:	d407      	bmi.n	800c14a <_printf_float+0x1e6>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	4642      	mov	r2, r8
 800c13e:	4631      	mov	r1, r6
 800c140:	4628      	mov	r0, r5
 800c142:	47b8      	blx	r7
 800c144:	3001      	adds	r0, #1
 800c146:	d12b      	bne.n	800c1a0 <_printf_float+0x23c>
 800c148:	e767      	b.n	800c01a <_printf_float+0xb6>
 800c14a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c14e:	f240 80dd 	bls.w	800c30c <_printf_float+0x3a8>
 800c152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c156:	2200      	movs	r2, #0
 800c158:	2300      	movs	r3, #0
 800c15a:	f7f4 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d033      	beq.n	800c1ca <_printf_float+0x266>
 800c162:	4a37      	ldr	r2, [pc, #220]	@ (800c240 <_printf_float+0x2dc>)
 800c164:	2301      	movs	r3, #1
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	47b8      	blx	r7
 800c16c:	3001      	adds	r0, #1
 800c16e:	f43f af54 	beq.w	800c01a <_printf_float+0xb6>
 800c172:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c176:	4543      	cmp	r3, r8
 800c178:	db02      	blt.n	800c180 <_printf_float+0x21c>
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	07d8      	lsls	r0, r3, #31
 800c17e:	d50f      	bpl.n	800c1a0 <_printf_float+0x23c>
 800c180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c184:	4631      	mov	r1, r6
 800c186:	4628      	mov	r0, r5
 800c188:	47b8      	blx	r7
 800c18a:	3001      	adds	r0, #1
 800c18c:	f43f af45 	beq.w	800c01a <_printf_float+0xb6>
 800c190:	f04f 0900 	mov.w	r9, #0
 800c194:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c198:	f104 0a1a 	add.w	sl, r4, #26
 800c19c:	45c8      	cmp	r8, r9
 800c19e:	dc09      	bgt.n	800c1b4 <_printf_float+0x250>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	079b      	lsls	r3, r3, #30
 800c1a4:	f100 8103 	bmi.w	800c3ae <_printf_float+0x44a>
 800c1a8:	68e0      	ldr	r0, [r4, #12]
 800c1aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ac:	4298      	cmp	r0, r3
 800c1ae:	bfb8      	it	lt
 800c1b0:	4618      	movlt	r0, r3
 800c1b2:	e734      	b.n	800c01e <_printf_float+0xba>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4652      	mov	r2, sl
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f af2b 	beq.w	800c01a <_printf_float+0xb6>
 800c1c4:	f109 0901 	add.w	r9, r9, #1
 800c1c8:	e7e8      	b.n	800c19c <_printf_float+0x238>
 800c1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dc39      	bgt.n	800c244 <_printf_float+0x2e0>
 800c1d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c240 <_printf_float+0x2dc>)
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f af1d 	beq.w	800c01a <_printf_float+0xb6>
 800c1e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c1e4:	ea59 0303 	orrs.w	r3, r9, r3
 800c1e8:	d102      	bne.n	800c1f0 <_printf_float+0x28c>
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	07d9      	lsls	r1, r3, #31
 800c1ee:	d5d7      	bpl.n	800c1a0 <_printf_float+0x23c>
 800c1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b8      	blx	r7
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f43f af0d 	beq.w	800c01a <_printf_float+0xb6>
 800c200:	f04f 0a00 	mov.w	sl, #0
 800c204:	f104 0b1a 	add.w	fp, r4, #26
 800c208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c20a:	425b      	negs	r3, r3
 800c20c:	4553      	cmp	r3, sl
 800c20e:	dc01      	bgt.n	800c214 <_printf_float+0x2b0>
 800c210:	464b      	mov	r3, r9
 800c212:	e793      	b.n	800c13c <_printf_float+0x1d8>
 800c214:	2301      	movs	r3, #1
 800c216:	465a      	mov	r2, fp
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f aefb 	beq.w	800c01a <_printf_float+0xb6>
 800c224:	f10a 0a01 	add.w	sl, sl, #1
 800c228:	e7ee      	b.n	800c208 <_printf_float+0x2a4>
 800c22a:	bf00      	nop
 800c22c:	7fefffff 	.word	0x7fefffff
 800c230:	08010f18 	.word	0x08010f18
 800c234:	08010f1c 	.word	0x08010f1c
 800c238:	08010f20 	.word	0x08010f20
 800c23c:	08010f24 	.word	0x08010f24
 800c240:	080112b8 	.word	0x080112b8
 800c244:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c246:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c24a:	4553      	cmp	r3, sl
 800c24c:	bfa8      	it	ge
 800c24e:	4653      	movge	r3, sl
 800c250:	2b00      	cmp	r3, #0
 800c252:	4699      	mov	r9, r3
 800c254:	dc36      	bgt.n	800c2c4 <_printf_float+0x360>
 800c256:	f04f 0b00 	mov.w	fp, #0
 800c25a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c25e:	f104 021a 	add.w	r2, r4, #26
 800c262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c264:	9306      	str	r3, [sp, #24]
 800c266:	eba3 0309 	sub.w	r3, r3, r9
 800c26a:	455b      	cmp	r3, fp
 800c26c:	dc31      	bgt.n	800c2d2 <_printf_float+0x36e>
 800c26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c270:	459a      	cmp	sl, r3
 800c272:	dc3a      	bgt.n	800c2ea <_printf_float+0x386>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	07da      	lsls	r2, r3, #31
 800c278:	d437      	bmi.n	800c2ea <_printf_float+0x386>
 800c27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c27c:	ebaa 0903 	sub.w	r9, sl, r3
 800c280:	9b06      	ldr	r3, [sp, #24]
 800c282:	ebaa 0303 	sub.w	r3, sl, r3
 800c286:	4599      	cmp	r9, r3
 800c288:	bfa8      	it	ge
 800c28a:	4699      	movge	r9, r3
 800c28c:	f1b9 0f00 	cmp.w	r9, #0
 800c290:	dc33      	bgt.n	800c2fa <_printf_float+0x396>
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c29a:	f104 0b1a 	add.w	fp, r4, #26
 800c29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a0:	ebaa 0303 	sub.w	r3, sl, r3
 800c2a4:	eba3 0309 	sub.w	r3, r3, r9
 800c2a8:	4543      	cmp	r3, r8
 800c2aa:	f77f af79 	ble.w	800c1a0 <_printf_float+0x23c>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	465a      	mov	r2, fp
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b8      	blx	r7
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f43f aeae 	beq.w	800c01a <_printf_float+0xb6>
 800c2be:	f108 0801 	add.w	r8, r8, #1
 800c2c2:	e7ec      	b.n	800c29e <_printf_float+0x33a>
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b8      	blx	r7
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d1c2      	bne.n	800c256 <_printf_float+0x2f2>
 800c2d0:	e6a3      	b.n	800c01a <_printf_float+0xb6>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	9206      	str	r2, [sp, #24]
 800c2da:	47b8      	blx	r7
 800c2dc:	3001      	adds	r0, #1
 800c2de:	f43f ae9c 	beq.w	800c01a <_printf_float+0xb6>
 800c2e2:	9a06      	ldr	r2, [sp, #24]
 800c2e4:	f10b 0b01 	add.w	fp, fp, #1
 800c2e8:	e7bb      	b.n	800c262 <_printf_float+0x2fe>
 800c2ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b8      	blx	r7
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	d1c0      	bne.n	800c27a <_printf_float+0x316>
 800c2f8:	e68f      	b.n	800c01a <_printf_float+0xb6>
 800c2fa:	9a06      	ldr	r2, [sp, #24]
 800c2fc:	464b      	mov	r3, r9
 800c2fe:	4442      	add	r2, r8
 800c300:	4631      	mov	r1, r6
 800c302:	4628      	mov	r0, r5
 800c304:	47b8      	blx	r7
 800c306:	3001      	adds	r0, #1
 800c308:	d1c3      	bne.n	800c292 <_printf_float+0x32e>
 800c30a:	e686      	b.n	800c01a <_printf_float+0xb6>
 800c30c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c310:	f1ba 0f01 	cmp.w	sl, #1
 800c314:	dc01      	bgt.n	800c31a <_printf_float+0x3b6>
 800c316:	07db      	lsls	r3, r3, #31
 800c318:	d536      	bpl.n	800c388 <_printf_float+0x424>
 800c31a:	2301      	movs	r3, #1
 800c31c:	4642      	mov	r2, r8
 800c31e:	4631      	mov	r1, r6
 800c320:	4628      	mov	r0, r5
 800c322:	47b8      	blx	r7
 800c324:	3001      	adds	r0, #1
 800c326:	f43f ae78 	beq.w	800c01a <_printf_float+0xb6>
 800c32a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c32e:	4631      	mov	r1, r6
 800c330:	4628      	mov	r0, r5
 800c332:	47b8      	blx	r7
 800c334:	3001      	adds	r0, #1
 800c336:	f43f ae70 	beq.w	800c01a <_printf_float+0xb6>
 800c33a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c33e:	2200      	movs	r2, #0
 800c340:	2300      	movs	r3, #0
 800c342:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c346:	f7f4 fbbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c34a:	b9c0      	cbnz	r0, 800c37e <_printf_float+0x41a>
 800c34c:	4653      	mov	r3, sl
 800c34e:	f108 0201 	add.w	r2, r8, #1
 800c352:	4631      	mov	r1, r6
 800c354:	4628      	mov	r0, r5
 800c356:	47b8      	blx	r7
 800c358:	3001      	adds	r0, #1
 800c35a:	d10c      	bne.n	800c376 <_printf_float+0x412>
 800c35c:	e65d      	b.n	800c01a <_printf_float+0xb6>
 800c35e:	2301      	movs	r3, #1
 800c360:	465a      	mov	r2, fp
 800c362:	4631      	mov	r1, r6
 800c364:	4628      	mov	r0, r5
 800c366:	47b8      	blx	r7
 800c368:	3001      	adds	r0, #1
 800c36a:	f43f ae56 	beq.w	800c01a <_printf_float+0xb6>
 800c36e:	f108 0801 	add.w	r8, r8, #1
 800c372:	45d0      	cmp	r8, sl
 800c374:	dbf3      	blt.n	800c35e <_printf_float+0x3fa>
 800c376:	464b      	mov	r3, r9
 800c378:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c37c:	e6df      	b.n	800c13e <_printf_float+0x1da>
 800c37e:	f04f 0800 	mov.w	r8, #0
 800c382:	f104 0b1a 	add.w	fp, r4, #26
 800c386:	e7f4      	b.n	800c372 <_printf_float+0x40e>
 800c388:	2301      	movs	r3, #1
 800c38a:	4642      	mov	r2, r8
 800c38c:	e7e1      	b.n	800c352 <_printf_float+0x3ee>
 800c38e:	2301      	movs	r3, #1
 800c390:	464a      	mov	r2, r9
 800c392:	4631      	mov	r1, r6
 800c394:	4628      	mov	r0, r5
 800c396:	47b8      	blx	r7
 800c398:	3001      	adds	r0, #1
 800c39a:	f43f ae3e 	beq.w	800c01a <_printf_float+0xb6>
 800c39e:	f108 0801 	add.w	r8, r8, #1
 800c3a2:	68e3      	ldr	r3, [r4, #12]
 800c3a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3a6:	1a5b      	subs	r3, r3, r1
 800c3a8:	4543      	cmp	r3, r8
 800c3aa:	dcf0      	bgt.n	800c38e <_printf_float+0x42a>
 800c3ac:	e6fc      	b.n	800c1a8 <_printf_float+0x244>
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	f104 0919 	add.w	r9, r4, #25
 800c3b6:	e7f4      	b.n	800c3a2 <_printf_float+0x43e>

0800c3b8 <_printf_common>:
 800c3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3bc:	4616      	mov	r6, r2
 800c3be:	4698      	mov	r8, r3
 800c3c0:	688a      	ldr	r2, [r1, #8]
 800c3c2:	690b      	ldr	r3, [r1, #16]
 800c3c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	bfb8      	it	lt
 800c3cc:	4613      	movlt	r3, r2
 800c3ce:	6033      	str	r3, [r6, #0]
 800c3d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	b10a      	cbz	r2, 800c3de <_printf_common+0x26>
 800c3da:	3301      	adds	r3, #1
 800c3dc:	6033      	str	r3, [r6, #0]
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	0699      	lsls	r1, r3, #26
 800c3e2:	bf42      	ittt	mi
 800c3e4:	6833      	ldrmi	r3, [r6, #0]
 800c3e6:	3302      	addmi	r3, #2
 800c3e8:	6033      	strmi	r3, [r6, #0]
 800c3ea:	6825      	ldr	r5, [r4, #0]
 800c3ec:	f015 0506 	ands.w	r5, r5, #6
 800c3f0:	d106      	bne.n	800c400 <_printf_common+0x48>
 800c3f2:	f104 0a19 	add.w	sl, r4, #25
 800c3f6:	68e3      	ldr	r3, [r4, #12]
 800c3f8:	6832      	ldr	r2, [r6, #0]
 800c3fa:	1a9b      	subs	r3, r3, r2
 800c3fc:	42ab      	cmp	r3, r5
 800c3fe:	dc26      	bgt.n	800c44e <_printf_common+0x96>
 800c400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	3b00      	subs	r3, #0
 800c408:	bf18      	it	ne
 800c40a:	2301      	movne	r3, #1
 800c40c:	0692      	lsls	r2, r2, #26
 800c40e:	d42b      	bmi.n	800c468 <_printf_common+0xb0>
 800c410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c414:	4641      	mov	r1, r8
 800c416:	4638      	mov	r0, r7
 800c418:	47c8      	blx	r9
 800c41a:	3001      	adds	r0, #1
 800c41c:	d01e      	beq.n	800c45c <_printf_common+0xa4>
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	6922      	ldr	r2, [r4, #16]
 800c422:	f003 0306 	and.w	r3, r3, #6
 800c426:	2b04      	cmp	r3, #4
 800c428:	bf02      	ittt	eq
 800c42a:	68e5      	ldreq	r5, [r4, #12]
 800c42c:	6833      	ldreq	r3, [r6, #0]
 800c42e:	1aed      	subeq	r5, r5, r3
 800c430:	68a3      	ldr	r3, [r4, #8]
 800c432:	bf0c      	ite	eq
 800c434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c438:	2500      	movne	r5, #0
 800c43a:	4293      	cmp	r3, r2
 800c43c:	bfc4      	itt	gt
 800c43e:	1a9b      	subgt	r3, r3, r2
 800c440:	18ed      	addgt	r5, r5, r3
 800c442:	2600      	movs	r6, #0
 800c444:	341a      	adds	r4, #26
 800c446:	42b5      	cmp	r5, r6
 800c448:	d11a      	bne.n	800c480 <_printf_common+0xc8>
 800c44a:	2000      	movs	r0, #0
 800c44c:	e008      	b.n	800c460 <_printf_common+0xa8>
 800c44e:	2301      	movs	r3, #1
 800c450:	4652      	mov	r2, sl
 800c452:	4641      	mov	r1, r8
 800c454:	4638      	mov	r0, r7
 800c456:	47c8      	blx	r9
 800c458:	3001      	adds	r0, #1
 800c45a:	d103      	bne.n	800c464 <_printf_common+0xac>
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c464:	3501      	adds	r5, #1
 800c466:	e7c6      	b.n	800c3f6 <_printf_common+0x3e>
 800c468:	18e1      	adds	r1, r4, r3
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	2030      	movs	r0, #48	@ 0x30
 800c46e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c472:	4422      	add	r2, r4
 800c474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c47c:	3302      	adds	r3, #2
 800c47e:	e7c7      	b.n	800c410 <_printf_common+0x58>
 800c480:	2301      	movs	r3, #1
 800c482:	4622      	mov	r2, r4
 800c484:	4641      	mov	r1, r8
 800c486:	4638      	mov	r0, r7
 800c488:	47c8      	blx	r9
 800c48a:	3001      	adds	r0, #1
 800c48c:	d0e6      	beq.n	800c45c <_printf_common+0xa4>
 800c48e:	3601      	adds	r6, #1
 800c490:	e7d9      	b.n	800c446 <_printf_common+0x8e>
	...

0800c494 <_printf_i>:
 800c494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	7e0f      	ldrb	r7, [r1, #24]
 800c49a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c49c:	2f78      	cmp	r7, #120	@ 0x78
 800c49e:	4691      	mov	r9, r2
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	469a      	mov	sl, r3
 800c4a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4aa:	d807      	bhi.n	800c4bc <_printf_i+0x28>
 800c4ac:	2f62      	cmp	r7, #98	@ 0x62
 800c4ae:	d80a      	bhi.n	800c4c6 <_printf_i+0x32>
 800c4b0:	2f00      	cmp	r7, #0
 800c4b2:	f000 80d2 	beq.w	800c65a <_printf_i+0x1c6>
 800c4b6:	2f58      	cmp	r7, #88	@ 0x58
 800c4b8:	f000 80b9 	beq.w	800c62e <_printf_i+0x19a>
 800c4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4c4:	e03a      	b.n	800c53c <_printf_i+0xa8>
 800c4c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4ca:	2b15      	cmp	r3, #21
 800c4cc:	d8f6      	bhi.n	800c4bc <_printf_i+0x28>
 800c4ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c4d4 <_printf_i+0x40>)
 800c4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4d4:	0800c52d 	.word	0x0800c52d
 800c4d8:	0800c541 	.word	0x0800c541
 800c4dc:	0800c4bd 	.word	0x0800c4bd
 800c4e0:	0800c4bd 	.word	0x0800c4bd
 800c4e4:	0800c4bd 	.word	0x0800c4bd
 800c4e8:	0800c4bd 	.word	0x0800c4bd
 800c4ec:	0800c541 	.word	0x0800c541
 800c4f0:	0800c4bd 	.word	0x0800c4bd
 800c4f4:	0800c4bd 	.word	0x0800c4bd
 800c4f8:	0800c4bd 	.word	0x0800c4bd
 800c4fc:	0800c4bd 	.word	0x0800c4bd
 800c500:	0800c641 	.word	0x0800c641
 800c504:	0800c56b 	.word	0x0800c56b
 800c508:	0800c5fb 	.word	0x0800c5fb
 800c50c:	0800c4bd 	.word	0x0800c4bd
 800c510:	0800c4bd 	.word	0x0800c4bd
 800c514:	0800c663 	.word	0x0800c663
 800c518:	0800c4bd 	.word	0x0800c4bd
 800c51c:	0800c56b 	.word	0x0800c56b
 800c520:	0800c4bd 	.word	0x0800c4bd
 800c524:	0800c4bd 	.word	0x0800c4bd
 800c528:	0800c603 	.word	0x0800c603
 800c52c:	6833      	ldr	r3, [r6, #0]
 800c52e:	1d1a      	adds	r2, r3, #4
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6032      	str	r2, [r6, #0]
 800c534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c53c:	2301      	movs	r3, #1
 800c53e:	e09d      	b.n	800c67c <_printf_i+0x1e8>
 800c540:	6833      	ldr	r3, [r6, #0]
 800c542:	6820      	ldr	r0, [r4, #0]
 800c544:	1d19      	adds	r1, r3, #4
 800c546:	6031      	str	r1, [r6, #0]
 800c548:	0606      	lsls	r6, r0, #24
 800c54a:	d501      	bpl.n	800c550 <_printf_i+0xbc>
 800c54c:	681d      	ldr	r5, [r3, #0]
 800c54e:	e003      	b.n	800c558 <_printf_i+0xc4>
 800c550:	0645      	lsls	r5, r0, #25
 800c552:	d5fb      	bpl.n	800c54c <_printf_i+0xb8>
 800c554:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c558:	2d00      	cmp	r5, #0
 800c55a:	da03      	bge.n	800c564 <_printf_i+0xd0>
 800c55c:	232d      	movs	r3, #45	@ 0x2d
 800c55e:	426d      	negs	r5, r5
 800c560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c564:	4859      	ldr	r0, [pc, #356]	@ (800c6cc <_printf_i+0x238>)
 800c566:	230a      	movs	r3, #10
 800c568:	e011      	b.n	800c58e <_printf_i+0xfa>
 800c56a:	6821      	ldr	r1, [r4, #0]
 800c56c:	6833      	ldr	r3, [r6, #0]
 800c56e:	0608      	lsls	r0, r1, #24
 800c570:	f853 5b04 	ldr.w	r5, [r3], #4
 800c574:	d402      	bmi.n	800c57c <_printf_i+0xe8>
 800c576:	0649      	lsls	r1, r1, #25
 800c578:	bf48      	it	mi
 800c57a:	b2ad      	uxthmi	r5, r5
 800c57c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c57e:	4853      	ldr	r0, [pc, #332]	@ (800c6cc <_printf_i+0x238>)
 800c580:	6033      	str	r3, [r6, #0]
 800c582:	bf14      	ite	ne
 800c584:	230a      	movne	r3, #10
 800c586:	2308      	moveq	r3, #8
 800c588:	2100      	movs	r1, #0
 800c58a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c58e:	6866      	ldr	r6, [r4, #4]
 800c590:	60a6      	str	r6, [r4, #8]
 800c592:	2e00      	cmp	r6, #0
 800c594:	bfa2      	ittt	ge
 800c596:	6821      	ldrge	r1, [r4, #0]
 800c598:	f021 0104 	bicge.w	r1, r1, #4
 800c59c:	6021      	strge	r1, [r4, #0]
 800c59e:	b90d      	cbnz	r5, 800c5a4 <_printf_i+0x110>
 800c5a0:	2e00      	cmp	r6, #0
 800c5a2:	d04b      	beq.n	800c63c <_printf_i+0x1a8>
 800c5a4:	4616      	mov	r6, r2
 800c5a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5aa:	fb03 5711 	mls	r7, r3, r1, r5
 800c5ae:	5dc7      	ldrb	r7, [r0, r7]
 800c5b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5b4:	462f      	mov	r7, r5
 800c5b6:	42bb      	cmp	r3, r7
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	d9f4      	bls.n	800c5a6 <_printf_i+0x112>
 800c5bc:	2b08      	cmp	r3, #8
 800c5be:	d10b      	bne.n	800c5d8 <_printf_i+0x144>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	07df      	lsls	r7, r3, #31
 800c5c4:	d508      	bpl.n	800c5d8 <_printf_i+0x144>
 800c5c6:	6923      	ldr	r3, [r4, #16]
 800c5c8:	6861      	ldr	r1, [r4, #4]
 800c5ca:	4299      	cmp	r1, r3
 800c5cc:	bfde      	ittt	le
 800c5ce:	2330      	movle	r3, #48	@ 0x30
 800c5d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c5d8:	1b92      	subs	r2, r2, r6
 800c5da:	6122      	str	r2, [r4, #16]
 800c5dc:	f8cd a000 	str.w	sl, [sp]
 800c5e0:	464b      	mov	r3, r9
 800c5e2:	aa03      	add	r2, sp, #12
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	f7ff fee6 	bl	800c3b8 <_printf_common>
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	d14a      	bne.n	800c686 <_printf_i+0x1f2>
 800c5f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5f4:	b004      	add	sp, #16
 800c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	f043 0320 	orr.w	r3, r3, #32
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	4833      	ldr	r0, [pc, #204]	@ (800c6d0 <_printf_i+0x23c>)
 800c604:	2778      	movs	r7, #120	@ 0x78
 800c606:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	6831      	ldr	r1, [r6, #0]
 800c60e:	061f      	lsls	r7, r3, #24
 800c610:	f851 5b04 	ldr.w	r5, [r1], #4
 800c614:	d402      	bmi.n	800c61c <_printf_i+0x188>
 800c616:	065f      	lsls	r7, r3, #25
 800c618:	bf48      	it	mi
 800c61a:	b2ad      	uxthmi	r5, r5
 800c61c:	6031      	str	r1, [r6, #0]
 800c61e:	07d9      	lsls	r1, r3, #31
 800c620:	bf44      	itt	mi
 800c622:	f043 0320 	orrmi.w	r3, r3, #32
 800c626:	6023      	strmi	r3, [r4, #0]
 800c628:	b11d      	cbz	r5, 800c632 <_printf_i+0x19e>
 800c62a:	2310      	movs	r3, #16
 800c62c:	e7ac      	b.n	800c588 <_printf_i+0xf4>
 800c62e:	4827      	ldr	r0, [pc, #156]	@ (800c6cc <_printf_i+0x238>)
 800c630:	e7e9      	b.n	800c606 <_printf_i+0x172>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f023 0320 	bic.w	r3, r3, #32
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	e7f6      	b.n	800c62a <_printf_i+0x196>
 800c63c:	4616      	mov	r6, r2
 800c63e:	e7bd      	b.n	800c5bc <_printf_i+0x128>
 800c640:	6833      	ldr	r3, [r6, #0]
 800c642:	6825      	ldr	r5, [r4, #0]
 800c644:	6961      	ldr	r1, [r4, #20]
 800c646:	1d18      	adds	r0, r3, #4
 800c648:	6030      	str	r0, [r6, #0]
 800c64a:	062e      	lsls	r6, r5, #24
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	d501      	bpl.n	800c654 <_printf_i+0x1c0>
 800c650:	6019      	str	r1, [r3, #0]
 800c652:	e002      	b.n	800c65a <_printf_i+0x1c6>
 800c654:	0668      	lsls	r0, r5, #25
 800c656:	d5fb      	bpl.n	800c650 <_printf_i+0x1bc>
 800c658:	8019      	strh	r1, [r3, #0]
 800c65a:	2300      	movs	r3, #0
 800c65c:	6123      	str	r3, [r4, #16]
 800c65e:	4616      	mov	r6, r2
 800c660:	e7bc      	b.n	800c5dc <_printf_i+0x148>
 800c662:	6833      	ldr	r3, [r6, #0]
 800c664:	1d1a      	adds	r2, r3, #4
 800c666:	6032      	str	r2, [r6, #0]
 800c668:	681e      	ldr	r6, [r3, #0]
 800c66a:	6862      	ldr	r2, [r4, #4]
 800c66c:	2100      	movs	r1, #0
 800c66e:	4630      	mov	r0, r6
 800c670:	f7f3 fdae 	bl	80001d0 <memchr>
 800c674:	b108      	cbz	r0, 800c67a <_printf_i+0x1e6>
 800c676:	1b80      	subs	r0, r0, r6
 800c678:	6060      	str	r0, [r4, #4]
 800c67a:	6863      	ldr	r3, [r4, #4]
 800c67c:	6123      	str	r3, [r4, #16]
 800c67e:	2300      	movs	r3, #0
 800c680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c684:	e7aa      	b.n	800c5dc <_printf_i+0x148>
 800c686:	6923      	ldr	r3, [r4, #16]
 800c688:	4632      	mov	r2, r6
 800c68a:	4649      	mov	r1, r9
 800c68c:	4640      	mov	r0, r8
 800c68e:	47d0      	blx	sl
 800c690:	3001      	adds	r0, #1
 800c692:	d0ad      	beq.n	800c5f0 <_printf_i+0x15c>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	079b      	lsls	r3, r3, #30
 800c698:	d413      	bmi.n	800c6c2 <_printf_i+0x22e>
 800c69a:	68e0      	ldr	r0, [r4, #12]
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	4298      	cmp	r0, r3
 800c6a0:	bfb8      	it	lt
 800c6a2:	4618      	movlt	r0, r3
 800c6a4:	e7a6      	b.n	800c5f4 <_printf_i+0x160>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	47d0      	blx	sl
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d09d      	beq.n	800c5f0 <_printf_i+0x15c>
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	68e3      	ldr	r3, [r4, #12]
 800c6b8:	9903      	ldr	r1, [sp, #12]
 800c6ba:	1a5b      	subs	r3, r3, r1
 800c6bc:	42ab      	cmp	r3, r5
 800c6be:	dcf2      	bgt.n	800c6a6 <_printf_i+0x212>
 800c6c0:	e7eb      	b.n	800c69a <_printf_i+0x206>
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	f104 0619 	add.w	r6, r4, #25
 800c6c8:	e7f5      	b.n	800c6b6 <_printf_i+0x222>
 800c6ca:	bf00      	nop
 800c6cc:	08010f28 	.word	0x08010f28
 800c6d0:	08010f39 	.word	0x08010f39

0800c6d4 <_scanf_float>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b087      	sub	sp, #28
 800c6da:	4617      	mov	r7, r2
 800c6dc:	9303      	str	r3, [sp, #12]
 800c6de:	688b      	ldr	r3, [r1, #8]
 800c6e0:	1e5a      	subs	r2, r3, #1
 800c6e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6e6:	bf81      	itttt	hi
 800c6e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800c6f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6f4:	608b      	strhi	r3, [r1, #8]
 800c6f6:	680b      	ldr	r3, [r1, #0]
 800c6f8:	460a      	mov	r2, r1
 800c6fa:	f04f 0500 	mov.w	r5, #0
 800c6fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c702:	f842 3b1c 	str.w	r3, [r2], #28
 800c706:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c70a:	4680      	mov	r8, r0
 800c70c:	460c      	mov	r4, r1
 800c70e:	bf98      	it	ls
 800c710:	f04f 0b00 	movls.w	fp, #0
 800c714:	9201      	str	r2, [sp, #4]
 800c716:	4616      	mov	r6, r2
 800c718:	46aa      	mov	sl, r5
 800c71a:	46a9      	mov	r9, r5
 800c71c:	9502      	str	r5, [sp, #8]
 800c71e:	68a2      	ldr	r2, [r4, #8]
 800c720:	b152      	cbz	r2, 800c738 <_scanf_float+0x64>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	2b4e      	cmp	r3, #78	@ 0x4e
 800c728:	d864      	bhi.n	800c7f4 <_scanf_float+0x120>
 800c72a:	2b40      	cmp	r3, #64	@ 0x40
 800c72c:	d83c      	bhi.n	800c7a8 <_scanf_float+0xd4>
 800c72e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c732:	b2c8      	uxtb	r0, r1
 800c734:	280e      	cmp	r0, #14
 800c736:	d93a      	bls.n	800c7ae <_scanf_float+0xda>
 800c738:	f1b9 0f00 	cmp.w	r9, #0
 800c73c:	d003      	beq.n	800c746 <_scanf_float+0x72>
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c74a:	f1ba 0f01 	cmp.w	sl, #1
 800c74e:	f200 8117 	bhi.w	800c980 <_scanf_float+0x2ac>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	429e      	cmp	r6, r3
 800c756:	f200 8108 	bhi.w	800c96a <_scanf_float+0x296>
 800c75a:	2001      	movs	r0, #1
 800c75c:	b007      	add	sp, #28
 800c75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c762:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c766:	2a0d      	cmp	r2, #13
 800c768:	d8e6      	bhi.n	800c738 <_scanf_float+0x64>
 800c76a:	a101      	add	r1, pc, #4	@ (adr r1, 800c770 <_scanf_float+0x9c>)
 800c76c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c770:	0800c8b7 	.word	0x0800c8b7
 800c774:	0800c739 	.word	0x0800c739
 800c778:	0800c739 	.word	0x0800c739
 800c77c:	0800c739 	.word	0x0800c739
 800c780:	0800c917 	.word	0x0800c917
 800c784:	0800c8ef 	.word	0x0800c8ef
 800c788:	0800c739 	.word	0x0800c739
 800c78c:	0800c739 	.word	0x0800c739
 800c790:	0800c8c5 	.word	0x0800c8c5
 800c794:	0800c739 	.word	0x0800c739
 800c798:	0800c739 	.word	0x0800c739
 800c79c:	0800c739 	.word	0x0800c739
 800c7a0:	0800c739 	.word	0x0800c739
 800c7a4:	0800c87d 	.word	0x0800c87d
 800c7a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c7ac:	e7db      	b.n	800c766 <_scanf_float+0x92>
 800c7ae:	290e      	cmp	r1, #14
 800c7b0:	d8c2      	bhi.n	800c738 <_scanf_float+0x64>
 800c7b2:	a001      	add	r0, pc, #4	@ (adr r0, 800c7b8 <_scanf_float+0xe4>)
 800c7b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c7b8:	0800c86d 	.word	0x0800c86d
 800c7bc:	0800c739 	.word	0x0800c739
 800c7c0:	0800c86d 	.word	0x0800c86d
 800c7c4:	0800c903 	.word	0x0800c903
 800c7c8:	0800c739 	.word	0x0800c739
 800c7cc:	0800c815 	.word	0x0800c815
 800c7d0:	0800c853 	.word	0x0800c853
 800c7d4:	0800c853 	.word	0x0800c853
 800c7d8:	0800c853 	.word	0x0800c853
 800c7dc:	0800c853 	.word	0x0800c853
 800c7e0:	0800c853 	.word	0x0800c853
 800c7e4:	0800c853 	.word	0x0800c853
 800c7e8:	0800c853 	.word	0x0800c853
 800c7ec:	0800c853 	.word	0x0800c853
 800c7f0:	0800c853 	.word	0x0800c853
 800c7f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c7f6:	d809      	bhi.n	800c80c <_scanf_float+0x138>
 800c7f8:	2b60      	cmp	r3, #96	@ 0x60
 800c7fa:	d8b2      	bhi.n	800c762 <_scanf_float+0x8e>
 800c7fc:	2b54      	cmp	r3, #84	@ 0x54
 800c7fe:	d07b      	beq.n	800c8f8 <_scanf_float+0x224>
 800c800:	2b59      	cmp	r3, #89	@ 0x59
 800c802:	d199      	bne.n	800c738 <_scanf_float+0x64>
 800c804:	2d07      	cmp	r5, #7
 800c806:	d197      	bne.n	800c738 <_scanf_float+0x64>
 800c808:	2508      	movs	r5, #8
 800c80a:	e02c      	b.n	800c866 <_scanf_float+0x192>
 800c80c:	2b74      	cmp	r3, #116	@ 0x74
 800c80e:	d073      	beq.n	800c8f8 <_scanf_float+0x224>
 800c810:	2b79      	cmp	r3, #121	@ 0x79
 800c812:	e7f6      	b.n	800c802 <_scanf_float+0x12e>
 800c814:	6821      	ldr	r1, [r4, #0]
 800c816:	05c8      	lsls	r0, r1, #23
 800c818:	d51b      	bpl.n	800c852 <_scanf_float+0x17e>
 800c81a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c81e:	6021      	str	r1, [r4, #0]
 800c820:	f109 0901 	add.w	r9, r9, #1
 800c824:	f1bb 0f00 	cmp.w	fp, #0
 800c828:	d003      	beq.n	800c832 <_scanf_float+0x15e>
 800c82a:	3201      	adds	r2, #1
 800c82c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c830:	60a2      	str	r2, [r4, #8]
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	3b01      	subs	r3, #1
 800c836:	60a3      	str	r3, [r4, #8]
 800c838:	6923      	ldr	r3, [r4, #16]
 800c83a:	3301      	adds	r3, #1
 800c83c:	6123      	str	r3, [r4, #16]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3b01      	subs	r3, #1
 800c842:	2b00      	cmp	r3, #0
 800c844:	607b      	str	r3, [r7, #4]
 800c846:	f340 8087 	ble.w	800c958 <_scanf_float+0x284>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	3301      	adds	r3, #1
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	e765      	b.n	800c71e <_scanf_float+0x4a>
 800c852:	eb1a 0105 	adds.w	r1, sl, r5
 800c856:	f47f af6f 	bne.w	800c738 <_scanf_float+0x64>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c860:	6022      	str	r2, [r4, #0]
 800c862:	460d      	mov	r5, r1
 800c864:	468a      	mov	sl, r1
 800c866:	f806 3b01 	strb.w	r3, [r6], #1
 800c86a:	e7e2      	b.n	800c832 <_scanf_float+0x15e>
 800c86c:	6822      	ldr	r2, [r4, #0]
 800c86e:	0610      	lsls	r0, r2, #24
 800c870:	f57f af62 	bpl.w	800c738 <_scanf_float+0x64>
 800c874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c878:	6022      	str	r2, [r4, #0]
 800c87a:	e7f4      	b.n	800c866 <_scanf_float+0x192>
 800c87c:	f1ba 0f00 	cmp.w	sl, #0
 800c880:	d10e      	bne.n	800c8a0 <_scanf_float+0x1cc>
 800c882:	f1b9 0f00 	cmp.w	r9, #0
 800c886:	d10e      	bne.n	800c8a6 <_scanf_float+0x1d2>
 800c888:	6822      	ldr	r2, [r4, #0]
 800c88a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c88e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c892:	d108      	bne.n	800c8a6 <_scanf_float+0x1d2>
 800c894:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	f04f 0a01 	mov.w	sl, #1
 800c89e:	e7e2      	b.n	800c866 <_scanf_float+0x192>
 800c8a0:	f1ba 0f02 	cmp.w	sl, #2
 800c8a4:	d055      	beq.n	800c952 <_scanf_float+0x27e>
 800c8a6:	2d01      	cmp	r5, #1
 800c8a8:	d002      	beq.n	800c8b0 <_scanf_float+0x1dc>
 800c8aa:	2d04      	cmp	r5, #4
 800c8ac:	f47f af44 	bne.w	800c738 <_scanf_float+0x64>
 800c8b0:	3501      	adds	r5, #1
 800c8b2:	b2ed      	uxtb	r5, r5
 800c8b4:	e7d7      	b.n	800c866 <_scanf_float+0x192>
 800c8b6:	f1ba 0f01 	cmp.w	sl, #1
 800c8ba:	f47f af3d 	bne.w	800c738 <_scanf_float+0x64>
 800c8be:	f04f 0a02 	mov.w	sl, #2
 800c8c2:	e7d0      	b.n	800c866 <_scanf_float+0x192>
 800c8c4:	b97d      	cbnz	r5, 800c8e6 <_scanf_float+0x212>
 800c8c6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ca:	f47f af38 	bne.w	800c73e <_scanf_float+0x6a>
 800c8ce:	6822      	ldr	r2, [r4, #0]
 800c8d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c8d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c8d8:	f040 8108 	bne.w	800caec <_scanf_float+0x418>
 800c8dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c8e0:	6022      	str	r2, [r4, #0]
 800c8e2:	2501      	movs	r5, #1
 800c8e4:	e7bf      	b.n	800c866 <_scanf_float+0x192>
 800c8e6:	2d03      	cmp	r5, #3
 800c8e8:	d0e2      	beq.n	800c8b0 <_scanf_float+0x1dc>
 800c8ea:	2d05      	cmp	r5, #5
 800c8ec:	e7de      	b.n	800c8ac <_scanf_float+0x1d8>
 800c8ee:	2d02      	cmp	r5, #2
 800c8f0:	f47f af22 	bne.w	800c738 <_scanf_float+0x64>
 800c8f4:	2503      	movs	r5, #3
 800c8f6:	e7b6      	b.n	800c866 <_scanf_float+0x192>
 800c8f8:	2d06      	cmp	r5, #6
 800c8fa:	f47f af1d 	bne.w	800c738 <_scanf_float+0x64>
 800c8fe:	2507      	movs	r5, #7
 800c900:	e7b1      	b.n	800c866 <_scanf_float+0x192>
 800c902:	6822      	ldr	r2, [r4, #0]
 800c904:	0591      	lsls	r1, r2, #22
 800c906:	f57f af17 	bpl.w	800c738 <_scanf_float+0x64>
 800c90a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c90e:	6022      	str	r2, [r4, #0]
 800c910:	f8cd 9008 	str.w	r9, [sp, #8]
 800c914:	e7a7      	b.n	800c866 <_scanf_float+0x192>
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c91c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c920:	d006      	beq.n	800c930 <_scanf_float+0x25c>
 800c922:	0550      	lsls	r0, r2, #21
 800c924:	f57f af08 	bpl.w	800c738 <_scanf_float+0x64>
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	f000 80de 	beq.w	800caec <_scanf_float+0x418>
 800c930:	0591      	lsls	r1, r2, #22
 800c932:	bf58      	it	pl
 800c934:	9902      	ldrpl	r1, [sp, #8]
 800c936:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c93a:	bf58      	it	pl
 800c93c:	eba9 0101 	subpl.w	r1, r9, r1
 800c940:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c944:	bf58      	it	pl
 800c946:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c94a:	6022      	str	r2, [r4, #0]
 800c94c:	f04f 0900 	mov.w	r9, #0
 800c950:	e789      	b.n	800c866 <_scanf_float+0x192>
 800c952:	f04f 0a03 	mov.w	sl, #3
 800c956:	e786      	b.n	800c866 <_scanf_float+0x192>
 800c958:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c95c:	4639      	mov	r1, r7
 800c95e:	4640      	mov	r0, r8
 800c960:	4798      	blx	r3
 800c962:	2800      	cmp	r0, #0
 800c964:	f43f aedb 	beq.w	800c71e <_scanf_float+0x4a>
 800c968:	e6e6      	b.n	800c738 <_scanf_float+0x64>
 800c96a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c96e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c972:	463a      	mov	r2, r7
 800c974:	4640      	mov	r0, r8
 800c976:	4798      	blx	r3
 800c978:	6923      	ldr	r3, [r4, #16]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	e6e8      	b.n	800c752 <_scanf_float+0x7e>
 800c980:	1e6b      	subs	r3, r5, #1
 800c982:	2b06      	cmp	r3, #6
 800c984:	d824      	bhi.n	800c9d0 <_scanf_float+0x2fc>
 800c986:	2d02      	cmp	r5, #2
 800c988:	d836      	bhi.n	800c9f8 <_scanf_float+0x324>
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	429e      	cmp	r6, r3
 800c98e:	f67f aee4 	bls.w	800c75a <_scanf_float+0x86>
 800c992:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c99a:	463a      	mov	r2, r7
 800c99c:	4640      	mov	r0, r8
 800c99e:	4798      	blx	r3
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	6123      	str	r3, [r4, #16]
 800c9a6:	e7f0      	b.n	800c98a <_scanf_float+0x2b6>
 800c9a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c9b0:	463a      	mov	r2, r7
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4798      	blx	r3
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	6123      	str	r3, [r4, #16]
 800c9bc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c9c0:	fa5f fa8a 	uxtb.w	sl, sl
 800c9c4:	f1ba 0f02 	cmp.w	sl, #2
 800c9c8:	d1ee      	bne.n	800c9a8 <_scanf_float+0x2d4>
 800c9ca:	3d03      	subs	r5, #3
 800c9cc:	b2ed      	uxtb	r5, r5
 800c9ce:	1b76      	subs	r6, r6, r5
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	05da      	lsls	r2, r3, #23
 800c9d4:	d530      	bpl.n	800ca38 <_scanf_float+0x364>
 800c9d6:	055b      	lsls	r3, r3, #21
 800c9d8:	d511      	bpl.n	800c9fe <_scanf_float+0x32a>
 800c9da:	9b01      	ldr	r3, [sp, #4]
 800c9dc:	429e      	cmp	r6, r3
 800c9de:	f67f aebc 	bls.w	800c75a <_scanf_float+0x86>
 800c9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9ea:	463a      	mov	r2, r7
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4798      	blx	r3
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	e7f0      	b.n	800c9da <_scanf_float+0x306>
 800c9f8:	46aa      	mov	sl, r5
 800c9fa:	46b3      	mov	fp, r6
 800c9fc:	e7de      	b.n	800c9bc <_scanf_float+0x2e8>
 800c9fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	2965      	cmp	r1, #101	@ 0x65
 800ca06:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ca0a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	d00c      	beq.n	800ca2c <_scanf_float+0x358>
 800ca12:	2945      	cmp	r1, #69	@ 0x45
 800ca14:	d00a      	beq.n	800ca2c <_scanf_float+0x358>
 800ca16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca1a:	463a      	mov	r2, r7
 800ca1c:	4640      	mov	r0, r8
 800ca1e:	4798      	blx	r3
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	1eb5      	subs	r5, r6, #2
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca30:	463a      	mov	r2, r7
 800ca32:	4640      	mov	r0, r8
 800ca34:	4798      	blx	r3
 800ca36:	462e      	mov	r6, r5
 800ca38:	6822      	ldr	r2, [r4, #0]
 800ca3a:	f012 0210 	ands.w	r2, r2, #16
 800ca3e:	d001      	beq.n	800ca44 <_scanf_float+0x370>
 800ca40:	2000      	movs	r0, #0
 800ca42:	e68b      	b.n	800c75c <_scanf_float+0x88>
 800ca44:	7032      	strb	r2, [r6, #0]
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ca4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca50:	d11c      	bne.n	800ca8c <_scanf_float+0x3b8>
 800ca52:	9b02      	ldr	r3, [sp, #8]
 800ca54:	454b      	cmp	r3, r9
 800ca56:	eba3 0209 	sub.w	r2, r3, r9
 800ca5a:	d123      	bne.n	800caa4 <_scanf_float+0x3d0>
 800ca5c:	9901      	ldr	r1, [sp, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4640      	mov	r0, r8
 800ca62:	f002 fc6d 	bl	800f340 <_strtod_r>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	6821      	ldr	r1, [r4, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f011 0f02 	tst.w	r1, #2
 800ca70:	ec57 6b10 	vmov	r6, r7, d0
 800ca74:	f103 0204 	add.w	r2, r3, #4
 800ca78:	d01f      	beq.n	800caba <_scanf_float+0x3e6>
 800ca7a:	9903      	ldr	r1, [sp, #12]
 800ca7c:	600a      	str	r2, [r1, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	e9c3 6700 	strd	r6, r7, [r3]
 800ca84:	68e3      	ldr	r3, [r4, #12]
 800ca86:	3301      	adds	r3, #1
 800ca88:	60e3      	str	r3, [r4, #12]
 800ca8a:	e7d9      	b.n	800ca40 <_scanf_float+0x36c>
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0e4      	beq.n	800ca5c <_scanf_float+0x388>
 800ca92:	9905      	ldr	r1, [sp, #20]
 800ca94:	230a      	movs	r3, #10
 800ca96:	3101      	adds	r1, #1
 800ca98:	4640      	mov	r0, r8
 800ca9a:	f002 fcd1 	bl	800f440 <_strtol_r>
 800ca9e:	9b04      	ldr	r3, [sp, #16]
 800caa0:	9e05      	ldr	r6, [sp, #20]
 800caa2:	1ac2      	subs	r2, r0, r3
 800caa4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800caa8:	429e      	cmp	r6, r3
 800caaa:	bf28      	it	cs
 800caac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cab0:	4910      	ldr	r1, [pc, #64]	@ (800caf4 <_scanf_float+0x420>)
 800cab2:	4630      	mov	r0, r6
 800cab4:	f000 f918 	bl	800cce8 <siprintf>
 800cab8:	e7d0      	b.n	800ca5c <_scanf_float+0x388>
 800caba:	f011 0f04 	tst.w	r1, #4
 800cabe:	9903      	ldr	r1, [sp, #12]
 800cac0:	600a      	str	r2, [r1, #0]
 800cac2:	d1dc      	bne.n	800ca7e <_scanf_float+0x3aa>
 800cac4:	681d      	ldr	r5, [r3, #0]
 800cac6:	4632      	mov	r2, r6
 800cac8:	463b      	mov	r3, r7
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7f4 f82d 	bl	8000b2c <__aeabi_dcmpun>
 800cad2:	b128      	cbz	r0, 800cae0 <_scanf_float+0x40c>
 800cad4:	4808      	ldr	r0, [pc, #32]	@ (800caf8 <_scanf_float+0x424>)
 800cad6:	f000 fa2d 	bl	800cf34 <nanf>
 800cada:	ed85 0a00 	vstr	s0, [r5]
 800cade:	e7d1      	b.n	800ca84 <_scanf_float+0x3b0>
 800cae0:	4630      	mov	r0, r6
 800cae2:	4639      	mov	r1, r7
 800cae4:	f7f4 f880 	bl	8000be8 <__aeabi_d2f>
 800cae8:	6028      	str	r0, [r5, #0]
 800caea:	e7cb      	b.n	800ca84 <_scanf_float+0x3b0>
 800caec:	f04f 0900 	mov.w	r9, #0
 800caf0:	e629      	b.n	800c746 <_scanf_float+0x72>
 800caf2:	bf00      	nop
 800caf4:	08010f4a 	.word	0x08010f4a
 800caf8:	08011300 	.word	0x08011300

0800cafc <std>:
 800cafc:	2300      	movs	r3, #0
 800cafe:	b510      	push	{r4, lr}
 800cb00:	4604      	mov	r4, r0
 800cb02:	e9c0 3300 	strd	r3, r3, [r0]
 800cb06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb0a:	6083      	str	r3, [r0, #8]
 800cb0c:	8181      	strh	r1, [r0, #12]
 800cb0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb10:	81c2      	strh	r2, [r0, #14]
 800cb12:	6183      	str	r3, [r0, #24]
 800cb14:	4619      	mov	r1, r3
 800cb16:	2208      	movs	r2, #8
 800cb18:	305c      	adds	r0, #92	@ 0x5c
 800cb1a:	f000 f974 	bl	800ce06 <memset>
 800cb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb54 <std+0x58>)
 800cb20:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb22:	4b0d      	ldr	r3, [pc, #52]	@ (800cb58 <std+0x5c>)
 800cb24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb26:	4b0d      	ldr	r3, [pc, #52]	@ (800cb5c <std+0x60>)
 800cb28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb60 <std+0x64>)
 800cb2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <std+0x68>)
 800cb30:	6224      	str	r4, [r4, #32]
 800cb32:	429c      	cmp	r4, r3
 800cb34:	d006      	beq.n	800cb44 <std+0x48>
 800cb36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb3a:	4294      	cmp	r4, r2
 800cb3c:	d002      	beq.n	800cb44 <std+0x48>
 800cb3e:	33d0      	adds	r3, #208	@ 0xd0
 800cb40:	429c      	cmp	r4, r3
 800cb42:	d105      	bne.n	800cb50 <std+0x54>
 800cb44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb4c:	f000 b9ee 	b.w	800cf2c <__retarget_lock_init_recursive>
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	bf00      	nop
 800cb54:	0800cd7d 	.word	0x0800cd7d
 800cb58:	0800cda3 	.word	0x0800cda3
 800cb5c:	0800cddb 	.word	0x0800cddb
 800cb60:	0800cdff 	.word	0x0800cdff
 800cb64:	200020f8 	.word	0x200020f8

0800cb68 <stdio_exit_handler>:
 800cb68:	4a02      	ldr	r2, [pc, #8]	@ (800cb74 <stdio_exit_handler+0xc>)
 800cb6a:	4903      	ldr	r1, [pc, #12]	@ (800cb78 <stdio_exit_handler+0x10>)
 800cb6c:	4803      	ldr	r0, [pc, #12]	@ (800cb7c <stdio_exit_handler+0x14>)
 800cb6e:	f000 b869 	b.w	800cc44 <_fwalk_sglue>
 800cb72:	bf00      	nop
 800cb74:	2000012c 	.word	0x2000012c
 800cb78:	0800fe31 	.word	0x0800fe31
 800cb7c:	2000013c 	.word	0x2000013c

0800cb80 <cleanup_stdio>:
 800cb80:	6841      	ldr	r1, [r0, #4]
 800cb82:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb4 <cleanup_stdio+0x34>)
 800cb84:	4299      	cmp	r1, r3
 800cb86:	b510      	push	{r4, lr}
 800cb88:	4604      	mov	r4, r0
 800cb8a:	d001      	beq.n	800cb90 <cleanup_stdio+0x10>
 800cb8c:	f003 f950 	bl	800fe30 <_fflush_r>
 800cb90:	68a1      	ldr	r1, [r4, #8]
 800cb92:	4b09      	ldr	r3, [pc, #36]	@ (800cbb8 <cleanup_stdio+0x38>)
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d002      	beq.n	800cb9e <cleanup_stdio+0x1e>
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f003 f949 	bl	800fe30 <_fflush_r>
 800cb9e:	68e1      	ldr	r1, [r4, #12]
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <cleanup_stdio+0x3c>)
 800cba2:	4299      	cmp	r1, r3
 800cba4:	d004      	beq.n	800cbb0 <cleanup_stdio+0x30>
 800cba6:	4620      	mov	r0, r4
 800cba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbac:	f003 b940 	b.w	800fe30 <_fflush_r>
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200020f8 	.word	0x200020f8
 800cbb8:	20002160 	.word	0x20002160
 800cbbc:	200021c8 	.word	0x200021c8

0800cbc0 <global_stdio_init.part.0>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf0 <global_stdio_init.part.0+0x30>)
 800cbc4:	4c0b      	ldr	r4, [pc, #44]	@ (800cbf4 <global_stdio_init.part.0+0x34>)
 800cbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf8 <global_stdio_init.part.0+0x38>)
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	4620      	mov	r0, r4
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2104      	movs	r1, #4
 800cbd0:	f7ff ff94 	bl	800cafc <std>
 800cbd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbd8:	2201      	movs	r2, #1
 800cbda:	2109      	movs	r1, #9
 800cbdc:	f7ff ff8e 	bl	800cafc <std>
 800cbe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbea:	2112      	movs	r1, #18
 800cbec:	f7ff bf86 	b.w	800cafc <std>
 800cbf0:	20002230 	.word	0x20002230
 800cbf4:	200020f8 	.word	0x200020f8
 800cbf8:	0800cb69 	.word	0x0800cb69

0800cbfc <__sfp_lock_acquire>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	@ (800cc04 <__sfp_lock_acquire+0x8>)
 800cbfe:	f000 b996 	b.w	800cf2e <__retarget_lock_acquire_recursive>
 800cc02:	bf00      	nop
 800cc04:	20002239 	.word	0x20002239

0800cc08 <__sfp_lock_release>:
 800cc08:	4801      	ldr	r0, [pc, #4]	@ (800cc10 <__sfp_lock_release+0x8>)
 800cc0a:	f000 b991 	b.w	800cf30 <__retarget_lock_release_recursive>
 800cc0e:	bf00      	nop
 800cc10:	20002239 	.word	0x20002239

0800cc14 <__sinit>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4604      	mov	r4, r0
 800cc18:	f7ff fff0 	bl	800cbfc <__sfp_lock_acquire>
 800cc1c:	6a23      	ldr	r3, [r4, #32]
 800cc1e:	b11b      	cbz	r3, 800cc28 <__sinit+0x14>
 800cc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc24:	f7ff bff0 	b.w	800cc08 <__sfp_lock_release>
 800cc28:	4b04      	ldr	r3, [pc, #16]	@ (800cc3c <__sinit+0x28>)
 800cc2a:	6223      	str	r3, [r4, #32]
 800cc2c:	4b04      	ldr	r3, [pc, #16]	@ (800cc40 <__sinit+0x2c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1f5      	bne.n	800cc20 <__sinit+0xc>
 800cc34:	f7ff ffc4 	bl	800cbc0 <global_stdio_init.part.0>
 800cc38:	e7f2      	b.n	800cc20 <__sinit+0xc>
 800cc3a:	bf00      	nop
 800cc3c:	0800cb81 	.word	0x0800cb81
 800cc40:	20002230 	.word	0x20002230

0800cc44 <_fwalk_sglue>:
 800cc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc48:	4607      	mov	r7, r0
 800cc4a:	4688      	mov	r8, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	2600      	movs	r6, #0
 800cc50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc54:	f1b9 0901 	subs.w	r9, r9, #1
 800cc58:	d505      	bpl.n	800cc66 <_fwalk_sglue+0x22>
 800cc5a:	6824      	ldr	r4, [r4, #0]
 800cc5c:	2c00      	cmp	r4, #0
 800cc5e:	d1f7      	bne.n	800cc50 <_fwalk_sglue+0xc>
 800cc60:	4630      	mov	r0, r6
 800cc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d907      	bls.n	800cc7c <_fwalk_sglue+0x38>
 800cc6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc70:	3301      	adds	r3, #1
 800cc72:	d003      	beq.n	800cc7c <_fwalk_sglue+0x38>
 800cc74:	4629      	mov	r1, r5
 800cc76:	4638      	mov	r0, r7
 800cc78:	47c0      	blx	r8
 800cc7a:	4306      	orrs	r6, r0
 800cc7c:	3568      	adds	r5, #104	@ 0x68
 800cc7e:	e7e9      	b.n	800cc54 <_fwalk_sglue+0x10>

0800cc80 <sniprintf>:
 800cc80:	b40c      	push	{r2, r3}
 800cc82:	b530      	push	{r4, r5, lr}
 800cc84:	4b17      	ldr	r3, [pc, #92]	@ (800cce4 <sniprintf+0x64>)
 800cc86:	1e0c      	subs	r4, r1, #0
 800cc88:	681d      	ldr	r5, [r3, #0]
 800cc8a:	b09d      	sub	sp, #116	@ 0x74
 800cc8c:	da08      	bge.n	800cca0 <sniprintf+0x20>
 800cc8e:	238b      	movs	r3, #139	@ 0x8b
 800cc90:	602b      	str	r3, [r5, #0]
 800cc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc96:	b01d      	add	sp, #116	@ 0x74
 800cc98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc9c:	b002      	add	sp, #8
 800cc9e:	4770      	bx	lr
 800cca0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cca4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cca8:	bf14      	ite	ne
 800ccaa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ccae:	4623      	moveq	r3, r4
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	9307      	str	r3, [sp, #28]
 800ccb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccb8:	9002      	str	r0, [sp, #8]
 800ccba:	9006      	str	r0, [sp, #24]
 800ccbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ccc2:	ab21      	add	r3, sp, #132	@ 0x84
 800ccc4:	a902      	add	r1, sp, #8
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	f002 fc17 	bl	800f4fc <_svfiprintf_r>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	bfbc      	itt	lt
 800ccd2:	238b      	movlt	r3, #139	@ 0x8b
 800ccd4:	602b      	strlt	r3, [r5, #0]
 800ccd6:	2c00      	cmp	r4, #0
 800ccd8:	d0dd      	beq.n	800cc96 <sniprintf+0x16>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	701a      	strb	r2, [r3, #0]
 800cce0:	e7d9      	b.n	800cc96 <sniprintf+0x16>
 800cce2:	bf00      	nop
 800cce4:	20000138 	.word	0x20000138

0800cce8 <siprintf>:
 800cce8:	b40e      	push	{r1, r2, r3}
 800ccea:	b500      	push	{lr}
 800ccec:	b09c      	sub	sp, #112	@ 0x70
 800ccee:	ab1d      	add	r3, sp, #116	@ 0x74
 800ccf0:	9002      	str	r0, [sp, #8]
 800ccf2:	9006      	str	r0, [sp, #24]
 800ccf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ccf8:	4809      	ldr	r0, [pc, #36]	@ (800cd20 <siprintf+0x38>)
 800ccfa:	9107      	str	r1, [sp, #28]
 800ccfc:	9104      	str	r1, [sp, #16]
 800ccfe:	4909      	ldr	r1, [pc, #36]	@ (800cd24 <siprintf+0x3c>)
 800cd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd04:	9105      	str	r1, [sp, #20]
 800cd06:	6800      	ldr	r0, [r0, #0]
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	a902      	add	r1, sp, #8
 800cd0c:	f002 fbf6 	bl	800f4fc <_svfiprintf_r>
 800cd10:	9b02      	ldr	r3, [sp, #8]
 800cd12:	2200      	movs	r2, #0
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	b01c      	add	sp, #112	@ 0x70
 800cd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd1c:	b003      	add	sp, #12
 800cd1e:	4770      	bx	lr
 800cd20:	20000138 	.word	0x20000138
 800cd24:	ffff0208 	.word	0xffff0208

0800cd28 <siscanf>:
 800cd28:	b40e      	push	{r1, r2, r3}
 800cd2a:	b530      	push	{r4, r5, lr}
 800cd2c:	b09c      	sub	sp, #112	@ 0x70
 800cd2e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800cd30:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cd34:	f854 5b04 	ldr.w	r5, [r4], #4
 800cd38:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cd3c:	9002      	str	r0, [sp, #8]
 800cd3e:	9006      	str	r0, [sp, #24]
 800cd40:	f7f3 fa96 	bl	8000270 <strlen>
 800cd44:	4b0b      	ldr	r3, [pc, #44]	@ (800cd74 <siscanf+0x4c>)
 800cd46:	9003      	str	r0, [sp, #12]
 800cd48:	9007      	str	r0, [sp, #28]
 800cd4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd4c:	480a      	ldr	r0, [pc, #40]	@ (800cd78 <siscanf+0x50>)
 800cd4e:	9401      	str	r4, [sp, #4]
 800cd50:	2300      	movs	r3, #0
 800cd52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd54:	9314      	str	r3, [sp, #80]	@ 0x50
 800cd56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4623      	mov	r3, r4
 800cd62:	a902      	add	r1, sp, #8
 800cd64:	6800      	ldr	r0, [r0, #0]
 800cd66:	f002 fd1d 	bl	800f7a4 <__ssvfiscanf_r>
 800cd6a:	b01c      	add	sp, #112	@ 0x70
 800cd6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd70:	b003      	add	sp, #12
 800cd72:	4770      	bx	lr
 800cd74:	0800cd9f 	.word	0x0800cd9f
 800cd78:	20000138 	.word	0x20000138

0800cd7c <__sread>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	460c      	mov	r4, r1
 800cd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd84:	f000 f884 	bl	800ce90 <_read_r>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	bfab      	itete	ge
 800cd8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd8e:	89a3      	ldrhlt	r3, [r4, #12]
 800cd90:	181b      	addge	r3, r3, r0
 800cd92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd96:	bfac      	ite	ge
 800cd98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd9a:	81a3      	strhlt	r3, [r4, #12]
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <__seofread>:
 800cd9e:	2000      	movs	r0, #0
 800cda0:	4770      	bx	lr

0800cda2 <__swrite>:
 800cda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda6:	461f      	mov	r7, r3
 800cda8:	898b      	ldrh	r3, [r1, #12]
 800cdaa:	05db      	lsls	r3, r3, #23
 800cdac:	4605      	mov	r5, r0
 800cdae:	460c      	mov	r4, r1
 800cdb0:	4616      	mov	r6, r2
 800cdb2:	d505      	bpl.n	800cdc0 <__swrite+0x1e>
 800cdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb8:	2302      	movs	r3, #2
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f000 f856 	bl	800ce6c <_lseek_r>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	4632      	mov	r2, r6
 800cdce:	463b      	mov	r3, r7
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd6:	f000 b86d 	b.w	800ceb4 <_write_r>

0800cdda <__sseek>:
 800cdda:	b510      	push	{r4, lr}
 800cddc:	460c      	mov	r4, r1
 800cdde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde2:	f000 f843 	bl	800ce6c <_lseek_r>
 800cde6:	1c43      	adds	r3, r0, #1
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	bf15      	itete	ne
 800cdec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cdee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cdf6:	81a3      	strheq	r3, [r4, #12]
 800cdf8:	bf18      	it	ne
 800cdfa:	81a3      	strhne	r3, [r4, #12]
 800cdfc:	bd10      	pop	{r4, pc}

0800cdfe <__sclose>:
 800cdfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce02:	f000 b823 	b.w	800ce4c <_close_r>

0800ce06 <memset>:
 800ce06:	4402      	add	r2, r0
 800ce08:	4603      	mov	r3, r0
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d100      	bne.n	800ce10 <memset+0xa>
 800ce0e:	4770      	bx	lr
 800ce10:	f803 1b01 	strb.w	r1, [r3], #1
 800ce14:	e7f9      	b.n	800ce0a <memset+0x4>

0800ce16 <strstr>:
 800ce16:	780a      	ldrb	r2, [r1, #0]
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	b96a      	cbnz	r2, 800ce38 <strstr+0x22>
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d109      	bne.n	800ce36 <strstr+0x20>
 800ce22:	460c      	mov	r4, r1
 800ce24:	4605      	mov	r5, r0
 800ce26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f6      	beq.n	800ce1c <strstr+0x6>
 800ce2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ce32:	429e      	cmp	r6, r3
 800ce34:	d0f7      	beq.n	800ce26 <strstr+0x10>
 800ce36:	3001      	adds	r0, #1
 800ce38:	7803      	ldrb	r3, [r0, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1ef      	bne.n	800ce1e <strstr+0x8>
 800ce3e:	4618      	mov	r0, r3
 800ce40:	e7ec      	b.n	800ce1c <strstr+0x6>
	...

0800ce44 <_localeconv_r>:
 800ce44:	4800      	ldr	r0, [pc, #0]	@ (800ce48 <_localeconv_r+0x4>)
 800ce46:	4770      	bx	lr
 800ce48:	20000278 	.word	0x20000278

0800ce4c <_close_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	4d06      	ldr	r5, [pc, #24]	@ (800ce68 <_close_r+0x1c>)
 800ce50:	2300      	movs	r3, #0
 800ce52:	4604      	mov	r4, r0
 800ce54:	4608      	mov	r0, r1
 800ce56:	602b      	str	r3, [r5, #0]
 800ce58:	f7f4 fc94 	bl	8001784 <_close>
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d102      	bne.n	800ce66 <_close_r+0x1a>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	b103      	cbz	r3, 800ce66 <_close_r+0x1a>
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	20002234 	.word	0x20002234

0800ce6c <_lseek_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d07      	ldr	r5, [pc, #28]	@ (800ce8c <_lseek_r+0x20>)
 800ce70:	4604      	mov	r4, r0
 800ce72:	4608      	mov	r0, r1
 800ce74:	4611      	mov	r1, r2
 800ce76:	2200      	movs	r2, #0
 800ce78:	602a      	str	r2, [r5, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f7f4 fca9 	bl	80017d2 <_lseek>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	d102      	bne.n	800ce8a <_lseek_r+0x1e>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	b103      	cbz	r3, 800ce8a <_lseek_r+0x1e>
 800ce88:	6023      	str	r3, [r4, #0]
 800ce8a:	bd38      	pop	{r3, r4, r5, pc}
 800ce8c:	20002234 	.word	0x20002234

0800ce90 <_read_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d07      	ldr	r5, [pc, #28]	@ (800ceb0 <_read_r+0x20>)
 800ce94:	4604      	mov	r4, r0
 800ce96:	4608      	mov	r0, r1
 800ce98:	4611      	mov	r1, r2
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	602a      	str	r2, [r5, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	f7f4 fc37 	bl	8001712 <_read>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_read_r+0x1e>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_read_r+0x1e>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	20002234 	.word	0x20002234

0800ceb4 <_write_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d07      	ldr	r5, [pc, #28]	@ (800ced4 <_write_r+0x20>)
 800ceb8:	4604      	mov	r4, r0
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	602a      	str	r2, [r5, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f7f4 fc42 	bl	800174c <_write>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_write_r+0x1e>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_write_r+0x1e>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20002234 	.word	0x20002234

0800ced8 <__errno>:
 800ced8:	4b01      	ldr	r3, [pc, #4]	@ (800cee0 <__errno+0x8>)
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	20000138 	.word	0x20000138

0800cee4 <__libc_init_array>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	4d0d      	ldr	r5, [pc, #52]	@ (800cf1c <__libc_init_array+0x38>)
 800cee8:	4c0d      	ldr	r4, [pc, #52]	@ (800cf20 <__libc_init_array+0x3c>)
 800ceea:	1b64      	subs	r4, r4, r5
 800ceec:	10a4      	asrs	r4, r4, #2
 800ceee:	2600      	movs	r6, #0
 800cef0:	42a6      	cmp	r6, r4
 800cef2:	d109      	bne.n	800cf08 <__libc_init_array+0x24>
 800cef4:	4d0b      	ldr	r5, [pc, #44]	@ (800cf24 <__libc_init_array+0x40>)
 800cef6:	4c0c      	ldr	r4, [pc, #48]	@ (800cf28 <__libc_init_array+0x44>)
 800cef8:	f003 ff72 	bl	8010de0 <_init>
 800cefc:	1b64      	subs	r4, r4, r5
 800cefe:	10a4      	asrs	r4, r4, #2
 800cf00:	2600      	movs	r6, #0
 800cf02:	42a6      	cmp	r6, r4
 800cf04:	d105      	bne.n	800cf12 <__libc_init_array+0x2e>
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf0c:	4798      	blx	r3
 800cf0e:	3601      	adds	r6, #1
 800cf10:	e7ee      	b.n	800cef0 <__libc_init_array+0xc>
 800cf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf16:	4798      	blx	r3
 800cf18:	3601      	adds	r6, #1
 800cf1a:	e7f2      	b.n	800cf02 <__libc_init_array+0x1e>
 800cf1c:	0801136c 	.word	0x0801136c
 800cf20:	0801136c 	.word	0x0801136c
 800cf24:	0801136c 	.word	0x0801136c
 800cf28:	08011370 	.word	0x08011370

0800cf2c <__retarget_lock_init_recursive>:
 800cf2c:	4770      	bx	lr

0800cf2e <__retarget_lock_acquire_recursive>:
 800cf2e:	4770      	bx	lr

0800cf30 <__retarget_lock_release_recursive>:
 800cf30:	4770      	bx	lr
	...

0800cf34 <nanf>:
 800cf34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cf3c <nanf+0x8>
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	7fc00000 	.word	0x7fc00000

0800cf40 <quorem>:
 800cf40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	6903      	ldr	r3, [r0, #16]
 800cf46:	690c      	ldr	r4, [r1, #16]
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	4607      	mov	r7, r0
 800cf4c:	db7e      	blt.n	800d04c <quorem+0x10c>
 800cf4e:	3c01      	subs	r4, #1
 800cf50:	f101 0814 	add.w	r8, r1, #20
 800cf54:	00a3      	lsls	r3, r4, #2
 800cf56:	f100 0514 	add.w	r5, r0, #20
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf72:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf76:	d32e      	bcc.n	800cfd6 <quorem+0x96>
 800cf78:	f04f 0a00 	mov.w	sl, #0
 800cf7c:	46c4      	mov	ip, r8
 800cf7e:	46ae      	mov	lr, r5
 800cf80:	46d3      	mov	fp, sl
 800cf82:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf86:	b298      	uxth	r0, r3
 800cf88:	fb06 a000 	mla	r0, r6, r0, sl
 800cf8c:	0c02      	lsrs	r2, r0, #16
 800cf8e:	0c1b      	lsrs	r3, r3, #16
 800cf90:	fb06 2303 	mla	r3, r6, r3, r2
 800cf94:	f8de 2000 	ldr.w	r2, [lr]
 800cf98:	b280      	uxth	r0, r0
 800cf9a:	b292      	uxth	r2, r2
 800cf9c:	1a12      	subs	r2, r2, r0
 800cf9e:	445a      	add	r2, fp
 800cfa0:	f8de 0000 	ldr.w	r0, [lr]
 800cfa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cfae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cfb2:	b292      	uxth	r2, r2
 800cfb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cfb8:	45e1      	cmp	r9, ip
 800cfba:	f84e 2b04 	str.w	r2, [lr], #4
 800cfbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cfc2:	d2de      	bcs.n	800cf82 <quorem+0x42>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	58eb      	ldr	r3, [r5, r3]
 800cfc8:	b92b      	cbnz	r3, 800cfd6 <quorem+0x96>
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	3b04      	subs	r3, #4
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	d32f      	bcc.n	800d034 <quorem+0xf4>
 800cfd4:	613c      	str	r4, [r7, #16]
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	f001 f9c2 	bl	800e360 <__mcmp>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	db25      	blt.n	800d02c <quorem+0xec>
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfe8:	f8d1 c000 	ldr.w	ip, [r1]
 800cfec:	fa1f fe82 	uxth.w	lr, r2
 800cff0:	fa1f f38c 	uxth.w	r3, ip
 800cff4:	eba3 030e 	sub.w	r3, r3, lr
 800cff8:	4403      	add	r3, r0
 800cffa:	0c12      	lsrs	r2, r2, #16
 800cffc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d000:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d004:	b29b      	uxth	r3, r3
 800d006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d00a:	45c1      	cmp	r9, r8
 800d00c:	f841 3b04 	str.w	r3, [r1], #4
 800d010:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d014:	d2e6      	bcs.n	800cfe4 <quorem+0xa4>
 800d016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d01e:	b922      	cbnz	r2, 800d02a <quorem+0xea>
 800d020:	3b04      	subs	r3, #4
 800d022:	429d      	cmp	r5, r3
 800d024:	461a      	mov	r2, r3
 800d026:	d30b      	bcc.n	800d040 <quorem+0x100>
 800d028:	613c      	str	r4, [r7, #16]
 800d02a:	3601      	adds	r6, #1
 800d02c:	4630      	mov	r0, r6
 800d02e:	b003      	add	sp, #12
 800d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d034:	6812      	ldr	r2, [r2, #0]
 800d036:	3b04      	subs	r3, #4
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d1cb      	bne.n	800cfd4 <quorem+0x94>
 800d03c:	3c01      	subs	r4, #1
 800d03e:	e7c6      	b.n	800cfce <quorem+0x8e>
 800d040:	6812      	ldr	r2, [r2, #0]
 800d042:	3b04      	subs	r3, #4
 800d044:	2a00      	cmp	r2, #0
 800d046:	d1ef      	bne.n	800d028 <quorem+0xe8>
 800d048:	3c01      	subs	r4, #1
 800d04a:	e7ea      	b.n	800d022 <quorem+0xe2>
 800d04c:	2000      	movs	r0, #0
 800d04e:	e7ee      	b.n	800d02e <quorem+0xee>

0800d050 <_dtoa_r>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	69c7      	ldr	r7, [r0, #28]
 800d056:	b099      	sub	sp, #100	@ 0x64
 800d058:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d05c:	ec55 4b10 	vmov	r4, r5, d0
 800d060:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d062:	9109      	str	r1, [sp, #36]	@ 0x24
 800d064:	4683      	mov	fp, r0
 800d066:	920e      	str	r2, [sp, #56]	@ 0x38
 800d068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d06a:	b97f      	cbnz	r7, 800d08c <_dtoa_r+0x3c>
 800d06c:	2010      	movs	r0, #16
 800d06e:	f000 fdfd 	bl	800dc6c <malloc>
 800d072:	4602      	mov	r2, r0
 800d074:	f8cb 001c 	str.w	r0, [fp, #28]
 800d078:	b920      	cbnz	r0, 800d084 <_dtoa_r+0x34>
 800d07a:	4ba7      	ldr	r3, [pc, #668]	@ (800d318 <_dtoa_r+0x2c8>)
 800d07c:	21ef      	movs	r1, #239	@ 0xef
 800d07e:	48a7      	ldr	r0, [pc, #668]	@ (800d31c <_dtoa_r+0x2cc>)
 800d080:	f002 ffc6 	bl	8010010 <__assert_func>
 800d084:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d088:	6007      	str	r7, [r0, #0]
 800d08a:	60c7      	str	r7, [r0, #12]
 800d08c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d090:	6819      	ldr	r1, [r3, #0]
 800d092:	b159      	cbz	r1, 800d0ac <_dtoa_r+0x5c>
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	604a      	str	r2, [r1, #4]
 800d098:	2301      	movs	r3, #1
 800d09a:	4093      	lsls	r3, r2
 800d09c:	608b      	str	r3, [r1, #8]
 800d09e:	4658      	mov	r0, fp
 800d0a0:	f000 feda 	bl	800de58 <_Bfree>
 800d0a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	601a      	str	r2, [r3, #0]
 800d0ac:	1e2b      	subs	r3, r5, #0
 800d0ae:	bfb9      	ittee	lt
 800d0b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d0b4:	9303      	strlt	r3, [sp, #12]
 800d0b6:	2300      	movge	r3, #0
 800d0b8:	6033      	strge	r3, [r6, #0]
 800d0ba:	9f03      	ldr	r7, [sp, #12]
 800d0bc:	4b98      	ldr	r3, [pc, #608]	@ (800d320 <_dtoa_r+0x2d0>)
 800d0be:	bfbc      	itt	lt
 800d0c0:	2201      	movlt	r2, #1
 800d0c2:	6032      	strlt	r2, [r6, #0]
 800d0c4:	43bb      	bics	r3, r7
 800d0c6:	d112      	bne.n	800d0ee <_dtoa_r+0x9e>
 800d0c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0d4:	4323      	orrs	r3, r4
 800d0d6:	f000 854d 	beq.w	800db74 <_dtoa_r+0xb24>
 800d0da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d334 <_dtoa_r+0x2e4>
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 854f 	beq.w	800db84 <_dtoa_r+0xb34>
 800d0e6:	f10a 0303 	add.w	r3, sl, #3
 800d0ea:	f000 bd49 	b.w	800db80 <_dtoa_r+0xb30>
 800d0ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	ec51 0b17 	vmov	r0, r1, d7
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d0fe:	f7f3 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d102:	4680      	mov	r8, r0
 800d104:	b158      	cbz	r0, 800d11e <_dtoa_r+0xce>
 800d106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d108:	2301      	movs	r3, #1
 800d10a:	6013      	str	r3, [r2, #0]
 800d10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d10e:	b113      	cbz	r3, 800d116 <_dtoa_r+0xc6>
 800d110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d112:	4b84      	ldr	r3, [pc, #528]	@ (800d324 <_dtoa_r+0x2d4>)
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d338 <_dtoa_r+0x2e8>
 800d11a:	f000 bd33 	b.w	800db84 <_dtoa_r+0xb34>
 800d11e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d122:	aa16      	add	r2, sp, #88	@ 0x58
 800d124:	a917      	add	r1, sp, #92	@ 0x5c
 800d126:	4658      	mov	r0, fp
 800d128:	f001 fa3a 	bl	800e5a0 <__d2b>
 800d12c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d130:	4681      	mov	r9, r0
 800d132:	2e00      	cmp	r6, #0
 800d134:	d077      	beq.n	800d226 <_dtoa_r+0x1d6>
 800d136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d138:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d14c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d150:	4619      	mov	r1, r3
 800d152:	2200      	movs	r2, #0
 800d154:	4b74      	ldr	r3, [pc, #464]	@ (800d328 <_dtoa_r+0x2d8>)
 800d156:	f7f3 f897 	bl	8000288 <__aeabi_dsub>
 800d15a:	a369      	add	r3, pc, #420	@ (adr r3, 800d300 <_dtoa_r+0x2b0>)
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	f7f3 fa4a 	bl	80005f8 <__aeabi_dmul>
 800d164:	a368      	add	r3, pc, #416	@ (adr r3, 800d308 <_dtoa_r+0x2b8>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f88f 	bl	800028c <__adddf3>
 800d16e:	4604      	mov	r4, r0
 800d170:	4630      	mov	r0, r6
 800d172:	460d      	mov	r5, r1
 800d174:	f7f3 f9d6 	bl	8000524 <__aeabi_i2d>
 800d178:	a365      	add	r3, pc, #404	@ (adr r3, 800d310 <_dtoa_r+0x2c0>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 fa3b 	bl	80005f8 <__aeabi_dmul>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4620      	mov	r0, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	f7f3 f87f 	bl	800028c <__adddf3>
 800d18e:	4604      	mov	r4, r0
 800d190:	460d      	mov	r5, r1
 800d192:	f7f3 fce1 	bl	8000b58 <__aeabi_d2iz>
 800d196:	2200      	movs	r2, #0
 800d198:	4607      	mov	r7, r0
 800d19a:	2300      	movs	r3, #0
 800d19c:	4620      	mov	r0, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	f7f3 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800d1a4:	b140      	cbz	r0, 800d1b8 <_dtoa_r+0x168>
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7f3 f9bc 	bl	8000524 <__aeabi_i2d>
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	462b      	mov	r3, r5
 800d1b0:	f7f3 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1b4:	b900      	cbnz	r0, 800d1b8 <_dtoa_r+0x168>
 800d1b6:	3f01      	subs	r7, #1
 800d1b8:	2f16      	cmp	r7, #22
 800d1ba:	d851      	bhi.n	800d260 <_dtoa_r+0x210>
 800d1bc:	4b5b      	ldr	r3, [pc, #364]	@ (800d32c <_dtoa_r+0x2dc>)
 800d1be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1ca:	f7f3 fc87 	bl	8000adc <__aeabi_dcmplt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d048      	beq.n	800d264 <_dtoa_r+0x214>
 800d1d2:	3f01      	subs	r7, #1
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d1d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d1da:	1b9b      	subs	r3, r3, r6
 800d1dc:	1e5a      	subs	r2, r3, #1
 800d1de:	bf44      	itt	mi
 800d1e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d1e4:	2300      	movmi	r3, #0
 800d1e6:	9208      	str	r2, [sp, #32]
 800d1e8:	bf54      	ite	pl
 800d1ea:	f04f 0800 	movpl.w	r8, #0
 800d1ee:	9308      	strmi	r3, [sp, #32]
 800d1f0:	2f00      	cmp	r7, #0
 800d1f2:	db39      	blt.n	800d268 <_dtoa_r+0x218>
 800d1f4:	9b08      	ldr	r3, [sp, #32]
 800d1f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d1f8:	443b      	add	r3, r7
 800d1fa:	9308      	str	r3, [sp, #32]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d202:	2b09      	cmp	r3, #9
 800d204:	d864      	bhi.n	800d2d0 <_dtoa_r+0x280>
 800d206:	2b05      	cmp	r3, #5
 800d208:	bfc4      	itt	gt
 800d20a:	3b04      	subgt	r3, #4
 800d20c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d210:	f1a3 0302 	sub.w	r3, r3, #2
 800d214:	bfcc      	ite	gt
 800d216:	2400      	movgt	r4, #0
 800d218:	2401      	movle	r4, #1
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	d863      	bhi.n	800d2e6 <_dtoa_r+0x296>
 800d21e:	e8df f003 	tbb	[pc, r3]
 800d222:	372a      	.short	0x372a
 800d224:	5535      	.short	0x5535
 800d226:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d22a:	441e      	add	r6, r3
 800d22c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d230:	2b20      	cmp	r3, #32
 800d232:	bfc1      	itttt	gt
 800d234:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d238:	409f      	lslgt	r7, r3
 800d23a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d23e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d242:	bfd6      	itet	le
 800d244:	f1c3 0320 	rsble	r3, r3, #32
 800d248:	ea47 0003 	orrgt.w	r0, r7, r3
 800d24c:	fa04 f003 	lslle.w	r0, r4, r3
 800d250:	f7f3 f958 	bl	8000504 <__aeabi_ui2d>
 800d254:	2201      	movs	r2, #1
 800d256:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d25a:	3e01      	subs	r6, #1
 800d25c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d25e:	e777      	b.n	800d150 <_dtoa_r+0x100>
 800d260:	2301      	movs	r3, #1
 800d262:	e7b8      	b.n	800d1d6 <_dtoa_r+0x186>
 800d264:	9012      	str	r0, [sp, #72]	@ 0x48
 800d266:	e7b7      	b.n	800d1d8 <_dtoa_r+0x188>
 800d268:	427b      	negs	r3, r7
 800d26a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d26c:	2300      	movs	r3, #0
 800d26e:	eba8 0807 	sub.w	r8, r8, r7
 800d272:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d274:	e7c4      	b.n	800d200 <_dtoa_r+0x1b0>
 800d276:	2300      	movs	r3, #0
 800d278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	dc35      	bgt.n	800d2ec <_dtoa_r+0x29c>
 800d280:	2301      	movs	r3, #1
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	9307      	str	r3, [sp, #28]
 800d286:	461a      	mov	r2, r3
 800d288:	920e      	str	r2, [sp, #56]	@ 0x38
 800d28a:	e00b      	b.n	800d2a4 <_dtoa_r+0x254>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7f3      	b.n	800d278 <_dtoa_r+0x228>
 800d290:	2300      	movs	r3, #0
 800d292:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d296:	18fb      	adds	r3, r7, r3
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	bfb8      	it	lt
 800d2a2:	2301      	movlt	r3, #1
 800d2a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	2204      	movs	r2, #4
 800d2ac:	f102 0514 	add.w	r5, r2, #20
 800d2b0:	429d      	cmp	r5, r3
 800d2b2:	d91f      	bls.n	800d2f4 <_dtoa_r+0x2a4>
 800d2b4:	6041      	str	r1, [r0, #4]
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	f000 fd8e 	bl	800ddd8 <_Balloc>
 800d2bc:	4682      	mov	sl, r0
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d13c      	bne.n	800d33c <_dtoa_r+0x2ec>
 800d2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d330 <_dtoa_r+0x2e0>)
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d2ca:	e6d8      	b.n	800d07e <_dtoa_r+0x2e>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e7e0      	b.n	800d292 <_dtoa_r+0x242>
 800d2d0:	2401      	movs	r4, #1
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	9307      	str	r3, [sp, #28]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2312      	movs	r3, #18
 800d2e4:	e7d0      	b.n	800d288 <_dtoa_r+0x238>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ea:	e7f5      	b.n	800d2d8 <_dtoa_r+0x288>
 800d2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	9307      	str	r3, [sp, #28]
 800d2f2:	e7d7      	b.n	800d2a4 <_dtoa_r+0x254>
 800d2f4:	3101      	adds	r1, #1
 800d2f6:	0052      	lsls	r2, r2, #1
 800d2f8:	e7d8      	b.n	800d2ac <_dtoa_r+0x25c>
 800d2fa:	bf00      	nop
 800d2fc:	f3af 8000 	nop.w
 800d300:	636f4361 	.word	0x636f4361
 800d304:	3fd287a7 	.word	0x3fd287a7
 800d308:	8b60c8b3 	.word	0x8b60c8b3
 800d30c:	3fc68a28 	.word	0x3fc68a28
 800d310:	509f79fb 	.word	0x509f79fb
 800d314:	3fd34413 	.word	0x3fd34413
 800d318:	08010f5c 	.word	0x08010f5c
 800d31c:	08010f73 	.word	0x08010f73
 800d320:	7ff00000 	.word	0x7ff00000
 800d324:	080112b9 	.word	0x080112b9
 800d328:	3ff80000 	.word	0x3ff80000
 800d32c:	08011070 	.word	0x08011070
 800d330:	08010fcb 	.word	0x08010fcb
 800d334:	08010f58 	.word	0x08010f58
 800d338:	080112b8 	.word	0x080112b8
 800d33c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d340:	6018      	str	r0, [r3, #0]
 800d342:	9b07      	ldr	r3, [sp, #28]
 800d344:	2b0e      	cmp	r3, #14
 800d346:	f200 80a4 	bhi.w	800d492 <_dtoa_r+0x442>
 800d34a:	2c00      	cmp	r4, #0
 800d34c:	f000 80a1 	beq.w	800d492 <_dtoa_r+0x442>
 800d350:	2f00      	cmp	r7, #0
 800d352:	dd33      	ble.n	800d3bc <_dtoa_r+0x36c>
 800d354:	4bad      	ldr	r3, [pc, #692]	@ (800d60c <_dtoa_r+0x5bc>)
 800d356:	f007 020f 	and.w	r2, r7, #15
 800d35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d35e:	ed93 7b00 	vldr	d7, [r3]
 800d362:	05f8      	lsls	r0, r7, #23
 800d364:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d36c:	d516      	bpl.n	800d39c <_dtoa_r+0x34c>
 800d36e:	4ba8      	ldr	r3, [pc, #672]	@ (800d610 <_dtoa_r+0x5c0>)
 800d370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d378:	f7f3 fa68 	bl	800084c <__aeabi_ddiv>
 800d37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d380:	f004 040f 	and.w	r4, r4, #15
 800d384:	2603      	movs	r6, #3
 800d386:	4da2      	ldr	r5, [pc, #648]	@ (800d610 <_dtoa_r+0x5c0>)
 800d388:	b954      	cbnz	r4, 800d3a0 <_dtoa_r+0x350>
 800d38a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d392:	f7f3 fa5b 	bl	800084c <__aeabi_ddiv>
 800d396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d39a:	e028      	b.n	800d3ee <_dtoa_r+0x39e>
 800d39c:	2602      	movs	r6, #2
 800d39e:	e7f2      	b.n	800d386 <_dtoa_r+0x336>
 800d3a0:	07e1      	lsls	r1, r4, #31
 800d3a2:	d508      	bpl.n	800d3b6 <_dtoa_r+0x366>
 800d3a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3ac:	f7f3 f924 	bl	80005f8 <__aeabi_dmul>
 800d3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3b4:	3601      	adds	r6, #1
 800d3b6:	1064      	asrs	r4, r4, #1
 800d3b8:	3508      	adds	r5, #8
 800d3ba:	e7e5      	b.n	800d388 <_dtoa_r+0x338>
 800d3bc:	f000 80d2 	beq.w	800d564 <_dtoa_r+0x514>
 800d3c0:	427c      	negs	r4, r7
 800d3c2:	4b92      	ldr	r3, [pc, #584]	@ (800d60c <_dtoa_r+0x5bc>)
 800d3c4:	4d92      	ldr	r5, [pc, #584]	@ (800d610 <_dtoa_r+0x5c0>)
 800d3c6:	f004 020f 	and.w	r2, r4, #15
 800d3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3de:	1124      	asrs	r4, r4, #4
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	2602      	movs	r6, #2
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	f040 80b2 	bne.w	800d54e <_dtoa_r+0x4fe>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1d3      	bne.n	800d396 <_dtoa_r+0x346>
 800d3ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 80b7 	beq.w	800d568 <_dtoa_r+0x518>
 800d3fa:	4b86      	ldr	r3, [pc, #536]	@ (800d614 <_dtoa_r+0x5c4>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4620      	mov	r0, r4
 800d400:	4629      	mov	r1, r5
 800d402:	f7f3 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800d406:	2800      	cmp	r0, #0
 800d408:	f000 80ae 	beq.w	800d568 <_dtoa_r+0x518>
 800d40c:	9b07      	ldr	r3, [sp, #28]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 80aa 	beq.w	800d568 <_dtoa_r+0x518>
 800d414:	9b00      	ldr	r3, [sp, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	dd37      	ble.n	800d48a <_dtoa_r+0x43a>
 800d41a:	1e7b      	subs	r3, r7, #1
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	4620      	mov	r0, r4
 800d420:	4b7d      	ldr	r3, [pc, #500]	@ (800d618 <_dtoa_r+0x5c8>)
 800d422:	2200      	movs	r2, #0
 800d424:	4629      	mov	r1, r5
 800d426:	f7f3 f8e7 	bl	80005f8 <__aeabi_dmul>
 800d42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d42e:	9c00      	ldr	r4, [sp, #0]
 800d430:	3601      	adds	r6, #1
 800d432:	4630      	mov	r0, r6
 800d434:	f7f3 f876 	bl	8000524 <__aeabi_i2d>
 800d438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d43c:	f7f3 f8dc 	bl	80005f8 <__aeabi_dmul>
 800d440:	4b76      	ldr	r3, [pc, #472]	@ (800d61c <_dtoa_r+0x5cc>)
 800d442:	2200      	movs	r2, #0
 800d444:	f7f2 ff22 	bl	800028c <__adddf3>
 800d448:	4605      	mov	r5, r0
 800d44a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d44e:	2c00      	cmp	r4, #0
 800d450:	f040 808d 	bne.w	800d56e <_dtoa_r+0x51e>
 800d454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d458:	4b71      	ldr	r3, [pc, #452]	@ (800d620 <_dtoa_r+0x5d0>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	f7f2 ff14 	bl	8000288 <__aeabi_dsub>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d468:	462a      	mov	r2, r5
 800d46a:	4633      	mov	r3, r6
 800d46c:	f7f3 fb54 	bl	8000b18 <__aeabi_dcmpgt>
 800d470:	2800      	cmp	r0, #0
 800d472:	f040 828b 	bne.w	800d98c <_dtoa_r+0x93c>
 800d476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47a:	462a      	mov	r2, r5
 800d47c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d480:	f7f3 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800d484:	2800      	cmp	r0, #0
 800d486:	f040 8128 	bne.w	800d6da <_dtoa_r+0x68a>
 800d48a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d48e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d494:	2b00      	cmp	r3, #0
 800d496:	f2c0 815a 	blt.w	800d74e <_dtoa_r+0x6fe>
 800d49a:	2f0e      	cmp	r7, #14
 800d49c:	f300 8157 	bgt.w	800d74e <_dtoa_r+0x6fe>
 800d4a0:	4b5a      	ldr	r3, [pc, #360]	@ (800d60c <_dtoa_r+0x5bc>)
 800d4a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4a6:	ed93 7b00 	vldr	d7, [r3]
 800d4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	ed8d 7b00 	vstr	d7, [sp]
 800d4b2:	da03      	bge.n	800d4bc <_dtoa_r+0x46c>
 800d4b4:	9b07      	ldr	r3, [sp, #28]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f340 8101 	ble.w	800d6be <_dtoa_r+0x66e>
 800d4bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4c0:	4656      	mov	r6, sl
 800d4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	f7f3 f9bf 	bl	800084c <__aeabi_ddiv>
 800d4ce:	f7f3 fb43 	bl	8000b58 <__aeabi_d2iz>
 800d4d2:	4680      	mov	r8, r0
 800d4d4:	f7f3 f826 	bl	8000524 <__aeabi_i2d>
 800d4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4dc:	f7f3 f88c 	bl	80005f8 <__aeabi_dmul>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d4ec:	f7f2 fecc 	bl	8000288 <__aeabi_dsub>
 800d4f0:	f806 4b01 	strb.w	r4, [r6], #1
 800d4f4:	9d07      	ldr	r5, [sp, #28]
 800d4f6:	eba6 040a 	sub.w	r4, r6, sl
 800d4fa:	42a5      	cmp	r5, r4
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	f040 8117 	bne.w	800d732 <_dtoa_r+0x6e2>
 800d504:	f7f2 fec2 	bl	800028c <__adddf3>
 800d508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d50c:	4604      	mov	r4, r0
 800d50e:	460d      	mov	r5, r1
 800d510:	f7f3 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 800d514:	2800      	cmp	r0, #0
 800d516:	f040 80f9 	bne.w	800d70c <_dtoa_r+0x6bc>
 800d51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d526:	b118      	cbz	r0, 800d530 <_dtoa_r+0x4e0>
 800d528:	f018 0f01 	tst.w	r8, #1
 800d52c:	f040 80ee 	bne.w	800d70c <_dtoa_r+0x6bc>
 800d530:	4649      	mov	r1, r9
 800d532:	4658      	mov	r0, fp
 800d534:	f000 fc90 	bl	800de58 <_Bfree>
 800d538:	2300      	movs	r3, #0
 800d53a:	7033      	strb	r3, [r6, #0]
 800d53c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d53e:	3701      	adds	r7, #1
 800d540:	601f      	str	r7, [r3, #0]
 800d542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d544:	2b00      	cmp	r3, #0
 800d546:	f000 831d 	beq.w	800db84 <_dtoa_r+0xb34>
 800d54a:	601e      	str	r6, [r3, #0]
 800d54c:	e31a      	b.n	800db84 <_dtoa_r+0xb34>
 800d54e:	07e2      	lsls	r2, r4, #31
 800d550:	d505      	bpl.n	800d55e <_dtoa_r+0x50e>
 800d552:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	3601      	adds	r6, #1
 800d55c:	2301      	movs	r3, #1
 800d55e:	1064      	asrs	r4, r4, #1
 800d560:	3508      	adds	r5, #8
 800d562:	e73f      	b.n	800d3e4 <_dtoa_r+0x394>
 800d564:	2602      	movs	r6, #2
 800d566:	e742      	b.n	800d3ee <_dtoa_r+0x39e>
 800d568:	9c07      	ldr	r4, [sp, #28]
 800d56a:	9704      	str	r7, [sp, #16]
 800d56c:	e761      	b.n	800d432 <_dtoa_r+0x3e2>
 800d56e:	4b27      	ldr	r3, [pc, #156]	@ (800d60c <_dtoa_r+0x5bc>)
 800d570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d57a:	4454      	add	r4, sl
 800d57c:	2900      	cmp	r1, #0
 800d57e:	d053      	beq.n	800d628 <_dtoa_r+0x5d8>
 800d580:	4928      	ldr	r1, [pc, #160]	@ (800d624 <_dtoa_r+0x5d4>)
 800d582:	2000      	movs	r0, #0
 800d584:	f7f3 f962 	bl	800084c <__aeabi_ddiv>
 800d588:	4633      	mov	r3, r6
 800d58a:	462a      	mov	r2, r5
 800d58c:	f7f2 fe7c 	bl	8000288 <__aeabi_dsub>
 800d590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d594:	4656      	mov	r6, sl
 800d596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d59a:	f7f3 fadd 	bl	8000b58 <__aeabi_d2iz>
 800d59e:	4605      	mov	r5, r0
 800d5a0:	f7f2 ffc0 	bl	8000524 <__aeabi_i2d>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	3530      	adds	r5, #48	@ 0x30
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5ba:	f806 5b01 	strb.w	r5, [r6], #1
 800d5be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d5c2:	f7f3 fa8b 	bl	8000adc <__aeabi_dcmplt>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d171      	bne.n	800d6ae <_dtoa_r+0x65e>
 800d5ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5ce:	4911      	ldr	r1, [pc, #68]	@ (800d614 <_dtoa_r+0x5c4>)
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	f7f2 fe59 	bl	8000288 <__aeabi_dsub>
 800d5d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d5da:	f7f3 fa7f 	bl	8000adc <__aeabi_dcmplt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f040 8095 	bne.w	800d70e <_dtoa_r+0x6be>
 800d5e4:	42a6      	cmp	r6, r4
 800d5e6:	f43f af50 	beq.w	800d48a <_dtoa_r+0x43a>
 800d5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d5ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d618 <_dtoa_r+0x5c8>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f7f3 f801 	bl	80005f8 <__aeabi_dmul>
 800d5f6:	4b08      	ldr	r3, [pc, #32]	@ (800d618 <_dtoa_r+0x5c8>)
 800d5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d602:	f7f2 fff9 	bl	80005f8 <__aeabi_dmul>
 800d606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d60a:	e7c4      	b.n	800d596 <_dtoa_r+0x546>
 800d60c:	08011070 	.word	0x08011070
 800d610:	08011048 	.word	0x08011048
 800d614:	3ff00000 	.word	0x3ff00000
 800d618:	40240000 	.word	0x40240000
 800d61c:	401c0000 	.word	0x401c0000
 800d620:	40140000 	.word	0x40140000
 800d624:	3fe00000 	.word	0x3fe00000
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	f7f2 ffe4 	bl	80005f8 <__aeabi_dmul>
 800d630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d634:	9415      	str	r4, [sp, #84]	@ 0x54
 800d636:	4656      	mov	r6, sl
 800d638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d63c:	f7f3 fa8c 	bl	8000b58 <__aeabi_d2iz>
 800d640:	4605      	mov	r5, r0
 800d642:	f7f2 ff6f 	bl	8000524 <__aeabi_i2d>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d64e:	f7f2 fe1b 	bl	8000288 <__aeabi_dsub>
 800d652:	3530      	adds	r5, #48	@ 0x30
 800d654:	f806 5b01 	strb.w	r5, [r6], #1
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	42a6      	cmp	r6, r4
 800d65e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d662:	f04f 0200 	mov.w	r2, #0
 800d666:	d124      	bne.n	800d6b2 <_dtoa_r+0x662>
 800d668:	4bac      	ldr	r3, [pc, #688]	@ (800d91c <_dtoa_r+0x8cc>)
 800d66a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d66e:	f7f2 fe0d 	bl	800028c <__adddf3>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d67a:	f7f3 fa4d 	bl	8000b18 <__aeabi_dcmpgt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d145      	bne.n	800d70e <_dtoa_r+0x6be>
 800d682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d686:	49a5      	ldr	r1, [pc, #660]	@ (800d91c <_dtoa_r+0x8cc>)
 800d688:	2000      	movs	r0, #0
 800d68a:	f7f2 fdfd 	bl	8000288 <__aeabi_dsub>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d696:	f7f3 fa21 	bl	8000adc <__aeabi_dcmplt>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	f43f aef5 	beq.w	800d48a <_dtoa_r+0x43a>
 800d6a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d6a2:	1e73      	subs	r3, r6, #1
 800d6a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d6a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d6aa:	2b30      	cmp	r3, #48	@ 0x30
 800d6ac:	d0f8      	beq.n	800d6a0 <_dtoa_r+0x650>
 800d6ae:	9f04      	ldr	r7, [sp, #16]
 800d6b0:	e73e      	b.n	800d530 <_dtoa_r+0x4e0>
 800d6b2:	4b9b      	ldr	r3, [pc, #620]	@ (800d920 <_dtoa_r+0x8d0>)
 800d6b4:	f7f2 ffa0 	bl	80005f8 <__aeabi_dmul>
 800d6b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6bc:	e7bc      	b.n	800d638 <_dtoa_r+0x5e8>
 800d6be:	d10c      	bne.n	800d6da <_dtoa_r+0x68a>
 800d6c0:	4b98      	ldr	r3, [pc, #608]	@ (800d924 <_dtoa_r+0x8d4>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6c8:	f7f2 ff96 	bl	80005f8 <__aeabi_dmul>
 800d6cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6d0:	f7f3 fa18 	bl	8000b04 <__aeabi_dcmpge>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	f000 8157 	beq.w	800d988 <_dtoa_r+0x938>
 800d6da:	2400      	movs	r4, #0
 800d6dc:	4625      	mov	r5, r4
 800d6de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	9304      	str	r3, [sp, #16]
 800d6e4:	4656      	mov	r6, sl
 800d6e6:	2700      	movs	r7, #0
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	4658      	mov	r0, fp
 800d6ec:	f000 fbb4 	bl	800de58 <_Bfree>
 800d6f0:	2d00      	cmp	r5, #0
 800d6f2:	d0dc      	beq.n	800d6ae <_dtoa_r+0x65e>
 800d6f4:	b12f      	cbz	r7, 800d702 <_dtoa_r+0x6b2>
 800d6f6:	42af      	cmp	r7, r5
 800d6f8:	d003      	beq.n	800d702 <_dtoa_r+0x6b2>
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	4658      	mov	r0, fp
 800d6fe:	f000 fbab 	bl	800de58 <_Bfree>
 800d702:	4629      	mov	r1, r5
 800d704:	4658      	mov	r0, fp
 800d706:	f000 fba7 	bl	800de58 <_Bfree>
 800d70a:	e7d0      	b.n	800d6ae <_dtoa_r+0x65e>
 800d70c:	9704      	str	r7, [sp, #16]
 800d70e:	4633      	mov	r3, r6
 800d710:	461e      	mov	r6, r3
 800d712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d716:	2a39      	cmp	r2, #57	@ 0x39
 800d718:	d107      	bne.n	800d72a <_dtoa_r+0x6da>
 800d71a:	459a      	cmp	sl, r3
 800d71c:	d1f8      	bne.n	800d710 <_dtoa_r+0x6c0>
 800d71e:	9a04      	ldr	r2, [sp, #16]
 800d720:	3201      	adds	r2, #1
 800d722:	9204      	str	r2, [sp, #16]
 800d724:	2230      	movs	r2, #48	@ 0x30
 800d726:	f88a 2000 	strb.w	r2, [sl]
 800d72a:	781a      	ldrb	r2, [r3, #0]
 800d72c:	3201      	adds	r2, #1
 800d72e:	701a      	strb	r2, [r3, #0]
 800d730:	e7bd      	b.n	800d6ae <_dtoa_r+0x65e>
 800d732:	4b7b      	ldr	r3, [pc, #492]	@ (800d920 <_dtoa_r+0x8d0>)
 800d734:	2200      	movs	r2, #0
 800d736:	f7f2 ff5f 	bl	80005f8 <__aeabi_dmul>
 800d73a:	2200      	movs	r2, #0
 800d73c:	2300      	movs	r3, #0
 800d73e:	4604      	mov	r4, r0
 800d740:	460d      	mov	r5, r1
 800d742:	f7f3 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d746:	2800      	cmp	r0, #0
 800d748:	f43f aebb 	beq.w	800d4c2 <_dtoa_r+0x472>
 800d74c:	e6f0      	b.n	800d530 <_dtoa_r+0x4e0>
 800d74e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d750:	2a00      	cmp	r2, #0
 800d752:	f000 80db 	beq.w	800d90c <_dtoa_r+0x8bc>
 800d756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d758:	2a01      	cmp	r2, #1
 800d75a:	f300 80bf 	bgt.w	800d8dc <_dtoa_r+0x88c>
 800d75e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d760:	2a00      	cmp	r2, #0
 800d762:	f000 80b7 	beq.w	800d8d4 <_dtoa_r+0x884>
 800d766:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d76a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d76c:	4646      	mov	r6, r8
 800d76e:	9a08      	ldr	r2, [sp, #32]
 800d770:	2101      	movs	r1, #1
 800d772:	441a      	add	r2, r3
 800d774:	4658      	mov	r0, fp
 800d776:	4498      	add	r8, r3
 800d778:	9208      	str	r2, [sp, #32]
 800d77a:	f000 fc6b 	bl	800e054 <__i2b>
 800d77e:	4605      	mov	r5, r0
 800d780:	b15e      	cbz	r6, 800d79a <_dtoa_r+0x74a>
 800d782:	9b08      	ldr	r3, [sp, #32]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dd08      	ble.n	800d79a <_dtoa_r+0x74a>
 800d788:	42b3      	cmp	r3, r6
 800d78a:	9a08      	ldr	r2, [sp, #32]
 800d78c:	bfa8      	it	ge
 800d78e:	4633      	movge	r3, r6
 800d790:	eba8 0803 	sub.w	r8, r8, r3
 800d794:	1af6      	subs	r6, r6, r3
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	9308      	str	r3, [sp, #32]
 800d79a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d79c:	b1f3      	cbz	r3, 800d7dc <_dtoa_r+0x78c>
 800d79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 80b7 	beq.w	800d914 <_dtoa_r+0x8c4>
 800d7a6:	b18c      	cbz	r4, 800d7cc <_dtoa_r+0x77c>
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	4658      	mov	r0, fp
 800d7ae:	f000 fd11 	bl	800e1d4 <__pow5mult>
 800d7b2:	464a      	mov	r2, r9
 800d7b4:	4601      	mov	r1, r0
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	4658      	mov	r0, fp
 800d7ba:	f000 fc61 	bl	800e080 <__multiply>
 800d7be:	4649      	mov	r1, r9
 800d7c0:	9004      	str	r0, [sp, #16]
 800d7c2:	4658      	mov	r0, fp
 800d7c4:	f000 fb48 	bl	800de58 <_Bfree>
 800d7c8:	9b04      	ldr	r3, [sp, #16]
 800d7ca:	4699      	mov	r9, r3
 800d7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ce:	1b1a      	subs	r2, r3, r4
 800d7d0:	d004      	beq.n	800d7dc <_dtoa_r+0x78c>
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4658      	mov	r0, fp
 800d7d6:	f000 fcfd 	bl	800e1d4 <__pow5mult>
 800d7da:	4681      	mov	r9, r0
 800d7dc:	2101      	movs	r1, #1
 800d7de:	4658      	mov	r0, fp
 800d7e0:	f000 fc38 	bl	800e054 <__i2b>
 800d7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 81cf 	beq.w	800db8c <_dtoa_r+0xb3c>
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	4658      	mov	r0, fp
 800d7f4:	f000 fcee 	bl	800e1d4 <__pow5mult>
 800d7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	f300 8095 	bgt.w	800d92c <_dtoa_r+0x8dc>
 800d802:	9b02      	ldr	r3, [sp, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f040 8087 	bne.w	800d918 <_dtoa_r+0x8c8>
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 8089 	bne.w	800d928 <_dtoa_r+0x8d8>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d81c:	0d1b      	lsrs	r3, r3, #20
 800d81e:	051b      	lsls	r3, r3, #20
 800d820:	b12b      	cbz	r3, 800d82e <_dtoa_r+0x7de>
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	3301      	adds	r3, #1
 800d826:	9308      	str	r3, [sp, #32]
 800d828:	f108 0801 	add.w	r8, r8, #1
 800d82c:	2301      	movs	r3, #1
 800d82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 81b0 	beq.w	800db98 <_dtoa_r+0xb48>
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d83e:	6918      	ldr	r0, [r3, #16]
 800d840:	f000 fbbc 	bl	800dfbc <__hi0bits>
 800d844:	f1c0 0020 	rsb	r0, r0, #32
 800d848:	9b08      	ldr	r3, [sp, #32]
 800d84a:	4418      	add	r0, r3
 800d84c:	f010 001f 	ands.w	r0, r0, #31
 800d850:	d077      	beq.n	800d942 <_dtoa_r+0x8f2>
 800d852:	f1c0 0320 	rsb	r3, r0, #32
 800d856:	2b04      	cmp	r3, #4
 800d858:	dd6b      	ble.n	800d932 <_dtoa_r+0x8e2>
 800d85a:	9b08      	ldr	r3, [sp, #32]
 800d85c:	f1c0 001c 	rsb	r0, r0, #28
 800d860:	4403      	add	r3, r0
 800d862:	4480      	add	r8, r0
 800d864:	4406      	add	r6, r0
 800d866:	9308      	str	r3, [sp, #32]
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	dd05      	ble.n	800d87a <_dtoa_r+0x82a>
 800d86e:	4649      	mov	r1, r9
 800d870:	4642      	mov	r2, r8
 800d872:	4658      	mov	r0, fp
 800d874:	f000 fd08 	bl	800e288 <__lshift>
 800d878:	4681      	mov	r9, r0
 800d87a:	9b08      	ldr	r3, [sp, #32]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	dd05      	ble.n	800d88c <_dtoa_r+0x83c>
 800d880:	4621      	mov	r1, r4
 800d882:	461a      	mov	r2, r3
 800d884:	4658      	mov	r0, fp
 800d886:	f000 fcff 	bl	800e288 <__lshift>
 800d88a:	4604      	mov	r4, r0
 800d88c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d059      	beq.n	800d946 <_dtoa_r+0x8f6>
 800d892:	4621      	mov	r1, r4
 800d894:	4648      	mov	r0, r9
 800d896:	f000 fd63 	bl	800e360 <__mcmp>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	da53      	bge.n	800d946 <_dtoa_r+0x8f6>
 800d89e:	1e7b      	subs	r3, r7, #1
 800d8a0:	9304      	str	r3, [sp, #16]
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	220a      	movs	r2, #10
 800d8a8:	4658      	mov	r0, fp
 800d8aa:	f000 faf7 	bl	800de9c <__multadd>
 800d8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8b0:	4681      	mov	r9, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 8172 	beq.w	800db9c <_dtoa_r+0xb4c>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	220a      	movs	r2, #10
 800d8be:	4658      	mov	r0, fp
 800d8c0:	f000 faec 	bl	800de9c <__multadd>
 800d8c4:	9b00      	ldr	r3, [sp, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	dc67      	bgt.n	800d99c <_dtoa_r+0x94c>
 800d8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	dc41      	bgt.n	800d956 <_dtoa_r+0x906>
 800d8d2:	e063      	b.n	800d99c <_dtoa_r+0x94c>
 800d8d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d8d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d8da:	e746      	b.n	800d76a <_dtoa_r+0x71a>
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	1e5c      	subs	r4, r3, #1
 800d8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8e2:	42a3      	cmp	r3, r4
 800d8e4:	bfbf      	itttt	lt
 800d8e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d8e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d8ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d8ec:	1ae3      	sublt	r3, r4, r3
 800d8ee:	bfb4      	ite	lt
 800d8f0:	18d2      	addlt	r2, r2, r3
 800d8f2:	1b1c      	subge	r4, r3, r4
 800d8f4:	9b07      	ldr	r3, [sp, #28]
 800d8f6:	bfbc      	itt	lt
 800d8f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d8fa:	2400      	movlt	r4, #0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	bfb5      	itete	lt
 800d900:	eba8 0603 	sublt.w	r6, r8, r3
 800d904:	9b07      	ldrge	r3, [sp, #28]
 800d906:	2300      	movlt	r3, #0
 800d908:	4646      	movge	r6, r8
 800d90a:	e730      	b.n	800d76e <_dtoa_r+0x71e>
 800d90c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d90e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d910:	4646      	mov	r6, r8
 800d912:	e735      	b.n	800d780 <_dtoa_r+0x730>
 800d914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d916:	e75c      	b.n	800d7d2 <_dtoa_r+0x782>
 800d918:	2300      	movs	r3, #0
 800d91a:	e788      	b.n	800d82e <_dtoa_r+0x7de>
 800d91c:	3fe00000 	.word	0x3fe00000
 800d920:	40240000 	.word	0x40240000
 800d924:	40140000 	.word	0x40140000
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	e780      	b.n	800d82e <_dtoa_r+0x7de>
 800d92c:	2300      	movs	r3, #0
 800d92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d930:	e782      	b.n	800d838 <_dtoa_r+0x7e8>
 800d932:	d099      	beq.n	800d868 <_dtoa_r+0x818>
 800d934:	9a08      	ldr	r2, [sp, #32]
 800d936:	331c      	adds	r3, #28
 800d938:	441a      	add	r2, r3
 800d93a:	4498      	add	r8, r3
 800d93c:	441e      	add	r6, r3
 800d93e:	9208      	str	r2, [sp, #32]
 800d940:	e792      	b.n	800d868 <_dtoa_r+0x818>
 800d942:	4603      	mov	r3, r0
 800d944:	e7f6      	b.n	800d934 <_dtoa_r+0x8e4>
 800d946:	9b07      	ldr	r3, [sp, #28]
 800d948:	9704      	str	r7, [sp, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dc20      	bgt.n	800d990 <_dtoa_r+0x940>
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d952:	2b02      	cmp	r3, #2
 800d954:	dd1e      	ble.n	800d994 <_dtoa_r+0x944>
 800d956:	9b00      	ldr	r3, [sp, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f47f aec0 	bne.w	800d6de <_dtoa_r+0x68e>
 800d95e:	4621      	mov	r1, r4
 800d960:	2205      	movs	r2, #5
 800d962:	4658      	mov	r0, fp
 800d964:	f000 fa9a 	bl	800de9c <__multadd>
 800d968:	4601      	mov	r1, r0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4648      	mov	r0, r9
 800d96e:	f000 fcf7 	bl	800e360 <__mcmp>
 800d972:	2800      	cmp	r0, #0
 800d974:	f77f aeb3 	ble.w	800d6de <_dtoa_r+0x68e>
 800d978:	4656      	mov	r6, sl
 800d97a:	2331      	movs	r3, #49	@ 0x31
 800d97c:	f806 3b01 	strb.w	r3, [r6], #1
 800d980:	9b04      	ldr	r3, [sp, #16]
 800d982:	3301      	adds	r3, #1
 800d984:	9304      	str	r3, [sp, #16]
 800d986:	e6ae      	b.n	800d6e6 <_dtoa_r+0x696>
 800d988:	9c07      	ldr	r4, [sp, #28]
 800d98a:	9704      	str	r7, [sp, #16]
 800d98c:	4625      	mov	r5, r4
 800d98e:	e7f3      	b.n	800d978 <_dtoa_r+0x928>
 800d990:	9b07      	ldr	r3, [sp, #28]
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 8104 	beq.w	800dba4 <_dtoa_r+0xb54>
 800d99c:	2e00      	cmp	r6, #0
 800d99e:	dd05      	ble.n	800d9ac <_dtoa_r+0x95c>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4632      	mov	r2, r6
 800d9a4:	4658      	mov	r0, fp
 800d9a6:	f000 fc6f 	bl	800e288 <__lshift>
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d05a      	beq.n	800da68 <_dtoa_r+0xa18>
 800d9b2:	6869      	ldr	r1, [r5, #4]
 800d9b4:	4658      	mov	r0, fp
 800d9b6:	f000 fa0f 	bl	800ddd8 <_Balloc>
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	b928      	cbnz	r0, 800d9ca <_dtoa_r+0x97a>
 800d9be:	4b84      	ldr	r3, [pc, #528]	@ (800dbd0 <_dtoa_r+0xb80>)
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9c6:	f7ff bb5a 	b.w	800d07e <_dtoa_r+0x2e>
 800d9ca:	692a      	ldr	r2, [r5, #16]
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	0092      	lsls	r2, r2, #2
 800d9d0:	f105 010c 	add.w	r1, r5, #12
 800d9d4:	300c      	adds	r0, #12
 800d9d6:	f002 fb03 	bl	800ffe0 <memcpy>
 800d9da:	2201      	movs	r2, #1
 800d9dc:	4631      	mov	r1, r6
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f000 fc52 	bl	800e288 <__lshift>
 800d9e4:	f10a 0301 	add.w	r3, sl, #1
 800d9e8:	9307      	str	r3, [sp, #28]
 800d9ea:	9b00      	ldr	r3, [sp, #0]
 800d9ec:	4453      	add	r3, sl
 800d9ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9f0:	9b02      	ldr	r3, [sp, #8]
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	462f      	mov	r7, r5
 800d9f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	9b07      	ldr	r3, [sp, #28]
 800d9fe:	4621      	mov	r1, r4
 800da00:	3b01      	subs	r3, #1
 800da02:	4648      	mov	r0, r9
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	f7ff fa9b 	bl	800cf40 <quorem>
 800da0a:	4639      	mov	r1, r7
 800da0c:	9002      	str	r0, [sp, #8]
 800da0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da12:	4648      	mov	r0, r9
 800da14:	f000 fca4 	bl	800e360 <__mcmp>
 800da18:	462a      	mov	r2, r5
 800da1a:	9008      	str	r0, [sp, #32]
 800da1c:	4621      	mov	r1, r4
 800da1e:	4658      	mov	r0, fp
 800da20:	f000 fcba 	bl	800e398 <__mdiff>
 800da24:	68c2      	ldr	r2, [r0, #12]
 800da26:	4606      	mov	r6, r0
 800da28:	bb02      	cbnz	r2, 800da6c <_dtoa_r+0xa1c>
 800da2a:	4601      	mov	r1, r0
 800da2c:	4648      	mov	r0, r9
 800da2e:	f000 fc97 	bl	800e360 <__mcmp>
 800da32:	4602      	mov	r2, r0
 800da34:	4631      	mov	r1, r6
 800da36:	4658      	mov	r0, fp
 800da38:	920e      	str	r2, [sp, #56]	@ 0x38
 800da3a:	f000 fa0d 	bl	800de58 <_Bfree>
 800da3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da42:	9e07      	ldr	r6, [sp, #28]
 800da44:	ea43 0102 	orr.w	r1, r3, r2
 800da48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da4a:	4319      	orrs	r1, r3
 800da4c:	d110      	bne.n	800da70 <_dtoa_r+0xa20>
 800da4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da52:	d029      	beq.n	800daa8 <_dtoa_r+0xa58>
 800da54:	9b08      	ldr	r3, [sp, #32]
 800da56:	2b00      	cmp	r3, #0
 800da58:	dd02      	ble.n	800da60 <_dtoa_r+0xa10>
 800da5a:	9b02      	ldr	r3, [sp, #8]
 800da5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800da60:	9b00      	ldr	r3, [sp, #0]
 800da62:	f883 8000 	strb.w	r8, [r3]
 800da66:	e63f      	b.n	800d6e8 <_dtoa_r+0x698>
 800da68:	4628      	mov	r0, r5
 800da6a:	e7bb      	b.n	800d9e4 <_dtoa_r+0x994>
 800da6c:	2201      	movs	r2, #1
 800da6e:	e7e1      	b.n	800da34 <_dtoa_r+0x9e4>
 800da70:	9b08      	ldr	r3, [sp, #32]
 800da72:	2b00      	cmp	r3, #0
 800da74:	db04      	blt.n	800da80 <_dtoa_r+0xa30>
 800da76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da78:	430b      	orrs	r3, r1
 800da7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da7c:	430b      	orrs	r3, r1
 800da7e:	d120      	bne.n	800dac2 <_dtoa_r+0xa72>
 800da80:	2a00      	cmp	r2, #0
 800da82:	dded      	ble.n	800da60 <_dtoa_r+0xa10>
 800da84:	4649      	mov	r1, r9
 800da86:	2201      	movs	r2, #1
 800da88:	4658      	mov	r0, fp
 800da8a:	f000 fbfd 	bl	800e288 <__lshift>
 800da8e:	4621      	mov	r1, r4
 800da90:	4681      	mov	r9, r0
 800da92:	f000 fc65 	bl	800e360 <__mcmp>
 800da96:	2800      	cmp	r0, #0
 800da98:	dc03      	bgt.n	800daa2 <_dtoa_r+0xa52>
 800da9a:	d1e1      	bne.n	800da60 <_dtoa_r+0xa10>
 800da9c:	f018 0f01 	tst.w	r8, #1
 800daa0:	d0de      	beq.n	800da60 <_dtoa_r+0xa10>
 800daa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800daa6:	d1d8      	bne.n	800da5a <_dtoa_r+0xa0a>
 800daa8:	9a00      	ldr	r2, [sp, #0]
 800daaa:	2339      	movs	r3, #57	@ 0x39
 800daac:	7013      	strb	r3, [r2, #0]
 800daae:	4633      	mov	r3, r6
 800dab0:	461e      	mov	r6, r3
 800dab2:	3b01      	subs	r3, #1
 800dab4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dab8:	2a39      	cmp	r2, #57	@ 0x39
 800daba:	d052      	beq.n	800db62 <_dtoa_r+0xb12>
 800dabc:	3201      	adds	r2, #1
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	e612      	b.n	800d6e8 <_dtoa_r+0x698>
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	dd07      	ble.n	800dad6 <_dtoa_r+0xa86>
 800dac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800daca:	d0ed      	beq.n	800daa8 <_dtoa_r+0xa58>
 800dacc:	9a00      	ldr	r2, [sp, #0]
 800dace:	f108 0301 	add.w	r3, r8, #1
 800dad2:	7013      	strb	r3, [r2, #0]
 800dad4:	e608      	b.n	800d6e8 <_dtoa_r+0x698>
 800dad6:	9b07      	ldr	r3, [sp, #28]
 800dad8:	9a07      	ldr	r2, [sp, #28]
 800dada:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d028      	beq.n	800db36 <_dtoa_r+0xae6>
 800dae4:	4649      	mov	r1, r9
 800dae6:	2300      	movs	r3, #0
 800dae8:	220a      	movs	r2, #10
 800daea:	4658      	mov	r0, fp
 800daec:	f000 f9d6 	bl	800de9c <__multadd>
 800daf0:	42af      	cmp	r7, r5
 800daf2:	4681      	mov	r9, r0
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	f04f 020a 	mov.w	r2, #10
 800dafc:	4639      	mov	r1, r7
 800dafe:	4658      	mov	r0, fp
 800db00:	d107      	bne.n	800db12 <_dtoa_r+0xac2>
 800db02:	f000 f9cb 	bl	800de9c <__multadd>
 800db06:	4607      	mov	r7, r0
 800db08:	4605      	mov	r5, r0
 800db0a:	9b07      	ldr	r3, [sp, #28]
 800db0c:	3301      	adds	r3, #1
 800db0e:	9307      	str	r3, [sp, #28]
 800db10:	e774      	b.n	800d9fc <_dtoa_r+0x9ac>
 800db12:	f000 f9c3 	bl	800de9c <__multadd>
 800db16:	4629      	mov	r1, r5
 800db18:	4607      	mov	r7, r0
 800db1a:	2300      	movs	r3, #0
 800db1c:	220a      	movs	r2, #10
 800db1e:	4658      	mov	r0, fp
 800db20:	f000 f9bc 	bl	800de9c <__multadd>
 800db24:	4605      	mov	r5, r0
 800db26:	e7f0      	b.n	800db0a <_dtoa_r+0xaba>
 800db28:	9b00      	ldr	r3, [sp, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bfcc      	ite	gt
 800db2e:	461e      	movgt	r6, r3
 800db30:	2601      	movle	r6, #1
 800db32:	4456      	add	r6, sl
 800db34:	2700      	movs	r7, #0
 800db36:	4649      	mov	r1, r9
 800db38:	2201      	movs	r2, #1
 800db3a:	4658      	mov	r0, fp
 800db3c:	f000 fba4 	bl	800e288 <__lshift>
 800db40:	4621      	mov	r1, r4
 800db42:	4681      	mov	r9, r0
 800db44:	f000 fc0c 	bl	800e360 <__mcmp>
 800db48:	2800      	cmp	r0, #0
 800db4a:	dcb0      	bgt.n	800daae <_dtoa_r+0xa5e>
 800db4c:	d102      	bne.n	800db54 <_dtoa_r+0xb04>
 800db4e:	f018 0f01 	tst.w	r8, #1
 800db52:	d1ac      	bne.n	800daae <_dtoa_r+0xa5e>
 800db54:	4633      	mov	r3, r6
 800db56:	461e      	mov	r6, r3
 800db58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db5c:	2a30      	cmp	r2, #48	@ 0x30
 800db5e:	d0fa      	beq.n	800db56 <_dtoa_r+0xb06>
 800db60:	e5c2      	b.n	800d6e8 <_dtoa_r+0x698>
 800db62:	459a      	cmp	sl, r3
 800db64:	d1a4      	bne.n	800dab0 <_dtoa_r+0xa60>
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	3301      	adds	r3, #1
 800db6a:	9304      	str	r3, [sp, #16]
 800db6c:	2331      	movs	r3, #49	@ 0x31
 800db6e:	f88a 3000 	strb.w	r3, [sl]
 800db72:	e5b9      	b.n	800d6e8 <_dtoa_r+0x698>
 800db74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dbd4 <_dtoa_r+0xb84>
 800db7a:	b11b      	cbz	r3, 800db84 <_dtoa_r+0xb34>
 800db7c:	f10a 0308 	add.w	r3, sl, #8
 800db80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db82:	6013      	str	r3, [r2, #0]
 800db84:	4650      	mov	r0, sl
 800db86:	b019      	add	sp, #100	@ 0x64
 800db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db8e:	2b01      	cmp	r3, #1
 800db90:	f77f ae37 	ble.w	800d802 <_dtoa_r+0x7b2>
 800db94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db96:	930a      	str	r3, [sp, #40]	@ 0x28
 800db98:	2001      	movs	r0, #1
 800db9a:	e655      	b.n	800d848 <_dtoa_r+0x7f8>
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f77f aed6 	ble.w	800d950 <_dtoa_r+0x900>
 800dba4:	4656      	mov	r6, sl
 800dba6:	4621      	mov	r1, r4
 800dba8:	4648      	mov	r0, r9
 800dbaa:	f7ff f9c9 	bl	800cf40 <quorem>
 800dbae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dbb2:	f806 8b01 	strb.w	r8, [r6], #1
 800dbb6:	9b00      	ldr	r3, [sp, #0]
 800dbb8:	eba6 020a 	sub.w	r2, r6, sl
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	ddb3      	ble.n	800db28 <_dtoa_r+0xad8>
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	220a      	movs	r2, #10
 800dbc6:	4658      	mov	r0, fp
 800dbc8:	f000 f968 	bl	800de9c <__multadd>
 800dbcc:	4681      	mov	r9, r0
 800dbce:	e7ea      	b.n	800dba6 <_dtoa_r+0xb56>
 800dbd0:	08010fcb 	.word	0x08010fcb
 800dbd4:	08010f4f 	.word	0x08010f4f

0800dbd8 <_free_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4605      	mov	r5, r0
 800dbdc:	2900      	cmp	r1, #0
 800dbde:	d041      	beq.n	800dc64 <_free_r+0x8c>
 800dbe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbe4:	1f0c      	subs	r4, r1, #4
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bfb8      	it	lt
 800dbea:	18e4      	addlt	r4, r4, r3
 800dbec:	f000 f8e8 	bl	800ddc0 <__malloc_lock>
 800dbf0:	4a1d      	ldr	r2, [pc, #116]	@ (800dc68 <_free_r+0x90>)
 800dbf2:	6813      	ldr	r3, [r2, #0]
 800dbf4:	b933      	cbnz	r3, 800dc04 <_free_r+0x2c>
 800dbf6:	6063      	str	r3, [r4, #4]
 800dbf8:	6014      	str	r4, [r2, #0]
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc00:	f000 b8e4 	b.w	800ddcc <__malloc_unlock>
 800dc04:	42a3      	cmp	r3, r4
 800dc06:	d908      	bls.n	800dc1a <_free_r+0x42>
 800dc08:	6820      	ldr	r0, [r4, #0]
 800dc0a:	1821      	adds	r1, r4, r0
 800dc0c:	428b      	cmp	r3, r1
 800dc0e:	bf01      	itttt	eq
 800dc10:	6819      	ldreq	r1, [r3, #0]
 800dc12:	685b      	ldreq	r3, [r3, #4]
 800dc14:	1809      	addeq	r1, r1, r0
 800dc16:	6021      	streq	r1, [r4, #0]
 800dc18:	e7ed      	b.n	800dbf6 <_free_r+0x1e>
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	b10b      	cbz	r3, 800dc24 <_free_r+0x4c>
 800dc20:	42a3      	cmp	r3, r4
 800dc22:	d9fa      	bls.n	800dc1a <_free_r+0x42>
 800dc24:	6811      	ldr	r1, [r2, #0]
 800dc26:	1850      	adds	r0, r2, r1
 800dc28:	42a0      	cmp	r0, r4
 800dc2a:	d10b      	bne.n	800dc44 <_free_r+0x6c>
 800dc2c:	6820      	ldr	r0, [r4, #0]
 800dc2e:	4401      	add	r1, r0
 800dc30:	1850      	adds	r0, r2, r1
 800dc32:	4283      	cmp	r3, r0
 800dc34:	6011      	str	r1, [r2, #0]
 800dc36:	d1e0      	bne.n	800dbfa <_free_r+0x22>
 800dc38:	6818      	ldr	r0, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	6053      	str	r3, [r2, #4]
 800dc3e:	4408      	add	r0, r1
 800dc40:	6010      	str	r0, [r2, #0]
 800dc42:	e7da      	b.n	800dbfa <_free_r+0x22>
 800dc44:	d902      	bls.n	800dc4c <_free_r+0x74>
 800dc46:	230c      	movs	r3, #12
 800dc48:	602b      	str	r3, [r5, #0]
 800dc4a:	e7d6      	b.n	800dbfa <_free_r+0x22>
 800dc4c:	6820      	ldr	r0, [r4, #0]
 800dc4e:	1821      	adds	r1, r4, r0
 800dc50:	428b      	cmp	r3, r1
 800dc52:	bf04      	itt	eq
 800dc54:	6819      	ldreq	r1, [r3, #0]
 800dc56:	685b      	ldreq	r3, [r3, #4]
 800dc58:	6063      	str	r3, [r4, #4]
 800dc5a:	bf04      	itt	eq
 800dc5c:	1809      	addeq	r1, r1, r0
 800dc5e:	6021      	streq	r1, [r4, #0]
 800dc60:	6054      	str	r4, [r2, #4]
 800dc62:	e7ca      	b.n	800dbfa <_free_r+0x22>
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	bf00      	nop
 800dc68:	20002240 	.word	0x20002240

0800dc6c <malloc>:
 800dc6c:	4b02      	ldr	r3, [pc, #8]	@ (800dc78 <malloc+0xc>)
 800dc6e:	4601      	mov	r1, r0
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	f000 b825 	b.w	800dcc0 <_malloc_r>
 800dc76:	bf00      	nop
 800dc78:	20000138 	.word	0x20000138

0800dc7c <sbrk_aligned>:
 800dc7c:	b570      	push	{r4, r5, r6, lr}
 800dc7e:	4e0f      	ldr	r6, [pc, #60]	@ (800dcbc <sbrk_aligned+0x40>)
 800dc80:	460c      	mov	r4, r1
 800dc82:	6831      	ldr	r1, [r6, #0]
 800dc84:	4605      	mov	r5, r0
 800dc86:	b911      	cbnz	r1, 800dc8e <sbrk_aligned+0x12>
 800dc88:	f002 f99a 	bl	800ffc0 <_sbrk_r>
 800dc8c:	6030      	str	r0, [r6, #0]
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	f002 f995 	bl	800ffc0 <_sbrk_r>
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	d103      	bne.n	800dca2 <sbrk_aligned+0x26>
 800dc9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dc9e:	4620      	mov	r0, r4
 800dca0:	bd70      	pop	{r4, r5, r6, pc}
 800dca2:	1cc4      	adds	r4, r0, #3
 800dca4:	f024 0403 	bic.w	r4, r4, #3
 800dca8:	42a0      	cmp	r0, r4
 800dcaa:	d0f8      	beq.n	800dc9e <sbrk_aligned+0x22>
 800dcac:	1a21      	subs	r1, r4, r0
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f002 f986 	bl	800ffc0 <_sbrk_r>
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	d1f2      	bne.n	800dc9e <sbrk_aligned+0x22>
 800dcb8:	e7ef      	b.n	800dc9a <sbrk_aligned+0x1e>
 800dcba:	bf00      	nop
 800dcbc:	2000223c 	.word	0x2000223c

0800dcc0 <_malloc_r>:
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	1ccd      	adds	r5, r1, #3
 800dcc6:	f025 0503 	bic.w	r5, r5, #3
 800dcca:	3508      	adds	r5, #8
 800dccc:	2d0c      	cmp	r5, #12
 800dcce:	bf38      	it	cc
 800dcd0:	250c      	movcc	r5, #12
 800dcd2:	2d00      	cmp	r5, #0
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	db01      	blt.n	800dcdc <_malloc_r+0x1c>
 800dcd8:	42a9      	cmp	r1, r5
 800dcda:	d904      	bls.n	800dce6 <_malloc_r+0x26>
 800dcdc:	230c      	movs	r3, #12
 800dcde:	6033      	str	r3, [r6, #0]
 800dce0:	2000      	movs	r0, #0
 800dce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ddbc <_malloc_r+0xfc>
 800dcea:	f000 f869 	bl	800ddc0 <__malloc_lock>
 800dcee:	f8d8 3000 	ldr.w	r3, [r8]
 800dcf2:	461c      	mov	r4, r3
 800dcf4:	bb44      	cbnz	r4, 800dd48 <_malloc_r+0x88>
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f7ff ffbf 	bl	800dc7c <sbrk_aligned>
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	4604      	mov	r4, r0
 800dd02:	d158      	bne.n	800ddb6 <_malloc_r+0xf6>
 800dd04:	f8d8 4000 	ldr.w	r4, [r8]
 800dd08:	4627      	mov	r7, r4
 800dd0a:	2f00      	cmp	r7, #0
 800dd0c:	d143      	bne.n	800dd96 <_malloc_r+0xd6>
 800dd0e:	2c00      	cmp	r4, #0
 800dd10:	d04b      	beq.n	800ddaa <_malloc_r+0xea>
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	4639      	mov	r1, r7
 800dd16:	4630      	mov	r0, r6
 800dd18:	eb04 0903 	add.w	r9, r4, r3
 800dd1c:	f002 f950 	bl	800ffc0 <_sbrk_r>
 800dd20:	4581      	cmp	r9, r0
 800dd22:	d142      	bne.n	800ddaa <_malloc_r+0xea>
 800dd24:	6821      	ldr	r1, [r4, #0]
 800dd26:	1a6d      	subs	r5, r5, r1
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f7ff ffa6 	bl	800dc7c <sbrk_aligned>
 800dd30:	3001      	adds	r0, #1
 800dd32:	d03a      	beq.n	800ddaa <_malloc_r+0xea>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	442b      	add	r3, r5
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	bb62      	cbnz	r2, 800dd9c <_malloc_r+0xdc>
 800dd42:	f8c8 7000 	str.w	r7, [r8]
 800dd46:	e00f      	b.n	800dd68 <_malloc_r+0xa8>
 800dd48:	6822      	ldr	r2, [r4, #0]
 800dd4a:	1b52      	subs	r2, r2, r5
 800dd4c:	d420      	bmi.n	800dd90 <_malloc_r+0xd0>
 800dd4e:	2a0b      	cmp	r2, #11
 800dd50:	d917      	bls.n	800dd82 <_malloc_r+0xc2>
 800dd52:	1961      	adds	r1, r4, r5
 800dd54:	42a3      	cmp	r3, r4
 800dd56:	6025      	str	r5, [r4, #0]
 800dd58:	bf18      	it	ne
 800dd5a:	6059      	strne	r1, [r3, #4]
 800dd5c:	6863      	ldr	r3, [r4, #4]
 800dd5e:	bf08      	it	eq
 800dd60:	f8c8 1000 	streq.w	r1, [r8]
 800dd64:	5162      	str	r2, [r4, r5]
 800dd66:	604b      	str	r3, [r1, #4]
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f000 f82f 	bl	800ddcc <__malloc_unlock>
 800dd6e:	f104 000b 	add.w	r0, r4, #11
 800dd72:	1d23      	adds	r3, r4, #4
 800dd74:	f020 0007 	bic.w	r0, r0, #7
 800dd78:	1ac2      	subs	r2, r0, r3
 800dd7a:	bf1c      	itt	ne
 800dd7c:	1a1b      	subne	r3, r3, r0
 800dd7e:	50a3      	strne	r3, [r4, r2]
 800dd80:	e7af      	b.n	800dce2 <_malloc_r+0x22>
 800dd82:	6862      	ldr	r2, [r4, #4]
 800dd84:	42a3      	cmp	r3, r4
 800dd86:	bf0c      	ite	eq
 800dd88:	f8c8 2000 	streq.w	r2, [r8]
 800dd8c:	605a      	strne	r2, [r3, #4]
 800dd8e:	e7eb      	b.n	800dd68 <_malloc_r+0xa8>
 800dd90:	4623      	mov	r3, r4
 800dd92:	6864      	ldr	r4, [r4, #4]
 800dd94:	e7ae      	b.n	800dcf4 <_malloc_r+0x34>
 800dd96:	463c      	mov	r4, r7
 800dd98:	687f      	ldr	r7, [r7, #4]
 800dd9a:	e7b6      	b.n	800dd0a <_malloc_r+0x4a>
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d1fb      	bne.n	800dd9c <_malloc_r+0xdc>
 800dda4:	2300      	movs	r3, #0
 800dda6:	6053      	str	r3, [r2, #4]
 800dda8:	e7de      	b.n	800dd68 <_malloc_r+0xa8>
 800ddaa:	230c      	movs	r3, #12
 800ddac:	6033      	str	r3, [r6, #0]
 800ddae:	4630      	mov	r0, r6
 800ddb0:	f000 f80c 	bl	800ddcc <__malloc_unlock>
 800ddb4:	e794      	b.n	800dce0 <_malloc_r+0x20>
 800ddb6:	6005      	str	r5, [r0, #0]
 800ddb8:	e7d6      	b.n	800dd68 <_malloc_r+0xa8>
 800ddba:	bf00      	nop
 800ddbc:	20002240 	.word	0x20002240

0800ddc0 <__malloc_lock>:
 800ddc0:	4801      	ldr	r0, [pc, #4]	@ (800ddc8 <__malloc_lock+0x8>)
 800ddc2:	f7ff b8b4 	b.w	800cf2e <__retarget_lock_acquire_recursive>
 800ddc6:	bf00      	nop
 800ddc8:	20002238 	.word	0x20002238

0800ddcc <__malloc_unlock>:
 800ddcc:	4801      	ldr	r0, [pc, #4]	@ (800ddd4 <__malloc_unlock+0x8>)
 800ddce:	f7ff b8af 	b.w	800cf30 <__retarget_lock_release_recursive>
 800ddd2:	bf00      	nop
 800ddd4:	20002238 	.word	0x20002238

0800ddd8 <_Balloc>:
 800ddd8:	b570      	push	{r4, r5, r6, lr}
 800ddda:	69c6      	ldr	r6, [r0, #28]
 800dddc:	4604      	mov	r4, r0
 800ddde:	460d      	mov	r5, r1
 800dde0:	b976      	cbnz	r6, 800de00 <_Balloc+0x28>
 800dde2:	2010      	movs	r0, #16
 800dde4:	f7ff ff42 	bl	800dc6c <malloc>
 800dde8:	4602      	mov	r2, r0
 800ddea:	61e0      	str	r0, [r4, #28]
 800ddec:	b920      	cbnz	r0, 800ddf8 <_Balloc+0x20>
 800ddee:	4b18      	ldr	r3, [pc, #96]	@ (800de50 <_Balloc+0x78>)
 800ddf0:	4818      	ldr	r0, [pc, #96]	@ (800de54 <_Balloc+0x7c>)
 800ddf2:	216b      	movs	r1, #107	@ 0x6b
 800ddf4:	f002 f90c 	bl	8010010 <__assert_func>
 800ddf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddfc:	6006      	str	r6, [r0, #0]
 800ddfe:	60c6      	str	r6, [r0, #12]
 800de00:	69e6      	ldr	r6, [r4, #28]
 800de02:	68f3      	ldr	r3, [r6, #12]
 800de04:	b183      	cbz	r3, 800de28 <_Balloc+0x50>
 800de06:	69e3      	ldr	r3, [r4, #28]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de0e:	b9b8      	cbnz	r0, 800de40 <_Balloc+0x68>
 800de10:	2101      	movs	r1, #1
 800de12:	fa01 f605 	lsl.w	r6, r1, r5
 800de16:	1d72      	adds	r2, r6, #5
 800de18:	0092      	lsls	r2, r2, #2
 800de1a:	4620      	mov	r0, r4
 800de1c:	f002 f916 	bl	801004c <_calloc_r>
 800de20:	b160      	cbz	r0, 800de3c <_Balloc+0x64>
 800de22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de26:	e00e      	b.n	800de46 <_Balloc+0x6e>
 800de28:	2221      	movs	r2, #33	@ 0x21
 800de2a:	2104      	movs	r1, #4
 800de2c:	4620      	mov	r0, r4
 800de2e:	f002 f90d 	bl	801004c <_calloc_r>
 800de32:	69e3      	ldr	r3, [r4, #28]
 800de34:	60f0      	str	r0, [r6, #12]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1e4      	bne.n	800de06 <_Balloc+0x2e>
 800de3c:	2000      	movs	r0, #0
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	6802      	ldr	r2, [r0, #0]
 800de42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de46:	2300      	movs	r3, #0
 800de48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de4c:	e7f7      	b.n	800de3e <_Balloc+0x66>
 800de4e:	bf00      	nop
 800de50:	08010f5c 	.word	0x08010f5c
 800de54:	08010fdc 	.word	0x08010fdc

0800de58 <_Bfree>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	69c6      	ldr	r6, [r0, #28]
 800de5c:	4605      	mov	r5, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	b976      	cbnz	r6, 800de80 <_Bfree+0x28>
 800de62:	2010      	movs	r0, #16
 800de64:	f7ff ff02 	bl	800dc6c <malloc>
 800de68:	4602      	mov	r2, r0
 800de6a:	61e8      	str	r0, [r5, #28]
 800de6c:	b920      	cbnz	r0, 800de78 <_Bfree+0x20>
 800de6e:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <_Bfree+0x3c>)
 800de70:	4809      	ldr	r0, [pc, #36]	@ (800de98 <_Bfree+0x40>)
 800de72:	218f      	movs	r1, #143	@ 0x8f
 800de74:	f002 f8cc 	bl	8010010 <__assert_func>
 800de78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de7c:	6006      	str	r6, [r0, #0]
 800de7e:	60c6      	str	r6, [r0, #12]
 800de80:	b13c      	cbz	r4, 800de92 <_Bfree+0x3a>
 800de82:	69eb      	ldr	r3, [r5, #28]
 800de84:	6862      	ldr	r2, [r4, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de8c:	6021      	str	r1, [r4, #0]
 800de8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de92:	bd70      	pop	{r4, r5, r6, pc}
 800de94:	08010f5c 	.word	0x08010f5c
 800de98:	08010fdc 	.word	0x08010fdc

0800de9c <__multadd>:
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	690d      	ldr	r5, [r1, #16]
 800dea2:	4607      	mov	r7, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	461e      	mov	r6, r3
 800dea8:	f101 0c14 	add.w	ip, r1, #20
 800deac:	2000      	movs	r0, #0
 800deae:	f8dc 3000 	ldr.w	r3, [ip]
 800deb2:	b299      	uxth	r1, r3
 800deb4:	fb02 6101 	mla	r1, r2, r1, r6
 800deb8:	0c1e      	lsrs	r6, r3, #16
 800deba:	0c0b      	lsrs	r3, r1, #16
 800debc:	fb02 3306 	mla	r3, r2, r6, r3
 800dec0:	b289      	uxth	r1, r1
 800dec2:	3001      	adds	r0, #1
 800dec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dec8:	4285      	cmp	r5, r0
 800deca:	f84c 1b04 	str.w	r1, [ip], #4
 800dece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ded2:	dcec      	bgt.n	800deae <__multadd+0x12>
 800ded4:	b30e      	cbz	r6, 800df1a <__multadd+0x7e>
 800ded6:	68a3      	ldr	r3, [r4, #8]
 800ded8:	42ab      	cmp	r3, r5
 800deda:	dc19      	bgt.n	800df10 <__multadd+0x74>
 800dedc:	6861      	ldr	r1, [r4, #4]
 800dede:	4638      	mov	r0, r7
 800dee0:	3101      	adds	r1, #1
 800dee2:	f7ff ff79 	bl	800ddd8 <_Balloc>
 800dee6:	4680      	mov	r8, r0
 800dee8:	b928      	cbnz	r0, 800def6 <__multadd+0x5a>
 800deea:	4602      	mov	r2, r0
 800deec:	4b0c      	ldr	r3, [pc, #48]	@ (800df20 <__multadd+0x84>)
 800deee:	480d      	ldr	r0, [pc, #52]	@ (800df24 <__multadd+0x88>)
 800def0:	21ba      	movs	r1, #186	@ 0xba
 800def2:	f002 f88d 	bl	8010010 <__assert_func>
 800def6:	6922      	ldr	r2, [r4, #16]
 800def8:	3202      	adds	r2, #2
 800defa:	f104 010c 	add.w	r1, r4, #12
 800defe:	0092      	lsls	r2, r2, #2
 800df00:	300c      	adds	r0, #12
 800df02:	f002 f86d 	bl	800ffe0 <memcpy>
 800df06:	4621      	mov	r1, r4
 800df08:	4638      	mov	r0, r7
 800df0a:	f7ff ffa5 	bl	800de58 <_Bfree>
 800df0e:	4644      	mov	r4, r8
 800df10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df14:	3501      	adds	r5, #1
 800df16:	615e      	str	r6, [r3, #20]
 800df18:	6125      	str	r5, [r4, #16]
 800df1a:	4620      	mov	r0, r4
 800df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df20:	08010fcb 	.word	0x08010fcb
 800df24:	08010fdc 	.word	0x08010fdc

0800df28 <__s2b>:
 800df28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df2c:	460c      	mov	r4, r1
 800df2e:	4615      	mov	r5, r2
 800df30:	461f      	mov	r7, r3
 800df32:	2209      	movs	r2, #9
 800df34:	3308      	adds	r3, #8
 800df36:	4606      	mov	r6, r0
 800df38:	fb93 f3f2 	sdiv	r3, r3, r2
 800df3c:	2100      	movs	r1, #0
 800df3e:	2201      	movs	r2, #1
 800df40:	429a      	cmp	r2, r3
 800df42:	db09      	blt.n	800df58 <__s2b+0x30>
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff ff47 	bl	800ddd8 <_Balloc>
 800df4a:	b940      	cbnz	r0, 800df5e <__s2b+0x36>
 800df4c:	4602      	mov	r2, r0
 800df4e:	4b19      	ldr	r3, [pc, #100]	@ (800dfb4 <__s2b+0x8c>)
 800df50:	4819      	ldr	r0, [pc, #100]	@ (800dfb8 <__s2b+0x90>)
 800df52:	21d3      	movs	r1, #211	@ 0xd3
 800df54:	f002 f85c 	bl	8010010 <__assert_func>
 800df58:	0052      	lsls	r2, r2, #1
 800df5a:	3101      	adds	r1, #1
 800df5c:	e7f0      	b.n	800df40 <__s2b+0x18>
 800df5e:	9b08      	ldr	r3, [sp, #32]
 800df60:	6143      	str	r3, [r0, #20]
 800df62:	2d09      	cmp	r5, #9
 800df64:	f04f 0301 	mov.w	r3, #1
 800df68:	6103      	str	r3, [r0, #16]
 800df6a:	dd16      	ble.n	800df9a <__s2b+0x72>
 800df6c:	f104 0909 	add.w	r9, r4, #9
 800df70:	46c8      	mov	r8, r9
 800df72:	442c      	add	r4, r5
 800df74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df78:	4601      	mov	r1, r0
 800df7a:	3b30      	subs	r3, #48	@ 0x30
 800df7c:	220a      	movs	r2, #10
 800df7e:	4630      	mov	r0, r6
 800df80:	f7ff ff8c 	bl	800de9c <__multadd>
 800df84:	45a0      	cmp	r8, r4
 800df86:	d1f5      	bne.n	800df74 <__s2b+0x4c>
 800df88:	f1a5 0408 	sub.w	r4, r5, #8
 800df8c:	444c      	add	r4, r9
 800df8e:	1b2d      	subs	r5, r5, r4
 800df90:	1963      	adds	r3, r4, r5
 800df92:	42bb      	cmp	r3, r7
 800df94:	db04      	blt.n	800dfa0 <__s2b+0x78>
 800df96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9a:	340a      	adds	r4, #10
 800df9c:	2509      	movs	r5, #9
 800df9e:	e7f6      	b.n	800df8e <__s2b+0x66>
 800dfa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dfa4:	4601      	mov	r1, r0
 800dfa6:	3b30      	subs	r3, #48	@ 0x30
 800dfa8:	220a      	movs	r2, #10
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7ff ff76 	bl	800de9c <__multadd>
 800dfb0:	e7ee      	b.n	800df90 <__s2b+0x68>
 800dfb2:	bf00      	nop
 800dfb4:	08010fcb 	.word	0x08010fcb
 800dfb8:	08010fdc 	.word	0x08010fdc

0800dfbc <__hi0bits>:
 800dfbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	bf36      	itet	cc
 800dfc4:	0403      	lslcc	r3, r0, #16
 800dfc6:	2000      	movcs	r0, #0
 800dfc8:	2010      	movcc	r0, #16
 800dfca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfce:	bf3c      	itt	cc
 800dfd0:	021b      	lslcc	r3, r3, #8
 800dfd2:	3008      	addcc	r0, #8
 800dfd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfd8:	bf3c      	itt	cc
 800dfda:	011b      	lslcc	r3, r3, #4
 800dfdc:	3004      	addcc	r0, #4
 800dfde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfe2:	bf3c      	itt	cc
 800dfe4:	009b      	lslcc	r3, r3, #2
 800dfe6:	3002      	addcc	r0, #2
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db05      	blt.n	800dff8 <__hi0bits+0x3c>
 800dfec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dff0:	f100 0001 	add.w	r0, r0, #1
 800dff4:	bf08      	it	eq
 800dff6:	2020      	moveq	r0, #32
 800dff8:	4770      	bx	lr

0800dffa <__lo0bits>:
 800dffa:	6803      	ldr	r3, [r0, #0]
 800dffc:	4602      	mov	r2, r0
 800dffe:	f013 0007 	ands.w	r0, r3, #7
 800e002:	d00b      	beq.n	800e01c <__lo0bits+0x22>
 800e004:	07d9      	lsls	r1, r3, #31
 800e006:	d421      	bmi.n	800e04c <__lo0bits+0x52>
 800e008:	0798      	lsls	r0, r3, #30
 800e00a:	bf49      	itett	mi
 800e00c:	085b      	lsrmi	r3, r3, #1
 800e00e:	089b      	lsrpl	r3, r3, #2
 800e010:	2001      	movmi	r0, #1
 800e012:	6013      	strmi	r3, [r2, #0]
 800e014:	bf5c      	itt	pl
 800e016:	6013      	strpl	r3, [r2, #0]
 800e018:	2002      	movpl	r0, #2
 800e01a:	4770      	bx	lr
 800e01c:	b299      	uxth	r1, r3
 800e01e:	b909      	cbnz	r1, 800e024 <__lo0bits+0x2a>
 800e020:	0c1b      	lsrs	r3, r3, #16
 800e022:	2010      	movs	r0, #16
 800e024:	b2d9      	uxtb	r1, r3
 800e026:	b909      	cbnz	r1, 800e02c <__lo0bits+0x32>
 800e028:	3008      	adds	r0, #8
 800e02a:	0a1b      	lsrs	r3, r3, #8
 800e02c:	0719      	lsls	r1, r3, #28
 800e02e:	bf04      	itt	eq
 800e030:	091b      	lsreq	r3, r3, #4
 800e032:	3004      	addeq	r0, #4
 800e034:	0799      	lsls	r1, r3, #30
 800e036:	bf04      	itt	eq
 800e038:	089b      	lsreq	r3, r3, #2
 800e03a:	3002      	addeq	r0, #2
 800e03c:	07d9      	lsls	r1, r3, #31
 800e03e:	d403      	bmi.n	800e048 <__lo0bits+0x4e>
 800e040:	085b      	lsrs	r3, r3, #1
 800e042:	f100 0001 	add.w	r0, r0, #1
 800e046:	d003      	beq.n	800e050 <__lo0bits+0x56>
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	4770      	bx	lr
 800e04c:	2000      	movs	r0, #0
 800e04e:	4770      	bx	lr
 800e050:	2020      	movs	r0, #32
 800e052:	4770      	bx	lr

0800e054 <__i2b>:
 800e054:	b510      	push	{r4, lr}
 800e056:	460c      	mov	r4, r1
 800e058:	2101      	movs	r1, #1
 800e05a:	f7ff febd 	bl	800ddd8 <_Balloc>
 800e05e:	4602      	mov	r2, r0
 800e060:	b928      	cbnz	r0, 800e06e <__i2b+0x1a>
 800e062:	4b05      	ldr	r3, [pc, #20]	@ (800e078 <__i2b+0x24>)
 800e064:	4805      	ldr	r0, [pc, #20]	@ (800e07c <__i2b+0x28>)
 800e066:	f240 1145 	movw	r1, #325	@ 0x145
 800e06a:	f001 ffd1 	bl	8010010 <__assert_func>
 800e06e:	2301      	movs	r3, #1
 800e070:	6144      	str	r4, [r0, #20]
 800e072:	6103      	str	r3, [r0, #16]
 800e074:	bd10      	pop	{r4, pc}
 800e076:	bf00      	nop
 800e078:	08010fcb 	.word	0x08010fcb
 800e07c:	08010fdc 	.word	0x08010fdc

0800e080 <__multiply>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	4614      	mov	r4, r2
 800e086:	690a      	ldr	r2, [r1, #16]
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	bfa8      	it	ge
 800e08e:	4623      	movge	r3, r4
 800e090:	460f      	mov	r7, r1
 800e092:	bfa4      	itt	ge
 800e094:	460c      	movge	r4, r1
 800e096:	461f      	movge	r7, r3
 800e098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e09c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	6861      	ldr	r1, [r4, #4]
 800e0a4:	eb0a 0609 	add.w	r6, sl, r9
 800e0a8:	42b3      	cmp	r3, r6
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	bfb8      	it	lt
 800e0ae:	3101      	addlt	r1, #1
 800e0b0:	f7ff fe92 	bl	800ddd8 <_Balloc>
 800e0b4:	b930      	cbnz	r0, 800e0c4 <__multiply+0x44>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	4b44      	ldr	r3, [pc, #272]	@ (800e1cc <__multiply+0x14c>)
 800e0ba:	4845      	ldr	r0, [pc, #276]	@ (800e1d0 <__multiply+0x150>)
 800e0bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e0c0:	f001 ffa6 	bl	8010010 <__assert_func>
 800e0c4:	f100 0514 	add.w	r5, r0, #20
 800e0c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4543      	cmp	r3, r8
 800e0d2:	d321      	bcc.n	800e118 <__multiply+0x98>
 800e0d4:	f107 0114 	add.w	r1, r7, #20
 800e0d8:	f104 0214 	add.w	r2, r4, #20
 800e0dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e0e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	1b13      	subs	r3, r2, r4
 800e0e8:	3b15      	subs	r3, #21
 800e0ea:	f023 0303 	bic.w	r3, r3, #3
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	f104 0715 	add.w	r7, r4, #21
 800e0f4:	42ba      	cmp	r2, r7
 800e0f6:	bf38      	it	cc
 800e0f8:	2304      	movcc	r3, #4
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	9b02      	ldr	r3, [sp, #8]
 800e0fe:	9103      	str	r1, [sp, #12]
 800e100:	428b      	cmp	r3, r1
 800e102:	d80c      	bhi.n	800e11e <__multiply+0x9e>
 800e104:	2e00      	cmp	r6, #0
 800e106:	dd03      	ble.n	800e110 <__multiply+0x90>
 800e108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d05b      	beq.n	800e1c8 <__multiply+0x148>
 800e110:	6106      	str	r6, [r0, #16]
 800e112:	b005      	add	sp, #20
 800e114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e118:	f843 2b04 	str.w	r2, [r3], #4
 800e11c:	e7d8      	b.n	800e0d0 <__multiply+0x50>
 800e11e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e122:	f1ba 0f00 	cmp.w	sl, #0
 800e126:	d024      	beq.n	800e172 <__multiply+0xf2>
 800e128:	f104 0e14 	add.w	lr, r4, #20
 800e12c:	46a9      	mov	r9, r5
 800e12e:	f04f 0c00 	mov.w	ip, #0
 800e132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e136:	f8d9 3000 	ldr.w	r3, [r9]
 800e13a:	fa1f fb87 	uxth.w	fp, r7
 800e13e:	b29b      	uxth	r3, r3
 800e140:	fb0a 330b 	mla	r3, sl, fp, r3
 800e144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e148:	f8d9 7000 	ldr.w	r7, [r9]
 800e14c:	4463      	add	r3, ip
 800e14e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e152:	fb0a c70b 	mla	r7, sl, fp, ip
 800e156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e160:	4572      	cmp	r2, lr
 800e162:	f849 3b04 	str.w	r3, [r9], #4
 800e166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e16a:	d8e2      	bhi.n	800e132 <__multiply+0xb2>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	f845 c003 	str.w	ip, [r5, r3]
 800e172:	9b03      	ldr	r3, [sp, #12]
 800e174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e178:	3104      	adds	r1, #4
 800e17a:	f1b9 0f00 	cmp.w	r9, #0
 800e17e:	d021      	beq.n	800e1c4 <__multiply+0x144>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	f104 0c14 	add.w	ip, r4, #20
 800e186:	46ae      	mov	lr, r5
 800e188:	f04f 0a00 	mov.w	sl, #0
 800e18c:	f8bc b000 	ldrh.w	fp, [ip]
 800e190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e194:	fb09 770b 	mla	r7, r9, fp, r7
 800e198:	4457      	add	r7, sl
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1a0:	f84e 3b04 	str.w	r3, [lr], #4
 800e1a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1ac:	f8be 3000 	ldrh.w	r3, [lr]
 800e1b0:	fb09 330a 	mla	r3, r9, sl, r3
 800e1b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e1b8:	4562      	cmp	r2, ip
 800e1ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1be:	d8e5      	bhi.n	800e18c <__multiply+0x10c>
 800e1c0:	9f01      	ldr	r7, [sp, #4]
 800e1c2:	51eb      	str	r3, [r5, r7]
 800e1c4:	3504      	adds	r5, #4
 800e1c6:	e799      	b.n	800e0fc <__multiply+0x7c>
 800e1c8:	3e01      	subs	r6, #1
 800e1ca:	e79b      	b.n	800e104 <__multiply+0x84>
 800e1cc:	08010fcb 	.word	0x08010fcb
 800e1d0:	08010fdc 	.word	0x08010fdc

0800e1d4 <__pow5mult>:
 800e1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d8:	4615      	mov	r5, r2
 800e1da:	f012 0203 	ands.w	r2, r2, #3
 800e1de:	4607      	mov	r7, r0
 800e1e0:	460e      	mov	r6, r1
 800e1e2:	d007      	beq.n	800e1f4 <__pow5mult+0x20>
 800e1e4:	4c25      	ldr	r4, [pc, #148]	@ (800e27c <__pow5mult+0xa8>)
 800e1e6:	3a01      	subs	r2, #1
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1ee:	f7ff fe55 	bl	800de9c <__multadd>
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	10ad      	asrs	r5, r5, #2
 800e1f6:	d03d      	beq.n	800e274 <__pow5mult+0xa0>
 800e1f8:	69fc      	ldr	r4, [r7, #28]
 800e1fa:	b97c      	cbnz	r4, 800e21c <__pow5mult+0x48>
 800e1fc:	2010      	movs	r0, #16
 800e1fe:	f7ff fd35 	bl	800dc6c <malloc>
 800e202:	4602      	mov	r2, r0
 800e204:	61f8      	str	r0, [r7, #28]
 800e206:	b928      	cbnz	r0, 800e214 <__pow5mult+0x40>
 800e208:	4b1d      	ldr	r3, [pc, #116]	@ (800e280 <__pow5mult+0xac>)
 800e20a:	481e      	ldr	r0, [pc, #120]	@ (800e284 <__pow5mult+0xb0>)
 800e20c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e210:	f001 fefe 	bl	8010010 <__assert_func>
 800e214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e218:	6004      	str	r4, [r0, #0]
 800e21a:	60c4      	str	r4, [r0, #12]
 800e21c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e224:	b94c      	cbnz	r4, 800e23a <__pow5mult+0x66>
 800e226:	f240 2171 	movw	r1, #625	@ 0x271
 800e22a:	4638      	mov	r0, r7
 800e22c:	f7ff ff12 	bl	800e054 <__i2b>
 800e230:	2300      	movs	r3, #0
 800e232:	f8c8 0008 	str.w	r0, [r8, #8]
 800e236:	4604      	mov	r4, r0
 800e238:	6003      	str	r3, [r0, #0]
 800e23a:	f04f 0900 	mov.w	r9, #0
 800e23e:	07eb      	lsls	r3, r5, #31
 800e240:	d50a      	bpl.n	800e258 <__pow5mult+0x84>
 800e242:	4631      	mov	r1, r6
 800e244:	4622      	mov	r2, r4
 800e246:	4638      	mov	r0, r7
 800e248:	f7ff ff1a 	bl	800e080 <__multiply>
 800e24c:	4631      	mov	r1, r6
 800e24e:	4680      	mov	r8, r0
 800e250:	4638      	mov	r0, r7
 800e252:	f7ff fe01 	bl	800de58 <_Bfree>
 800e256:	4646      	mov	r6, r8
 800e258:	106d      	asrs	r5, r5, #1
 800e25a:	d00b      	beq.n	800e274 <__pow5mult+0xa0>
 800e25c:	6820      	ldr	r0, [r4, #0]
 800e25e:	b938      	cbnz	r0, 800e270 <__pow5mult+0x9c>
 800e260:	4622      	mov	r2, r4
 800e262:	4621      	mov	r1, r4
 800e264:	4638      	mov	r0, r7
 800e266:	f7ff ff0b 	bl	800e080 <__multiply>
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	f8c0 9000 	str.w	r9, [r0]
 800e270:	4604      	mov	r4, r0
 800e272:	e7e4      	b.n	800e23e <__pow5mult+0x6a>
 800e274:	4630      	mov	r0, r6
 800e276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e27a:	bf00      	nop
 800e27c:	08011038 	.word	0x08011038
 800e280:	08010f5c 	.word	0x08010f5c
 800e284:	08010fdc 	.word	0x08010fdc

0800e288 <__lshift>:
 800e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28c:	460c      	mov	r4, r1
 800e28e:	6849      	ldr	r1, [r1, #4]
 800e290:	6923      	ldr	r3, [r4, #16]
 800e292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e296:	68a3      	ldr	r3, [r4, #8]
 800e298:	4607      	mov	r7, r0
 800e29a:	4691      	mov	r9, r2
 800e29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2a0:	f108 0601 	add.w	r6, r8, #1
 800e2a4:	42b3      	cmp	r3, r6
 800e2a6:	db0b      	blt.n	800e2c0 <__lshift+0x38>
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	f7ff fd95 	bl	800ddd8 <_Balloc>
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	b948      	cbnz	r0, 800e2c6 <__lshift+0x3e>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	4b28      	ldr	r3, [pc, #160]	@ (800e358 <__lshift+0xd0>)
 800e2b6:	4829      	ldr	r0, [pc, #164]	@ (800e35c <__lshift+0xd4>)
 800e2b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e2bc:	f001 fea8 	bl	8010010 <__assert_func>
 800e2c0:	3101      	adds	r1, #1
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	e7ee      	b.n	800e2a4 <__lshift+0x1c>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f100 0114 	add.w	r1, r0, #20
 800e2cc:	f100 0210 	add.w	r2, r0, #16
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	4553      	cmp	r3, sl
 800e2d4:	db33      	blt.n	800e33e <__lshift+0xb6>
 800e2d6:	6920      	ldr	r0, [r4, #16]
 800e2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2dc:	f104 0314 	add.w	r3, r4, #20
 800e2e0:	f019 091f 	ands.w	r9, r9, #31
 800e2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2ec:	d02b      	beq.n	800e346 <__lshift+0xbe>
 800e2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800e2f2:	468a      	mov	sl, r1
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800e2fc:	4310      	orrs	r0, r2
 800e2fe:	f84a 0b04 	str.w	r0, [sl], #4
 800e302:	f853 2b04 	ldr.w	r2, [r3], #4
 800e306:	459c      	cmp	ip, r3
 800e308:	fa22 f20e 	lsr.w	r2, r2, lr
 800e30c:	d8f3      	bhi.n	800e2f6 <__lshift+0x6e>
 800e30e:	ebac 0304 	sub.w	r3, ip, r4
 800e312:	3b15      	subs	r3, #21
 800e314:	f023 0303 	bic.w	r3, r3, #3
 800e318:	3304      	adds	r3, #4
 800e31a:	f104 0015 	add.w	r0, r4, #21
 800e31e:	4584      	cmp	ip, r0
 800e320:	bf38      	it	cc
 800e322:	2304      	movcc	r3, #4
 800e324:	50ca      	str	r2, [r1, r3]
 800e326:	b10a      	cbz	r2, 800e32c <__lshift+0xa4>
 800e328:	f108 0602 	add.w	r6, r8, #2
 800e32c:	3e01      	subs	r6, #1
 800e32e:	4638      	mov	r0, r7
 800e330:	612e      	str	r6, [r5, #16]
 800e332:	4621      	mov	r1, r4
 800e334:	f7ff fd90 	bl	800de58 <_Bfree>
 800e338:	4628      	mov	r0, r5
 800e33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e342:	3301      	adds	r3, #1
 800e344:	e7c5      	b.n	800e2d2 <__lshift+0x4a>
 800e346:	3904      	subs	r1, #4
 800e348:	f853 2b04 	ldr.w	r2, [r3], #4
 800e34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e350:	459c      	cmp	ip, r3
 800e352:	d8f9      	bhi.n	800e348 <__lshift+0xc0>
 800e354:	e7ea      	b.n	800e32c <__lshift+0xa4>
 800e356:	bf00      	nop
 800e358:	08010fcb 	.word	0x08010fcb
 800e35c:	08010fdc 	.word	0x08010fdc

0800e360 <__mcmp>:
 800e360:	690a      	ldr	r2, [r1, #16]
 800e362:	4603      	mov	r3, r0
 800e364:	6900      	ldr	r0, [r0, #16]
 800e366:	1a80      	subs	r0, r0, r2
 800e368:	b530      	push	{r4, r5, lr}
 800e36a:	d10e      	bne.n	800e38a <__mcmp+0x2a>
 800e36c:	3314      	adds	r3, #20
 800e36e:	3114      	adds	r1, #20
 800e370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e380:	4295      	cmp	r5, r2
 800e382:	d003      	beq.n	800e38c <__mcmp+0x2c>
 800e384:	d205      	bcs.n	800e392 <__mcmp+0x32>
 800e386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e38a:	bd30      	pop	{r4, r5, pc}
 800e38c:	42a3      	cmp	r3, r4
 800e38e:	d3f3      	bcc.n	800e378 <__mcmp+0x18>
 800e390:	e7fb      	b.n	800e38a <__mcmp+0x2a>
 800e392:	2001      	movs	r0, #1
 800e394:	e7f9      	b.n	800e38a <__mcmp+0x2a>
	...

0800e398 <__mdiff>:
 800e398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	4689      	mov	r9, r1
 800e39e:	4606      	mov	r6, r0
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4648      	mov	r0, r9
 800e3a4:	4614      	mov	r4, r2
 800e3a6:	f7ff ffdb 	bl	800e360 <__mcmp>
 800e3aa:	1e05      	subs	r5, r0, #0
 800e3ac:	d112      	bne.n	800e3d4 <__mdiff+0x3c>
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7ff fd11 	bl	800ddd8 <_Balloc>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	b928      	cbnz	r0, 800e3c6 <__mdiff+0x2e>
 800e3ba:	4b3f      	ldr	r3, [pc, #252]	@ (800e4b8 <__mdiff+0x120>)
 800e3bc:	f240 2137 	movw	r1, #567	@ 0x237
 800e3c0:	483e      	ldr	r0, [pc, #248]	@ (800e4bc <__mdiff+0x124>)
 800e3c2:	f001 fe25 	bl	8010010 <__assert_func>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	b003      	add	sp, #12
 800e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d4:	bfbc      	itt	lt
 800e3d6:	464b      	movlt	r3, r9
 800e3d8:	46a1      	movlt	r9, r4
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3e0:	bfba      	itte	lt
 800e3e2:	461c      	movlt	r4, r3
 800e3e4:	2501      	movlt	r5, #1
 800e3e6:	2500      	movge	r5, #0
 800e3e8:	f7ff fcf6 	bl	800ddd8 <_Balloc>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	b918      	cbnz	r0, 800e3f8 <__mdiff+0x60>
 800e3f0:	4b31      	ldr	r3, [pc, #196]	@ (800e4b8 <__mdiff+0x120>)
 800e3f2:	f240 2145 	movw	r1, #581	@ 0x245
 800e3f6:	e7e3      	b.n	800e3c0 <__mdiff+0x28>
 800e3f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3fc:	6926      	ldr	r6, [r4, #16]
 800e3fe:	60c5      	str	r5, [r0, #12]
 800e400:	f109 0310 	add.w	r3, r9, #16
 800e404:	f109 0514 	add.w	r5, r9, #20
 800e408:	f104 0e14 	add.w	lr, r4, #20
 800e40c:	f100 0b14 	add.w	fp, r0, #20
 800e410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	46d9      	mov	r9, fp
 800e41c:	f04f 0c00 	mov.w	ip, #0
 800e420:	9b01      	ldr	r3, [sp, #4]
 800e422:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e426:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	fa1f f38a 	uxth.w	r3, sl
 800e430:	4619      	mov	r1, r3
 800e432:	b283      	uxth	r3, r0
 800e434:	1acb      	subs	r3, r1, r3
 800e436:	0c00      	lsrs	r0, r0, #16
 800e438:	4463      	add	r3, ip
 800e43a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e43e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e442:	b29b      	uxth	r3, r3
 800e444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e448:	4576      	cmp	r6, lr
 800e44a:	f849 3b04 	str.w	r3, [r9], #4
 800e44e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e452:	d8e5      	bhi.n	800e420 <__mdiff+0x88>
 800e454:	1b33      	subs	r3, r6, r4
 800e456:	3b15      	subs	r3, #21
 800e458:	f023 0303 	bic.w	r3, r3, #3
 800e45c:	3415      	adds	r4, #21
 800e45e:	3304      	adds	r3, #4
 800e460:	42a6      	cmp	r6, r4
 800e462:	bf38      	it	cc
 800e464:	2304      	movcc	r3, #4
 800e466:	441d      	add	r5, r3
 800e468:	445b      	add	r3, fp
 800e46a:	461e      	mov	r6, r3
 800e46c:	462c      	mov	r4, r5
 800e46e:	4544      	cmp	r4, r8
 800e470:	d30e      	bcc.n	800e490 <__mdiff+0xf8>
 800e472:	f108 0103 	add.w	r1, r8, #3
 800e476:	1b49      	subs	r1, r1, r5
 800e478:	f021 0103 	bic.w	r1, r1, #3
 800e47c:	3d03      	subs	r5, #3
 800e47e:	45a8      	cmp	r8, r5
 800e480:	bf38      	it	cc
 800e482:	2100      	movcc	r1, #0
 800e484:	440b      	add	r3, r1
 800e486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e48a:	b191      	cbz	r1, 800e4b2 <__mdiff+0x11a>
 800e48c:	6117      	str	r7, [r2, #16]
 800e48e:	e79d      	b.n	800e3cc <__mdiff+0x34>
 800e490:	f854 1b04 	ldr.w	r1, [r4], #4
 800e494:	46e6      	mov	lr, ip
 800e496:	0c08      	lsrs	r0, r1, #16
 800e498:	fa1c fc81 	uxtah	ip, ip, r1
 800e49c:	4471      	add	r1, lr
 800e49e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e4a2:	b289      	uxth	r1, r1
 800e4a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e4a8:	f846 1b04 	str.w	r1, [r6], #4
 800e4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4b0:	e7dd      	b.n	800e46e <__mdiff+0xd6>
 800e4b2:	3f01      	subs	r7, #1
 800e4b4:	e7e7      	b.n	800e486 <__mdiff+0xee>
 800e4b6:	bf00      	nop
 800e4b8:	08010fcb 	.word	0x08010fcb
 800e4bc:	08010fdc 	.word	0x08010fdc

0800e4c0 <__ulp>:
 800e4c0:	b082      	sub	sp, #8
 800e4c2:	ed8d 0b00 	vstr	d0, [sp]
 800e4c6:	9a01      	ldr	r2, [sp, #4]
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e508 <__ulp+0x48>)
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dc08      	bgt.n	800e4e6 <__ulp+0x26>
 800e4d4:	425b      	negs	r3, r3
 800e4d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e4da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4de:	da04      	bge.n	800e4ea <__ulp+0x2a>
 800e4e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4e4:	4113      	asrs	r3, r2
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	e008      	b.n	800e4fc <__ulp+0x3c>
 800e4ea:	f1a2 0314 	sub.w	r3, r2, #20
 800e4ee:	2b1e      	cmp	r3, #30
 800e4f0:	bfda      	itte	le
 800e4f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e4f6:	40da      	lsrle	r2, r3
 800e4f8:	2201      	movgt	r2, #1
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	4610      	mov	r0, r2
 800e500:	ec41 0b10 	vmov	d0, r0, r1
 800e504:	b002      	add	sp, #8
 800e506:	4770      	bx	lr
 800e508:	7ff00000 	.word	0x7ff00000

0800e50c <__b2d>:
 800e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e510:	6906      	ldr	r6, [r0, #16]
 800e512:	f100 0814 	add.w	r8, r0, #20
 800e516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e51a:	1f37      	subs	r7, r6, #4
 800e51c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e520:	4610      	mov	r0, r2
 800e522:	f7ff fd4b 	bl	800dfbc <__hi0bits>
 800e526:	f1c0 0320 	rsb	r3, r0, #32
 800e52a:	280a      	cmp	r0, #10
 800e52c:	600b      	str	r3, [r1, #0]
 800e52e:	491b      	ldr	r1, [pc, #108]	@ (800e59c <__b2d+0x90>)
 800e530:	dc15      	bgt.n	800e55e <__b2d+0x52>
 800e532:	f1c0 0c0b 	rsb	ip, r0, #11
 800e536:	fa22 f30c 	lsr.w	r3, r2, ip
 800e53a:	45b8      	cmp	r8, r7
 800e53c:	ea43 0501 	orr.w	r5, r3, r1
 800e540:	bf34      	ite	cc
 800e542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e546:	2300      	movcs	r3, #0
 800e548:	3015      	adds	r0, #21
 800e54a:	fa02 f000 	lsl.w	r0, r2, r0
 800e54e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e552:	4303      	orrs	r3, r0
 800e554:	461c      	mov	r4, r3
 800e556:	ec45 4b10 	vmov	d0, r4, r5
 800e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55e:	45b8      	cmp	r8, r7
 800e560:	bf3a      	itte	cc
 800e562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e566:	f1a6 0708 	subcc.w	r7, r6, #8
 800e56a:	2300      	movcs	r3, #0
 800e56c:	380b      	subs	r0, #11
 800e56e:	d012      	beq.n	800e596 <__b2d+0x8a>
 800e570:	f1c0 0120 	rsb	r1, r0, #32
 800e574:	fa23 f401 	lsr.w	r4, r3, r1
 800e578:	4082      	lsls	r2, r0
 800e57a:	4322      	orrs	r2, r4
 800e57c:	4547      	cmp	r7, r8
 800e57e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e582:	bf8c      	ite	hi
 800e584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e588:	2200      	movls	r2, #0
 800e58a:	4083      	lsls	r3, r0
 800e58c:	40ca      	lsrs	r2, r1
 800e58e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e592:	4313      	orrs	r3, r2
 800e594:	e7de      	b.n	800e554 <__b2d+0x48>
 800e596:	ea42 0501 	orr.w	r5, r2, r1
 800e59a:	e7db      	b.n	800e554 <__b2d+0x48>
 800e59c:	3ff00000 	.word	0x3ff00000

0800e5a0 <__d2b>:
 800e5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5a4:	460f      	mov	r7, r1
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	ec59 8b10 	vmov	r8, r9, d0
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	f7ff fc13 	bl	800ddd8 <_Balloc>
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	b930      	cbnz	r0, 800e5c4 <__d2b+0x24>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	4b23      	ldr	r3, [pc, #140]	@ (800e648 <__d2b+0xa8>)
 800e5ba:	4824      	ldr	r0, [pc, #144]	@ (800e64c <__d2b+0xac>)
 800e5bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5c0:	f001 fd26 	bl	8010010 <__assert_func>
 800e5c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5cc:	b10d      	cbz	r5, 800e5d2 <__d2b+0x32>
 800e5ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5d2:	9301      	str	r3, [sp, #4]
 800e5d4:	f1b8 0300 	subs.w	r3, r8, #0
 800e5d8:	d023      	beq.n	800e622 <__d2b+0x82>
 800e5da:	4668      	mov	r0, sp
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	f7ff fd0c 	bl	800dffa <__lo0bits>
 800e5e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5e6:	b1d0      	cbz	r0, 800e61e <__d2b+0x7e>
 800e5e8:	f1c0 0320 	rsb	r3, r0, #32
 800e5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e5f0:	430b      	orrs	r3, r1
 800e5f2:	40c2      	lsrs	r2, r0
 800e5f4:	6163      	str	r3, [r4, #20]
 800e5f6:	9201      	str	r2, [sp, #4]
 800e5f8:	9b01      	ldr	r3, [sp, #4]
 800e5fa:	61a3      	str	r3, [r4, #24]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	bf0c      	ite	eq
 800e600:	2201      	moveq	r2, #1
 800e602:	2202      	movne	r2, #2
 800e604:	6122      	str	r2, [r4, #16]
 800e606:	b1a5      	cbz	r5, 800e632 <__d2b+0x92>
 800e608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e60c:	4405      	add	r5, r0
 800e60e:	603d      	str	r5, [r7, #0]
 800e610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e614:	6030      	str	r0, [r6, #0]
 800e616:	4620      	mov	r0, r4
 800e618:	b003      	add	sp, #12
 800e61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e61e:	6161      	str	r1, [r4, #20]
 800e620:	e7ea      	b.n	800e5f8 <__d2b+0x58>
 800e622:	a801      	add	r0, sp, #4
 800e624:	f7ff fce9 	bl	800dffa <__lo0bits>
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	6163      	str	r3, [r4, #20]
 800e62c:	3020      	adds	r0, #32
 800e62e:	2201      	movs	r2, #1
 800e630:	e7e8      	b.n	800e604 <__d2b+0x64>
 800e632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e63a:	6038      	str	r0, [r7, #0]
 800e63c:	6918      	ldr	r0, [r3, #16]
 800e63e:	f7ff fcbd 	bl	800dfbc <__hi0bits>
 800e642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e646:	e7e5      	b.n	800e614 <__d2b+0x74>
 800e648:	08010fcb 	.word	0x08010fcb
 800e64c:	08010fdc 	.word	0x08010fdc

0800e650 <__ratio>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	b085      	sub	sp, #20
 800e656:	e9cd 1000 	strd	r1, r0, [sp]
 800e65a:	a902      	add	r1, sp, #8
 800e65c:	f7ff ff56 	bl	800e50c <__b2d>
 800e660:	9800      	ldr	r0, [sp, #0]
 800e662:	a903      	add	r1, sp, #12
 800e664:	ec55 4b10 	vmov	r4, r5, d0
 800e668:	f7ff ff50 	bl	800e50c <__b2d>
 800e66c:	9b01      	ldr	r3, [sp, #4]
 800e66e:	6919      	ldr	r1, [r3, #16]
 800e670:	9b00      	ldr	r3, [sp, #0]
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	1ac9      	subs	r1, r1, r3
 800e676:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e67a:	1a9b      	subs	r3, r3, r2
 800e67c:	ec5b ab10 	vmov	sl, fp, d0
 800e680:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e684:	2b00      	cmp	r3, #0
 800e686:	bfce      	itee	gt
 800e688:	462a      	movgt	r2, r5
 800e68a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e68e:	465a      	movle	r2, fp
 800e690:	462f      	mov	r7, r5
 800e692:	46d9      	mov	r9, fp
 800e694:	bfcc      	ite	gt
 800e696:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e69a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e69e:	464b      	mov	r3, r9
 800e6a0:	4652      	mov	r2, sl
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4639      	mov	r1, r7
 800e6a6:	f7f2 f8d1 	bl	800084c <__aeabi_ddiv>
 800e6aa:	ec41 0b10 	vmov	d0, r0, r1
 800e6ae:	b005      	add	sp, #20
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6b4 <__copybits>:
 800e6b4:	3901      	subs	r1, #1
 800e6b6:	b570      	push	{r4, r5, r6, lr}
 800e6b8:	1149      	asrs	r1, r1, #5
 800e6ba:	6914      	ldr	r4, [r2, #16]
 800e6bc:	3101      	adds	r1, #1
 800e6be:	f102 0314 	add.w	r3, r2, #20
 800e6c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e6ca:	1f05      	subs	r5, r0, #4
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	d30c      	bcc.n	800e6ea <__copybits+0x36>
 800e6d0:	1aa3      	subs	r3, r4, r2
 800e6d2:	3b11      	subs	r3, #17
 800e6d4:	f023 0303 	bic.w	r3, r3, #3
 800e6d8:	3211      	adds	r2, #17
 800e6da:	42a2      	cmp	r2, r4
 800e6dc:	bf88      	it	hi
 800e6de:	2300      	movhi	r3, #0
 800e6e0:	4418      	add	r0, r3
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4288      	cmp	r0, r1
 800e6e6:	d305      	bcc.n	800e6f4 <__copybits+0x40>
 800e6e8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6f2:	e7eb      	b.n	800e6cc <__copybits+0x18>
 800e6f4:	f840 3b04 	str.w	r3, [r0], #4
 800e6f8:	e7f4      	b.n	800e6e4 <__copybits+0x30>

0800e6fa <__any_on>:
 800e6fa:	f100 0214 	add.w	r2, r0, #20
 800e6fe:	6900      	ldr	r0, [r0, #16]
 800e700:	114b      	asrs	r3, r1, #5
 800e702:	4298      	cmp	r0, r3
 800e704:	b510      	push	{r4, lr}
 800e706:	db11      	blt.n	800e72c <__any_on+0x32>
 800e708:	dd0a      	ble.n	800e720 <__any_on+0x26>
 800e70a:	f011 011f 	ands.w	r1, r1, #31
 800e70e:	d007      	beq.n	800e720 <__any_on+0x26>
 800e710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e714:	fa24 f001 	lsr.w	r0, r4, r1
 800e718:	fa00 f101 	lsl.w	r1, r0, r1
 800e71c:	428c      	cmp	r4, r1
 800e71e:	d10b      	bne.n	800e738 <__any_on+0x3e>
 800e720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e724:	4293      	cmp	r3, r2
 800e726:	d803      	bhi.n	800e730 <__any_on+0x36>
 800e728:	2000      	movs	r0, #0
 800e72a:	bd10      	pop	{r4, pc}
 800e72c:	4603      	mov	r3, r0
 800e72e:	e7f7      	b.n	800e720 <__any_on+0x26>
 800e730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e734:	2900      	cmp	r1, #0
 800e736:	d0f5      	beq.n	800e724 <__any_on+0x2a>
 800e738:	2001      	movs	r0, #1
 800e73a:	e7f6      	b.n	800e72a <__any_on+0x30>

0800e73c <sulp>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	4604      	mov	r4, r0
 800e740:	460d      	mov	r5, r1
 800e742:	ec45 4b10 	vmov	d0, r4, r5
 800e746:	4616      	mov	r6, r2
 800e748:	f7ff feba 	bl	800e4c0 <__ulp>
 800e74c:	ec51 0b10 	vmov	r0, r1, d0
 800e750:	b17e      	cbz	r6, 800e772 <sulp+0x36>
 800e752:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e756:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	dd09      	ble.n	800e772 <sulp+0x36>
 800e75e:	051b      	lsls	r3, r3, #20
 800e760:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e764:	2400      	movs	r4, #0
 800e766:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e76a:	4622      	mov	r2, r4
 800e76c:	462b      	mov	r3, r5
 800e76e:	f7f1 ff43 	bl	80005f8 <__aeabi_dmul>
 800e772:	ec41 0b10 	vmov	d0, r0, r1
 800e776:	bd70      	pop	{r4, r5, r6, pc}

0800e778 <_strtod_l>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	b09f      	sub	sp, #124	@ 0x7c
 800e77e:	460c      	mov	r4, r1
 800e780:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e782:	2200      	movs	r2, #0
 800e784:	921a      	str	r2, [sp, #104]	@ 0x68
 800e786:	9005      	str	r0, [sp, #20]
 800e788:	f04f 0a00 	mov.w	sl, #0
 800e78c:	f04f 0b00 	mov.w	fp, #0
 800e790:	460a      	mov	r2, r1
 800e792:	9219      	str	r2, [sp, #100]	@ 0x64
 800e794:	7811      	ldrb	r1, [r2, #0]
 800e796:	292b      	cmp	r1, #43	@ 0x2b
 800e798:	d04a      	beq.n	800e830 <_strtod_l+0xb8>
 800e79a:	d838      	bhi.n	800e80e <_strtod_l+0x96>
 800e79c:	290d      	cmp	r1, #13
 800e79e:	d832      	bhi.n	800e806 <_strtod_l+0x8e>
 800e7a0:	2908      	cmp	r1, #8
 800e7a2:	d832      	bhi.n	800e80a <_strtod_l+0x92>
 800e7a4:	2900      	cmp	r1, #0
 800e7a6:	d03b      	beq.n	800e820 <_strtod_l+0xa8>
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e7ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e7ae:	782a      	ldrb	r2, [r5, #0]
 800e7b0:	2a30      	cmp	r2, #48	@ 0x30
 800e7b2:	f040 80b3 	bne.w	800e91c <_strtod_l+0x1a4>
 800e7b6:	786a      	ldrb	r2, [r5, #1]
 800e7b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e7bc:	2a58      	cmp	r2, #88	@ 0x58
 800e7be:	d16e      	bne.n	800e89e <_strtod_l+0x126>
 800e7c0:	9302      	str	r3, [sp, #8]
 800e7c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	4a8e      	ldr	r2, [pc, #568]	@ (800ea04 <_strtod_l+0x28c>)
 800e7cc:	9805      	ldr	r0, [sp, #20]
 800e7ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e7d0:	a919      	add	r1, sp, #100	@ 0x64
 800e7d2:	f001 fcb7 	bl	8010144 <__gethex>
 800e7d6:	f010 060f 	ands.w	r6, r0, #15
 800e7da:	4604      	mov	r4, r0
 800e7dc:	d005      	beq.n	800e7ea <_strtod_l+0x72>
 800e7de:	2e06      	cmp	r6, #6
 800e7e0:	d128      	bne.n	800e834 <_strtod_l+0xbc>
 800e7e2:	3501      	adds	r5, #1
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e7e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f040 858e 	bne.w	800f30e <_strtod_l+0xb96>
 800e7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f4:	b1cb      	cbz	r3, 800e82a <_strtod_l+0xb2>
 800e7f6:	4652      	mov	r2, sl
 800e7f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e7fc:	ec43 2b10 	vmov	d0, r2, r3
 800e800:	b01f      	add	sp, #124	@ 0x7c
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	2920      	cmp	r1, #32
 800e808:	d1ce      	bne.n	800e7a8 <_strtod_l+0x30>
 800e80a:	3201      	adds	r2, #1
 800e80c:	e7c1      	b.n	800e792 <_strtod_l+0x1a>
 800e80e:	292d      	cmp	r1, #45	@ 0x2d
 800e810:	d1ca      	bne.n	800e7a8 <_strtod_l+0x30>
 800e812:	2101      	movs	r1, #1
 800e814:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e816:	1c51      	adds	r1, r2, #1
 800e818:	9119      	str	r1, [sp, #100]	@ 0x64
 800e81a:	7852      	ldrb	r2, [r2, #1]
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	d1c5      	bne.n	800e7ac <_strtod_l+0x34>
 800e820:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e822:	9419      	str	r4, [sp, #100]	@ 0x64
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 8570 	bne.w	800f30a <_strtod_l+0xb92>
 800e82a:	4652      	mov	r2, sl
 800e82c:	465b      	mov	r3, fp
 800e82e:	e7e5      	b.n	800e7fc <_strtod_l+0x84>
 800e830:	2100      	movs	r1, #0
 800e832:	e7ef      	b.n	800e814 <_strtod_l+0x9c>
 800e834:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e836:	b13a      	cbz	r2, 800e848 <_strtod_l+0xd0>
 800e838:	2135      	movs	r1, #53	@ 0x35
 800e83a:	a81c      	add	r0, sp, #112	@ 0x70
 800e83c:	f7ff ff3a 	bl	800e6b4 <__copybits>
 800e840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e842:	9805      	ldr	r0, [sp, #20]
 800e844:	f7ff fb08 	bl	800de58 <_Bfree>
 800e848:	3e01      	subs	r6, #1
 800e84a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e84c:	2e04      	cmp	r6, #4
 800e84e:	d806      	bhi.n	800e85e <_strtod_l+0xe6>
 800e850:	e8df f006 	tbb	[pc, r6]
 800e854:	201d0314 	.word	0x201d0314
 800e858:	14          	.byte	0x14
 800e859:	00          	.byte	0x00
 800e85a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e85e:	05e1      	lsls	r1, r4, #23
 800e860:	bf48      	it	mi
 800e862:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e866:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e86a:	0d1b      	lsrs	r3, r3, #20
 800e86c:	051b      	lsls	r3, r3, #20
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1bb      	bne.n	800e7ea <_strtod_l+0x72>
 800e872:	f7fe fb31 	bl	800ced8 <__errno>
 800e876:	2322      	movs	r3, #34	@ 0x22
 800e878:	6003      	str	r3, [r0, #0]
 800e87a:	e7b6      	b.n	800e7ea <_strtod_l+0x72>
 800e87c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e880:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e884:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e888:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e88c:	e7e7      	b.n	800e85e <_strtod_l+0xe6>
 800e88e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ea0c <_strtod_l+0x294>
 800e892:	e7e4      	b.n	800e85e <_strtod_l+0xe6>
 800e894:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e898:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e89c:	e7df      	b.n	800e85e <_strtod_l+0xe6>
 800e89e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8a4:	785b      	ldrb	r3, [r3, #1]
 800e8a6:	2b30      	cmp	r3, #48	@ 0x30
 800e8a8:	d0f9      	beq.n	800e89e <_strtod_l+0x126>
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d09d      	beq.n	800e7ea <_strtod_l+0x72>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	9308      	str	r3, [sp, #32]
 800e8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8bc:	461f      	mov	r7, r3
 800e8be:	220a      	movs	r2, #10
 800e8c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e8c2:	7805      	ldrb	r5, [r0, #0]
 800e8c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e8c8:	b2d9      	uxtb	r1, r3
 800e8ca:	2909      	cmp	r1, #9
 800e8cc:	d928      	bls.n	800e920 <_strtod_l+0x1a8>
 800e8ce:	494e      	ldr	r1, [pc, #312]	@ (800ea08 <_strtod_l+0x290>)
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f001 fb62 	bl	800ff9a <strncmp>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d032      	beq.n	800e940 <_strtod_l+0x1c8>
 800e8da:	2000      	movs	r0, #0
 800e8dc:	462a      	mov	r2, r5
 800e8de:	4681      	mov	r9, r0
 800e8e0:	463d      	mov	r5, r7
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2a65      	cmp	r2, #101	@ 0x65
 800e8e6:	d001      	beq.n	800e8ec <_strtod_l+0x174>
 800e8e8:	2a45      	cmp	r2, #69	@ 0x45
 800e8ea:	d114      	bne.n	800e916 <_strtod_l+0x19e>
 800e8ec:	b91d      	cbnz	r5, 800e8f6 <_strtod_l+0x17e>
 800e8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8f0:	4302      	orrs	r2, r0
 800e8f2:	d095      	beq.n	800e820 <_strtod_l+0xa8>
 800e8f4:	2500      	movs	r5, #0
 800e8f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e8f8:	1c62      	adds	r2, r4, #1
 800e8fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8fc:	7862      	ldrb	r2, [r4, #1]
 800e8fe:	2a2b      	cmp	r2, #43	@ 0x2b
 800e900:	d077      	beq.n	800e9f2 <_strtod_l+0x27a>
 800e902:	2a2d      	cmp	r2, #45	@ 0x2d
 800e904:	d07b      	beq.n	800e9fe <_strtod_l+0x286>
 800e906:	f04f 0c00 	mov.w	ip, #0
 800e90a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e90e:	2909      	cmp	r1, #9
 800e910:	f240 8082 	bls.w	800ea18 <_strtod_l+0x2a0>
 800e914:	9419      	str	r4, [sp, #100]	@ 0x64
 800e916:	f04f 0800 	mov.w	r8, #0
 800e91a:	e0a2      	b.n	800ea62 <_strtod_l+0x2ea>
 800e91c:	2300      	movs	r3, #0
 800e91e:	e7c7      	b.n	800e8b0 <_strtod_l+0x138>
 800e920:	2f08      	cmp	r7, #8
 800e922:	bfd5      	itete	le
 800e924:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e926:	9908      	ldrgt	r1, [sp, #32]
 800e928:	fb02 3301 	mlale	r3, r2, r1, r3
 800e92c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e930:	f100 0001 	add.w	r0, r0, #1
 800e934:	bfd4      	ite	le
 800e936:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e938:	9308      	strgt	r3, [sp, #32]
 800e93a:	3701      	adds	r7, #1
 800e93c:	9019      	str	r0, [sp, #100]	@ 0x64
 800e93e:	e7bf      	b.n	800e8c0 <_strtod_l+0x148>
 800e940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	9219      	str	r2, [sp, #100]	@ 0x64
 800e946:	785a      	ldrb	r2, [r3, #1]
 800e948:	b37f      	cbz	r7, 800e9aa <_strtod_l+0x232>
 800e94a:	4681      	mov	r9, r0
 800e94c:	463d      	mov	r5, r7
 800e94e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e952:	2b09      	cmp	r3, #9
 800e954:	d912      	bls.n	800e97c <_strtod_l+0x204>
 800e956:	2301      	movs	r3, #1
 800e958:	e7c4      	b.n	800e8e4 <_strtod_l+0x16c>
 800e95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e960:	785a      	ldrb	r2, [r3, #1]
 800e962:	3001      	adds	r0, #1
 800e964:	2a30      	cmp	r2, #48	@ 0x30
 800e966:	d0f8      	beq.n	800e95a <_strtod_l+0x1e2>
 800e968:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e96c:	2b08      	cmp	r3, #8
 800e96e:	f200 84d3 	bhi.w	800f318 <_strtod_l+0xba0>
 800e972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e974:	930c      	str	r3, [sp, #48]	@ 0x30
 800e976:	4681      	mov	r9, r0
 800e978:	2000      	movs	r0, #0
 800e97a:	4605      	mov	r5, r0
 800e97c:	3a30      	subs	r2, #48	@ 0x30
 800e97e:	f100 0301 	add.w	r3, r0, #1
 800e982:	d02a      	beq.n	800e9da <_strtod_l+0x262>
 800e984:	4499      	add	r9, r3
 800e986:	eb00 0c05 	add.w	ip, r0, r5
 800e98a:	462b      	mov	r3, r5
 800e98c:	210a      	movs	r1, #10
 800e98e:	4563      	cmp	r3, ip
 800e990:	d10d      	bne.n	800e9ae <_strtod_l+0x236>
 800e992:	1c69      	adds	r1, r5, #1
 800e994:	4401      	add	r1, r0
 800e996:	4428      	add	r0, r5
 800e998:	2808      	cmp	r0, #8
 800e99a:	dc16      	bgt.n	800e9ca <_strtod_l+0x252>
 800e99c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e99e:	230a      	movs	r3, #10
 800e9a0:	fb03 2300 	mla	r3, r3, r0, r2
 800e9a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e018      	b.n	800e9dc <_strtod_l+0x264>
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	e7da      	b.n	800e964 <_strtod_l+0x1ec>
 800e9ae:	2b08      	cmp	r3, #8
 800e9b0:	f103 0301 	add.w	r3, r3, #1
 800e9b4:	dc03      	bgt.n	800e9be <_strtod_l+0x246>
 800e9b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e9b8:	434e      	muls	r6, r1
 800e9ba:	960a      	str	r6, [sp, #40]	@ 0x28
 800e9bc:	e7e7      	b.n	800e98e <_strtod_l+0x216>
 800e9be:	2b10      	cmp	r3, #16
 800e9c0:	bfde      	ittt	le
 800e9c2:	9e08      	ldrle	r6, [sp, #32]
 800e9c4:	434e      	mulle	r6, r1
 800e9c6:	9608      	strle	r6, [sp, #32]
 800e9c8:	e7e1      	b.n	800e98e <_strtod_l+0x216>
 800e9ca:	280f      	cmp	r0, #15
 800e9cc:	dceb      	bgt.n	800e9a6 <_strtod_l+0x22e>
 800e9ce:	9808      	ldr	r0, [sp, #32]
 800e9d0:	230a      	movs	r3, #10
 800e9d2:	fb03 2300 	mla	r3, r3, r0, r2
 800e9d6:	9308      	str	r3, [sp, #32]
 800e9d8:	e7e5      	b.n	800e9a6 <_strtod_l+0x22e>
 800e9da:	4629      	mov	r1, r5
 800e9dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e9de:	1c50      	adds	r0, r2, #1
 800e9e0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e9e2:	7852      	ldrb	r2, [r2, #1]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	e7b1      	b.n	800e94e <_strtod_l+0x1d6>
 800e9ea:	f04f 0900 	mov.w	r9, #0
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e77d      	b.n	800e8ee <_strtod_l+0x176>
 800e9f2:	f04f 0c00 	mov.w	ip, #0
 800e9f6:	1ca2      	adds	r2, r4, #2
 800e9f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9fa:	78a2      	ldrb	r2, [r4, #2]
 800e9fc:	e785      	b.n	800e90a <_strtod_l+0x192>
 800e9fe:	f04f 0c01 	mov.w	ip, #1
 800ea02:	e7f8      	b.n	800e9f6 <_strtod_l+0x27e>
 800ea04:	08011150 	.word	0x08011150
 800ea08:	08011138 	.word	0x08011138
 800ea0c:	7ff00000 	.word	0x7ff00000
 800ea10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea12:	1c51      	adds	r1, r2, #1
 800ea14:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea16:	7852      	ldrb	r2, [r2, #1]
 800ea18:	2a30      	cmp	r2, #48	@ 0x30
 800ea1a:	d0f9      	beq.n	800ea10 <_strtod_l+0x298>
 800ea1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ea20:	2908      	cmp	r1, #8
 800ea22:	f63f af78 	bhi.w	800e916 <_strtod_l+0x19e>
 800ea26:	3a30      	subs	r2, #48	@ 0x30
 800ea28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ea2e:	f04f 080a 	mov.w	r8, #10
 800ea32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea34:	1c56      	adds	r6, r2, #1
 800ea36:	9619      	str	r6, [sp, #100]	@ 0x64
 800ea38:	7852      	ldrb	r2, [r2, #1]
 800ea3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ea3e:	f1be 0f09 	cmp.w	lr, #9
 800ea42:	d939      	bls.n	800eab8 <_strtod_l+0x340>
 800ea44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea46:	1a76      	subs	r6, r6, r1
 800ea48:	2e08      	cmp	r6, #8
 800ea4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ea4e:	dc03      	bgt.n	800ea58 <_strtod_l+0x2e0>
 800ea50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea52:	4588      	cmp	r8, r1
 800ea54:	bfa8      	it	ge
 800ea56:	4688      	movge	r8, r1
 800ea58:	f1bc 0f00 	cmp.w	ip, #0
 800ea5c:	d001      	beq.n	800ea62 <_strtod_l+0x2ea>
 800ea5e:	f1c8 0800 	rsb	r8, r8, #0
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	d14e      	bne.n	800eb04 <_strtod_l+0x38c>
 800ea66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea68:	4308      	orrs	r0, r1
 800ea6a:	f47f aebe 	bne.w	800e7ea <_strtod_l+0x72>
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f47f aed6 	bne.w	800e820 <_strtod_l+0xa8>
 800ea74:	2a69      	cmp	r2, #105	@ 0x69
 800ea76:	d028      	beq.n	800eaca <_strtod_l+0x352>
 800ea78:	dc25      	bgt.n	800eac6 <_strtod_l+0x34e>
 800ea7a:	2a49      	cmp	r2, #73	@ 0x49
 800ea7c:	d025      	beq.n	800eaca <_strtod_l+0x352>
 800ea7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ea80:	f47f aece 	bne.w	800e820 <_strtod_l+0xa8>
 800ea84:	499b      	ldr	r1, [pc, #620]	@ (800ecf4 <_strtod_l+0x57c>)
 800ea86:	a819      	add	r0, sp, #100	@ 0x64
 800ea88:	f001 fd7e 	bl	8010588 <__match>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	f43f aec7 	beq.w	800e820 <_strtod_l+0xa8>
 800ea92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	2b28      	cmp	r3, #40	@ 0x28
 800ea98:	d12e      	bne.n	800eaf8 <_strtod_l+0x380>
 800ea9a:	4997      	ldr	r1, [pc, #604]	@ (800ecf8 <_strtod_l+0x580>)
 800ea9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ea9e:	a819      	add	r0, sp, #100	@ 0x64
 800eaa0:	f001 fd86 	bl	80105b0 <__hexnan>
 800eaa4:	2805      	cmp	r0, #5
 800eaa6:	d127      	bne.n	800eaf8 <_strtod_l+0x380>
 800eaa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eaaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eaae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eab2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eab6:	e698      	b.n	800e7ea <_strtod_l+0x72>
 800eab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eaba:	fb08 2101 	mla	r1, r8, r1, r2
 800eabe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eac2:	920e      	str	r2, [sp, #56]	@ 0x38
 800eac4:	e7b5      	b.n	800ea32 <_strtod_l+0x2ba>
 800eac6:	2a6e      	cmp	r2, #110	@ 0x6e
 800eac8:	e7da      	b.n	800ea80 <_strtod_l+0x308>
 800eaca:	498c      	ldr	r1, [pc, #560]	@ (800ecfc <_strtod_l+0x584>)
 800eacc:	a819      	add	r0, sp, #100	@ 0x64
 800eace:	f001 fd5b 	bl	8010588 <__match>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	f43f aea4 	beq.w	800e820 <_strtod_l+0xa8>
 800ead8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eada:	4989      	ldr	r1, [pc, #548]	@ (800ed00 <_strtod_l+0x588>)
 800eadc:	3b01      	subs	r3, #1
 800eade:	a819      	add	r0, sp, #100	@ 0x64
 800eae0:	9319      	str	r3, [sp, #100]	@ 0x64
 800eae2:	f001 fd51 	bl	8010588 <__match>
 800eae6:	b910      	cbnz	r0, 800eaee <_strtod_l+0x376>
 800eae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaea:	3301      	adds	r3, #1
 800eaec:	9319      	str	r3, [sp, #100]	@ 0x64
 800eaee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ed10 <_strtod_l+0x598>
 800eaf2:	f04f 0a00 	mov.w	sl, #0
 800eaf6:	e678      	b.n	800e7ea <_strtod_l+0x72>
 800eaf8:	4882      	ldr	r0, [pc, #520]	@ (800ed04 <_strtod_l+0x58c>)
 800eafa:	f001 fa81 	bl	8010000 <nan>
 800eafe:	ec5b ab10 	vmov	sl, fp, d0
 800eb02:	e672      	b.n	800e7ea <_strtod_l+0x72>
 800eb04:	eba8 0309 	sub.w	r3, r8, r9
 800eb08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb0c:	2f00      	cmp	r7, #0
 800eb0e:	bf08      	it	eq
 800eb10:	462f      	moveq	r7, r5
 800eb12:	2d10      	cmp	r5, #16
 800eb14:	462c      	mov	r4, r5
 800eb16:	bfa8      	it	ge
 800eb18:	2410      	movge	r4, #16
 800eb1a:	f7f1 fcf3 	bl	8000504 <__aeabi_ui2d>
 800eb1e:	2d09      	cmp	r5, #9
 800eb20:	4682      	mov	sl, r0
 800eb22:	468b      	mov	fp, r1
 800eb24:	dc13      	bgt.n	800eb4e <_strtod_l+0x3d6>
 800eb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f43f ae5e 	beq.w	800e7ea <_strtod_l+0x72>
 800eb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb30:	dd78      	ble.n	800ec24 <_strtod_l+0x4ac>
 800eb32:	2b16      	cmp	r3, #22
 800eb34:	dc5f      	bgt.n	800ebf6 <_strtod_l+0x47e>
 800eb36:	4974      	ldr	r1, [pc, #464]	@ (800ed08 <_strtod_l+0x590>)
 800eb38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb40:	4652      	mov	r2, sl
 800eb42:	465b      	mov	r3, fp
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	4682      	mov	sl, r0
 800eb4a:	468b      	mov	fp, r1
 800eb4c:	e64d      	b.n	800e7ea <_strtod_l+0x72>
 800eb4e:	4b6e      	ldr	r3, [pc, #440]	@ (800ed08 <_strtod_l+0x590>)
 800eb50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eb58:	f7f1 fd4e 	bl	80005f8 <__aeabi_dmul>
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	9808      	ldr	r0, [sp, #32]
 800eb60:	468b      	mov	fp, r1
 800eb62:	f7f1 fccf 	bl	8000504 <__aeabi_ui2d>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	4659      	mov	r1, fp
 800eb6e:	f7f1 fb8d 	bl	800028c <__adddf3>
 800eb72:	2d0f      	cmp	r5, #15
 800eb74:	4682      	mov	sl, r0
 800eb76:	468b      	mov	fp, r1
 800eb78:	ddd5      	ble.n	800eb26 <_strtod_l+0x3ae>
 800eb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb7c:	1b2c      	subs	r4, r5, r4
 800eb7e:	441c      	add	r4, r3
 800eb80:	2c00      	cmp	r4, #0
 800eb82:	f340 8096 	ble.w	800ecb2 <_strtod_l+0x53a>
 800eb86:	f014 030f 	ands.w	r3, r4, #15
 800eb8a:	d00a      	beq.n	800eba2 <_strtod_l+0x42a>
 800eb8c:	495e      	ldr	r1, [pc, #376]	@ (800ed08 <_strtod_l+0x590>)
 800eb8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb92:	4652      	mov	r2, sl
 800eb94:	465b      	mov	r3, fp
 800eb96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb9a:	f7f1 fd2d 	bl	80005f8 <__aeabi_dmul>
 800eb9e:	4682      	mov	sl, r0
 800eba0:	468b      	mov	fp, r1
 800eba2:	f034 040f 	bics.w	r4, r4, #15
 800eba6:	d073      	beq.n	800ec90 <_strtod_l+0x518>
 800eba8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ebac:	dd48      	ble.n	800ec40 <_strtod_l+0x4c8>
 800ebae:	2400      	movs	r4, #0
 800ebb0:	46a0      	mov	r8, r4
 800ebb2:	940a      	str	r4, [sp, #40]	@ 0x28
 800ebb4:	46a1      	mov	r9, r4
 800ebb6:	9a05      	ldr	r2, [sp, #20]
 800ebb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ed10 <_strtod_l+0x598>
 800ebbc:	2322      	movs	r3, #34	@ 0x22
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	f04f 0a00 	mov.w	sl, #0
 800ebc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f43f ae0f 	beq.w	800e7ea <_strtod_l+0x72>
 800ebcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebce:	9805      	ldr	r0, [sp, #20]
 800ebd0:	f7ff f942 	bl	800de58 <_Bfree>
 800ebd4:	9805      	ldr	r0, [sp, #20]
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	f7ff f93e 	bl	800de58 <_Bfree>
 800ebdc:	9805      	ldr	r0, [sp, #20]
 800ebde:	4641      	mov	r1, r8
 800ebe0:	f7ff f93a 	bl	800de58 <_Bfree>
 800ebe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebe6:	9805      	ldr	r0, [sp, #20]
 800ebe8:	f7ff f936 	bl	800de58 <_Bfree>
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	4621      	mov	r1, r4
 800ebf0:	f7ff f932 	bl	800de58 <_Bfree>
 800ebf4:	e5f9      	b.n	800e7ea <_strtod_l+0x72>
 800ebf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	dbbc      	blt.n	800eb7a <_strtod_l+0x402>
 800ec00:	4c41      	ldr	r4, [pc, #260]	@ (800ed08 <_strtod_l+0x590>)
 800ec02:	f1c5 050f 	rsb	r5, r5, #15
 800ec06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ec0a:	4652      	mov	r2, sl
 800ec0c:	465b      	mov	r3, fp
 800ec0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec12:	f7f1 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ec16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec18:	1b5d      	subs	r5, r3, r5
 800ec1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ec1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec22:	e78f      	b.n	800eb44 <_strtod_l+0x3cc>
 800ec24:	3316      	adds	r3, #22
 800ec26:	dba8      	blt.n	800eb7a <_strtod_l+0x402>
 800ec28:	4b37      	ldr	r3, [pc, #220]	@ (800ed08 <_strtod_l+0x590>)
 800ec2a:	eba9 0808 	sub.w	r8, r9, r8
 800ec2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ec32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ec36:	4650      	mov	r0, sl
 800ec38:	4659      	mov	r1, fp
 800ec3a:	f7f1 fe07 	bl	800084c <__aeabi_ddiv>
 800ec3e:	e783      	b.n	800eb48 <_strtod_l+0x3d0>
 800ec40:	4b32      	ldr	r3, [pc, #200]	@ (800ed0c <_strtod_l+0x594>)
 800ec42:	9308      	str	r3, [sp, #32]
 800ec44:	2300      	movs	r3, #0
 800ec46:	1124      	asrs	r4, r4, #4
 800ec48:	4650      	mov	r0, sl
 800ec4a:	4659      	mov	r1, fp
 800ec4c:	461e      	mov	r6, r3
 800ec4e:	2c01      	cmp	r4, #1
 800ec50:	dc21      	bgt.n	800ec96 <_strtod_l+0x51e>
 800ec52:	b10b      	cbz	r3, 800ec58 <_strtod_l+0x4e0>
 800ec54:	4682      	mov	sl, r0
 800ec56:	468b      	mov	fp, r1
 800ec58:	492c      	ldr	r1, [pc, #176]	@ (800ed0c <_strtod_l+0x594>)
 800ec5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ec5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ec62:	4652      	mov	r2, sl
 800ec64:	465b      	mov	r3, fp
 800ec66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec6a:	f7f1 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ec6e:	4b28      	ldr	r3, [pc, #160]	@ (800ed10 <_strtod_l+0x598>)
 800ec70:	460a      	mov	r2, r1
 800ec72:	400b      	ands	r3, r1
 800ec74:	4927      	ldr	r1, [pc, #156]	@ (800ed14 <_strtod_l+0x59c>)
 800ec76:	428b      	cmp	r3, r1
 800ec78:	4682      	mov	sl, r0
 800ec7a:	d898      	bhi.n	800ebae <_strtod_l+0x436>
 800ec7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ec80:	428b      	cmp	r3, r1
 800ec82:	bf86      	itte	hi
 800ec84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ed18 <_strtod_l+0x5a0>
 800ec88:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ec8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ec90:	2300      	movs	r3, #0
 800ec92:	9308      	str	r3, [sp, #32]
 800ec94:	e07a      	b.n	800ed8c <_strtod_l+0x614>
 800ec96:	07e2      	lsls	r2, r4, #31
 800ec98:	d505      	bpl.n	800eca6 <_strtod_l+0x52e>
 800ec9a:	9b08      	ldr	r3, [sp, #32]
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fcaa 	bl	80005f8 <__aeabi_dmul>
 800eca4:	2301      	movs	r3, #1
 800eca6:	9a08      	ldr	r2, [sp, #32]
 800eca8:	3208      	adds	r2, #8
 800ecaa:	3601      	adds	r6, #1
 800ecac:	1064      	asrs	r4, r4, #1
 800ecae:	9208      	str	r2, [sp, #32]
 800ecb0:	e7cd      	b.n	800ec4e <_strtod_l+0x4d6>
 800ecb2:	d0ed      	beq.n	800ec90 <_strtod_l+0x518>
 800ecb4:	4264      	negs	r4, r4
 800ecb6:	f014 020f 	ands.w	r2, r4, #15
 800ecba:	d00a      	beq.n	800ecd2 <_strtod_l+0x55a>
 800ecbc:	4b12      	ldr	r3, [pc, #72]	@ (800ed08 <_strtod_l+0x590>)
 800ecbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecc2:	4650      	mov	r0, sl
 800ecc4:	4659      	mov	r1, fp
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f7f1 fdbf 	bl	800084c <__aeabi_ddiv>
 800ecce:	4682      	mov	sl, r0
 800ecd0:	468b      	mov	fp, r1
 800ecd2:	1124      	asrs	r4, r4, #4
 800ecd4:	d0dc      	beq.n	800ec90 <_strtod_l+0x518>
 800ecd6:	2c1f      	cmp	r4, #31
 800ecd8:	dd20      	ble.n	800ed1c <_strtod_l+0x5a4>
 800ecda:	2400      	movs	r4, #0
 800ecdc:	46a0      	mov	r8, r4
 800ecde:	940a      	str	r4, [sp, #40]	@ 0x28
 800ece0:	46a1      	mov	r9, r4
 800ece2:	9a05      	ldr	r2, [sp, #20]
 800ece4:	2322      	movs	r3, #34	@ 0x22
 800ece6:	f04f 0a00 	mov.w	sl, #0
 800ecea:	f04f 0b00 	mov.w	fp, #0
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	e768      	b.n	800ebc4 <_strtod_l+0x44c>
 800ecf2:	bf00      	nop
 800ecf4:	08010f25 	.word	0x08010f25
 800ecf8:	0801113c 	.word	0x0801113c
 800ecfc:	08010f1d 	.word	0x08010f1d
 800ed00:	08010f52 	.word	0x08010f52
 800ed04:	08011300 	.word	0x08011300
 800ed08:	08011070 	.word	0x08011070
 800ed0c:	08011048 	.word	0x08011048
 800ed10:	7ff00000 	.word	0x7ff00000
 800ed14:	7ca00000 	.word	0x7ca00000
 800ed18:	7fefffff 	.word	0x7fefffff
 800ed1c:	f014 0310 	ands.w	r3, r4, #16
 800ed20:	bf18      	it	ne
 800ed22:	236a      	movne	r3, #106	@ 0x6a
 800ed24:	4ea9      	ldr	r6, [pc, #676]	@ (800efcc <_strtod_l+0x854>)
 800ed26:	9308      	str	r3, [sp, #32]
 800ed28:	4650      	mov	r0, sl
 800ed2a:	4659      	mov	r1, fp
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	07e2      	lsls	r2, r4, #31
 800ed30:	d504      	bpl.n	800ed3c <_strtod_l+0x5c4>
 800ed32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ed36:	f7f1 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	1064      	asrs	r4, r4, #1
 800ed3e:	f106 0608 	add.w	r6, r6, #8
 800ed42:	d1f4      	bne.n	800ed2e <_strtod_l+0x5b6>
 800ed44:	b10b      	cbz	r3, 800ed4a <_strtod_l+0x5d2>
 800ed46:	4682      	mov	sl, r0
 800ed48:	468b      	mov	fp, r1
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	b1b3      	cbz	r3, 800ed7c <_strtod_l+0x604>
 800ed4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ed52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	4659      	mov	r1, fp
 800ed5a:	dd0f      	ble.n	800ed7c <_strtod_l+0x604>
 800ed5c:	2b1f      	cmp	r3, #31
 800ed5e:	dd55      	ble.n	800ee0c <_strtod_l+0x694>
 800ed60:	2b34      	cmp	r3, #52	@ 0x34
 800ed62:	bfde      	ittt	le
 800ed64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ed68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ed6c:	4093      	lslle	r3, r2
 800ed6e:	f04f 0a00 	mov.w	sl, #0
 800ed72:	bfcc      	ite	gt
 800ed74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ed78:	ea03 0b01 	andle.w	fp, r3, r1
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	2300      	movs	r3, #0
 800ed80:	4650      	mov	r0, sl
 800ed82:	4659      	mov	r1, fp
 800ed84:	f7f1 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d1a6      	bne.n	800ecda <_strtod_l+0x562>
 800ed8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ed92:	9805      	ldr	r0, [sp, #20]
 800ed94:	462b      	mov	r3, r5
 800ed96:	463a      	mov	r2, r7
 800ed98:	f7ff f8c6 	bl	800df28 <__s2b>
 800ed9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f43f af05 	beq.w	800ebae <_strtod_l+0x436>
 800eda4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eda6:	2a00      	cmp	r2, #0
 800eda8:	eba9 0308 	sub.w	r3, r9, r8
 800edac:	bfa8      	it	ge
 800edae:	2300      	movge	r3, #0
 800edb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800edb2:	2400      	movs	r4, #0
 800edb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800edb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800edba:	46a0      	mov	r8, r4
 800edbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edbe:	9805      	ldr	r0, [sp, #20]
 800edc0:	6859      	ldr	r1, [r3, #4]
 800edc2:	f7ff f809 	bl	800ddd8 <_Balloc>
 800edc6:	4681      	mov	r9, r0
 800edc8:	2800      	cmp	r0, #0
 800edca:	f43f aef4 	beq.w	800ebb6 <_strtod_l+0x43e>
 800edce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edd0:	691a      	ldr	r2, [r3, #16]
 800edd2:	3202      	adds	r2, #2
 800edd4:	f103 010c 	add.w	r1, r3, #12
 800edd8:	0092      	lsls	r2, r2, #2
 800edda:	300c      	adds	r0, #12
 800eddc:	f001 f900 	bl	800ffe0 <memcpy>
 800ede0:	ec4b ab10 	vmov	d0, sl, fp
 800ede4:	9805      	ldr	r0, [sp, #20]
 800ede6:	aa1c      	add	r2, sp, #112	@ 0x70
 800ede8:	a91b      	add	r1, sp, #108	@ 0x6c
 800edea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800edee:	f7ff fbd7 	bl	800e5a0 <__d2b>
 800edf2:	901a      	str	r0, [sp, #104]	@ 0x68
 800edf4:	2800      	cmp	r0, #0
 800edf6:	f43f aede 	beq.w	800ebb6 <_strtod_l+0x43e>
 800edfa:	9805      	ldr	r0, [sp, #20]
 800edfc:	2101      	movs	r1, #1
 800edfe:	f7ff f929 	bl	800e054 <__i2b>
 800ee02:	4680      	mov	r8, r0
 800ee04:	b948      	cbnz	r0, 800ee1a <_strtod_l+0x6a2>
 800ee06:	f04f 0800 	mov.w	r8, #0
 800ee0a:	e6d4      	b.n	800ebb6 <_strtod_l+0x43e>
 800ee0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee10:	fa02 f303 	lsl.w	r3, r2, r3
 800ee14:	ea03 0a0a 	and.w	sl, r3, sl
 800ee18:	e7b0      	b.n	800ed7c <_strtod_l+0x604>
 800ee1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ee1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ee1e:	2d00      	cmp	r5, #0
 800ee20:	bfab      	itete	ge
 800ee22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ee24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ee26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ee28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ee2a:	bfac      	ite	ge
 800ee2c:	18ef      	addge	r7, r5, r3
 800ee2e:	1b5e      	sublt	r6, r3, r5
 800ee30:	9b08      	ldr	r3, [sp, #32]
 800ee32:	1aed      	subs	r5, r5, r3
 800ee34:	4415      	add	r5, r2
 800ee36:	4b66      	ldr	r3, [pc, #408]	@ (800efd0 <_strtod_l+0x858>)
 800ee38:	3d01      	subs	r5, #1
 800ee3a:	429d      	cmp	r5, r3
 800ee3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ee40:	da50      	bge.n	800eee4 <_strtod_l+0x76c>
 800ee42:	1b5b      	subs	r3, r3, r5
 800ee44:	2b1f      	cmp	r3, #31
 800ee46:	eba2 0203 	sub.w	r2, r2, r3
 800ee4a:	f04f 0101 	mov.w	r1, #1
 800ee4e:	dc3d      	bgt.n	800eecc <_strtod_l+0x754>
 800ee50:	fa01 f303 	lsl.w	r3, r1, r3
 800ee54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee56:	2300      	movs	r3, #0
 800ee58:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee5a:	18bd      	adds	r5, r7, r2
 800ee5c:	9b08      	ldr	r3, [sp, #32]
 800ee5e:	42af      	cmp	r7, r5
 800ee60:	4416      	add	r6, r2
 800ee62:	441e      	add	r6, r3
 800ee64:	463b      	mov	r3, r7
 800ee66:	bfa8      	it	ge
 800ee68:	462b      	movge	r3, r5
 800ee6a:	42b3      	cmp	r3, r6
 800ee6c:	bfa8      	it	ge
 800ee6e:	4633      	movge	r3, r6
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	bfc2      	ittt	gt
 800ee74:	1aed      	subgt	r5, r5, r3
 800ee76:	1af6      	subgt	r6, r6, r3
 800ee78:	1aff      	subgt	r7, r7, r3
 800ee7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dd16      	ble.n	800eeae <_strtod_l+0x736>
 800ee80:	4641      	mov	r1, r8
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	461a      	mov	r2, r3
 800ee86:	f7ff f9a5 	bl	800e1d4 <__pow5mult>
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d0ba      	beq.n	800ee06 <_strtod_l+0x68e>
 800ee90:	4601      	mov	r1, r0
 800ee92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ee94:	9805      	ldr	r0, [sp, #20]
 800ee96:	f7ff f8f3 	bl	800e080 <__multiply>
 800ee9a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	f43f ae8a 	beq.w	800ebb6 <_strtod_l+0x43e>
 800eea2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eea4:	9805      	ldr	r0, [sp, #20]
 800eea6:	f7fe ffd7 	bl	800de58 <_Bfree>
 800eeaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeac:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeae:	2d00      	cmp	r5, #0
 800eeb0:	dc1d      	bgt.n	800eeee <_strtod_l+0x776>
 800eeb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	dd23      	ble.n	800ef00 <_strtod_l+0x788>
 800eeb8:	4649      	mov	r1, r9
 800eeba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eebc:	9805      	ldr	r0, [sp, #20]
 800eebe:	f7ff f989 	bl	800e1d4 <__pow5mult>
 800eec2:	4681      	mov	r9, r0
 800eec4:	b9e0      	cbnz	r0, 800ef00 <_strtod_l+0x788>
 800eec6:	f04f 0900 	mov.w	r9, #0
 800eeca:	e674      	b.n	800ebb6 <_strtod_l+0x43e>
 800eecc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eed0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eed4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eed8:	35e2      	adds	r5, #226	@ 0xe2
 800eeda:	fa01 f305 	lsl.w	r3, r1, r5
 800eede:	9310      	str	r3, [sp, #64]	@ 0x40
 800eee0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eee2:	e7ba      	b.n	800ee5a <_strtod_l+0x6e2>
 800eee4:	2300      	movs	r3, #0
 800eee6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eee8:	2301      	movs	r3, #1
 800eeea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eeec:	e7b5      	b.n	800ee5a <_strtod_l+0x6e2>
 800eeee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eef0:	9805      	ldr	r0, [sp, #20]
 800eef2:	462a      	mov	r2, r5
 800eef4:	f7ff f9c8 	bl	800e288 <__lshift>
 800eef8:	901a      	str	r0, [sp, #104]	@ 0x68
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1d9      	bne.n	800eeb2 <_strtod_l+0x73a>
 800eefe:	e65a      	b.n	800ebb6 <_strtod_l+0x43e>
 800ef00:	2e00      	cmp	r6, #0
 800ef02:	dd07      	ble.n	800ef14 <_strtod_l+0x79c>
 800ef04:	4649      	mov	r1, r9
 800ef06:	9805      	ldr	r0, [sp, #20]
 800ef08:	4632      	mov	r2, r6
 800ef0a:	f7ff f9bd 	bl	800e288 <__lshift>
 800ef0e:	4681      	mov	r9, r0
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d0d8      	beq.n	800eec6 <_strtod_l+0x74e>
 800ef14:	2f00      	cmp	r7, #0
 800ef16:	dd08      	ble.n	800ef2a <_strtod_l+0x7b2>
 800ef18:	4641      	mov	r1, r8
 800ef1a:	9805      	ldr	r0, [sp, #20]
 800ef1c:	463a      	mov	r2, r7
 800ef1e:	f7ff f9b3 	bl	800e288 <__lshift>
 800ef22:	4680      	mov	r8, r0
 800ef24:	2800      	cmp	r0, #0
 800ef26:	f43f ae46 	beq.w	800ebb6 <_strtod_l+0x43e>
 800ef2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef2c:	9805      	ldr	r0, [sp, #20]
 800ef2e:	464a      	mov	r2, r9
 800ef30:	f7ff fa32 	bl	800e398 <__mdiff>
 800ef34:	4604      	mov	r4, r0
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f43f ae3d 	beq.w	800ebb6 <_strtod_l+0x43e>
 800ef3c:	68c3      	ldr	r3, [r0, #12]
 800ef3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef40:	2300      	movs	r3, #0
 800ef42:	60c3      	str	r3, [r0, #12]
 800ef44:	4641      	mov	r1, r8
 800ef46:	f7ff fa0b 	bl	800e360 <__mcmp>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	da46      	bge.n	800efdc <_strtod_l+0x864>
 800ef4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef50:	ea53 030a 	orrs.w	r3, r3, sl
 800ef54:	d16c      	bne.n	800f030 <_strtod_l+0x8b8>
 800ef56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d168      	bne.n	800f030 <_strtod_l+0x8b8>
 800ef5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef62:	0d1b      	lsrs	r3, r3, #20
 800ef64:	051b      	lsls	r3, r3, #20
 800ef66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef6a:	d961      	bls.n	800f030 <_strtod_l+0x8b8>
 800ef6c:	6963      	ldr	r3, [r4, #20]
 800ef6e:	b913      	cbnz	r3, 800ef76 <_strtod_l+0x7fe>
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	dd5c      	ble.n	800f030 <_strtod_l+0x8b8>
 800ef76:	4621      	mov	r1, r4
 800ef78:	2201      	movs	r2, #1
 800ef7a:	9805      	ldr	r0, [sp, #20]
 800ef7c:	f7ff f984 	bl	800e288 <__lshift>
 800ef80:	4641      	mov	r1, r8
 800ef82:	4604      	mov	r4, r0
 800ef84:	f7ff f9ec 	bl	800e360 <__mcmp>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	dd51      	ble.n	800f030 <_strtod_l+0x8b8>
 800ef8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef90:	9a08      	ldr	r2, [sp, #32]
 800ef92:	0d1b      	lsrs	r3, r3, #20
 800ef94:	051b      	lsls	r3, r3, #20
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	d06b      	beq.n	800f072 <_strtod_l+0x8fa>
 800ef9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef9e:	d868      	bhi.n	800f072 <_strtod_l+0x8fa>
 800efa0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800efa4:	f67f ae9d 	bls.w	800ece2 <_strtod_l+0x56a>
 800efa8:	4b0a      	ldr	r3, [pc, #40]	@ (800efd4 <_strtod_l+0x85c>)
 800efaa:	4650      	mov	r0, sl
 800efac:	4659      	mov	r1, fp
 800efae:	2200      	movs	r2, #0
 800efb0:	f7f1 fb22 	bl	80005f8 <__aeabi_dmul>
 800efb4:	4b08      	ldr	r3, [pc, #32]	@ (800efd8 <_strtod_l+0x860>)
 800efb6:	400b      	ands	r3, r1
 800efb8:	4682      	mov	sl, r0
 800efba:	468b      	mov	fp, r1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f47f ae05 	bne.w	800ebcc <_strtod_l+0x454>
 800efc2:	9a05      	ldr	r2, [sp, #20]
 800efc4:	2322      	movs	r3, #34	@ 0x22
 800efc6:	6013      	str	r3, [r2, #0]
 800efc8:	e600      	b.n	800ebcc <_strtod_l+0x454>
 800efca:	bf00      	nop
 800efcc:	08011168 	.word	0x08011168
 800efd0:	fffffc02 	.word	0xfffffc02
 800efd4:	39500000 	.word	0x39500000
 800efd8:	7ff00000 	.word	0x7ff00000
 800efdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800efe0:	d165      	bne.n	800f0ae <_strtod_l+0x936>
 800efe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800efe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efe8:	b35a      	cbz	r2, 800f042 <_strtod_l+0x8ca>
 800efea:	4a9f      	ldr	r2, [pc, #636]	@ (800f268 <_strtod_l+0xaf0>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d12b      	bne.n	800f048 <_strtod_l+0x8d0>
 800eff0:	9b08      	ldr	r3, [sp, #32]
 800eff2:	4651      	mov	r1, sl
 800eff4:	b303      	cbz	r3, 800f038 <_strtod_l+0x8c0>
 800eff6:	4b9d      	ldr	r3, [pc, #628]	@ (800f26c <_strtod_l+0xaf4>)
 800eff8:	465a      	mov	r2, fp
 800effa:	4013      	ands	r3, r2
 800effc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f000:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f004:	d81b      	bhi.n	800f03e <_strtod_l+0x8c6>
 800f006:	0d1b      	lsrs	r3, r3, #20
 800f008:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f00c:	fa02 f303 	lsl.w	r3, r2, r3
 800f010:	4299      	cmp	r1, r3
 800f012:	d119      	bne.n	800f048 <_strtod_l+0x8d0>
 800f014:	4b96      	ldr	r3, [pc, #600]	@ (800f270 <_strtod_l+0xaf8>)
 800f016:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f018:	429a      	cmp	r2, r3
 800f01a:	d102      	bne.n	800f022 <_strtod_l+0x8aa>
 800f01c:	3101      	adds	r1, #1
 800f01e:	f43f adca 	beq.w	800ebb6 <_strtod_l+0x43e>
 800f022:	4b92      	ldr	r3, [pc, #584]	@ (800f26c <_strtod_l+0xaf4>)
 800f024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f026:	401a      	ands	r2, r3
 800f028:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f02c:	f04f 0a00 	mov.w	sl, #0
 800f030:	9b08      	ldr	r3, [sp, #32]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1b8      	bne.n	800efa8 <_strtod_l+0x830>
 800f036:	e5c9      	b.n	800ebcc <_strtod_l+0x454>
 800f038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f03c:	e7e8      	b.n	800f010 <_strtod_l+0x898>
 800f03e:	4613      	mov	r3, r2
 800f040:	e7e6      	b.n	800f010 <_strtod_l+0x898>
 800f042:	ea53 030a 	orrs.w	r3, r3, sl
 800f046:	d0a1      	beq.n	800ef8c <_strtod_l+0x814>
 800f048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f04a:	b1db      	cbz	r3, 800f084 <_strtod_l+0x90c>
 800f04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f04e:	4213      	tst	r3, r2
 800f050:	d0ee      	beq.n	800f030 <_strtod_l+0x8b8>
 800f052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f054:	9a08      	ldr	r2, [sp, #32]
 800f056:	4650      	mov	r0, sl
 800f058:	4659      	mov	r1, fp
 800f05a:	b1bb      	cbz	r3, 800f08c <_strtod_l+0x914>
 800f05c:	f7ff fb6e 	bl	800e73c <sulp>
 800f060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f064:	ec53 2b10 	vmov	r2, r3, d0
 800f068:	f7f1 f910 	bl	800028c <__adddf3>
 800f06c:	4682      	mov	sl, r0
 800f06e:	468b      	mov	fp, r1
 800f070:	e7de      	b.n	800f030 <_strtod_l+0x8b8>
 800f072:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f076:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f07a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f07e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f082:	e7d5      	b.n	800f030 <_strtod_l+0x8b8>
 800f084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f086:	ea13 0f0a 	tst.w	r3, sl
 800f08a:	e7e1      	b.n	800f050 <_strtod_l+0x8d8>
 800f08c:	f7ff fb56 	bl	800e73c <sulp>
 800f090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f094:	ec53 2b10 	vmov	r2, r3, d0
 800f098:	f7f1 f8f6 	bl	8000288 <__aeabi_dsub>
 800f09c:	2200      	movs	r2, #0
 800f09e:	2300      	movs	r3, #0
 800f0a0:	4682      	mov	sl, r0
 800f0a2:	468b      	mov	fp, r1
 800f0a4:	f7f1 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d0c1      	beq.n	800f030 <_strtod_l+0x8b8>
 800f0ac:	e619      	b.n	800ece2 <_strtod_l+0x56a>
 800f0ae:	4641      	mov	r1, r8
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f7ff facd 	bl	800e650 <__ratio>
 800f0b6:	ec57 6b10 	vmov	r6, r7, d0
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f7f1 fd14 	bl	8000af0 <__aeabi_dcmple>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d06f      	beq.n	800f1ac <_strtod_l+0xa34>
 800f0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d17a      	bne.n	800f1c8 <_strtod_l+0xa50>
 800f0d2:	f1ba 0f00 	cmp.w	sl, #0
 800f0d6:	d158      	bne.n	800f18a <_strtod_l+0xa12>
 800f0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d15a      	bne.n	800f198 <_strtod_l+0xa20>
 800f0e2:	4b64      	ldr	r3, [pc, #400]	@ (800f274 <_strtod_l+0xafc>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	f7f1 fcf7 	bl	8000adc <__aeabi_dcmplt>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d159      	bne.n	800f1a6 <_strtod_l+0xa2e>
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	4b60      	ldr	r3, [pc, #384]	@ (800f278 <_strtod_l+0xb00>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f7f1 fa7d 	bl	80005f8 <__aeabi_dmul>
 800f0fe:	4606      	mov	r6, r0
 800f100:	460f      	mov	r7, r1
 800f102:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f106:	9606      	str	r6, [sp, #24]
 800f108:	9307      	str	r3, [sp, #28]
 800f10a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f10e:	4d57      	ldr	r5, [pc, #348]	@ (800f26c <_strtod_l+0xaf4>)
 800f110:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f116:	401d      	ands	r5, r3
 800f118:	4b58      	ldr	r3, [pc, #352]	@ (800f27c <_strtod_l+0xb04>)
 800f11a:	429d      	cmp	r5, r3
 800f11c:	f040 80b2 	bne.w	800f284 <_strtod_l+0xb0c>
 800f120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f122:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f126:	ec4b ab10 	vmov	d0, sl, fp
 800f12a:	f7ff f9c9 	bl	800e4c0 <__ulp>
 800f12e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f132:	ec51 0b10 	vmov	r0, r1, d0
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	4652      	mov	r2, sl
 800f13c:	465b      	mov	r3, fp
 800f13e:	f7f1 f8a5 	bl	800028c <__adddf3>
 800f142:	460b      	mov	r3, r1
 800f144:	4949      	ldr	r1, [pc, #292]	@ (800f26c <_strtod_l+0xaf4>)
 800f146:	4a4e      	ldr	r2, [pc, #312]	@ (800f280 <_strtod_l+0xb08>)
 800f148:	4019      	ands	r1, r3
 800f14a:	4291      	cmp	r1, r2
 800f14c:	4682      	mov	sl, r0
 800f14e:	d942      	bls.n	800f1d6 <_strtod_l+0xa5e>
 800f150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f152:	4b47      	ldr	r3, [pc, #284]	@ (800f270 <_strtod_l+0xaf8>)
 800f154:	429a      	cmp	r2, r3
 800f156:	d103      	bne.n	800f160 <_strtod_l+0x9e8>
 800f158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f15a:	3301      	adds	r3, #1
 800f15c:	f43f ad2b 	beq.w	800ebb6 <_strtod_l+0x43e>
 800f160:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f270 <_strtod_l+0xaf8>
 800f164:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f16a:	9805      	ldr	r0, [sp, #20]
 800f16c:	f7fe fe74 	bl	800de58 <_Bfree>
 800f170:	9805      	ldr	r0, [sp, #20]
 800f172:	4649      	mov	r1, r9
 800f174:	f7fe fe70 	bl	800de58 <_Bfree>
 800f178:	9805      	ldr	r0, [sp, #20]
 800f17a:	4641      	mov	r1, r8
 800f17c:	f7fe fe6c 	bl	800de58 <_Bfree>
 800f180:	9805      	ldr	r0, [sp, #20]
 800f182:	4621      	mov	r1, r4
 800f184:	f7fe fe68 	bl	800de58 <_Bfree>
 800f188:	e618      	b.n	800edbc <_strtod_l+0x644>
 800f18a:	f1ba 0f01 	cmp.w	sl, #1
 800f18e:	d103      	bne.n	800f198 <_strtod_l+0xa20>
 800f190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f192:	2b00      	cmp	r3, #0
 800f194:	f43f ada5 	beq.w	800ece2 <_strtod_l+0x56a>
 800f198:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f248 <_strtod_l+0xad0>
 800f19c:	4f35      	ldr	r7, [pc, #212]	@ (800f274 <_strtod_l+0xafc>)
 800f19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1a2:	2600      	movs	r6, #0
 800f1a4:	e7b1      	b.n	800f10a <_strtod_l+0x992>
 800f1a6:	4f34      	ldr	r7, [pc, #208]	@ (800f278 <_strtod_l+0xb00>)
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	e7aa      	b.n	800f102 <_strtod_l+0x98a>
 800f1ac:	4b32      	ldr	r3, [pc, #200]	@ (800f278 <_strtod_l+0xb00>)
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f7f1 fa20 	bl	80005f8 <__aeabi_dmul>
 800f1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d09f      	beq.n	800f102 <_strtod_l+0x98a>
 800f1c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f1c6:	e7a0      	b.n	800f10a <_strtod_l+0x992>
 800f1c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f250 <_strtod_l+0xad8>
 800f1cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1d0:	ec57 6b17 	vmov	r6, r7, d7
 800f1d4:	e799      	b.n	800f10a <_strtod_l+0x992>
 800f1d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f1da:	9b08      	ldr	r3, [sp, #32]
 800f1dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1c1      	bne.n	800f168 <_strtod_l+0x9f0>
 800f1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1e8:	0d1b      	lsrs	r3, r3, #20
 800f1ea:	051b      	lsls	r3, r3, #20
 800f1ec:	429d      	cmp	r5, r3
 800f1ee:	d1bb      	bne.n	800f168 <_strtod_l+0x9f0>
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	f7f1 fd60 	bl	8000cb8 <__aeabi_d2lz>
 800f1f8:	f7f1 f9d0 	bl	800059c <__aeabi_l2d>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	4630      	mov	r0, r6
 800f202:	4639      	mov	r1, r7
 800f204:	f7f1 f840 	bl	8000288 <__aeabi_dsub>
 800f208:	460b      	mov	r3, r1
 800f20a:	4602      	mov	r2, r0
 800f20c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f210:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f216:	ea46 060a 	orr.w	r6, r6, sl
 800f21a:	431e      	orrs	r6, r3
 800f21c:	d06f      	beq.n	800f2fe <_strtod_l+0xb86>
 800f21e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f258 <_strtod_l+0xae0>)
 800f220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f224:	f7f1 fc5a 	bl	8000adc <__aeabi_dcmplt>
 800f228:	2800      	cmp	r0, #0
 800f22a:	f47f accf 	bne.w	800ebcc <_strtod_l+0x454>
 800f22e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f260 <_strtod_l+0xae8>)
 800f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f238:	f7f1 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d093      	beq.n	800f168 <_strtod_l+0x9f0>
 800f240:	e4c4      	b.n	800ebcc <_strtod_l+0x454>
 800f242:	bf00      	nop
 800f244:	f3af 8000 	nop.w
 800f248:	00000000 	.word	0x00000000
 800f24c:	bff00000 	.word	0xbff00000
 800f250:	00000000 	.word	0x00000000
 800f254:	3ff00000 	.word	0x3ff00000
 800f258:	94a03595 	.word	0x94a03595
 800f25c:	3fdfffff 	.word	0x3fdfffff
 800f260:	35afe535 	.word	0x35afe535
 800f264:	3fe00000 	.word	0x3fe00000
 800f268:	000fffff 	.word	0x000fffff
 800f26c:	7ff00000 	.word	0x7ff00000
 800f270:	7fefffff 	.word	0x7fefffff
 800f274:	3ff00000 	.word	0x3ff00000
 800f278:	3fe00000 	.word	0x3fe00000
 800f27c:	7fe00000 	.word	0x7fe00000
 800f280:	7c9fffff 	.word	0x7c9fffff
 800f284:	9b08      	ldr	r3, [sp, #32]
 800f286:	b323      	cbz	r3, 800f2d2 <_strtod_l+0xb5a>
 800f288:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f28c:	d821      	bhi.n	800f2d2 <_strtod_l+0xb5a>
 800f28e:	a328      	add	r3, pc, #160	@ (adr r3, 800f330 <_strtod_l+0xbb8>)
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	4630      	mov	r0, r6
 800f296:	4639      	mov	r1, r7
 800f298:	f7f1 fc2a 	bl	8000af0 <__aeabi_dcmple>
 800f29c:	b1a0      	cbz	r0, 800f2c8 <_strtod_l+0xb50>
 800f29e:	4639      	mov	r1, r7
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7f1 fc81 	bl	8000ba8 <__aeabi_d2uiz>
 800f2a6:	2801      	cmp	r0, #1
 800f2a8:	bf38      	it	cc
 800f2aa:	2001      	movcc	r0, #1
 800f2ac:	f7f1 f92a 	bl	8000504 <__aeabi_ui2d>
 800f2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	460f      	mov	r7, r1
 800f2b6:	b9fb      	cbnz	r3, 800f2f8 <_strtod_l+0xb80>
 800f2b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f2be:	9315      	str	r3, [sp, #84]	@ 0x54
 800f2c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f2c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f2c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f2ce:	1b5b      	subs	r3, r3, r5
 800f2d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f2d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f2da:	f7ff f8f1 	bl	800e4c0 <__ulp>
 800f2de:	4650      	mov	r0, sl
 800f2e0:	ec53 2b10 	vmov	r2, r3, d0
 800f2e4:	4659      	mov	r1, fp
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f2ee:	f7f0 ffcd 	bl	800028c <__adddf3>
 800f2f2:	4682      	mov	sl, r0
 800f2f4:	468b      	mov	fp, r1
 800f2f6:	e770      	b.n	800f1da <_strtod_l+0xa62>
 800f2f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f2fc:	e7e0      	b.n	800f2c0 <_strtod_l+0xb48>
 800f2fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800f338 <_strtod_l+0xbc0>)
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	f7f1 fbea 	bl	8000adc <__aeabi_dcmplt>
 800f308:	e798      	b.n	800f23c <_strtod_l+0xac4>
 800f30a:	2300      	movs	r3, #0
 800f30c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f30e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	f7ff ba6d 	b.w	800e7f2 <_strtod_l+0x7a>
 800f318:	2a65      	cmp	r2, #101	@ 0x65
 800f31a:	f43f ab66 	beq.w	800e9ea <_strtod_l+0x272>
 800f31e:	2a45      	cmp	r2, #69	@ 0x45
 800f320:	f43f ab63 	beq.w	800e9ea <_strtod_l+0x272>
 800f324:	2301      	movs	r3, #1
 800f326:	f7ff bb9e 	b.w	800ea66 <_strtod_l+0x2ee>
 800f32a:	bf00      	nop
 800f32c:	f3af 8000 	nop.w
 800f330:	ffc00000 	.word	0xffc00000
 800f334:	41dfffff 	.word	0x41dfffff
 800f338:	94a03595 	.word	0x94a03595
 800f33c:	3fcfffff 	.word	0x3fcfffff

0800f340 <_strtod_r>:
 800f340:	4b01      	ldr	r3, [pc, #4]	@ (800f348 <_strtod_r+0x8>)
 800f342:	f7ff ba19 	b.w	800e778 <_strtod_l>
 800f346:	bf00      	nop
 800f348:	20000188 	.word	0x20000188

0800f34c <_strtol_l.constprop.0>:
 800f34c:	2b24      	cmp	r3, #36	@ 0x24
 800f34e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f352:	4686      	mov	lr, r0
 800f354:	4690      	mov	r8, r2
 800f356:	d801      	bhi.n	800f35c <_strtol_l.constprop.0+0x10>
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d106      	bne.n	800f36a <_strtol_l.constprop.0+0x1e>
 800f35c:	f7fd fdbc 	bl	800ced8 <__errno>
 800f360:	2316      	movs	r3, #22
 800f362:	6003      	str	r3, [r0, #0]
 800f364:	2000      	movs	r0, #0
 800f366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f36a:	4834      	ldr	r0, [pc, #208]	@ (800f43c <_strtol_l.constprop.0+0xf0>)
 800f36c:	460d      	mov	r5, r1
 800f36e:	462a      	mov	r2, r5
 800f370:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f374:	5d06      	ldrb	r6, [r0, r4]
 800f376:	f016 0608 	ands.w	r6, r6, #8
 800f37a:	d1f8      	bne.n	800f36e <_strtol_l.constprop.0+0x22>
 800f37c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f37e:	d12d      	bne.n	800f3dc <_strtol_l.constprop.0+0x90>
 800f380:	782c      	ldrb	r4, [r5, #0]
 800f382:	2601      	movs	r6, #1
 800f384:	1c95      	adds	r5, r2, #2
 800f386:	f033 0210 	bics.w	r2, r3, #16
 800f38a:	d109      	bne.n	800f3a0 <_strtol_l.constprop.0+0x54>
 800f38c:	2c30      	cmp	r4, #48	@ 0x30
 800f38e:	d12a      	bne.n	800f3e6 <_strtol_l.constprop.0+0x9a>
 800f390:	782a      	ldrb	r2, [r5, #0]
 800f392:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f396:	2a58      	cmp	r2, #88	@ 0x58
 800f398:	d125      	bne.n	800f3e6 <_strtol_l.constprop.0+0x9a>
 800f39a:	786c      	ldrb	r4, [r5, #1]
 800f39c:	2310      	movs	r3, #16
 800f39e:	3502      	adds	r5, #2
 800f3a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f3a4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	fbbc f9f3 	udiv	r9, ip, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f3b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f3b8:	2f09      	cmp	r7, #9
 800f3ba:	d81b      	bhi.n	800f3f4 <_strtol_l.constprop.0+0xa8>
 800f3bc:	463c      	mov	r4, r7
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	dd27      	ble.n	800f412 <_strtol_l.constprop.0+0xc6>
 800f3c2:	1c57      	adds	r7, r2, #1
 800f3c4:	d007      	beq.n	800f3d6 <_strtol_l.constprop.0+0x8a>
 800f3c6:	4581      	cmp	r9, r0
 800f3c8:	d320      	bcc.n	800f40c <_strtol_l.constprop.0+0xc0>
 800f3ca:	d101      	bne.n	800f3d0 <_strtol_l.constprop.0+0x84>
 800f3cc:	45a2      	cmp	sl, r4
 800f3ce:	db1d      	blt.n	800f40c <_strtol_l.constprop.0+0xc0>
 800f3d0:	fb00 4003 	mla	r0, r0, r3, r4
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3da:	e7eb      	b.n	800f3b4 <_strtol_l.constprop.0+0x68>
 800f3dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800f3de:	bf04      	itt	eq
 800f3e0:	782c      	ldrbeq	r4, [r5, #0]
 800f3e2:	1c95      	addeq	r5, r2, #2
 800f3e4:	e7cf      	b.n	800f386 <_strtol_l.constprop.0+0x3a>
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1da      	bne.n	800f3a0 <_strtol_l.constprop.0+0x54>
 800f3ea:	2c30      	cmp	r4, #48	@ 0x30
 800f3ec:	bf0c      	ite	eq
 800f3ee:	2308      	moveq	r3, #8
 800f3f0:	230a      	movne	r3, #10
 800f3f2:	e7d5      	b.n	800f3a0 <_strtol_l.constprop.0+0x54>
 800f3f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f3f8:	2f19      	cmp	r7, #25
 800f3fa:	d801      	bhi.n	800f400 <_strtol_l.constprop.0+0xb4>
 800f3fc:	3c37      	subs	r4, #55	@ 0x37
 800f3fe:	e7de      	b.n	800f3be <_strtol_l.constprop.0+0x72>
 800f400:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f404:	2f19      	cmp	r7, #25
 800f406:	d804      	bhi.n	800f412 <_strtol_l.constprop.0+0xc6>
 800f408:	3c57      	subs	r4, #87	@ 0x57
 800f40a:	e7d8      	b.n	800f3be <_strtol_l.constprop.0+0x72>
 800f40c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f410:	e7e1      	b.n	800f3d6 <_strtol_l.constprop.0+0x8a>
 800f412:	1c53      	adds	r3, r2, #1
 800f414:	d108      	bne.n	800f428 <_strtol_l.constprop.0+0xdc>
 800f416:	2322      	movs	r3, #34	@ 0x22
 800f418:	f8ce 3000 	str.w	r3, [lr]
 800f41c:	4660      	mov	r0, ip
 800f41e:	f1b8 0f00 	cmp.w	r8, #0
 800f422:	d0a0      	beq.n	800f366 <_strtol_l.constprop.0+0x1a>
 800f424:	1e69      	subs	r1, r5, #1
 800f426:	e006      	b.n	800f436 <_strtol_l.constprop.0+0xea>
 800f428:	b106      	cbz	r6, 800f42c <_strtol_l.constprop.0+0xe0>
 800f42a:	4240      	negs	r0, r0
 800f42c:	f1b8 0f00 	cmp.w	r8, #0
 800f430:	d099      	beq.n	800f366 <_strtol_l.constprop.0+0x1a>
 800f432:	2a00      	cmp	r2, #0
 800f434:	d1f6      	bne.n	800f424 <_strtol_l.constprop.0+0xd8>
 800f436:	f8c8 1000 	str.w	r1, [r8]
 800f43a:	e794      	b.n	800f366 <_strtol_l.constprop.0+0x1a>
 800f43c:	08011191 	.word	0x08011191

0800f440 <_strtol_r>:
 800f440:	f7ff bf84 	b.w	800f34c <_strtol_l.constprop.0>

0800f444 <__ssputs_r>:
 800f444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	688e      	ldr	r6, [r1, #8]
 800f44a:	461f      	mov	r7, r3
 800f44c:	42be      	cmp	r6, r7
 800f44e:	680b      	ldr	r3, [r1, #0]
 800f450:	4682      	mov	sl, r0
 800f452:	460c      	mov	r4, r1
 800f454:	4690      	mov	r8, r2
 800f456:	d82d      	bhi.n	800f4b4 <__ssputs_r+0x70>
 800f458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f45c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f460:	d026      	beq.n	800f4b0 <__ssputs_r+0x6c>
 800f462:	6965      	ldr	r5, [r4, #20]
 800f464:	6909      	ldr	r1, [r1, #16]
 800f466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f46a:	eba3 0901 	sub.w	r9, r3, r1
 800f46e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f472:	1c7b      	adds	r3, r7, #1
 800f474:	444b      	add	r3, r9
 800f476:	106d      	asrs	r5, r5, #1
 800f478:	429d      	cmp	r5, r3
 800f47a:	bf38      	it	cc
 800f47c:	461d      	movcc	r5, r3
 800f47e:	0553      	lsls	r3, r2, #21
 800f480:	d527      	bpl.n	800f4d2 <__ssputs_r+0x8e>
 800f482:	4629      	mov	r1, r5
 800f484:	f7fe fc1c 	bl	800dcc0 <_malloc_r>
 800f488:	4606      	mov	r6, r0
 800f48a:	b360      	cbz	r0, 800f4e6 <__ssputs_r+0xa2>
 800f48c:	6921      	ldr	r1, [r4, #16]
 800f48e:	464a      	mov	r2, r9
 800f490:	f000 fda6 	bl	800ffe0 <memcpy>
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f49e:	81a3      	strh	r3, [r4, #12]
 800f4a0:	6126      	str	r6, [r4, #16]
 800f4a2:	6165      	str	r5, [r4, #20]
 800f4a4:	444e      	add	r6, r9
 800f4a6:	eba5 0509 	sub.w	r5, r5, r9
 800f4aa:	6026      	str	r6, [r4, #0]
 800f4ac:	60a5      	str	r5, [r4, #8]
 800f4ae:	463e      	mov	r6, r7
 800f4b0:	42be      	cmp	r6, r7
 800f4b2:	d900      	bls.n	800f4b6 <__ssputs_r+0x72>
 800f4b4:	463e      	mov	r6, r7
 800f4b6:	6820      	ldr	r0, [r4, #0]
 800f4b8:	4632      	mov	r2, r6
 800f4ba:	4641      	mov	r1, r8
 800f4bc:	f000 fd53 	bl	800ff66 <memmove>
 800f4c0:	68a3      	ldr	r3, [r4, #8]
 800f4c2:	1b9b      	subs	r3, r3, r6
 800f4c4:	60a3      	str	r3, [r4, #8]
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	4433      	add	r3, r6
 800f4ca:	6023      	str	r3, [r4, #0]
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d2:	462a      	mov	r2, r5
 800f4d4:	f001 f919 	bl	801070a <_realloc_r>
 800f4d8:	4606      	mov	r6, r0
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d1e0      	bne.n	800f4a0 <__ssputs_r+0x5c>
 800f4de:	6921      	ldr	r1, [r4, #16]
 800f4e0:	4650      	mov	r0, sl
 800f4e2:	f7fe fb79 	bl	800dbd8 <_free_r>
 800f4e6:	230c      	movs	r3, #12
 800f4e8:	f8ca 3000 	str.w	r3, [sl]
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f2:	81a3      	strh	r3, [r4, #12]
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4f8:	e7e9      	b.n	800f4ce <__ssputs_r+0x8a>
	...

0800f4fc <_svfiprintf_r>:
 800f4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f500:	4698      	mov	r8, r3
 800f502:	898b      	ldrh	r3, [r1, #12]
 800f504:	061b      	lsls	r3, r3, #24
 800f506:	b09d      	sub	sp, #116	@ 0x74
 800f508:	4607      	mov	r7, r0
 800f50a:	460d      	mov	r5, r1
 800f50c:	4614      	mov	r4, r2
 800f50e:	d510      	bpl.n	800f532 <_svfiprintf_r+0x36>
 800f510:	690b      	ldr	r3, [r1, #16]
 800f512:	b973      	cbnz	r3, 800f532 <_svfiprintf_r+0x36>
 800f514:	2140      	movs	r1, #64	@ 0x40
 800f516:	f7fe fbd3 	bl	800dcc0 <_malloc_r>
 800f51a:	6028      	str	r0, [r5, #0]
 800f51c:	6128      	str	r0, [r5, #16]
 800f51e:	b930      	cbnz	r0, 800f52e <_svfiprintf_r+0x32>
 800f520:	230c      	movs	r3, #12
 800f522:	603b      	str	r3, [r7, #0]
 800f524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f528:	b01d      	add	sp, #116	@ 0x74
 800f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52e:	2340      	movs	r3, #64	@ 0x40
 800f530:	616b      	str	r3, [r5, #20]
 800f532:	2300      	movs	r3, #0
 800f534:	9309      	str	r3, [sp, #36]	@ 0x24
 800f536:	2320      	movs	r3, #32
 800f538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f540:	2330      	movs	r3, #48	@ 0x30
 800f542:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f6e0 <_svfiprintf_r+0x1e4>
 800f546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f54a:	f04f 0901 	mov.w	r9, #1
 800f54e:	4623      	mov	r3, r4
 800f550:	469a      	mov	sl, r3
 800f552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f556:	b10a      	cbz	r2, 800f55c <_svfiprintf_r+0x60>
 800f558:	2a25      	cmp	r2, #37	@ 0x25
 800f55a:	d1f9      	bne.n	800f550 <_svfiprintf_r+0x54>
 800f55c:	ebba 0b04 	subs.w	fp, sl, r4
 800f560:	d00b      	beq.n	800f57a <_svfiprintf_r+0x7e>
 800f562:	465b      	mov	r3, fp
 800f564:	4622      	mov	r2, r4
 800f566:	4629      	mov	r1, r5
 800f568:	4638      	mov	r0, r7
 800f56a:	f7ff ff6b 	bl	800f444 <__ssputs_r>
 800f56e:	3001      	adds	r0, #1
 800f570:	f000 80a7 	beq.w	800f6c2 <_svfiprintf_r+0x1c6>
 800f574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f576:	445a      	add	r2, fp
 800f578:	9209      	str	r2, [sp, #36]	@ 0x24
 800f57a:	f89a 3000 	ldrb.w	r3, [sl]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 809f 	beq.w	800f6c2 <_svfiprintf_r+0x1c6>
 800f584:	2300      	movs	r3, #0
 800f586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f58e:	f10a 0a01 	add.w	sl, sl, #1
 800f592:	9304      	str	r3, [sp, #16]
 800f594:	9307      	str	r3, [sp, #28]
 800f596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f59a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f59c:	4654      	mov	r4, sl
 800f59e:	2205      	movs	r2, #5
 800f5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a4:	484e      	ldr	r0, [pc, #312]	@ (800f6e0 <_svfiprintf_r+0x1e4>)
 800f5a6:	f7f0 fe13 	bl	80001d0 <memchr>
 800f5aa:	9a04      	ldr	r2, [sp, #16]
 800f5ac:	b9d8      	cbnz	r0, 800f5e6 <_svfiprintf_r+0xea>
 800f5ae:	06d0      	lsls	r0, r2, #27
 800f5b0:	bf44      	itt	mi
 800f5b2:	2320      	movmi	r3, #32
 800f5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5b8:	0711      	lsls	r1, r2, #28
 800f5ba:	bf44      	itt	mi
 800f5bc:	232b      	movmi	r3, #43	@ 0x2b
 800f5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5c8:	d015      	beq.n	800f5f6 <_svfiprintf_r+0xfa>
 800f5ca:	9a07      	ldr	r2, [sp, #28]
 800f5cc:	4654      	mov	r4, sl
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	f04f 0c0a 	mov.w	ip, #10
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5da:	3b30      	subs	r3, #48	@ 0x30
 800f5dc:	2b09      	cmp	r3, #9
 800f5de:	d94b      	bls.n	800f678 <_svfiprintf_r+0x17c>
 800f5e0:	b1b0      	cbz	r0, 800f610 <_svfiprintf_r+0x114>
 800f5e2:	9207      	str	r2, [sp, #28]
 800f5e4:	e014      	b.n	800f610 <_svfiprintf_r+0x114>
 800f5e6:	eba0 0308 	sub.w	r3, r0, r8
 800f5ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	46a2      	mov	sl, r4
 800f5f4:	e7d2      	b.n	800f59c <_svfiprintf_r+0xa0>
 800f5f6:	9b03      	ldr	r3, [sp, #12]
 800f5f8:	1d19      	adds	r1, r3, #4
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	9103      	str	r1, [sp, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bfbb      	ittet	lt
 800f602:	425b      	neglt	r3, r3
 800f604:	f042 0202 	orrlt.w	r2, r2, #2
 800f608:	9307      	strge	r3, [sp, #28]
 800f60a:	9307      	strlt	r3, [sp, #28]
 800f60c:	bfb8      	it	lt
 800f60e:	9204      	strlt	r2, [sp, #16]
 800f610:	7823      	ldrb	r3, [r4, #0]
 800f612:	2b2e      	cmp	r3, #46	@ 0x2e
 800f614:	d10a      	bne.n	800f62c <_svfiprintf_r+0x130>
 800f616:	7863      	ldrb	r3, [r4, #1]
 800f618:	2b2a      	cmp	r3, #42	@ 0x2a
 800f61a:	d132      	bne.n	800f682 <_svfiprintf_r+0x186>
 800f61c:	9b03      	ldr	r3, [sp, #12]
 800f61e:	1d1a      	adds	r2, r3, #4
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	9203      	str	r2, [sp, #12]
 800f624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f628:	3402      	adds	r4, #2
 800f62a:	9305      	str	r3, [sp, #20]
 800f62c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f6f0 <_svfiprintf_r+0x1f4>
 800f630:	7821      	ldrb	r1, [r4, #0]
 800f632:	2203      	movs	r2, #3
 800f634:	4650      	mov	r0, sl
 800f636:	f7f0 fdcb 	bl	80001d0 <memchr>
 800f63a:	b138      	cbz	r0, 800f64c <_svfiprintf_r+0x150>
 800f63c:	9b04      	ldr	r3, [sp, #16]
 800f63e:	eba0 000a 	sub.w	r0, r0, sl
 800f642:	2240      	movs	r2, #64	@ 0x40
 800f644:	4082      	lsls	r2, r0
 800f646:	4313      	orrs	r3, r2
 800f648:	3401      	adds	r4, #1
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f650:	4824      	ldr	r0, [pc, #144]	@ (800f6e4 <_svfiprintf_r+0x1e8>)
 800f652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f656:	2206      	movs	r2, #6
 800f658:	f7f0 fdba 	bl	80001d0 <memchr>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d036      	beq.n	800f6ce <_svfiprintf_r+0x1d2>
 800f660:	4b21      	ldr	r3, [pc, #132]	@ (800f6e8 <_svfiprintf_r+0x1ec>)
 800f662:	bb1b      	cbnz	r3, 800f6ac <_svfiprintf_r+0x1b0>
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	3307      	adds	r3, #7
 800f668:	f023 0307 	bic.w	r3, r3, #7
 800f66c:	3308      	adds	r3, #8
 800f66e:	9303      	str	r3, [sp, #12]
 800f670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f672:	4433      	add	r3, r6
 800f674:	9309      	str	r3, [sp, #36]	@ 0x24
 800f676:	e76a      	b.n	800f54e <_svfiprintf_r+0x52>
 800f678:	fb0c 3202 	mla	r2, ip, r2, r3
 800f67c:	460c      	mov	r4, r1
 800f67e:	2001      	movs	r0, #1
 800f680:	e7a8      	b.n	800f5d4 <_svfiprintf_r+0xd8>
 800f682:	2300      	movs	r3, #0
 800f684:	3401      	adds	r4, #1
 800f686:	9305      	str	r3, [sp, #20]
 800f688:	4619      	mov	r1, r3
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4620      	mov	r0, r4
 800f690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f694:	3a30      	subs	r2, #48	@ 0x30
 800f696:	2a09      	cmp	r2, #9
 800f698:	d903      	bls.n	800f6a2 <_svfiprintf_r+0x1a6>
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d0c6      	beq.n	800f62c <_svfiprintf_r+0x130>
 800f69e:	9105      	str	r1, [sp, #20]
 800f6a0:	e7c4      	b.n	800f62c <_svfiprintf_r+0x130>
 800f6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e7f0      	b.n	800f68e <_svfiprintf_r+0x192>
 800f6ac:	ab03      	add	r3, sp, #12
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	462a      	mov	r2, r5
 800f6b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f6ec <_svfiprintf_r+0x1f0>)
 800f6b4:	a904      	add	r1, sp, #16
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	f7fc fc54 	bl	800bf64 <_printf_float>
 800f6bc:	1c42      	adds	r2, r0, #1
 800f6be:	4606      	mov	r6, r0
 800f6c0:	d1d6      	bne.n	800f670 <_svfiprintf_r+0x174>
 800f6c2:	89ab      	ldrh	r3, [r5, #12]
 800f6c4:	065b      	lsls	r3, r3, #25
 800f6c6:	f53f af2d 	bmi.w	800f524 <_svfiprintf_r+0x28>
 800f6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6cc:	e72c      	b.n	800f528 <_svfiprintf_r+0x2c>
 800f6ce:	ab03      	add	r3, sp, #12
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	462a      	mov	r2, r5
 800f6d4:	4b05      	ldr	r3, [pc, #20]	@ (800f6ec <_svfiprintf_r+0x1f0>)
 800f6d6:	a904      	add	r1, sp, #16
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7fc fedb 	bl	800c494 <_printf_i>
 800f6de:	e7ed      	b.n	800f6bc <_svfiprintf_r+0x1c0>
 800f6e0:	08011291 	.word	0x08011291
 800f6e4:	0801129b 	.word	0x0801129b
 800f6e8:	0800bf65 	.word	0x0800bf65
 800f6ec:	0800f445 	.word	0x0800f445
 800f6f0:	08011297 	.word	0x08011297

0800f6f4 <_sungetc_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	1c4b      	adds	r3, r1, #1
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	d103      	bne.n	800f704 <_sungetc_r+0x10>
 800f6fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f700:	4628      	mov	r0, r5
 800f702:	bd38      	pop	{r3, r4, r5, pc}
 800f704:	8993      	ldrh	r3, [r2, #12]
 800f706:	f023 0320 	bic.w	r3, r3, #32
 800f70a:	8193      	strh	r3, [r2, #12]
 800f70c:	6853      	ldr	r3, [r2, #4]
 800f70e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f710:	b2cd      	uxtb	r5, r1
 800f712:	b18a      	cbz	r2, 800f738 <_sungetc_r+0x44>
 800f714:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f716:	429a      	cmp	r2, r3
 800f718:	dd08      	ble.n	800f72c <_sungetc_r+0x38>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	1e5a      	subs	r2, r3, #1
 800f71e:	6022      	str	r2, [r4, #0]
 800f720:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f724:	6863      	ldr	r3, [r4, #4]
 800f726:	3301      	adds	r3, #1
 800f728:	6063      	str	r3, [r4, #4]
 800f72a:	e7e9      	b.n	800f700 <_sungetc_r+0xc>
 800f72c:	4621      	mov	r1, r4
 800f72e:	f000 fbe0 	bl	800fef2 <__submore>
 800f732:	2800      	cmp	r0, #0
 800f734:	d0f1      	beq.n	800f71a <_sungetc_r+0x26>
 800f736:	e7e1      	b.n	800f6fc <_sungetc_r+0x8>
 800f738:	6921      	ldr	r1, [r4, #16]
 800f73a:	6822      	ldr	r2, [r4, #0]
 800f73c:	b141      	cbz	r1, 800f750 <_sungetc_r+0x5c>
 800f73e:	4291      	cmp	r1, r2
 800f740:	d206      	bcs.n	800f750 <_sungetc_r+0x5c>
 800f742:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f746:	42a9      	cmp	r1, r5
 800f748:	d102      	bne.n	800f750 <_sungetc_r+0x5c>
 800f74a:	3a01      	subs	r2, #1
 800f74c:	6022      	str	r2, [r4, #0]
 800f74e:	e7ea      	b.n	800f726 <_sungetc_r+0x32>
 800f750:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f758:	6363      	str	r3, [r4, #52]	@ 0x34
 800f75a:	2303      	movs	r3, #3
 800f75c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f75e:	4623      	mov	r3, r4
 800f760:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	2301      	movs	r3, #1
 800f768:	e7de      	b.n	800f728 <_sungetc_r+0x34>

0800f76a <__ssrefill_r>:
 800f76a:	b510      	push	{r4, lr}
 800f76c:	460c      	mov	r4, r1
 800f76e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f770:	b169      	cbz	r1, 800f78e <__ssrefill_r+0x24>
 800f772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f776:	4299      	cmp	r1, r3
 800f778:	d001      	beq.n	800f77e <__ssrefill_r+0x14>
 800f77a:	f7fe fa2d 	bl	800dbd8 <_free_r>
 800f77e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f780:	6063      	str	r3, [r4, #4]
 800f782:	2000      	movs	r0, #0
 800f784:	6360      	str	r0, [r4, #52]	@ 0x34
 800f786:	b113      	cbz	r3, 800f78e <__ssrefill_r+0x24>
 800f788:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	2300      	movs	r3, #0
 800f794:	6063      	str	r3, [r4, #4]
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f043 0320 	orr.w	r3, r3, #32
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7a2:	e7f3      	b.n	800f78c <__ssrefill_r+0x22>

0800f7a4 <__ssvfiscanf_r>:
 800f7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f7b4:	49a5      	ldr	r1, [pc, #660]	@ (800fa4c <__ssvfiscanf_r+0x2a8>)
 800f7b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f7b8:	f10d 0804 	add.w	r8, sp, #4
 800f7bc:	49a4      	ldr	r1, [pc, #656]	@ (800fa50 <__ssvfiscanf_r+0x2ac>)
 800f7be:	4fa5      	ldr	r7, [pc, #660]	@ (800fa54 <__ssvfiscanf_r+0x2b0>)
 800f7c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	7813      	ldrb	r3, [r2, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8158 	beq.w	800fa82 <__ssvfiscanf_r+0x2de>
 800f7d2:	5cf9      	ldrb	r1, [r7, r3]
 800f7d4:	f011 0108 	ands.w	r1, r1, #8
 800f7d8:	f102 0501 	add.w	r5, r2, #1
 800f7dc:	d019      	beq.n	800f812 <__ssvfiscanf_r+0x6e>
 800f7de:	6863      	ldr	r3, [r4, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dd0f      	ble.n	800f804 <__ssvfiscanf_r+0x60>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	781a      	ldrb	r2, [r3, #0]
 800f7e8:	5cba      	ldrb	r2, [r7, r2]
 800f7ea:	0712      	lsls	r2, r2, #28
 800f7ec:	d401      	bmi.n	800f7f2 <__ssvfiscanf_r+0x4e>
 800f7ee:	462a      	mov	r2, r5
 800f7f0:	e7eb      	b.n	800f7ca <__ssvfiscanf_r+0x26>
 800f7f2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f7f4:	3201      	adds	r2, #1
 800f7f6:	9245      	str	r2, [sp, #276]	@ 0x114
 800f7f8:	6862      	ldr	r2, [r4, #4]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	3a01      	subs	r2, #1
 800f7fe:	6062      	str	r2, [r4, #4]
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	e7ec      	b.n	800f7de <__ssvfiscanf_r+0x3a>
 800f804:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f806:	4621      	mov	r1, r4
 800f808:	4630      	mov	r0, r6
 800f80a:	4798      	blx	r3
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d0e9      	beq.n	800f7e4 <__ssvfiscanf_r+0x40>
 800f810:	e7ed      	b.n	800f7ee <__ssvfiscanf_r+0x4a>
 800f812:	2b25      	cmp	r3, #37	@ 0x25
 800f814:	d012      	beq.n	800f83c <__ssvfiscanf_r+0x98>
 800f816:	4699      	mov	r9, r3
 800f818:	6863      	ldr	r3, [r4, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f340 8093 	ble.w	800f946 <__ssvfiscanf_r+0x1a2>
 800f820:	6822      	ldr	r2, [r4, #0]
 800f822:	7813      	ldrb	r3, [r2, #0]
 800f824:	454b      	cmp	r3, r9
 800f826:	f040 812c 	bne.w	800fa82 <__ssvfiscanf_r+0x2de>
 800f82a:	6863      	ldr	r3, [r4, #4]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	6063      	str	r3, [r4, #4]
 800f830:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f832:	3201      	adds	r2, #1
 800f834:	3301      	adds	r3, #1
 800f836:	6022      	str	r2, [r4, #0]
 800f838:	9345      	str	r3, [sp, #276]	@ 0x114
 800f83a:	e7d8      	b.n	800f7ee <__ssvfiscanf_r+0x4a>
 800f83c:	9141      	str	r1, [sp, #260]	@ 0x104
 800f83e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f840:	7853      	ldrb	r3, [r2, #1]
 800f842:	2b2a      	cmp	r3, #42	@ 0x2a
 800f844:	bf02      	ittt	eq
 800f846:	2310      	moveq	r3, #16
 800f848:	1c95      	addeq	r5, r2, #2
 800f84a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f84c:	220a      	movs	r2, #10
 800f84e:	46a9      	mov	r9, r5
 800f850:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f854:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f858:	2b09      	cmp	r3, #9
 800f85a:	d91e      	bls.n	800f89a <__ssvfiscanf_r+0xf6>
 800f85c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800fa58 <__ssvfiscanf_r+0x2b4>
 800f860:	2203      	movs	r2, #3
 800f862:	4650      	mov	r0, sl
 800f864:	f7f0 fcb4 	bl	80001d0 <memchr>
 800f868:	b138      	cbz	r0, 800f87a <__ssvfiscanf_r+0xd6>
 800f86a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f86c:	eba0 000a 	sub.w	r0, r0, sl
 800f870:	2301      	movs	r3, #1
 800f872:	4083      	lsls	r3, r0
 800f874:	4313      	orrs	r3, r2
 800f876:	9341      	str	r3, [sp, #260]	@ 0x104
 800f878:	464d      	mov	r5, r9
 800f87a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f87e:	2b78      	cmp	r3, #120	@ 0x78
 800f880:	d806      	bhi.n	800f890 <__ssvfiscanf_r+0xec>
 800f882:	2b57      	cmp	r3, #87	@ 0x57
 800f884:	d810      	bhi.n	800f8a8 <__ssvfiscanf_r+0x104>
 800f886:	2b25      	cmp	r3, #37	@ 0x25
 800f888:	d0c5      	beq.n	800f816 <__ssvfiscanf_r+0x72>
 800f88a:	d857      	bhi.n	800f93c <__ssvfiscanf_r+0x198>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d065      	beq.n	800f95c <__ssvfiscanf_r+0x1b8>
 800f890:	2303      	movs	r3, #3
 800f892:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f894:	230a      	movs	r3, #10
 800f896:	9342      	str	r3, [sp, #264]	@ 0x108
 800f898:	e078      	b.n	800f98c <__ssvfiscanf_r+0x1e8>
 800f89a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f89c:	fb02 1103 	mla	r1, r2, r3, r1
 800f8a0:	3930      	subs	r1, #48	@ 0x30
 800f8a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f8a4:	464d      	mov	r5, r9
 800f8a6:	e7d2      	b.n	800f84e <__ssvfiscanf_r+0xaa>
 800f8a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f8ac:	2a20      	cmp	r2, #32
 800f8ae:	d8ef      	bhi.n	800f890 <__ssvfiscanf_r+0xec>
 800f8b0:	a101      	add	r1, pc, #4	@ (adr r1, 800f8b8 <__ssvfiscanf_r+0x114>)
 800f8b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f8b6:	bf00      	nop
 800f8b8:	0800f96b 	.word	0x0800f96b
 800f8bc:	0800f891 	.word	0x0800f891
 800f8c0:	0800f891 	.word	0x0800f891
 800f8c4:	0800f9c5 	.word	0x0800f9c5
 800f8c8:	0800f891 	.word	0x0800f891
 800f8cc:	0800f891 	.word	0x0800f891
 800f8d0:	0800f891 	.word	0x0800f891
 800f8d4:	0800f891 	.word	0x0800f891
 800f8d8:	0800f891 	.word	0x0800f891
 800f8dc:	0800f891 	.word	0x0800f891
 800f8e0:	0800f891 	.word	0x0800f891
 800f8e4:	0800f9db 	.word	0x0800f9db
 800f8e8:	0800f9c1 	.word	0x0800f9c1
 800f8ec:	0800f943 	.word	0x0800f943
 800f8f0:	0800f943 	.word	0x0800f943
 800f8f4:	0800f943 	.word	0x0800f943
 800f8f8:	0800f891 	.word	0x0800f891
 800f8fc:	0800f97d 	.word	0x0800f97d
 800f900:	0800f891 	.word	0x0800f891
 800f904:	0800f891 	.word	0x0800f891
 800f908:	0800f891 	.word	0x0800f891
 800f90c:	0800f891 	.word	0x0800f891
 800f910:	0800f9eb 	.word	0x0800f9eb
 800f914:	0800f985 	.word	0x0800f985
 800f918:	0800f963 	.word	0x0800f963
 800f91c:	0800f891 	.word	0x0800f891
 800f920:	0800f891 	.word	0x0800f891
 800f924:	0800f9e7 	.word	0x0800f9e7
 800f928:	0800f891 	.word	0x0800f891
 800f92c:	0800f9c1 	.word	0x0800f9c1
 800f930:	0800f891 	.word	0x0800f891
 800f934:	0800f891 	.word	0x0800f891
 800f938:	0800f96b 	.word	0x0800f96b
 800f93c:	3b45      	subs	r3, #69	@ 0x45
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d8a6      	bhi.n	800f890 <__ssvfiscanf_r+0xec>
 800f942:	2305      	movs	r3, #5
 800f944:	e021      	b.n	800f98a <__ssvfiscanf_r+0x1e6>
 800f946:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f948:	4621      	mov	r1, r4
 800f94a:	4630      	mov	r0, r6
 800f94c:	4798      	blx	r3
 800f94e:	2800      	cmp	r0, #0
 800f950:	f43f af66 	beq.w	800f820 <__ssvfiscanf_r+0x7c>
 800f954:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f956:	2800      	cmp	r0, #0
 800f958:	f040 808b 	bne.w	800fa72 <__ssvfiscanf_r+0x2ce>
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f960:	e08b      	b.n	800fa7a <__ssvfiscanf_r+0x2d6>
 800f962:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f964:	f042 0220 	orr.w	r2, r2, #32
 800f968:	9241      	str	r2, [sp, #260]	@ 0x104
 800f96a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f96c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f970:	9241      	str	r2, [sp, #260]	@ 0x104
 800f972:	2210      	movs	r2, #16
 800f974:	2b6e      	cmp	r3, #110	@ 0x6e
 800f976:	9242      	str	r2, [sp, #264]	@ 0x108
 800f978:	d902      	bls.n	800f980 <__ssvfiscanf_r+0x1dc>
 800f97a:	e005      	b.n	800f988 <__ssvfiscanf_r+0x1e4>
 800f97c:	2300      	movs	r3, #0
 800f97e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f980:	2303      	movs	r3, #3
 800f982:	e002      	b.n	800f98a <__ssvfiscanf_r+0x1e6>
 800f984:	2308      	movs	r3, #8
 800f986:	9342      	str	r3, [sp, #264]	@ 0x108
 800f988:	2304      	movs	r3, #4
 800f98a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f98c:	6863      	ldr	r3, [r4, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	dd39      	ble.n	800fa06 <__ssvfiscanf_r+0x262>
 800f992:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f994:	0659      	lsls	r1, r3, #25
 800f996:	d404      	bmi.n	800f9a2 <__ssvfiscanf_r+0x1fe>
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	781a      	ldrb	r2, [r3, #0]
 800f99c:	5cba      	ldrb	r2, [r7, r2]
 800f99e:	0712      	lsls	r2, r2, #28
 800f9a0:	d438      	bmi.n	800fa14 <__ssvfiscanf_r+0x270>
 800f9a2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	dc47      	bgt.n	800fa38 <__ssvfiscanf_r+0x294>
 800f9a8:	466b      	mov	r3, sp
 800f9aa:	4622      	mov	r2, r4
 800f9ac:	a941      	add	r1, sp, #260	@ 0x104
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f000 f86c 	bl	800fa8c <_scanf_chars>
 800f9b4:	2801      	cmp	r0, #1
 800f9b6:	d064      	beq.n	800fa82 <__ssvfiscanf_r+0x2de>
 800f9b8:	2802      	cmp	r0, #2
 800f9ba:	f47f af18 	bne.w	800f7ee <__ssvfiscanf_r+0x4a>
 800f9be:	e7c9      	b.n	800f954 <__ssvfiscanf_r+0x1b0>
 800f9c0:	220a      	movs	r2, #10
 800f9c2:	e7d7      	b.n	800f974 <__ssvfiscanf_r+0x1d0>
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	f000 fa5a 	bl	800fe80 <__sccl>
 800f9cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f9ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9d2:	9341      	str	r3, [sp, #260]	@ 0x104
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e7d7      	b.n	800f98a <__ssvfiscanf_r+0x1e6>
 800f9da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f9dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9e0:	9341      	str	r3, [sp, #260]	@ 0x104
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e7d1      	b.n	800f98a <__ssvfiscanf_r+0x1e6>
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	e7cf      	b.n	800f98a <__ssvfiscanf_r+0x1e6>
 800f9ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f9ec:	06c3      	lsls	r3, r0, #27
 800f9ee:	f53f aefe 	bmi.w	800f7ee <__ssvfiscanf_r+0x4a>
 800f9f2:	9b00      	ldr	r3, [sp, #0]
 800f9f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f9f6:	1d19      	adds	r1, r3, #4
 800f9f8:	9100      	str	r1, [sp, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	07c0      	lsls	r0, r0, #31
 800f9fe:	bf4c      	ite	mi
 800fa00:	801a      	strhmi	r2, [r3, #0]
 800fa02:	601a      	strpl	r2, [r3, #0]
 800fa04:	e6f3      	b.n	800f7ee <__ssvfiscanf_r+0x4a>
 800fa06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fa08:	4621      	mov	r1, r4
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	4798      	blx	r3
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0bf      	beq.n	800f992 <__ssvfiscanf_r+0x1ee>
 800fa12:	e79f      	b.n	800f954 <__ssvfiscanf_r+0x1b0>
 800fa14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fa16:	3201      	adds	r2, #1
 800fa18:	9245      	str	r2, [sp, #276]	@ 0x114
 800fa1a:	6862      	ldr	r2, [r4, #4]
 800fa1c:	3a01      	subs	r2, #1
 800fa1e:	2a00      	cmp	r2, #0
 800fa20:	6062      	str	r2, [r4, #4]
 800fa22:	dd02      	ble.n	800fa2a <__ssvfiscanf_r+0x286>
 800fa24:	3301      	adds	r3, #1
 800fa26:	6023      	str	r3, [r4, #0]
 800fa28:	e7b6      	b.n	800f998 <__ssvfiscanf_r+0x1f4>
 800fa2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4630      	mov	r0, r6
 800fa30:	4798      	blx	r3
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d0b0      	beq.n	800f998 <__ssvfiscanf_r+0x1f4>
 800fa36:	e78d      	b.n	800f954 <__ssvfiscanf_r+0x1b0>
 800fa38:	2b04      	cmp	r3, #4
 800fa3a:	dc0f      	bgt.n	800fa5c <__ssvfiscanf_r+0x2b8>
 800fa3c:	466b      	mov	r3, sp
 800fa3e:	4622      	mov	r2, r4
 800fa40:	a941      	add	r1, sp, #260	@ 0x104
 800fa42:	4630      	mov	r0, r6
 800fa44:	f000 f87c 	bl	800fb40 <_scanf_i>
 800fa48:	e7b4      	b.n	800f9b4 <__ssvfiscanf_r+0x210>
 800fa4a:	bf00      	nop
 800fa4c:	0800f6f5 	.word	0x0800f6f5
 800fa50:	0800f76b 	.word	0x0800f76b
 800fa54:	08011191 	.word	0x08011191
 800fa58:	08011297 	.word	0x08011297
 800fa5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa88 <__ssvfiscanf_r+0x2e4>)
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f43f aec5 	beq.w	800f7ee <__ssvfiscanf_r+0x4a>
 800fa64:	466b      	mov	r3, sp
 800fa66:	4622      	mov	r2, r4
 800fa68:	a941      	add	r1, sp, #260	@ 0x104
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7fc fe32 	bl	800c6d4 <_scanf_float>
 800fa70:	e7a0      	b.n	800f9b4 <__ssvfiscanf_r+0x210>
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	065b      	lsls	r3, r3, #25
 800fa76:	f53f af71 	bmi.w	800f95c <__ssvfiscanf_r+0x1b8>
 800fa7a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa82:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fa84:	e7f9      	b.n	800fa7a <__ssvfiscanf_r+0x2d6>
 800fa86:	bf00      	nop
 800fa88:	0800c6d5 	.word	0x0800c6d5

0800fa8c <_scanf_chars>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	4615      	mov	r5, r2
 800fa92:	688a      	ldr	r2, [r1, #8]
 800fa94:	4680      	mov	r8, r0
 800fa96:	460c      	mov	r4, r1
 800fa98:	b932      	cbnz	r2, 800faa8 <_scanf_chars+0x1c>
 800fa9a:	698a      	ldr	r2, [r1, #24]
 800fa9c:	2a00      	cmp	r2, #0
 800fa9e:	bf14      	ite	ne
 800faa0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800faa4:	2201      	moveq	r2, #1
 800faa6:	608a      	str	r2, [r1, #8]
 800faa8:	6822      	ldr	r2, [r4, #0]
 800faaa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800fb3c <_scanf_chars+0xb0>
 800faae:	06d1      	lsls	r1, r2, #27
 800fab0:	bf5f      	itttt	pl
 800fab2:	681a      	ldrpl	r2, [r3, #0]
 800fab4:	1d11      	addpl	r1, r2, #4
 800fab6:	6019      	strpl	r1, [r3, #0]
 800fab8:	6816      	ldrpl	r6, [r2, #0]
 800faba:	2700      	movs	r7, #0
 800fabc:	69a0      	ldr	r0, [r4, #24]
 800fabe:	b188      	cbz	r0, 800fae4 <_scanf_chars+0x58>
 800fac0:	2801      	cmp	r0, #1
 800fac2:	d107      	bne.n	800fad4 <_scanf_chars+0x48>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	781a      	ldrb	r2, [r3, #0]
 800fac8:	6963      	ldr	r3, [r4, #20]
 800faca:	5c9b      	ldrb	r3, [r3, r2]
 800facc:	b953      	cbnz	r3, 800fae4 <_scanf_chars+0x58>
 800face:	2f00      	cmp	r7, #0
 800fad0:	d031      	beq.n	800fb36 <_scanf_chars+0xaa>
 800fad2:	e022      	b.n	800fb1a <_scanf_chars+0x8e>
 800fad4:	2802      	cmp	r0, #2
 800fad6:	d120      	bne.n	800fb1a <_scanf_chars+0x8e>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fae0:	071b      	lsls	r3, r3, #28
 800fae2:	d41a      	bmi.n	800fb1a <_scanf_chars+0x8e>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	06da      	lsls	r2, r3, #27
 800fae8:	bf5e      	ittt	pl
 800faea:	682b      	ldrpl	r3, [r5, #0]
 800faec:	781b      	ldrbpl	r3, [r3, #0]
 800faee:	f806 3b01 	strbpl.w	r3, [r6], #1
 800faf2:	682a      	ldr	r2, [r5, #0]
 800faf4:	686b      	ldr	r3, [r5, #4]
 800faf6:	3201      	adds	r2, #1
 800faf8:	602a      	str	r2, [r5, #0]
 800fafa:	68a2      	ldr	r2, [r4, #8]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	3a01      	subs	r2, #1
 800fb00:	606b      	str	r3, [r5, #4]
 800fb02:	3701      	adds	r7, #1
 800fb04:	60a2      	str	r2, [r4, #8]
 800fb06:	b142      	cbz	r2, 800fb1a <_scanf_chars+0x8e>
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dcd7      	bgt.n	800fabc <_scanf_chars+0x30>
 800fb0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb10:	4629      	mov	r1, r5
 800fb12:	4640      	mov	r0, r8
 800fb14:	4798      	blx	r3
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d0d0      	beq.n	800fabc <_scanf_chars+0x30>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	f013 0310 	ands.w	r3, r3, #16
 800fb20:	d105      	bne.n	800fb2e <_scanf_chars+0xa2>
 800fb22:	68e2      	ldr	r2, [r4, #12]
 800fb24:	3201      	adds	r2, #1
 800fb26:	60e2      	str	r2, [r4, #12]
 800fb28:	69a2      	ldr	r2, [r4, #24]
 800fb2a:	b102      	cbz	r2, 800fb2e <_scanf_chars+0xa2>
 800fb2c:	7033      	strb	r3, [r6, #0]
 800fb2e:	6923      	ldr	r3, [r4, #16]
 800fb30:	443b      	add	r3, r7
 800fb32:	6123      	str	r3, [r4, #16]
 800fb34:	2000      	movs	r0, #0
 800fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	bf00      	nop
 800fb3c:	08011191 	.word	0x08011191

0800fb40 <_scanf_i>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	4698      	mov	r8, r3
 800fb46:	4b74      	ldr	r3, [pc, #464]	@ (800fd18 <_scanf_i+0x1d8>)
 800fb48:	460c      	mov	r4, r1
 800fb4a:	4682      	mov	sl, r0
 800fb4c:	4616      	mov	r6, r2
 800fb4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb52:	b087      	sub	sp, #28
 800fb54:	ab03      	add	r3, sp, #12
 800fb56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb5a:	4b70      	ldr	r3, [pc, #448]	@ (800fd1c <_scanf_i+0x1dc>)
 800fb5c:	69a1      	ldr	r1, [r4, #24]
 800fb5e:	4a70      	ldr	r2, [pc, #448]	@ (800fd20 <_scanf_i+0x1e0>)
 800fb60:	2903      	cmp	r1, #3
 800fb62:	bf08      	it	eq
 800fb64:	461a      	moveq	r2, r3
 800fb66:	68a3      	ldr	r3, [r4, #8]
 800fb68:	9201      	str	r2, [sp, #4]
 800fb6a:	1e5a      	subs	r2, r3, #1
 800fb6c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fb70:	bf88      	it	hi
 800fb72:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fb76:	4627      	mov	r7, r4
 800fb78:	bf82      	ittt	hi
 800fb7a:	eb03 0905 	addhi.w	r9, r3, r5
 800fb7e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fb82:	60a3      	strhi	r3, [r4, #8]
 800fb84:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fb88:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800fb8c:	bf98      	it	ls
 800fb8e:	f04f 0900 	movls.w	r9, #0
 800fb92:	6023      	str	r3, [r4, #0]
 800fb94:	463d      	mov	r5, r7
 800fb96:	f04f 0b00 	mov.w	fp, #0
 800fb9a:	6831      	ldr	r1, [r6, #0]
 800fb9c:	ab03      	add	r3, sp, #12
 800fb9e:	7809      	ldrb	r1, [r1, #0]
 800fba0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fba4:	2202      	movs	r2, #2
 800fba6:	f7f0 fb13 	bl	80001d0 <memchr>
 800fbaa:	b328      	cbz	r0, 800fbf8 <_scanf_i+0xb8>
 800fbac:	f1bb 0f01 	cmp.w	fp, #1
 800fbb0:	d159      	bne.n	800fc66 <_scanf_i+0x126>
 800fbb2:	6862      	ldr	r2, [r4, #4]
 800fbb4:	b92a      	cbnz	r2, 800fbc2 <_scanf_i+0x82>
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	2108      	movs	r1, #8
 800fbba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fbbe:	6061      	str	r1, [r4, #4]
 800fbc0:	6022      	str	r2, [r4, #0]
 800fbc2:	6822      	ldr	r2, [r4, #0]
 800fbc4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800fbc8:	6022      	str	r2, [r4, #0]
 800fbca:	68a2      	ldr	r2, [r4, #8]
 800fbcc:	1e51      	subs	r1, r2, #1
 800fbce:	60a1      	str	r1, [r4, #8]
 800fbd0:	b192      	cbz	r2, 800fbf8 <_scanf_i+0xb8>
 800fbd2:	6832      	ldr	r2, [r6, #0]
 800fbd4:	1c51      	adds	r1, r2, #1
 800fbd6:	6031      	str	r1, [r6, #0]
 800fbd8:	7812      	ldrb	r2, [r2, #0]
 800fbda:	f805 2b01 	strb.w	r2, [r5], #1
 800fbde:	6872      	ldr	r2, [r6, #4]
 800fbe0:	3a01      	subs	r2, #1
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	6072      	str	r2, [r6, #4]
 800fbe6:	dc07      	bgt.n	800fbf8 <_scanf_i+0xb8>
 800fbe8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800fbec:	4631      	mov	r1, r6
 800fbee:	4650      	mov	r0, sl
 800fbf0:	4790      	blx	r2
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	f040 8085 	bne.w	800fd02 <_scanf_i+0x1c2>
 800fbf8:	f10b 0b01 	add.w	fp, fp, #1
 800fbfc:	f1bb 0f03 	cmp.w	fp, #3
 800fc00:	d1cb      	bne.n	800fb9a <_scanf_i+0x5a>
 800fc02:	6863      	ldr	r3, [r4, #4]
 800fc04:	b90b      	cbnz	r3, 800fc0a <_scanf_i+0xca>
 800fc06:	230a      	movs	r3, #10
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	6863      	ldr	r3, [r4, #4]
 800fc0c:	4945      	ldr	r1, [pc, #276]	@ (800fd24 <_scanf_i+0x1e4>)
 800fc0e:	6960      	ldr	r0, [r4, #20]
 800fc10:	1ac9      	subs	r1, r1, r3
 800fc12:	f000 f935 	bl	800fe80 <__sccl>
 800fc16:	f04f 0b00 	mov.w	fp, #0
 800fc1a:	68a3      	ldr	r3, [r4, #8]
 800fc1c:	6822      	ldr	r2, [r4, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d03d      	beq.n	800fc9e <_scanf_i+0x15e>
 800fc22:	6831      	ldr	r1, [r6, #0]
 800fc24:	6960      	ldr	r0, [r4, #20]
 800fc26:	f891 c000 	ldrb.w	ip, [r1]
 800fc2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d035      	beq.n	800fc9e <_scanf_i+0x15e>
 800fc32:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800fc36:	d124      	bne.n	800fc82 <_scanf_i+0x142>
 800fc38:	0510      	lsls	r0, r2, #20
 800fc3a:	d522      	bpl.n	800fc82 <_scanf_i+0x142>
 800fc3c:	f10b 0b01 	add.w	fp, fp, #1
 800fc40:	f1b9 0f00 	cmp.w	r9, #0
 800fc44:	d003      	beq.n	800fc4e <_scanf_i+0x10e>
 800fc46:	3301      	adds	r3, #1
 800fc48:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800fc4c:	60a3      	str	r3, [r4, #8]
 800fc4e:	6873      	ldr	r3, [r6, #4]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	6073      	str	r3, [r6, #4]
 800fc56:	dd1b      	ble.n	800fc90 <_scanf_i+0x150>
 800fc58:	6833      	ldr	r3, [r6, #0]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	6033      	str	r3, [r6, #0]
 800fc5e:	68a3      	ldr	r3, [r4, #8]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	60a3      	str	r3, [r4, #8]
 800fc64:	e7d9      	b.n	800fc1a <_scanf_i+0xda>
 800fc66:	f1bb 0f02 	cmp.w	fp, #2
 800fc6a:	d1ae      	bne.n	800fbca <_scanf_i+0x8a>
 800fc6c:	6822      	ldr	r2, [r4, #0]
 800fc6e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800fc72:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800fc76:	d1bf      	bne.n	800fbf8 <_scanf_i+0xb8>
 800fc78:	2110      	movs	r1, #16
 800fc7a:	6061      	str	r1, [r4, #4]
 800fc7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fc80:	e7a2      	b.n	800fbc8 <_scanf_i+0x88>
 800fc82:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800fc86:	6022      	str	r2, [r4, #0]
 800fc88:	780b      	ldrb	r3, [r1, #0]
 800fc8a:	f805 3b01 	strb.w	r3, [r5], #1
 800fc8e:	e7de      	b.n	800fc4e <_scanf_i+0x10e>
 800fc90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fc94:	4631      	mov	r1, r6
 800fc96:	4650      	mov	r0, sl
 800fc98:	4798      	blx	r3
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	d0df      	beq.n	800fc5e <_scanf_i+0x11e>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	05d9      	lsls	r1, r3, #23
 800fca2:	d50d      	bpl.n	800fcc0 <_scanf_i+0x180>
 800fca4:	42bd      	cmp	r5, r7
 800fca6:	d909      	bls.n	800fcbc <_scanf_i+0x17c>
 800fca8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcb0:	4632      	mov	r2, r6
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	4798      	blx	r3
 800fcb6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800fcba:	464d      	mov	r5, r9
 800fcbc:	42bd      	cmp	r5, r7
 800fcbe:	d028      	beq.n	800fd12 <_scanf_i+0x1d2>
 800fcc0:	6822      	ldr	r2, [r4, #0]
 800fcc2:	f012 0210 	ands.w	r2, r2, #16
 800fcc6:	d113      	bne.n	800fcf0 <_scanf_i+0x1b0>
 800fcc8:	702a      	strb	r2, [r5, #0]
 800fcca:	6863      	ldr	r3, [r4, #4]
 800fccc:	9e01      	ldr	r6, [sp, #4]
 800fcce:	4639      	mov	r1, r7
 800fcd0:	4650      	mov	r0, sl
 800fcd2:	47b0      	blx	r6
 800fcd4:	f8d8 3000 	ldr.w	r3, [r8]
 800fcd8:	6821      	ldr	r1, [r4, #0]
 800fcda:	1d1a      	adds	r2, r3, #4
 800fcdc:	f8c8 2000 	str.w	r2, [r8]
 800fce0:	f011 0f20 	tst.w	r1, #32
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	d00f      	beq.n	800fd08 <_scanf_i+0x1c8>
 800fce8:	6018      	str	r0, [r3, #0]
 800fcea:	68e3      	ldr	r3, [r4, #12]
 800fcec:	3301      	adds	r3, #1
 800fcee:	60e3      	str	r3, [r4, #12]
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	1bed      	subs	r5, r5, r7
 800fcf4:	445d      	add	r5, fp
 800fcf6:	442b      	add	r3, r5
 800fcf8:	6123      	str	r3, [r4, #16]
 800fcfa:	2000      	movs	r0, #0
 800fcfc:	b007      	add	sp, #28
 800fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd02:	f04f 0b00 	mov.w	fp, #0
 800fd06:	e7ca      	b.n	800fc9e <_scanf_i+0x15e>
 800fd08:	07ca      	lsls	r2, r1, #31
 800fd0a:	bf4c      	ite	mi
 800fd0c:	8018      	strhmi	r0, [r3, #0]
 800fd0e:	6018      	strpl	r0, [r3, #0]
 800fd10:	e7eb      	b.n	800fcea <_scanf_i+0x1aa>
 800fd12:	2001      	movs	r0, #1
 800fd14:	e7f2      	b.n	800fcfc <_scanf_i+0x1bc>
 800fd16:	bf00      	nop
 800fd18:	08010ec4 	.word	0x08010ec4
 800fd1c:	0800f441 	.word	0x0800f441
 800fd20:	08010845 	.word	0x08010845
 800fd24:	080112b2 	.word	0x080112b2

0800fd28 <__sflush_r>:
 800fd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	0716      	lsls	r6, r2, #28
 800fd32:	4605      	mov	r5, r0
 800fd34:	460c      	mov	r4, r1
 800fd36:	d454      	bmi.n	800fde2 <__sflush_r+0xba>
 800fd38:	684b      	ldr	r3, [r1, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	dc02      	bgt.n	800fd44 <__sflush_r+0x1c>
 800fd3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	dd48      	ble.n	800fdd6 <__sflush_r+0xae>
 800fd44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd46:	2e00      	cmp	r6, #0
 800fd48:	d045      	beq.n	800fdd6 <__sflush_r+0xae>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fd50:	682f      	ldr	r7, [r5, #0]
 800fd52:	6a21      	ldr	r1, [r4, #32]
 800fd54:	602b      	str	r3, [r5, #0]
 800fd56:	d030      	beq.n	800fdba <__sflush_r+0x92>
 800fd58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	0759      	lsls	r1, r3, #29
 800fd5e:	d505      	bpl.n	800fd6c <__sflush_r+0x44>
 800fd60:	6863      	ldr	r3, [r4, #4]
 800fd62:	1ad2      	subs	r2, r2, r3
 800fd64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd66:	b10b      	cbz	r3, 800fd6c <__sflush_r+0x44>
 800fd68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fd6a:	1ad2      	subs	r2, r2, r3
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd70:	6a21      	ldr	r1, [r4, #32]
 800fd72:	4628      	mov	r0, r5
 800fd74:	47b0      	blx	r6
 800fd76:	1c43      	adds	r3, r0, #1
 800fd78:	89a3      	ldrh	r3, [r4, #12]
 800fd7a:	d106      	bne.n	800fd8a <__sflush_r+0x62>
 800fd7c:	6829      	ldr	r1, [r5, #0]
 800fd7e:	291d      	cmp	r1, #29
 800fd80:	d82b      	bhi.n	800fdda <__sflush_r+0xb2>
 800fd82:	4a2a      	ldr	r2, [pc, #168]	@ (800fe2c <__sflush_r+0x104>)
 800fd84:	410a      	asrs	r2, r1
 800fd86:	07d6      	lsls	r6, r2, #31
 800fd88:	d427      	bmi.n	800fdda <__sflush_r+0xb2>
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	6062      	str	r2, [r4, #4]
 800fd8e:	04d9      	lsls	r1, r3, #19
 800fd90:	6922      	ldr	r2, [r4, #16]
 800fd92:	6022      	str	r2, [r4, #0]
 800fd94:	d504      	bpl.n	800fda0 <__sflush_r+0x78>
 800fd96:	1c42      	adds	r2, r0, #1
 800fd98:	d101      	bne.n	800fd9e <__sflush_r+0x76>
 800fd9a:	682b      	ldr	r3, [r5, #0]
 800fd9c:	b903      	cbnz	r3, 800fda0 <__sflush_r+0x78>
 800fd9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fda2:	602f      	str	r7, [r5, #0]
 800fda4:	b1b9      	cbz	r1, 800fdd6 <__sflush_r+0xae>
 800fda6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdaa:	4299      	cmp	r1, r3
 800fdac:	d002      	beq.n	800fdb4 <__sflush_r+0x8c>
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f7fd ff12 	bl	800dbd8 <_free_r>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdb8:	e00d      	b.n	800fdd6 <__sflush_r+0xae>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	47b0      	blx	r6
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	1c50      	adds	r0, r2, #1
 800fdc4:	d1c9      	bne.n	800fd5a <__sflush_r+0x32>
 800fdc6:	682b      	ldr	r3, [r5, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0c6      	beq.n	800fd5a <__sflush_r+0x32>
 800fdcc:	2b1d      	cmp	r3, #29
 800fdce:	d001      	beq.n	800fdd4 <__sflush_r+0xac>
 800fdd0:	2b16      	cmp	r3, #22
 800fdd2:	d11e      	bne.n	800fe12 <__sflush_r+0xea>
 800fdd4:	602f      	str	r7, [r5, #0]
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	e022      	b.n	800fe20 <__sflush_r+0xf8>
 800fdda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdde:	b21b      	sxth	r3, r3
 800fde0:	e01b      	b.n	800fe1a <__sflush_r+0xf2>
 800fde2:	690f      	ldr	r7, [r1, #16]
 800fde4:	2f00      	cmp	r7, #0
 800fde6:	d0f6      	beq.n	800fdd6 <__sflush_r+0xae>
 800fde8:	0793      	lsls	r3, r2, #30
 800fdea:	680e      	ldr	r6, [r1, #0]
 800fdec:	bf08      	it	eq
 800fdee:	694b      	ldreq	r3, [r1, #20]
 800fdf0:	600f      	str	r7, [r1, #0]
 800fdf2:	bf18      	it	ne
 800fdf4:	2300      	movne	r3, #0
 800fdf6:	eba6 0807 	sub.w	r8, r6, r7
 800fdfa:	608b      	str	r3, [r1, #8]
 800fdfc:	f1b8 0f00 	cmp.w	r8, #0
 800fe00:	dde9      	ble.n	800fdd6 <__sflush_r+0xae>
 800fe02:	6a21      	ldr	r1, [r4, #32]
 800fe04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe06:	4643      	mov	r3, r8
 800fe08:	463a      	mov	r2, r7
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	47b0      	blx	r6
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	dc08      	bgt.n	800fe24 <__sflush_r+0xfc>
 800fe12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe1a:	81a3      	strh	r3, [r4, #12]
 800fe1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe24:	4407      	add	r7, r0
 800fe26:	eba8 0800 	sub.w	r8, r8, r0
 800fe2a:	e7e7      	b.n	800fdfc <__sflush_r+0xd4>
 800fe2c:	dfbffffe 	.word	0xdfbffffe

0800fe30 <_fflush_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	690b      	ldr	r3, [r1, #16]
 800fe34:	4605      	mov	r5, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	b913      	cbnz	r3, 800fe40 <_fflush_r+0x10>
 800fe3a:	2500      	movs	r5, #0
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	bd38      	pop	{r3, r4, r5, pc}
 800fe40:	b118      	cbz	r0, 800fe4a <_fflush_r+0x1a>
 800fe42:	6a03      	ldr	r3, [r0, #32]
 800fe44:	b90b      	cbnz	r3, 800fe4a <_fflush_r+0x1a>
 800fe46:	f7fc fee5 	bl	800cc14 <__sinit>
 800fe4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d0f3      	beq.n	800fe3a <_fflush_r+0xa>
 800fe52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fe54:	07d0      	lsls	r0, r2, #31
 800fe56:	d404      	bmi.n	800fe62 <_fflush_r+0x32>
 800fe58:	0599      	lsls	r1, r3, #22
 800fe5a:	d402      	bmi.n	800fe62 <_fflush_r+0x32>
 800fe5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe5e:	f7fd f866 	bl	800cf2e <__retarget_lock_acquire_recursive>
 800fe62:	4628      	mov	r0, r5
 800fe64:	4621      	mov	r1, r4
 800fe66:	f7ff ff5f 	bl	800fd28 <__sflush_r>
 800fe6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe6c:	07da      	lsls	r2, r3, #31
 800fe6e:	4605      	mov	r5, r0
 800fe70:	d4e4      	bmi.n	800fe3c <_fflush_r+0xc>
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	059b      	lsls	r3, r3, #22
 800fe76:	d4e1      	bmi.n	800fe3c <_fflush_r+0xc>
 800fe78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe7a:	f7fd f859 	bl	800cf30 <__retarget_lock_release_recursive>
 800fe7e:	e7dd      	b.n	800fe3c <_fflush_r+0xc>

0800fe80 <__sccl>:
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	780b      	ldrb	r3, [r1, #0]
 800fe84:	4604      	mov	r4, r0
 800fe86:	2b5e      	cmp	r3, #94	@ 0x5e
 800fe88:	bf0b      	itete	eq
 800fe8a:	784b      	ldrbeq	r3, [r1, #1]
 800fe8c:	1c4a      	addne	r2, r1, #1
 800fe8e:	1c8a      	addeq	r2, r1, #2
 800fe90:	2100      	movne	r1, #0
 800fe92:	bf08      	it	eq
 800fe94:	2101      	moveq	r1, #1
 800fe96:	3801      	subs	r0, #1
 800fe98:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800fe9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fea0:	42a8      	cmp	r0, r5
 800fea2:	d1fb      	bne.n	800fe9c <__sccl+0x1c>
 800fea4:	b90b      	cbnz	r3, 800feaa <__sccl+0x2a>
 800fea6:	1e50      	subs	r0, r2, #1
 800fea8:	bd70      	pop	{r4, r5, r6, pc}
 800feaa:	f081 0101 	eor.w	r1, r1, #1
 800feae:	54e1      	strb	r1, [r4, r3]
 800feb0:	4610      	mov	r0, r2
 800feb2:	4602      	mov	r2, r0
 800feb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800feb8:	2d2d      	cmp	r5, #45	@ 0x2d
 800feba:	d005      	beq.n	800fec8 <__sccl+0x48>
 800febc:	2d5d      	cmp	r5, #93	@ 0x5d
 800febe:	d016      	beq.n	800feee <__sccl+0x6e>
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	d0f1      	beq.n	800fea8 <__sccl+0x28>
 800fec4:	462b      	mov	r3, r5
 800fec6:	e7f2      	b.n	800feae <__sccl+0x2e>
 800fec8:	7846      	ldrb	r6, [r0, #1]
 800feca:	2e5d      	cmp	r6, #93	@ 0x5d
 800fecc:	d0fa      	beq.n	800fec4 <__sccl+0x44>
 800fece:	42b3      	cmp	r3, r6
 800fed0:	dcf8      	bgt.n	800fec4 <__sccl+0x44>
 800fed2:	3002      	adds	r0, #2
 800fed4:	461a      	mov	r2, r3
 800fed6:	3201      	adds	r2, #1
 800fed8:	4296      	cmp	r6, r2
 800feda:	54a1      	strb	r1, [r4, r2]
 800fedc:	dcfb      	bgt.n	800fed6 <__sccl+0x56>
 800fede:	1af2      	subs	r2, r6, r3
 800fee0:	3a01      	subs	r2, #1
 800fee2:	1c5d      	adds	r5, r3, #1
 800fee4:	42b3      	cmp	r3, r6
 800fee6:	bfa8      	it	ge
 800fee8:	2200      	movge	r2, #0
 800feea:	18ab      	adds	r3, r5, r2
 800feec:	e7e1      	b.n	800feb2 <__sccl+0x32>
 800feee:	4610      	mov	r0, r2
 800fef0:	e7da      	b.n	800fea8 <__sccl+0x28>

0800fef2 <__submore>:
 800fef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef6:	460c      	mov	r4, r1
 800fef8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fefa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fefe:	4299      	cmp	r1, r3
 800ff00:	d11d      	bne.n	800ff3e <__submore+0x4c>
 800ff02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ff06:	f7fd fedb 	bl	800dcc0 <_malloc_r>
 800ff0a:	b918      	cbnz	r0, 800ff14 <__submore+0x22>
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff18:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ff1a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ff1e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ff20:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ff24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ff28:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ff2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ff30:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ff34:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ff38:	6020      	str	r0, [r4, #0]
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	e7e8      	b.n	800ff10 <__submore+0x1e>
 800ff3e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ff40:	0077      	lsls	r7, r6, #1
 800ff42:	463a      	mov	r2, r7
 800ff44:	f000 fbe1 	bl	801070a <_realloc_r>
 800ff48:	4605      	mov	r5, r0
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d0de      	beq.n	800ff0c <__submore+0x1a>
 800ff4e:	eb00 0806 	add.w	r8, r0, r6
 800ff52:	4601      	mov	r1, r0
 800ff54:	4632      	mov	r2, r6
 800ff56:	4640      	mov	r0, r8
 800ff58:	f000 f842 	bl	800ffe0 <memcpy>
 800ff5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ff60:	f8c4 8000 	str.w	r8, [r4]
 800ff64:	e7e9      	b.n	800ff3a <__submore+0x48>

0800ff66 <memmove>:
 800ff66:	4288      	cmp	r0, r1
 800ff68:	b510      	push	{r4, lr}
 800ff6a:	eb01 0402 	add.w	r4, r1, r2
 800ff6e:	d902      	bls.n	800ff76 <memmove+0x10>
 800ff70:	4284      	cmp	r4, r0
 800ff72:	4623      	mov	r3, r4
 800ff74:	d807      	bhi.n	800ff86 <memmove+0x20>
 800ff76:	1e43      	subs	r3, r0, #1
 800ff78:	42a1      	cmp	r1, r4
 800ff7a:	d008      	beq.n	800ff8e <memmove+0x28>
 800ff7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff84:	e7f8      	b.n	800ff78 <memmove+0x12>
 800ff86:	4402      	add	r2, r0
 800ff88:	4601      	mov	r1, r0
 800ff8a:	428a      	cmp	r2, r1
 800ff8c:	d100      	bne.n	800ff90 <memmove+0x2a>
 800ff8e:	bd10      	pop	{r4, pc}
 800ff90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff98:	e7f7      	b.n	800ff8a <memmove+0x24>

0800ff9a <strncmp>:
 800ff9a:	b510      	push	{r4, lr}
 800ff9c:	b16a      	cbz	r2, 800ffba <strncmp+0x20>
 800ff9e:	3901      	subs	r1, #1
 800ffa0:	1884      	adds	r4, r0, r2
 800ffa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffa6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d103      	bne.n	800ffb6 <strncmp+0x1c>
 800ffae:	42a0      	cmp	r0, r4
 800ffb0:	d001      	beq.n	800ffb6 <strncmp+0x1c>
 800ffb2:	2a00      	cmp	r2, #0
 800ffb4:	d1f5      	bne.n	800ffa2 <strncmp+0x8>
 800ffb6:	1ad0      	subs	r0, r2, r3
 800ffb8:	bd10      	pop	{r4, pc}
 800ffba:	4610      	mov	r0, r2
 800ffbc:	e7fc      	b.n	800ffb8 <strncmp+0x1e>
	...

0800ffc0 <_sbrk_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d06      	ldr	r5, [pc, #24]	@ (800ffdc <_sbrk_r+0x1c>)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4608      	mov	r0, r1
 800ffca:	602b      	str	r3, [r5, #0]
 800ffcc:	f7f1 fc0e 	bl	80017ec <_sbrk>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d102      	bne.n	800ffda <_sbrk_r+0x1a>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	b103      	cbz	r3, 800ffda <_sbrk_r+0x1a>
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	20002234 	.word	0x20002234

0800ffe0 <memcpy>:
 800ffe0:	440a      	add	r2, r1
 800ffe2:	4291      	cmp	r1, r2
 800ffe4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ffe8:	d100      	bne.n	800ffec <memcpy+0xc>
 800ffea:	4770      	bx	lr
 800ffec:	b510      	push	{r4, lr}
 800ffee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fff6:	4291      	cmp	r1, r2
 800fff8:	d1f9      	bne.n	800ffee <memcpy+0xe>
 800fffa:	bd10      	pop	{r4, pc}
 800fffc:	0000      	movs	r0, r0
	...

08010000 <nan>:
 8010000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010008 <nan+0x8>
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	00000000 	.word	0x00000000
 801000c:	7ff80000 	.word	0x7ff80000

08010010 <__assert_func>:
 8010010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010012:	4614      	mov	r4, r2
 8010014:	461a      	mov	r2, r3
 8010016:	4b09      	ldr	r3, [pc, #36]	@ (801003c <__assert_func+0x2c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4605      	mov	r5, r0
 801001c:	68d8      	ldr	r0, [r3, #12]
 801001e:	b954      	cbnz	r4, 8010036 <__assert_func+0x26>
 8010020:	4b07      	ldr	r3, [pc, #28]	@ (8010040 <__assert_func+0x30>)
 8010022:	461c      	mov	r4, r3
 8010024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010028:	9100      	str	r1, [sp, #0]
 801002a:	462b      	mov	r3, r5
 801002c:	4905      	ldr	r1, [pc, #20]	@ (8010044 <__assert_func+0x34>)
 801002e:	f000 fc19 	bl	8010864 <fiprintf>
 8010032:	f000 fc29 	bl	8010888 <abort>
 8010036:	4b04      	ldr	r3, [pc, #16]	@ (8010048 <__assert_func+0x38>)
 8010038:	e7f4      	b.n	8010024 <__assert_func+0x14>
 801003a:	bf00      	nop
 801003c:	20000138 	.word	0x20000138
 8010040:	08011300 	.word	0x08011300
 8010044:	080112d2 	.word	0x080112d2
 8010048:	080112c5 	.word	0x080112c5

0801004c <_calloc_r>:
 801004c:	b570      	push	{r4, r5, r6, lr}
 801004e:	fba1 5402 	umull	r5, r4, r1, r2
 8010052:	b93c      	cbnz	r4, 8010064 <_calloc_r+0x18>
 8010054:	4629      	mov	r1, r5
 8010056:	f7fd fe33 	bl	800dcc0 <_malloc_r>
 801005a:	4606      	mov	r6, r0
 801005c:	b928      	cbnz	r0, 801006a <_calloc_r+0x1e>
 801005e:	2600      	movs	r6, #0
 8010060:	4630      	mov	r0, r6
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	220c      	movs	r2, #12
 8010066:	6002      	str	r2, [r0, #0]
 8010068:	e7f9      	b.n	801005e <_calloc_r+0x12>
 801006a:	462a      	mov	r2, r5
 801006c:	4621      	mov	r1, r4
 801006e:	f7fc feca 	bl	800ce06 <memset>
 8010072:	e7f5      	b.n	8010060 <_calloc_r+0x14>

08010074 <rshift>:
 8010074:	6903      	ldr	r3, [r0, #16]
 8010076:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801007a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801007e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010082:	f100 0414 	add.w	r4, r0, #20
 8010086:	dd45      	ble.n	8010114 <rshift+0xa0>
 8010088:	f011 011f 	ands.w	r1, r1, #31
 801008c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010090:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010094:	d10c      	bne.n	80100b0 <rshift+0x3c>
 8010096:	f100 0710 	add.w	r7, r0, #16
 801009a:	4629      	mov	r1, r5
 801009c:	42b1      	cmp	r1, r6
 801009e:	d334      	bcc.n	801010a <rshift+0x96>
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	1eea      	subs	r2, r5, #3
 80100a6:	4296      	cmp	r6, r2
 80100a8:	bf38      	it	cc
 80100aa:	2300      	movcc	r3, #0
 80100ac:	4423      	add	r3, r4
 80100ae:	e015      	b.n	80100dc <rshift+0x68>
 80100b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80100b4:	f1c1 0820 	rsb	r8, r1, #32
 80100b8:	40cf      	lsrs	r7, r1
 80100ba:	f105 0e04 	add.w	lr, r5, #4
 80100be:	46a1      	mov	r9, r4
 80100c0:	4576      	cmp	r6, lr
 80100c2:	46f4      	mov	ip, lr
 80100c4:	d815      	bhi.n	80100f2 <rshift+0x7e>
 80100c6:	1a9a      	subs	r2, r3, r2
 80100c8:	0092      	lsls	r2, r2, #2
 80100ca:	3a04      	subs	r2, #4
 80100cc:	3501      	adds	r5, #1
 80100ce:	42ae      	cmp	r6, r5
 80100d0:	bf38      	it	cc
 80100d2:	2200      	movcc	r2, #0
 80100d4:	18a3      	adds	r3, r4, r2
 80100d6:	50a7      	str	r7, [r4, r2]
 80100d8:	b107      	cbz	r7, 80100dc <rshift+0x68>
 80100da:	3304      	adds	r3, #4
 80100dc:	1b1a      	subs	r2, r3, r4
 80100de:	42a3      	cmp	r3, r4
 80100e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80100e4:	bf08      	it	eq
 80100e6:	2300      	moveq	r3, #0
 80100e8:	6102      	str	r2, [r0, #16]
 80100ea:	bf08      	it	eq
 80100ec:	6143      	streq	r3, [r0, #20]
 80100ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100f2:	f8dc c000 	ldr.w	ip, [ip]
 80100f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80100fa:	ea4c 0707 	orr.w	r7, ip, r7
 80100fe:	f849 7b04 	str.w	r7, [r9], #4
 8010102:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010106:	40cf      	lsrs	r7, r1
 8010108:	e7da      	b.n	80100c0 <rshift+0x4c>
 801010a:	f851 cb04 	ldr.w	ip, [r1], #4
 801010e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010112:	e7c3      	b.n	801009c <rshift+0x28>
 8010114:	4623      	mov	r3, r4
 8010116:	e7e1      	b.n	80100dc <rshift+0x68>

08010118 <__hexdig_fun>:
 8010118:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801011c:	2b09      	cmp	r3, #9
 801011e:	d802      	bhi.n	8010126 <__hexdig_fun+0xe>
 8010120:	3820      	subs	r0, #32
 8010122:	b2c0      	uxtb	r0, r0
 8010124:	4770      	bx	lr
 8010126:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801012a:	2b05      	cmp	r3, #5
 801012c:	d801      	bhi.n	8010132 <__hexdig_fun+0x1a>
 801012e:	3847      	subs	r0, #71	@ 0x47
 8010130:	e7f7      	b.n	8010122 <__hexdig_fun+0xa>
 8010132:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010136:	2b05      	cmp	r3, #5
 8010138:	d801      	bhi.n	801013e <__hexdig_fun+0x26>
 801013a:	3827      	subs	r0, #39	@ 0x27
 801013c:	e7f1      	b.n	8010122 <__hexdig_fun+0xa>
 801013e:	2000      	movs	r0, #0
 8010140:	4770      	bx	lr
	...

08010144 <__gethex>:
 8010144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	b085      	sub	sp, #20
 801014a:	468a      	mov	sl, r1
 801014c:	9302      	str	r3, [sp, #8]
 801014e:	680b      	ldr	r3, [r1, #0]
 8010150:	9001      	str	r0, [sp, #4]
 8010152:	4690      	mov	r8, r2
 8010154:	1c9c      	adds	r4, r3, #2
 8010156:	46a1      	mov	r9, r4
 8010158:	f814 0b01 	ldrb.w	r0, [r4], #1
 801015c:	2830      	cmp	r0, #48	@ 0x30
 801015e:	d0fa      	beq.n	8010156 <__gethex+0x12>
 8010160:	eba9 0303 	sub.w	r3, r9, r3
 8010164:	f1a3 0b02 	sub.w	fp, r3, #2
 8010168:	f7ff ffd6 	bl	8010118 <__hexdig_fun>
 801016c:	4605      	mov	r5, r0
 801016e:	2800      	cmp	r0, #0
 8010170:	d168      	bne.n	8010244 <__gethex+0x100>
 8010172:	49a0      	ldr	r1, [pc, #640]	@ (80103f4 <__gethex+0x2b0>)
 8010174:	2201      	movs	r2, #1
 8010176:	4648      	mov	r0, r9
 8010178:	f7ff ff0f 	bl	800ff9a <strncmp>
 801017c:	4607      	mov	r7, r0
 801017e:	2800      	cmp	r0, #0
 8010180:	d167      	bne.n	8010252 <__gethex+0x10e>
 8010182:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010186:	4626      	mov	r6, r4
 8010188:	f7ff ffc6 	bl	8010118 <__hexdig_fun>
 801018c:	2800      	cmp	r0, #0
 801018e:	d062      	beq.n	8010256 <__gethex+0x112>
 8010190:	4623      	mov	r3, r4
 8010192:	7818      	ldrb	r0, [r3, #0]
 8010194:	2830      	cmp	r0, #48	@ 0x30
 8010196:	4699      	mov	r9, r3
 8010198:	f103 0301 	add.w	r3, r3, #1
 801019c:	d0f9      	beq.n	8010192 <__gethex+0x4e>
 801019e:	f7ff ffbb 	bl	8010118 <__hexdig_fun>
 80101a2:	fab0 f580 	clz	r5, r0
 80101a6:	096d      	lsrs	r5, r5, #5
 80101a8:	f04f 0b01 	mov.w	fp, #1
 80101ac:	464a      	mov	r2, r9
 80101ae:	4616      	mov	r6, r2
 80101b0:	3201      	adds	r2, #1
 80101b2:	7830      	ldrb	r0, [r6, #0]
 80101b4:	f7ff ffb0 	bl	8010118 <__hexdig_fun>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d1f8      	bne.n	80101ae <__gethex+0x6a>
 80101bc:	498d      	ldr	r1, [pc, #564]	@ (80103f4 <__gethex+0x2b0>)
 80101be:	2201      	movs	r2, #1
 80101c0:	4630      	mov	r0, r6
 80101c2:	f7ff feea 	bl	800ff9a <strncmp>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d13f      	bne.n	801024a <__gethex+0x106>
 80101ca:	b944      	cbnz	r4, 80101de <__gethex+0x9a>
 80101cc:	1c74      	adds	r4, r6, #1
 80101ce:	4622      	mov	r2, r4
 80101d0:	4616      	mov	r6, r2
 80101d2:	3201      	adds	r2, #1
 80101d4:	7830      	ldrb	r0, [r6, #0]
 80101d6:	f7ff ff9f 	bl	8010118 <__hexdig_fun>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d1f8      	bne.n	80101d0 <__gethex+0x8c>
 80101de:	1ba4      	subs	r4, r4, r6
 80101e0:	00a7      	lsls	r7, r4, #2
 80101e2:	7833      	ldrb	r3, [r6, #0]
 80101e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80101e8:	2b50      	cmp	r3, #80	@ 0x50
 80101ea:	d13e      	bne.n	801026a <__gethex+0x126>
 80101ec:	7873      	ldrb	r3, [r6, #1]
 80101ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80101f0:	d033      	beq.n	801025a <__gethex+0x116>
 80101f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80101f4:	d034      	beq.n	8010260 <__gethex+0x11c>
 80101f6:	1c71      	adds	r1, r6, #1
 80101f8:	2400      	movs	r4, #0
 80101fa:	7808      	ldrb	r0, [r1, #0]
 80101fc:	f7ff ff8c 	bl	8010118 <__hexdig_fun>
 8010200:	1e43      	subs	r3, r0, #1
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b18      	cmp	r3, #24
 8010206:	d830      	bhi.n	801026a <__gethex+0x126>
 8010208:	f1a0 0210 	sub.w	r2, r0, #16
 801020c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010210:	f7ff ff82 	bl	8010118 <__hexdig_fun>
 8010214:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010218:	fa5f fc8c 	uxtb.w	ip, ip
 801021c:	f1bc 0f18 	cmp.w	ip, #24
 8010220:	f04f 030a 	mov.w	r3, #10
 8010224:	d91e      	bls.n	8010264 <__gethex+0x120>
 8010226:	b104      	cbz	r4, 801022a <__gethex+0xe6>
 8010228:	4252      	negs	r2, r2
 801022a:	4417      	add	r7, r2
 801022c:	f8ca 1000 	str.w	r1, [sl]
 8010230:	b1ed      	cbz	r5, 801026e <__gethex+0x12a>
 8010232:	f1bb 0f00 	cmp.w	fp, #0
 8010236:	bf0c      	ite	eq
 8010238:	2506      	moveq	r5, #6
 801023a:	2500      	movne	r5, #0
 801023c:	4628      	mov	r0, r5
 801023e:	b005      	add	sp, #20
 8010240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010244:	2500      	movs	r5, #0
 8010246:	462c      	mov	r4, r5
 8010248:	e7b0      	b.n	80101ac <__gethex+0x68>
 801024a:	2c00      	cmp	r4, #0
 801024c:	d1c7      	bne.n	80101de <__gethex+0x9a>
 801024e:	4627      	mov	r7, r4
 8010250:	e7c7      	b.n	80101e2 <__gethex+0x9e>
 8010252:	464e      	mov	r6, r9
 8010254:	462f      	mov	r7, r5
 8010256:	2501      	movs	r5, #1
 8010258:	e7c3      	b.n	80101e2 <__gethex+0x9e>
 801025a:	2400      	movs	r4, #0
 801025c:	1cb1      	adds	r1, r6, #2
 801025e:	e7cc      	b.n	80101fa <__gethex+0xb6>
 8010260:	2401      	movs	r4, #1
 8010262:	e7fb      	b.n	801025c <__gethex+0x118>
 8010264:	fb03 0002 	mla	r0, r3, r2, r0
 8010268:	e7ce      	b.n	8010208 <__gethex+0xc4>
 801026a:	4631      	mov	r1, r6
 801026c:	e7de      	b.n	801022c <__gethex+0xe8>
 801026e:	eba6 0309 	sub.w	r3, r6, r9
 8010272:	3b01      	subs	r3, #1
 8010274:	4629      	mov	r1, r5
 8010276:	2b07      	cmp	r3, #7
 8010278:	dc0a      	bgt.n	8010290 <__gethex+0x14c>
 801027a:	9801      	ldr	r0, [sp, #4]
 801027c:	f7fd fdac 	bl	800ddd8 <_Balloc>
 8010280:	4604      	mov	r4, r0
 8010282:	b940      	cbnz	r0, 8010296 <__gethex+0x152>
 8010284:	4b5c      	ldr	r3, [pc, #368]	@ (80103f8 <__gethex+0x2b4>)
 8010286:	4602      	mov	r2, r0
 8010288:	21e4      	movs	r1, #228	@ 0xe4
 801028a:	485c      	ldr	r0, [pc, #368]	@ (80103fc <__gethex+0x2b8>)
 801028c:	f7ff fec0 	bl	8010010 <__assert_func>
 8010290:	3101      	adds	r1, #1
 8010292:	105b      	asrs	r3, r3, #1
 8010294:	e7ef      	b.n	8010276 <__gethex+0x132>
 8010296:	f100 0a14 	add.w	sl, r0, #20
 801029a:	2300      	movs	r3, #0
 801029c:	4655      	mov	r5, sl
 801029e:	469b      	mov	fp, r3
 80102a0:	45b1      	cmp	r9, r6
 80102a2:	d337      	bcc.n	8010314 <__gethex+0x1d0>
 80102a4:	f845 bb04 	str.w	fp, [r5], #4
 80102a8:	eba5 050a 	sub.w	r5, r5, sl
 80102ac:	10ad      	asrs	r5, r5, #2
 80102ae:	6125      	str	r5, [r4, #16]
 80102b0:	4658      	mov	r0, fp
 80102b2:	f7fd fe83 	bl	800dfbc <__hi0bits>
 80102b6:	016d      	lsls	r5, r5, #5
 80102b8:	f8d8 6000 	ldr.w	r6, [r8]
 80102bc:	1a2d      	subs	r5, r5, r0
 80102be:	42b5      	cmp	r5, r6
 80102c0:	dd54      	ble.n	801036c <__gethex+0x228>
 80102c2:	1bad      	subs	r5, r5, r6
 80102c4:	4629      	mov	r1, r5
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7fe fa17 	bl	800e6fa <__any_on>
 80102cc:	4681      	mov	r9, r0
 80102ce:	b178      	cbz	r0, 80102f0 <__gethex+0x1ac>
 80102d0:	1e6b      	subs	r3, r5, #1
 80102d2:	1159      	asrs	r1, r3, #5
 80102d4:	f003 021f 	and.w	r2, r3, #31
 80102d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80102dc:	f04f 0901 	mov.w	r9, #1
 80102e0:	fa09 f202 	lsl.w	r2, r9, r2
 80102e4:	420a      	tst	r2, r1
 80102e6:	d003      	beq.n	80102f0 <__gethex+0x1ac>
 80102e8:	454b      	cmp	r3, r9
 80102ea:	dc36      	bgt.n	801035a <__gethex+0x216>
 80102ec:	f04f 0902 	mov.w	r9, #2
 80102f0:	4629      	mov	r1, r5
 80102f2:	4620      	mov	r0, r4
 80102f4:	f7ff febe 	bl	8010074 <rshift>
 80102f8:	442f      	add	r7, r5
 80102fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102fe:	42bb      	cmp	r3, r7
 8010300:	da42      	bge.n	8010388 <__gethex+0x244>
 8010302:	9801      	ldr	r0, [sp, #4]
 8010304:	4621      	mov	r1, r4
 8010306:	f7fd fda7 	bl	800de58 <_Bfree>
 801030a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801030c:	2300      	movs	r3, #0
 801030e:	6013      	str	r3, [r2, #0]
 8010310:	25a3      	movs	r5, #163	@ 0xa3
 8010312:	e793      	b.n	801023c <__gethex+0xf8>
 8010314:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010318:	2a2e      	cmp	r2, #46	@ 0x2e
 801031a:	d012      	beq.n	8010342 <__gethex+0x1fe>
 801031c:	2b20      	cmp	r3, #32
 801031e:	d104      	bne.n	801032a <__gethex+0x1e6>
 8010320:	f845 bb04 	str.w	fp, [r5], #4
 8010324:	f04f 0b00 	mov.w	fp, #0
 8010328:	465b      	mov	r3, fp
 801032a:	7830      	ldrb	r0, [r6, #0]
 801032c:	9303      	str	r3, [sp, #12]
 801032e:	f7ff fef3 	bl	8010118 <__hexdig_fun>
 8010332:	9b03      	ldr	r3, [sp, #12]
 8010334:	f000 000f 	and.w	r0, r0, #15
 8010338:	4098      	lsls	r0, r3
 801033a:	ea4b 0b00 	orr.w	fp, fp, r0
 801033e:	3304      	adds	r3, #4
 8010340:	e7ae      	b.n	80102a0 <__gethex+0x15c>
 8010342:	45b1      	cmp	r9, r6
 8010344:	d8ea      	bhi.n	801031c <__gethex+0x1d8>
 8010346:	492b      	ldr	r1, [pc, #172]	@ (80103f4 <__gethex+0x2b0>)
 8010348:	9303      	str	r3, [sp, #12]
 801034a:	2201      	movs	r2, #1
 801034c:	4630      	mov	r0, r6
 801034e:	f7ff fe24 	bl	800ff9a <strncmp>
 8010352:	9b03      	ldr	r3, [sp, #12]
 8010354:	2800      	cmp	r0, #0
 8010356:	d1e1      	bne.n	801031c <__gethex+0x1d8>
 8010358:	e7a2      	b.n	80102a0 <__gethex+0x15c>
 801035a:	1ea9      	subs	r1, r5, #2
 801035c:	4620      	mov	r0, r4
 801035e:	f7fe f9cc 	bl	800e6fa <__any_on>
 8010362:	2800      	cmp	r0, #0
 8010364:	d0c2      	beq.n	80102ec <__gethex+0x1a8>
 8010366:	f04f 0903 	mov.w	r9, #3
 801036a:	e7c1      	b.n	80102f0 <__gethex+0x1ac>
 801036c:	da09      	bge.n	8010382 <__gethex+0x23e>
 801036e:	1b75      	subs	r5, r6, r5
 8010370:	4621      	mov	r1, r4
 8010372:	9801      	ldr	r0, [sp, #4]
 8010374:	462a      	mov	r2, r5
 8010376:	f7fd ff87 	bl	800e288 <__lshift>
 801037a:	1b7f      	subs	r7, r7, r5
 801037c:	4604      	mov	r4, r0
 801037e:	f100 0a14 	add.w	sl, r0, #20
 8010382:	f04f 0900 	mov.w	r9, #0
 8010386:	e7b8      	b.n	80102fa <__gethex+0x1b6>
 8010388:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801038c:	42bd      	cmp	r5, r7
 801038e:	dd6f      	ble.n	8010470 <__gethex+0x32c>
 8010390:	1bed      	subs	r5, r5, r7
 8010392:	42ae      	cmp	r6, r5
 8010394:	dc34      	bgt.n	8010400 <__gethex+0x2bc>
 8010396:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801039a:	2b02      	cmp	r3, #2
 801039c:	d022      	beq.n	80103e4 <__gethex+0x2a0>
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d024      	beq.n	80103ec <__gethex+0x2a8>
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d115      	bne.n	80103d2 <__gethex+0x28e>
 80103a6:	42ae      	cmp	r6, r5
 80103a8:	d113      	bne.n	80103d2 <__gethex+0x28e>
 80103aa:	2e01      	cmp	r6, #1
 80103ac:	d10b      	bne.n	80103c6 <__gethex+0x282>
 80103ae:	9a02      	ldr	r2, [sp, #8]
 80103b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	2301      	movs	r3, #1
 80103b8:	6123      	str	r3, [r4, #16]
 80103ba:	f8ca 3000 	str.w	r3, [sl]
 80103be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103c0:	2562      	movs	r5, #98	@ 0x62
 80103c2:	601c      	str	r4, [r3, #0]
 80103c4:	e73a      	b.n	801023c <__gethex+0xf8>
 80103c6:	1e71      	subs	r1, r6, #1
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7fe f996 	bl	800e6fa <__any_on>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d1ed      	bne.n	80103ae <__gethex+0x26a>
 80103d2:	9801      	ldr	r0, [sp, #4]
 80103d4:	4621      	mov	r1, r4
 80103d6:	f7fd fd3f 	bl	800de58 <_Bfree>
 80103da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103dc:	2300      	movs	r3, #0
 80103de:	6013      	str	r3, [r2, #0]
 80103e0:	2550      	movs	r5, #80	@ 0x50
 80103e2:	e72b      	b.n	801023c <__gethex+0xf8>
 80103e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1f3      	bne.n	80103d2 <__gethex+0x28e>
 80103ea:	e7e0      	b.n	80103ae <__gethex+0x26a>
 80103ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1dd      	bne.n	80103ae <__gethex+0x26a>
 80103f2:	e7ee      	b.n	80103d2 <__gethex+0x28e>
 80103f4:	08011138 	.word	0x08011138
 80103f8:	08010fcb 	.word	0x08010fcb
 80103fc:	08011301 	.word	0x08011301
 8010400:	1e6f      	subs	r7, r5, #1
 8010402:	f1b9 0f00 	cmp.w	r9, #0
 8010406:	d130      	bne.n	801046a <__gethex+0x326>
 8010408:	b127      	cbz	r7, 8010414 <__gethex+0x2d0>
 801040a:	4639      	mov	r1, r7
 801040c:	4620      	mov	r0, r4
 801040e:	f7fe f974 	bl	800e6fa <__any_on>
 8010412:	4681      	mov	r9, r0
 8010414:	117a      	asrs	r2, r7, #5
 8010416:	2301      	movs	r3, #1
 8010418:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801041c:	f007 071f 	and.w	r7, r7, #31
 8010420:	40bb      	lsls	r3, r7
 8010422:	4213      	tst	r3, r2
 8010424:	4629      	mov	r1, r5
 8010426:	4620      	mov	r0, r4
 8010428:	bf18      	it	ne
 801042a:	f049 0902 	orrne.w	r9, r9, #2
 801042e:	f7ff fe21 	bl	8010074 <rshift>
 8010432:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010436:	1b76      	subs	r6, r6, r5
 8010438:	2502      	movs	r5, #2
 801043a:	f1b9 0f00 	cmp.w	r9, #0
 801043e:	d047      	beq.n	80104d0 <__gethex+0x38c>
 8010440:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010444:	2b02      	cmp	r3, #2
 8010446:	d015      	beq.n	8010474 <__gethex+0x330>
 8010448:	2b03      	cmp	r3, #3
 801044a:	d017      	beq.n	801047c <__gethex+0x338>
 801044c:	2b01      	cmp	r3, #1
 801044e:	d109      	bne.n	8010464 <__gethex+0x320>
 8010450:	f019 0f02 	tst.w	r9, #2
 8010454:	d006      	beq.n	8010464 <__gethex+0x320>
 8010456:	f8da 3000 	ldr.w	r3, [sl]
 801045a:	ea49 0903 	orr.w	r9, r9, r3
 801045e:	f019 0f01 	tst.w	r9, #1
 8010462:	d10e      	bne.n	8010482 <__gethex+0x33e>
 8010464:	f045 0510 	orr.w	r5, r5, #16
 8010468:	e032      	b.n	80104d0 <__gethex+0x38c>
 801046a:	f04f 0901 	mov.w	r9, #1
 801046e:	e7d1      	b.n	8010414 <__gethex+0x2d0>
 8010470:	2501      	movs	r5, #1
 8010472:	e7e2      	b.n	801043a <__gethex+0x2f6>
 8010474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010476:	f1c3 0301 	rsb	r3, r3, #1
 801047a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801047c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d0f0      	beq.n	8010464 <__gethex+0x320>
 8010482:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010486:	f104 0314 	add.w	r3, r4, #20
 801048a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801048e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010492:	f04f 0c00 	mov.w	ip, #0
 8010496:	4618      	mov	r0, r3
 8010498:	f853 2b04 	ldr.w	r2, [r3], #4
 801049c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80104a0:	d01b      	beq.n	80104da <__gethex+0x396>
 80104a2:	3201      	adds	r2, #1
 80104a4:	6002      	str	r2, [r0, #0]
 80104a6:	2d02      	cmp	r5, #2
 80104a8:	f104 0314 	add.w	r3, r4, #20
 80104ac:	d13c      	bne.n	8010528 <__gethex+0x3e4>
 80104ae:	f8d8 2000 	ldr.w	r2, [r8]
 80104b2:	3a01      	subs	r2, #1
 80104b4:	42b2      	cmp	r2, r6
 80104b6:	d109      	bne.n	80104cc <__gethex+0x388>
 80104b8:	1171      	asrs	r1, r6, #5
 80104ba:	2201      	movs	r2, #1
 80104bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80104c0:	f006 061f 	and.w	r6, r6, #31
 80104c4:	fa02 f606 	lsl.w	r6, r2, r6
 80104c8:	421e      	tst	r6, r3
 80104ca:	d13a      	bne.n	8010542 <__gethex+0x3fe>
 80104cc:	f045 0520 	orr.w	r5, r5, #32
 80104d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104d2:	601c      	str	r4, [r3, #0]
 80104d4:	9b02      	ldr	r3, [sp, #8]
 80104d6:	601f      	str	r7, [r3, #0]
 80104d8:	e6b0      	b.n	801023c <__gethex+0xf8>
 80104da:	4299      	cmp	r1, r3
 80104dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80104e0:	d8d9      	bhi.n	8010496 <__gethex+0x352>
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	459b      	cmp	fp, r3
 80104e6:	db17      	blt.n	8010518 <__gethex+0x3d4>
 80104e8:	6861      	ldr	r1, [r4, #4]
 80104ea:	9801      	ldr	r0, [sp, #4]
 80104ec:	3101      	adds	r1, #1
 80104ee:	f7fd fc73 	bl	800ddd8 <_Balloc>
 80104f2:	4681      	mov	r9, r0
 80104f4:	b918      	cbnz	r0, 80104fe <__gethex+0x3ba>
 80104f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010560 <__gethex+0x41c>)
 80104f8:	4602      	mov	r2, r0
 80104fa:	2184      	movs	r1, #132	@ 0x84
 80104fc:	e6c5      	b.n	801028a <__gethex+0x146>
 80104fe:	6922      	ldr	r2, [r4, #16]
 8010500:	3202      	adds	r2, #2
 8010502:	f104 010c 	add.w	r1, r4, #12
 8010506:	0092      	lsls	r2, r2, #2
 8010508:	300c      	adds	r0, #12
 801050a:	f7ff fd69 	bl	800ffe0 <memcpy>
 801050e:	4621      	mov	r1, r4
 8010510:	9801      	ldr	r0, [sp, #4]
 8010512:	f7fd fca1 	bl	800de58 <_Bfree>
 8010516:	464c      	mov	r4, r9
 8010518:	6923      	ldr	r3, [r4, #16]
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010520:	6122      	str	r2, [r4, #16]
 8010522:	2201      	movs	r2, #1
 8010524:	615a      	str	r2, [r3, #20]
 8010526:	e7be      	b.n	80104a6 <__gethex+0x362>
 8010528:	6922      	ldr	r2, [r4, #16]
 801052a:	455a      	cmp	r2, fp
 801052c:	dd0b      	ble.n	8010546 <__gethex+0x402>
 801052e:	2101      	movs	r1, #1
 8010530:	4620      	mov	r0, r4
 8010532:	f7ff fd9f 	bl	8010074 <rshift>
 8010536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801053a:	3701      	adds	r7, #1
 801053c:	42bb      	cmp	r3, r7
 801053e:	f6ff aee0 	blt.w	8010302 <__gethex+0x1be>
 8010542:	2501      	movs	r5, #1
 8010544:	e7c2      	b.n	80104cc <__gethex+0x388>
 8010546:	f016 061f 	ands.w	r6, r6, #31
 801054a:	d0fa      	beq.n	8010542 <__gethex+0x3fe>
 801054c:	4453      	add	r3, sl
 801054e:	f1c6 0620 	rsb	r6, r6, #32
 8010552:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010556:	f7fd fd31 	bl	800dfbc <__hi0bits>
 801055a:	42b0      	cmp	r0, r6
 801055c:	dbe7      	blt.n	801052e <__gethex+0x3ea>
 801055e:	e7f0      	b.n	8010542 <__gethex+0x3fe>
 8010560:	08010fcb 	.word	0x08010fcb

08010564 <L_shift>:
 8010564:	f1c2 0208 	rsb	r2, r2, #8
 8010568:	0092      	lsls	r2, r2, #2
 801056a:	b570      	push	{r4, r5, r6, lr}
 801056c:	f1c2 0620 	rsb	r6, r2, #32
 8010570:	6843      	ldr	r3, [r0, #4]
 8010572:	6804      	ldr	r4, [r0, #0]
 8010574:	fa03 f506 	lsl.w	r5, r3, r6
 8010578:	432c      	orrs	r4, r5
 801057a:	40d3      	lsrs	r3, r2
 801057c:	6004      	str	r4, [r0, #0]
 801057e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010582:	4288      	cmp	r0, r1
 8010584:	d3f4      	bcc.n	8010570 <L_shift+0xc>
 8010586:	bd70      	pop	{r4, r5, r6, pc}

08010588 <__match>:
 8010588:	b530      	push	{r4, r5, lr}
 801058a:	6803      	ldr	r3, [r0, #0]
 801058c:	3301      	adds	r3, #1
 801058e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010592:	b914      	cbnz	r4, 801059a <__match+0x12>
 8010594:	6003      	str	r3, [r0, #0]
 8010596:	2001      	movs	r0, #1
 8010598:	bd30      	pop	{r4, r5, pc}
 801059a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801059e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80105a2:	2d19      	cmp	r5, #25
 80105a4:	bf98      	it	ls
 80105a6:	3220      	addls	r2, #32
 80105a8:	42a2      	cmp	r2, r4
 80105aa:	d0f0      	beq.n	801058e <__match+0x6>
 80105ac:	2000      	movs	r0, #0
 80105ae:	e7f3      	b.n	8010598 <__match+0x10>

080105b0 <__hexnan>:
 80105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	680b      	ldr	r3, [r1, #0]
 80105b6:	6801      	ldr	r1, [r0, #0]
 80105b8:	115e      	asrs	r6, r3, #5
 80105ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80105be:	f013 031f 	ands.w	r3, r3, #31
 80105c2:	b087      	sub	sp, #28
 80105c4:	bf18      	it	ne
 80105c6:	3604      	addne	r6, #4
 80105c8:	2500      	movs	r5, #0
 80105ca:	1f37      	subs	r7, r6, #4
 80105cc:	4682      	mov	sl, r0
 80105ce:	4690      	mov	r8, r2
 80105d0:	9301      	str	r3, [sp, #4]
 80105d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80105d6:	46b9      	mov	r9, r7
 80105d8:	463c      	mov	r4, r7
 80105da:	9502      	str	r5, [sp, #8]
 80105dc:	46ab      	mov	fp, r5
 80105de:	784a      	ldrb	r2, [r1, #1]
 80105e0:	1c4b      	adds	r3, r1, #1
 80105e2:	9303      	str	r3, [sp, #12]
 80105e4:	b342      	cbz	r2, 8010638 <__hexnan+0x88>
 80105e6:	4610      	mov	r0, r2
 80105e8:	9105      	str	r1, [sp, #20]
 80105ea:	9204      	str	r2, [sp, #16]
 80105ec:	f7ff fd94 	bl	8010118 <__hexdig_fun>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d151      	bne.n	8010698 <__hexnan+0xe8>
 80105f4:	9a04      	ldr	r2, [sp, #16]
 80105f6:	9905      	ldr	r1, [sp, #20]
 80105f8:	2a20      	cmp	r2, #32
 80105fa:	d818      	bhi.n	801062e <__hexnan+0x7e>
 80105fc:	9b02      	ldr	r3, [sp, #8]
 80105fe:	459b      	cmp	fp, r3
 8010600:	dd13      	ble.n	801062a <__hexnan+0x7a>
 8010602:	454c      	cmp	r4, r9
 8010604:	d206      	bcs.n	8010614 <__hexnan+0x64>
 8010606:	2d07      	cmp	r5, #7
 8010608:	dc04      	bgt.n	8010614 <__hexnan+0x64>
 801060a:	462a      	mov	r2, r5
 801060c:	4649      	mov	r1, r9
 801060e:	4620      	mov	r0, r4
 8010610:	f7ff ffa8 	bl	8010564 <L_shift>
 8010614:	4544      	cmp	r4, r8
 8010616:	d952      	bls.n	80106be <__hexnan+0x10e>
 8010618:	2300      	movs	r3, #0
 801061a:	f1a4 0904 	sub.w	r9, r4, #4
 801061e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010622:	f8cd b008 	str.w	fp, [sp, #8]
 8010626:	464c      	mov	r4, r9
 8010628:	461d      	mov	r5, r3
 801062a:	9903      	ldr	r1, [sp, #12]
 801062c:	e7d7      	b.n	80105de <__hexnan+0x2e>
 801062e:	2a29      	cmp	r2, #41	@ 0x29
 8010630:	d157      	bne.n	80106e2 <__hexnan+0x132>
 8010632:	3102      	adds	r1, #2
 8010634:	f8ca 1000 	str.w	r1, [sl]
 8010638:	f1bb 0f00 	cmp.w	fp, #0
 801063c:	d051      	beq.n	80106e2 <__hexnan+0x132>
 801063e:	454c      	cmp	r4, r9
 8010640:	d206      	bcs.n	8010650 <__hexnan+0xa0>
 8010642:	2d07      	cmp	r5, #7
 8010644:	dc04      	bgt.n	8010650 <__hexnan+0xa0>
 8010646:	462a      	mov	r2, r5
 8010648:	4649      	mov	r1, r9
 801064a:	4620      	mov	r0, r4
 801064c:	f7ff ff8a 	bl	8010564 <L_shift>
 8010650:	4544      	cmp	r4, r8
 8010652:	d936      	bls.n	80106c2 <__hexnan+0x112>
 8010654:	f1a8 0204 	sub.w	r2, r8, #4
 8010658:	4623      	mov	r3, r4
 801065a:	f853 1b04 	ldr.w	r1, [r3], #4
 801065e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010662:	429f      	cmp	r7, r3
 8010664:	d2f9      	bcs.n	801065a <__hexnan+0xaa>
 8010666:	1b3b      	subs	r3, r7, r4
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	3304      	adds	r3, #4
 801066e:	3401      	adds	r4, #1
 8010670:	3e03      	subs	r6, #3
 8010672:	42b4      	cmp	r4, r6
 8010674:	bf88      	it	hi
 8010676:	2304      	movhi	r3, #4
 8010678:	4443      	add	r3, r8
 801067a:	2200      	movs	r2, #0
 801067c:	f843 2b04 	str.w	r2, [r3], #4
 8010680:	429f      	cmp	r7, r3
 8010682:	d2fb      	bcs.n	801067c <__hexnan+0xcc>
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	b91b      	cbnz	r3, 8010690 <__hexnan+0xe0>
 8010688:	4547      	cmp	r7, r8
 801068a:	d128      	bne.n	80106de <__hexnan+0x12e>
 801068c:	2301      	movs	r3, #1
 801068e:	603b      	str	r3, [r7, #0]
 8010690:	2005      	movs	r0, #5
 8010692:	b007      	add	sp, #28
 8010694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010698:	3501      	adds	r5, #1
 801069a:	2d08      	cmp	r5, #8
 801069c:	f10b 0b01 	add.w	fp, fp, #1
 80106a0:	dd06      	ble.n	80106b0 <__hexnan+0x100>
 80106a2:	4544      	cmp	r4, r8
 80106a4:	d9c1      	bls.n	801062a <__hexnan+0x7a>
 80106a6:	2300      	movs	r3, #0
 80106a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80106ac:	2501      	movs	r5, #1
 80106ae:	3c04      	subs	r4, #4
 80106b0:	6822      	ldr	r2, [r4, #0]
 80106b2:	f000 000f 	and.w	r0, r0, #15
 80106b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80106ba:	6020      	str	r0, [r4, #0]
 80106bc:	e7b5      	b.n	801062a <__hexnan+0x7a>
 80106be:	2508      	movs	r5, #8
 80106c0:	e7b3      	b.n	801062a <__hexnan+0x7a>
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d0dd      	beq.n	8010684 <__hexnan+0xd4>
 80106c8:	f1c3 0320 	rsb	r3, r3, #32
 80106cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106d0:	40da      	lsrs	r2, r3
 80106d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80106d6:	4013      	ands	r3, r2
 80106d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80106dc:	e7d2      	b.n	8010684 <__hexnan+0xd4>
 80106de:	3f04      	subs	r7, #4
 80106e0:	e7d0      	b.n	8010684 <__hexnan+0xd4>
 80106e2:	2004      	movs	r0, #4
 80106e4:	e7d5      	b.n	8010692 <__hexnan+0xe2>

080106e6 <__ascii_mbtowc>:
 80106e6:	b082      	sub	sp, #8
 80106e8:	b901      	cbnz	r1, 80106ec <__ascii_mbtowc+0x6>
 80106ea:	a901      	add	r1, sp, #4
 80106ec:	b142      	cbz	r2, 8010700 <__ascii_mbtowc+0x1a>
 80106ee:	b14b      	cbz	r3, 8010704 <__ascii_mbtowc+0x1e>
 80106f0:	7813      	ldrb	r3, [r2, #0]
 80106f2:	600b      	str	r3, [r1, #0]
 80106f4:	7812      	ldrb	r2, [r2, #0]
 80106f6:	1e10      	subs	r0, r2, #0
 80106f8:	bf18      	it	ne
 80106fa:	2001      	movne	r0, #1
 80106fc:	b002      	add	sp, #8
 80106fe:	4770      	bx	lr
 8010700:	4610      	mov	r0, r2
 8010702:	e7fb      	b.n	80106fc <__ascii_mbtowc+0x16>
 8010704:	f06f 0001 	mvn.w	r0, #1
 8010708:	e7f8      	b.n	80106fc <__ascii_mbtowc+0x16>

0801070a <_realloc_r>:
 801070a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070e:	4680      	mov	r8, r0
 8010710:	4615      	mov	r5, r2
 8010712:	460c      	mov	r4, r1
 8010714:	b921      	cbnz	r1, 8010720 <_realloc_r+0x16>
 8010716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801071a:	4611      	mov	r1, r2
 801071c:	f7fd bad0 	b.w	800dcc0 <_malloc_r>
 8010720:	b92a      	cbnz	r2, 801072e <_realloc_r+0x24>
 8010722:	f7fd fa59 	bl	800dbd8 <_free_r>
 8010726:	2400      	movs	r4, #0
 8010728:	4620      	mov	r0, r4
 801072a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072e:	f000 f8b2 	bl	8010896 <_malloc_usable_size_r>
 8010732:	4285      	cmp	r5, r0
 8010734:	4606      	mov	r6, r0
 8010736:	d802      	bhi.n	801073e <_realloc_r+0x34>
 8010738:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801073c:	d8f4      	bhi.n	8010728 <_realloc_r+0x1e>
 801073e:	4629      	mov	r1, r5
 8010740:	4640      	mov	r0, r8
 8010742:	f7fd fabd 	bl	800dcc0 <_malloc_r>
 8010746:	4607      	mov	r7, r0
 8010748:	2800      	cmp	r0, #0
 801074a:	d0ec      	beq.n	8010726 <_realloc_r+0x1c>
 801074c:	42b5      	cmp	r5, r6
 801074e:	462a      	mov	r2, r5
 8010750:	4621      	mov	r1, r4
 8010752:	bf28      	it	cs
 8010754:	4632      	movcs	r2, r6
 8010756:	f7ff fc43 	bl	800ffe0 <memcpy>
 801075a:	4621      	mov	r1, r4
 801075c:	4640      	mov	r0, r8
 801075e:	f7fd fa3b 	bl	800dbd8 <_free_r>
 8010762:	463c      	mov	r4, r7
 8010764:	e7e0      	b.n	8010728 <_realloc_r+0x1e>
	...

08010768 <_strtoul_l.constprop.0>:
 8010768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801076c:	4e34      	ldr	r6, [pc, #208]	@ (8010840 <_strtoul_l.constprop.0+0xd8>)
 801076e:	4686      	mov	lr, r0
 8010770:	460d      	mov	r5, r1
 8010772:	4628      	mov	r0, r5
 8010774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010778:	5d37      	ldrb	r7, [r6, r4]
 801077a:	f017 0708 	ands.w	r7, r7, #8
 801077e:	d1f8      	bne.n	8010772 <_strtoul_l.constprop.0+0xa>
 8010780:	2c2d      	cmp	r4, #45	@ 0x2d
 8010782:	d12f      	bne.n	80107e4 <_strtoul_l.constprop.0+0x7c>
 8010784:	782c      	ldrb	r4, [r5, #0]
 8010786:	2701      	movs	r7, #1
 8010788:	1c85      	adds	r5, r0, #2
 801078a:	f033 0010 	bics.w	r0, r3, #16
 801078e:	d109      	bne.n	80107a4 <_strtoul_l.constprop.0+0x3c>
 8010790:	2c30      	cmp	r4, #48	@ 0x30
 8010792:	d12c      	bne.n	80107ee <_strtoul_l.constprop.0+0x86>
 8010794:	7828      	ldrb	r0, [r5, #0]
 8010796:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801079a:	2858      	cmp	r0, #88	@ 0x58
 801079c:	d127      	bne.n	80107ee <_strtoul_l.constprop.0+0x86>
 801079e:	786c      	ldrb	r4, [r5, #1]
 80107a0:	2310      	movs	r3, #16
 80107a2:	3502      	adds	r5, #2
 80107a4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80107a8:	2600      	movs	r6, #0
 80107aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80107ae:	fb03 f908 	mul.w	r9, r3, r8
 80107b2:	ea6f 0909 	mvn.w	r9, r9
 80107b6:	4630      	mov	r0, r6
 80107b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80107bc:	f1bc 0f09 	cmp.w	ip, #9
 80107c0:	d81c      	bhi.n	80107fc <_strtoul_l.constprop.0+0x94>
 80107c2:	4664      	mov	r4, ip
 80107c4:	42a3      	cmp	r3, r4
 80107c6:	dd2a      	ble.n	801081e <_strtoul_l.constprop.0+0xb6>
 80107c8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80107cc:	d007      	beq.n	80107de <_strtoul_l.constprop.0+0x76>
 80107ce:	4580      	cmp	r8, r0
 80107d0:	d322      	bcc.n	8010818 <_strtoul_l.constprop.0+0xb0>
 80107d2:	d101      	bne.n	80107d8 <_strtoul_l.constprop.0+0x70>
 80107d4:	45a1      	cmp	r9, r4
 80107d6:	db1f      	blt.n	8010818 <_strtoul_l.constprop.0+0xb0>
 80107d8:	fb00 4003 	mla	r0, r0, r3, r4
 80107dc:	2601      	movs	r6, #1
 80107de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107e2:	e7e9      	b.n	80107b8 <_strtoul_l.constprop.0+0x50>
 80107e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80107e6:	bf04      	itt	eq
 80107e8:	782c      	ldrbeq	r4, [r5, #0]
 80107ea:	1c85      	addeq	r5, r0, #2
 80107ec:	e7cd      	b.n	801078a <_strtoul_l.constprop.0+0x22>
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1d8      	bne.n	80107a4 <_strtoul_l.constprop.0+0x3c>
 80107f2:	2c30      	cmp	r4, #48	@ 0x30
 80107f4:	bf0c      	ite	eq
 80107f6:	2308      	moveq	r3, #8
 80107f8:	230a      	movne	r3, #10
 80107fa:	e7d3      	b.n	80107a4 <_strtoul_l.constprop.0+0x3c>
 80107fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010800:	f1bc 0f19 	cmp.w	ip, #25
 8010804:	d801      	bhi.n	801080a <_strtoul_l.constprop.0+0xa2>
 8010806:	3c37      	subs	r4, #55	@ 0x37
 8010808:	e7dc      	b.n	80107c4 <_strtoul_l.constprop.0+0x5c>
 801080a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801080e:	f1bc 0f19 	cmp.w	ip, #25
 8010812:	d804      	bhi.n	801081e <_strtoul_l.constprop.0+0xb6>
 8010814:	3c57      	subs	r4, #87	@ 0x57
 8010816:	e7d5      	b.n	80107c4 <_strtoul_l.constprop.0+0x5c>
 8010818:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801081c:	e7df      	b.n	80107de <_strtoul_l.constprop.0+0x76>
 801081e:	1c73      	adds	r3, r6, #1
 8010820:	d106      	bne.n	8010830 <_strtoul_l.constprop.0+0xc8>
 8010822:	2322      	movs	r3, #34	@ 0x22
 8010824:	f8ce 3000 	str.w	r3, [lr]
 8010828:	4630      	mov	r0, r6
 801082a:	b932      	cbnz	r2, 801083a <_strtoul_l.constprop.0+0xd2>
 801082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010830:	b107      	cbz	r7, 8010834 <_strtoul_l.constprop.0+0xcc>
 8010832:	4240      	negs	r0, r0
 8010834:	2a00      	cmp	r2, #0
 8010836:	d0f9      	beq.n	801082c <_strtoul_l.constprop.0+0xc4>
 8010838:	b106      	cbz	r6, 801083c <_strtoul_l.constprop.0+0xd4>
 801083a:	1e69      	subs	r1, r5, #1
 801083c:	6011      	str	r1, [r2, #0]
 801083e:	e7f5      	b.n	801082c <_strtoul_l.constprop.0+0xc4>
 8010840:	08011191 	.word	0x08011191

08010844 <_strtoul_r>:
 8010844:	f7ff bf90 	b.w	8010768 <_strtoul_l.constprop.0>

08010848 <__ascii_wctomb>:
 8010848:	4603      	mov	r3, r0
 801084a:	4608      	mov	r0, r1
 801084c:	b141      	cbz	r1, 8010860 <__ascii_wctomb+0x18>
 801084e:	2aff      	cmp	r2, #255	@ 0xff
 8010850:	d904      	bls.n	801085c <__ascii_wctomb+0x14>
 8010852:	228a      	movs	r2, #138	@ 0x8a
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801085a:	4770      	bx	lr
 801085c:	700a      	strb	r2, [r1, #0]
 801085e:	2001      	movs	r0, #1
 8010860:	4770      	bx	lr
	...

08010864 <fiprintf>:
 8010864:	b40e      	push	{r1, r2, r3}
 8010866:	b503      	push	{r0, r1, lr}
 8010868:	4601      	mov	r1, r0
 801086a:	ab03      	add	r3, sp, #12
 801086c:	4805      	ldr	r0, [pc, #20]	@ (8010884 <fiprintf+0x20>)
 801086e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010872:	6800      	ldr	r0, [r0, #0]
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f000 f83f 	bl	80108f8 <_vfiprintf_r>
 801087a:	b002      	add	sp, #8
 801087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010880:	b003      	add	sp, #12
 8010882:	4770      	bx	lr
 8010884:	20000138 	.word	0x20000138

08010888 <abort>:
 8010888:	b508      	push	{r3, lr}
 801088a:	2006      	movs	r0, #6
 801088c:	f000 fa08 	bl	8010ca0 <raise>
 8010890:	2001      	movs	r0, #1
 8010892:	f7f0 ff33 	bl	80016fc <_exit>

08010896 <_malloc_usable_size_r>:
 8010896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801089a:	1f18      	subs	r0, r3, #4
 801089c:	2b00      	cmp	r3, #0
 801089e:	bfbc      	itt	lt
 80108a0:	580b      	ldrlt	r3, [r1, r0]
 80108a2:	18c0      	addlt	r0, r0, r3
 80108a4:	4770      	bx	lr

080108a6 <__sfputc_r>:
 80108a6:	6893      	ldr	r3, [r2, #8]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	b410      	push	{r4}
 80108ae:	6093      	str	r3, [r2, #8]
 80108b0:	da08      	bge.n	80108c4 <__sfputc_r+0x1e>
 80108b2:	6994      	ldr	r4, [r2, #24]
 80108b4:	42a3      	cmp	r3, r4
 80108b6:	db01      	blt.n	80108bc <__sfputc_r+0x16>
 80108b8:	290a      	cmp	r1, #10
 80108ba:	d103      	bne.n	80108c4 <__sfputc_r+0x1e>
 80108bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108c0:	f000 b932 	b.w	8010b28 <__swbuf_r>
 80108c4:	6813      	ldr	r3, [r2, #0]
 80108c6:	1c58      	adds	r0, r3, #1
 80108c8:	6010      	str	r0, [r2, #0]
 80108ca:	7019      	strb	r1, [r3, #0]
 80108cc:	4608      	mov	r0, r1
 80108ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <__sfputs_r>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	4606      	mov	r6, r0
 80108d8:	460f      	mov	r7, r1
 80108da:	4614      	mov	r4, r2
 80108dc:	18d5      	adds	r5, r2, r3
 80108de:	42ac      	cmp	r4, r5
 80108e0:	d101      	bne.n	80108e6 <__sfputs_r+0x12>
 80108e2:	2000      	movs	r0, #0
 80108e4:	e007      	b.n	80108f6 <__sfputs_r+0x22>
 80108e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ea:	463a      	mov	r2, r7
 80108ec:	4630      	mov	r0, r6
 80108ee:	f7ff ffda 	bl	80108a6 <__sfputc_r>
 80108f2:	1c43      	adds	r3, r0, #1
 80108f4:	d1f3      	bne.n	80108de <__sfputs_r+0xa>
 80108f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108f8 <_vfiprintf_r>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	460d      	mov	r5, r1
 80108fe:	b09d      	sub	sp, #116	@ 0x74
 8010900:	4614      	mov	r4, r2
 8010902:	4698      	mov	r8, r3
 8010904:	4606      	mov	r6, r0
 8010906:	b118      	cbz	r0, 8010910 <_vfiprintf_r+0x18>
 8010908:	6a03      	ldr	r3, [r0, #32]
 801090a:	b90b      	cbnz	r3, 8010910 <_vfiprintf_r+0x18>
 801090c:	f7fc f982 	bl	800cc14 <__sinit>
 8010910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010912:	07d9      	lsls	r1, r3, #31
 8010914:	d405      	bmi.n	8010922 <_vfiprintf_r+0x2a>
 8010916:	89ab      	ldrh	r3, [r5, #12]
 8010918:	059a      	lsls	r2, r3, #22
 801091a:	d402      	bmi.n	8010922 <_vfiprintf_r+0x2a>
 801091c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801091e:	f7fc fb06 	bl	800cf2e <__retarget_lock_acquire_recursive>
 8010922:	89ab      	ldrh	r3, [r5, #12]
 8010924:	071b      	lsls	r3, r3, #28
 8010926:	d501      	bpl.n	801092c <_vfiprintf_r+0x34>
 8010928:	692b      	ldr	r3, [r5, #16]
 801092a:	b99b      	cbnz	r3, 8010954 <_vfiprintf_r+0x5c>
 801092c:	4629      	mov	r1, r5
 801092e:	4630      	mov	r0, r6
 8010930:	f000 f938 	bl	8010ba4 <__swsetup_r>
 8010934:	b170      	cbz	r0, 8010954 <_vfiprintf_r+0x5c>
 8010936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010938:	07dc      	lsls	r4, r3, #31
 801093a:	d504      	bpl.n	8010946 <_vfiprintf_r+0x4e>
 801093c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010940:	b01d      	add	sp, #116	@ 0x74
 8010942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010946:	89ab      	ldrh	r3, [r5, #12]
 8010948:	0598      	lsls	r0, r3, #22
 801094a:	d4f7      	bmi.n	801093c <_vfiprintf_r+0x44>
 801094c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801094e:	f7fc faef 	bl	800cf30 <__retarget_lock_release_recursive>
 8010952:	e7f3      	b.n	801093c <_vfiprintf_r+0x44>
 8010954:	2300      	movs	r3, #0
 8010956:	9309      	str	r3, [sp, #36]	@ 0x24
 8010958:	2320      	movs	r3, #32
 801095a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801095e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010962:	2330      	movs	r3, #48	@ 0x30
 8010964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b14 <_vfiprintf_r+0x21c>
 8010968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801096c:	f04f 0901 	mov.w	r9, #1
 8010970:	4623      	mov	r3, r4
 8010972:	469a      	mov	sl, r3
 8010974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010978:	b10a      	cbz	r2, 801097e <_vfiprintf_r+0x86>
 801097a:	2a25      	cmp	r2, #37	@ 0x25
 801097c:	d1f9      	bne.n	8010972 <_vfiprintf_r+0x7a>
 801097e:	ebba 0b04 	subs.w	fp, sl, r4
 8010982:	d00b      	beq.n	801099c <_vfiprintf_r+0xa4>
 8010984:	465b      	mov	r3, fp
 8010986:	4622      	mov	r2, r4
 8010988:	4629      	mov	r1, r5
 801098a:	4630      	mov	r0, r6
 801098c:	f7ff ffa2 	bl	80108d4 <__sfputs_r>
 8010990:	3001      	adds	r0, #1
 8010992:	f000 80a7 	beq.w	8010ae4 <_vfiprintf_r+0x1ec>
 8010996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010998:	445a      	add	r2, fp
 801099a:	9209      	str	r2, [sp, #36]	@ 0x24
 801099c:	f89a 3000 	ldrb.w	r3, [sl]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 809f 	beq.w	8010ae4 <_vfiprintf_r+0x1ec>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109b0:	f10a 0a01 	add.w	sl, sl, #1
 80109b4:	9304      	str	r3, [sp, #16]
 80109b6:	9307      	str	r3, [sp, #28]
 80109b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80109be:	4654      	mov	r4, sl
 80109c0:	2205      	movs	r2, #5
 80109c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c6:	4853      	ldr	r0, [pc, #332]	@ (8010b14 <_vfiprintf_r+0x21c>)
 80109c8:	f7ef fc02 	bl	80001d0 <memchr>
 80109cc:	9a04      	ldr	r2, [sp, #16]
 80109ce:	b9d8      	cbnz	r0, 8010a08 <_vfiprintf_r+0x110>
 80109d0:	06d1      	lsls	r1, r2, #27
 80109d2:	bf44      	itt	mi
 80109d4:	2320      	movmi	r3, #32
 80109d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109da:	0713      	lsls	r3, r2, #28
 80109dc:	bf44      	itt	mi
 80109de:	232b      	movmi	r3, #43	@ 0x2b
 80109e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109e4:	f89a 3000 	ldrb.w	r3, [sl]
 80109e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109ea:	d015      	beq.n	8010a18 <_vfiprintf_r+0x120>
 80109ec:	9a07      	ldr	r2, [sp, #28]
 80109ee:	4654      	mov	r4, sl
 80109f0:	2000      	movs	r0, #0
 80109f2:	f04f 0c0a 	mov.w	ip, #10
 80109f6:	4621      	mov	r1, r4
 80109f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109fc:	3b30      	subs	r3, #48	@ 0x30
 80109fe:	2b09      	cmp	r3, #9
 8010a00:	d94b      	bls.n	8010a9a <_vfiprintf_r+0x1a2>
 8010a02:	b1b0      	cbz	r0, 8010a32 <_vfiprintf_r+0x13a>
 8010a04:	9207      	str	r2, [sp, #28]
 8010a06:	e014      	b.n	8010a32 <_vfiprintf_r+0x13a>
 8010a08:	eba0 0308 	sub.w	r3, r0, r8
 8010a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a10:	4313      	orrs	r3, r2
 8010a12:	9304      	str	r3, [sp, #16]
 8010a14:	46a2      	mov	sl, r4
 8010a16:	e7d2      	b.n	80109be <_vfiprintf_r+0xc6>
 8010a18:	9b03      	ldr	r3, [sp, #12]
 8010a1a:	1d19      	adds	r1, r3, #4
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	9103      	str	r1, [sp, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	bfbb      	ittet	lt
 8010a24:	425b      	neglt	r3, r3
 8010a26:	f042 0202 	orrlt.w	r2, r2, #2
 8010a2a:	9307      	strge	r3, [sp, #28]
 8010a2c:	9307      	strlt	r3, [sp, #28]
 8010a2e:	bfb8      	it	lt
 8010a30:	9204      	strlt	r2, [sp, #16]
 8010a32:	7823      	ldrb	r3, [r4, #0]
 8010a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a36:	d10a      	bne.n	8010a4e <_vfiprintf_r+0x156>
 8010a38:	7863      	ldrb	r3, [r4, #1]
 8010a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a3c:	d132      	bne.n	8010aa4 <_vfiprintf_r+0x1ac>
 8010a3e:	9b03      	ldr	r3, [sp, #12]
 8010a40:	1d1a      	adds	r2, r3, #4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	9203      	str	r2, [sp, #12]
 8010a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a4a:	3402      	adds	r4, #2
 8010a4c:	9305      	str	r3, [sp, #20]
 8010a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b24 <_vfiprintf_r+0x22c>
 8010a52:	7821      	ldrb	r1, [r4, #0]
 8010a54:	2203      	movs	r2, #3
 8010a56:	4650      	mov	r0, sl
 8010a58:	f7ef fbba 	bl	80001d0 <memchr>
 8010a5c:	b138      	cbz	r0, 8010a6e <_vfiprintf_r+0x176>
 8010a5e:	9b04      	ldr	r3, [sp, #16]
 8010a60:	eba0 000a 	sub.w	r0, r0, sl
 8010a64:	2240      	movs	r2, #64	@ 0x40
 8010a66:	4082      	lsls	r2, r0
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	3401      	adds	r4, #1
 8010a6c:	9304      	str	r3, [sp, #16]
 8010a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a72:	4829      	ldr	r0, [pc, #164]	@ (8010b18 <_vfiprintf_r+0x220>)
 8010a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a78:	2206      	movs	r2, #6
 8010a7a:	f7ef fba9 	bl	80001d0 <memchr>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d03f      	beq.n	8010b02 <_vfiprintf_r+0x20a>
 8010a82:	4b26      	ldr	r3, [pc, #152]	@ (8010b1c <_vfiprintf_r+0x224>)
 8010a84:	bb1b      	cbnz	r3, 8010ace <_vfiprintf_r+0x1d6>
 8010a86:	9b03      	ldr	r3, [sp, #12]
 8010a88:	3307      	adds	r3, #7
 8010a8a:	f023 0307 	bic.w	r3, r3, #7
 8010a8e:	3308      	adds	r3, #8
 8010a90:	9303      	str	r3, [sp, #12]
 8010a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a94:	443b      	add	r3, r7
 8010a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a98:	e76a      	b.n	8010970 <_vfiprintf_r+0x78>
 8010a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	2001      	movs	r0, #1
 8010aa2:	e7a8      	b.n	80109f6 <_vfiprintf_r+0xfe>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	9305      	str	r3, [sp, #20]
 8010aaa:	4619      	mov	r1, r3
 8010aac:	f04f 0c0a 	mov.w	ip, #10
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ab6:	3a30      	subs	r2, #48	@ 0x30
 8010ab8:	2a09      	cmp	r2, #9
 8010aba:	d903      	bls.n	8010ac4 <_vfiprintf_r+0x1cc>
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d0c6      	beq.n	8010a4e <_vfiprintf_r+0x156>
 8010ac0:	9105      	str	r1, [sp, #20]
 8010ac2:	e7c4      	b.n	8010a4e <_vfiprintf_r+0x156>
 8010ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ac8:	4604      	mov	r4, r0
 8010aca:	2301      	movs	r3, #1
 8010acc:	e7f0      	b.n	8010ab0 <_vfiprintf_r+0x1b8>
 8010ace:	ab03      	add	r3, sp, #12
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	462a      	mov	r2, r5
 8010ad4:	4b12      	ldr	r3, [pc, #72]	@ (8010b20 <_vfiprintf_r+0x228>)
 8010ad6:	a904      	add	r1, sp, #16
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f7fb fa43 	bl	800bf64 <_printf_float>
 8010ade:	4607      	mov	r7, r0
 8010ae0:	1c78      	adds	r0, r7, #1
 8010ae2:	d1d6      	bne.n	8010a92 <_vfiprintf_r+0x19a>
 8010ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ae6:	07d9      	lsls	r1, r3, #31
 8010ae8:	d405      	bmi.n	8010af6 <_vfiprintf_r+0x1fe>
 8010aea:	89ab      	ldrh	r3, [r5, #12]
 8010aec:	059a      	lsls	r2, r3, #22
 8010aee:	d402      	bmi.n	8010af6 <_vfiprintf_r+0x1fe>
 8010af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010af2:	f7fc fa1d 	bl	800cf30 <__retarget_lock_release_recursive>
 8010af6:	89ab      	ldrh	r3, [r5, #12]
 8010af8:	065b      	lsls	r3, r3, #25
 8010afa:	f53f af1f 	bmi.w	801093c <_vfiprintf_r+0x44>
 8010afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b00:	e71e      	b.n	8010940 <_vfiprintf_r+0x48>
 8010b02:	ab03      	add	r3, sp, #12
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	462a      	mov	r2, r5
 8010b08:	4b05      	ldr	r3, [pc, #20]	@ (8010b20 <_vfiprintf_r+0x228>)
 8010b0a:	a904      	add	r1, sp, #16
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7fb fcc1 	bl	800c494 <_printf_i>
 8010b12:	e7e4      	b.n	8010ade <_vfiprintf_r+0x1e6>
 8010b14:	08011291 	.word	0x08011291
 8010b18:	0801129b 	.word	0x0801129b
 8010b1c:	0800bf65 	.word	0x0800bf65
 8010b20:	080108d5 	.word	0x080108d5
 8010b24:	08011297 	.word	0x08011297

08010b28 <__swbuf_r>:
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2a:	460e      	mov	r6, r1
 8010b2c:	4614      	mov	r4, r2
 8010b2e:	4605      	mov	r5, r0
 8010b30:	b118      	cbz	r0, 8010b3a <__swbuf_r+0x12>
 8010b32:	6a03      	ldr	r3, [r0, #32]
 8010b34:	b90b      	cbnz	r3, 8010b3a <__swbuf_r+0x12>
 8010b36:	f7fc f86d 	bl	800cc14 <__sinit>
 8010b3a:	69a3      	ldr	r3, [r4, #24]
 8010b3c:	60a3      	str	r3, [r4, #8]
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	071a      	lsls	r2, r3, #28
 8010b42:	d501      	bpl.n	8010b48 <__swbuf_r+0x20>
 8010b44:	6923      	ldr	r3, [r4, #16]
 8010b46:	b943      	cbnz	r3, 8010b5a <__swbuf_r+0x32>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f000 f82a 	bl	8010ba4 <__swsetup_r>
 8010b50:	b118      	cbz	r0, 8010b5a <__swbuf_r+0x32>
 8010b52:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010b56:	4638      	mov	r0, r7
 8010b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b5a:	6823      	ldr	r3, [r4, #0]
 8010b5c:	6922      	ldr	r2, [r4, #16]
 8010b5e:	1a98      	subs	r0, r3, r2
 8010b60:	6963      	ldr	r3, [r4, #20]
 8010b62:	b2f6      	uxtb	r6, r6
 8010b64:	4283      	cmp	r3, r0
 8010b66:	4637      	mov	r7, r6
 8010b68:	dc05      	bgt.n	8010b76 <__swbuf_r+0x4e>
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f7ff f95f 	bl	800fe30 <_fflush_r>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	d1ed      	bne.n	8010b52 <__swbuf_r+0x2a>
 8010b76:	68a3      	ldr	r3, [r4, #8]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	60a3      	str	r3, [r4, #8]
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	6022      	str	r2, [r4, #0]
 8010b82:	701e      	strb	r6, [r3, #0]
 8010b84:	6962      	ldr	r2, [r4, #20]
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d004      	beq.n	8010b96 <__swbuf_r+0x6e>
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	07db      	lsls	r3, r3, #31
 8010b90:	d5e1      	bpl.n	8010b56 <__swbuf_r+0x2e>
 8010b92:	2e0a      	cmp	r6, #10
 8010b94:	d1df      	bne.n	8010b56 <__swbuf_r+0x2e>
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7ff f949 	bl	800fe30 <_fflush_r>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d0d9      	beq.n	8010b56 <__swbuf_r+0x2e>
 8010ba2:	e7d6      	b.n	8010b52 <__swbuf_r+0x2a>

08010ba4 <__swsetup_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4b29      	ldr	r3, [pc, #164]	@ (8010c4c <__swsetup_r+0xa8>)
 8010ba8:	4605      	mov	r5, r0
 8010baa:	6818      	ldr	r0, [r3, #0]
 8010bac:	460c      	mov	r4, r1
 8010bae:	b118      	cbz	r0, 8010bb8 <__swsetup_r+0x14>
 8010bb0:	6a03      	ldr	r3, [r0, #32]
 8010bb2:	b90b      	cbnz	r3, 8010bb8 <__swsetup_r+0x14>
 8010bb4:	f7fc f82e 	bl	800cc14 <__sinit>
 8010bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bbc:	0719      	lsls	r1, r3, #28
 8010bbe:	d422      	bmi.n	8010c06 <__swsetup_r+0x62>
 8010bc0:	06da      	lsls	r2, r3, #27
 8010bc2:	d407      	bmi.n	8010bd4 <__swsetup_r+0x30>
 8010bc4:	2209      	movs	r2, #9
 8010bc6:	602a      	str	r2, [r5, #0]
 8010bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bd2:	e033      	b.n	8010c3c <__swsetup_r+0x98>
 8010bd4:	0758      	lsls	r0, r3, #29
 8010bd6:	d512      	bpl.n	8010bfe <__swsetup_r+0x5a>
 8010bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bda:	b141      	cbz	r1, 8010bee <__swsetup_r+0x4a>
 8010bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010be0:	4299      	cmp	r1, r3
 8010be2:	d002      	beq.n	8010bea <__swsetup_r+0x46>
 8010be4:	4628      	mov	r0, r5
 8010be6:	f7fc fff7 	bl	800dbd8 <_free_r>
 8010bea:	2300      	movs	r3, #0
 8010bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bf4:	81a3      	strh	r3, [r4, #12]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	6063      	str	r3, [r4, #4]
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	6023      	str	r3, [r4, #0]
 8010bfe:	89a3      	ldrh	r3, [r4, #12]
 8010c00:	f043 0308 	orr.w	r3, r3, #8
 8010c04:	81a3      	strh	r3, [r4, #12]
 8010c06:	6923      	ldr	r3, [r4, #16]
 8010c08:	b94b      	cbnz	r3, 8010c1e <__swsetup_r+0x7a>
 8010c0a:	89a3      	ldrh	r3, [r4, #12]
 8010c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c14:	d003      	beq.n	8010c1e <__swsetup_r+0x7a>
 8010c16:	4621      	mov	r1, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f000 f883 	bl	8010d24 <__smakebuf_r>
 8010c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c22:	f013 0201 	ands.w	r2, r3, #1
 8010c26:	d00a      	beq.n	8010c3e <__swsetup_r+0x9a>
 8010c28:	2200      	movs	r2, #0
 8010c2a:	60a2      	str	r2, [r4, #8]
 8010c2c:	6962      	ldr	r2, [r4, #20]
 8010c2e:	4252      	negs	r2, r2
 8010c30:	61a2      	str	r2, [r4, #24]
 8010c32:	6922      	ldr	r2, [r4, #16]
 8010c34:	b942      	cbnz	r2, 8010c48 <__swsetup_r+0xa4>
 8010c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c3a:	d1c5      	bne.n	8010bc8 <__swsetup_r+0x24>
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
 8010c3e:	0799      	lsls	r1, r3, #30
 8010c40:	bf58      	it	pl
 8010c42:	6962      	ldrpl	r2, [r4, #20]
 8010c44:	60a2      	str	r2, [r4, #8]
 8010c46:	e7f4      	b.n	8010c32 <__swsetup_r+0x8e>
 8010c48:	2000      	movs	r0, #0
 8010c4a:	e7f7      	b.n	8010c3c <__swsetup_r+0x98>
 8010c4c:	20000138 	.word	0x20000138

08010c50 <_raise_r>:
 8010c50:	291f      	cmp	r1, #31
 8010c52:	b538      	push	{r3, r4, r5, lr}
 8010c54:	4605      	mov	r5, r0
 8010c56:	460c      	mov	r4, r1
 8010c58:	d904      	bls.n	8010c64 <_raise_r+0x14>
 8010c5a:	2316      	movs	r3, #22
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c62:	bd38      	pop	{r3, r4, r5, pc}
 8010c64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c66:	b112      	cbz	r2, 8010c6e <_raise_r+0x1e>
 8010c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c6c:	b94b      	cbnz	r3, 8010c82 <_raise_r+0x32>
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f000 f830 	bl	8010cd4 <_getpid_r>
 8010c74:	4622      	mov	r2, r4
 8010c76:	4601      	mov	r1, r0
 8010c78:	4628      	mov	r0, r5
 8010c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c7e:	f000 b817 	b.w	8010cb0 <_kill_r>
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d00a      	beq.n	8010c9c <_raise_r+0x4c>
 8010c86:	1c59      	adds	r1, r3, #1
 8010c88:	d103      	bne.n	8010c92 <_raise_r+0x42>
 8010c8a:	2316      	movs	r3, #22
 8010c8c:	6003      	str	r3, [r0, #0]
 8010c8e:	2001      	movs	r0, #1
 8010c90:	e7e7      	b.n	8010c62 <_raise_r+0x12>
 8010c92:	2100      	movs	r1, #0
 8010c94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c98:	4620      	mov	r0, r4
 8010c9a:	4798      	blx	r3
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	e7e0      	b.n	8010c62 <_raise_r+0x12>

08010ca0 <raise>:
 8010ca0:	4b02      	ldr	r3, [pc, #8]	@ (8010cac <raise+0xc>)
 8010ca2:	4601      	mov	r1, r0
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	f7ff bfd3 	b.w	8010c50 <_raise_r>
 8010caa:	bf00      	nop
 8010cac:	20000138 	.word	0x20000138

08010cb0 <_kill_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d07      	ldr	r5, [pc, #28]	@ (8010cd0 <_kill_r+0x20>)
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4608      	mov	r0, r1
 8010cba:	4611      	mov	r1, r2
 8010cbc:	602b      	str	r3, [r5, #0]
 8010cbe:	f7f0 fd0d 	bl	80016dc <_kill>
 8010cc2:	1c43      	adds	r3, r0, #1
 8010cc4:	d102      	bne.n	8010ccc <_kill_r+0x1c>
 8010cc6:	682b      	ldr	r3, [r5, #0]
 8010cc8:	b103      	cbz	r3, 8010ccc <_kill_r+0x1c>
 8010cca:	6023      	str	r3, [r4, #0]
 8010ccc:	bd38      	pop	{r3, r4, r5, pc}
 8010cce:	bf00      	nop
 8010cd0:	20002234 	.word	0x20002234

08010cd4 <_getpid_r>:
 8010cd4:	f7f0 bcfa 	b.w	80016cc <_getpid>

08010cd8 <__swhatbuf_r>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	460c      	mov	r4, r1
 8010cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ce0:	2900      	cmp	r1, #0
 8010ce2:	b096      	sub	sp, #88	@ 0x58
 8010ce4:	4615      	mov	r5, r2
 8010ce6:	461e      	mov	r6, r3
 8010ce8:	da0d      	bge.n	8010d06 <__swhatbuf_r+0x2e>
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010cf0:	f04f 0100 	mov.w	r1, #0
 8010cf4:	bf14      	ite	ne
 8010cf6:	2340      	movne	r3, #64	@ 0x40
 8010cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	6031      	str	r1, [r6, #0]
 8010d00:	602b      	str	r3, [r5, #0]
 8010d02:	b016      	add	sp, #88	@ 0x58
 8010d04:	bd70      	pop	{r4, r5, r6, pc}
 8010d06:	466a      	mov	r2, sp
 8010d08:	f000 f848 	bl	8010d9c <_fstat_r>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	dbec      	blt.n	8010cea <__swhatbuf_r+0x12>
 8010d10:	9901      	ldr	r1, [sp, #4]
 8010d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d1a:	4259      	negs	r1, r3
 8010d1c:	4159      	adcs	r1, r3
 8010d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d22:	e7eb      	b.n	8010cfc <__swhatbuf_r+0x24>

08010d24 <__smakebuf_r>:
 8010d24:	898b      	ldrh	r3, [r1, #12]
 8010d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d28:	079d      	lsls	r5, r3, #30
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460c      	mov	r4, r1
 8010d2e:	d507      	bpl.n	8010d40 <__smakebuf_r+0x1c>
 8010d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d34:	6023      	str	r3, [r4, #0]
 8010d36:	6123      	str	r3, [r4, #16]
 8010d38:	2301      	movs	r3, #1
 8010d3a:	6163      	str	r3, [r4, #20]
 8010d3c:	b003      	add	sp, #12
 8010d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d40:	ab01      	add	r3, sp, #4
 8010d42:	466a      	mov	r2, sp
 8010d44:	f7ff ffc8 	bl	8010cd8 <__swhatbuf_r>
 8010d48:	9f00      	ldr	r7, [sp, #0]
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f7fc ffb6 	bl	800dcc0 <_malloc_r>
 8010d54:	b948      	cbnz	r0, 8010d6a <__smakebuf_r+0x46>
 8010d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d5a:	059a      	lsls	r2, r3, #22
 8010d5c:	d4ee      	bmi.n	8010d3c <__smakebuf_r+0x18>
 8010d5e:	f023 0303 	bic.w	r3, r3, #3
 8010d62:	f043 0302 	orr.w	r3, r3, #2
 8010d66:	81a3      	strh	r3, [r4, #12]
 8010d68:	e7e2      	b.n	8010d30 <__smakebuf_r+0xc>
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	6020      	str	r0, [r4, #0]
 8010d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d72:	81a3      	strh	r3, [r4, #12]
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d7a:	b15b      	cbz	r3, 8010d94 <__smakebuf_r+0x70>
 8010d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d80:	4630      	mov	r0, r6
 8010d82:	f000 f81d 	bl	8010dc0 <_isatty_r>
 8010d86:	b128      	cbz	r0, 8010d94 <__smakebuf_r+0x70>
 8010d88:	89a3      	ldrh	r3, [r4, #12]
 8010d8a:	f023 0303 	bic.w	r3, r3, #3
 8010d8e:	f043 0301 	orr.w	r3, r3, #1
 8010d92:	81a3      	strh	r3, [r4, #12]
 8010d94:	89a3      	ldrh	r3, [r4, #12]
 8010d96:	431d      	orrs	r5, r3
 8010d98:	81a5      	strh	r5, [r4, #12]
 8010d9a:	e7cf      	b.n	8010d3c <__smakebuf_r+0x18>

08010d9c <_fstat_r>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	4d07      	ldr	r5, [pc, #28]	@ (8010dbc <_fstat_r+0x20>)
 8010da0:	2300      	movs	r3, #0
 8010da2:	4604      	mov	r4, r0
 8010da4:	4608      	mov	r0, r1
 8010da6:	4611      	mov	r1, r2
 8010da8:	602b      	str	r3, [r5, #0]
 8010daa:	f7f0 fcf7 	bl	800179c <_fstat>
 8010dae:	1c43      	adds	r3, r0, #1
 8010db0:	d102      	bne.n	8010db8 <_fstat_r+0x1c>
 8010db2:	682b      	ldr	r3, [r5, #0]
 8010db4:	b103      	cbz	r3, 8010db8 <_fstat_r+0x1c>
 8010db6:	6023      	str	r3, [r4, #0]
 8010db8:	bd38      	pop	{r3, r4, r5, pc}
 8010dba:	bf00      	nop
 8010dbc:	20002234 	.word	0x20002234

08010dc0 <_isatty_r>:
 8010dc0:	b538      	push	{r3, r4, r5, lr}
 8010dc2:	4d06      	ldr	r5, [pc, #24]	@ (8010ddc <_isatty_r+0x1c>)
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	4608      	mov	r0, r1
 8010dca:	602b      	str	r3, [r5, #0]
 8010dcc:	f7f0 fcf6 	bl	80017bc <_isatty>
 8010dd0:	1c43      	adds	r3, r0, #1
 8010dd2:	d102      	bne.n	8010dda <_isatty_r+0x1a>
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	b103      	cbz	r3, 8010dda <_isatty_r+0x1a>
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	20002234 	.word	0x20002234

08010de0 <_init>:
 8010de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de2:	bf00      	nop
 8010de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010de6:	bc08      	pop	{r3}
 8010de8:	469e      	mov	lr, r3
 8010dea:	4770      	bx	lr

08010dec <_fini>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	bf00      	nop
 8010df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df2:	bc08      	pop	{r3}
 8010df4:	469e      	mov	lr, r3
 8010df6:	4770      	bx	lr
