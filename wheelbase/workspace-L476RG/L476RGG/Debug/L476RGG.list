
L476RGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001109c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08011230  08011230  00012230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117e4  080117e4  00013370  2**0
                  CONTENTS
  4 .ARM          00000008  080117e4  080117e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117ec  080117ec  00013370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117ec  080117ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117f0  080117f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  080117f4  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002044  20000370  08011b64  00013370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023b4  08011b64  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020896  00000000  00000000  000133a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004caf  00000000  00000000  00033c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  000388e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001461  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c39e  00000000  00000000  0003b7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021dee  00000000  00000000  00067b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb599  00000000  00000000  00089965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008690  00000000  00000000  00184f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011214 	.word	0x08011214

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	08011214 	.word	0x08011214

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <USART_Receive_CmdVel>:
#define BUFFER_SIZE 256

static char usart_buffer[BUFFER_SIZE];
static uint8_t rx_data;

void USART_Receive_CmdVel(UART_HandleTypeDef *huart, CmdVel *cmd_vel) {
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    static uint16_t index = 0;

    if (rx_data == '\n' || index >= BUFFER_SIZE - 1) {
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d003      	beq.n	8000ffe <USART_Receive_CmdVel+0x1a>
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ffc:	d93d      	bls.n	800107a <USART_Receive_CmdVel+0x96>
        usart_buffer[index] = '\0';
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001006:	2100      	movs	r1, #0
 8001008:	5499      	strb	r1, [r3, r2]
        index = 0;
 800100a:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]

        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001010:	4927      	ldr	r1, [pc, #156]	@ (80010b0 <USART_Receive_CmdVel+0xcc>)
 8001012:	4826      	ldr	r0, [pc, #152]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001014:	f00c f8c3 	bl	800d19e <strstr>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01f      	beq.n	800105e <USART_Receive_CmdVel+0x7a>
 800101e:	4925      	ldr	r1, [pc, #148]	@ (80010b4 <USART_Receive_CmdVel+0xd0>)
 8001020:	4822      	ldr	r0, [pc, #136]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001022:	f00c f8bc 	bl	800d19e <strstr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d018      	beq.n	800105e <USART_Receive_CmdVel+0x7a>
            sscanf(
 800102c:	683c      	ldr	r4, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	1d1d      	adds	r5, r3, #4
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3308      	adds	r3, #8
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	320c      	adds	r2, #12
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	3110      	adds	r1, #16
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	3014      	adds	r0, #20
 8001042:	9003      	str	r0, [sp, #12]
 8001044:	9102      	str	r1, [sp, #8]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	462b      	mov	r3, r5
 800104c:	4622      	mov	r2, r4
 800104e:	491a      	ldr	r1, [pc, #104]	@ (80010b8 <USART_Receive_CmdVel+0xd4>)
 8001050:	4816      	ldr	r0, [pc, #88]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001052:	f00c f82d 	bl	800d0b0 <siscanf>
                &cmd_vel->angular_x,
                &cmd_vel->angular_y,
                &cmd_vel->angular_z
            );

            Process_CmdVel(cmd_vel);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f000 f832 	bl	80010c0 <Process_CmdVel>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 800105c:	e018      	b.n	8001090 <USART_Receive_CmdVel+0xac>

        } else {
            const char *error_msg = "Invalid cmd_vel format\n";
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <USART_Receive_CmdVel+0xd8>)
 8001060:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff f904 	bl	8000270 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f005 fca2 	bl	80069bc <HAL_UART_Transmit>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001078:	e00a      	b.n	8001090 <USART_Receive_CmdVel+0xac>
        }
    } else {
        usart_buffer[index++] = rx_data;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b291      	uxth	r1, r2
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8001084:	8011      	strh	r1, [r2, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 800108e:	5499      	strb	r1, [r3, r2]
    }

    HAL_UART_Receive_IT(huart, &rx_data, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f005 fd1b 	bl	8006ad0 <HAL_UART_Receive_IT>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000048c 	.word	0x2000048c
 80010a8:	2000048e 	.word	0x2000048e
 80010ac:	2000038c 	.word	0x2000038c
 80010b0:	08011230 	.word	0x08011230
 80010b4:	0801123c 	.word	0x0801123c
 80010b8:	08011248 	.word	0x08011248
 80010bc:	08011298 	.word	0x08011298

080010c0 <Process_CmdVel>:

void Process_CmdVel(CmdVel *cmd_vel) {
 80010c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010c4:	b0b2      	sub	sp, #200	@ 0xc8
 80010c6:	af0c      	add	r7, sp, #48	@ 0x30
 80010c8:	6178      	str	r0, [r7, #20]

    snprintf(
        debug_msg,
        sizeof(debug_msg),
        "Linear: [X: %.2f, Y: %.2f, Z: %.2f], Angular: [X: %.2f, Y: %.2f, Z: %.2f]\n",
        cmd_vel->linear_x,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
    snprintf(
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	4604      	mov	r4, r0
 80010d6:	460d      	mov	r5, r1
        cmd_vel->linear_y,
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	685b      	ldr	r3, [r3, #4]
    snprintf(
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
        cmd_vel->linear_z,
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	689b      	ldr	r3, [r3, #8]
    snprintf(
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	4682      	mov	sl, r0
 80010f2:	468b      	mov	fp, r1
        cmd_vel->angular_x,
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	68db      	ldr	r3, [r3, #12]
    snprintf(
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
        cmd_vel->angular_y,
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	691b      	ldr	r3, [r3, #16]
    snprintf(
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	e9c7 0100 	strd	r0, r1, [r7]
        cmd_vel->angular_z
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	695b      	ldr	r3, [r3, #20]
    snprintf(
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa17 	bl	8000548 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	f107 0018 	add.w	r0, r7, #24
 8001122:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001126:	ed97 7b00 	vldr	d7, [r7]
 800112a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800112e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001132:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001136:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800113a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800113e:	e9cd 4500 	strd	r4, r5, [sp]
 8001142:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <Process_CmdVel+0xb0>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	f00b ff5f 	bl	800d008 <sniprintf>
    );

    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f88e 	bl	8000270 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f107 0118 	add.w	r1, r7, #24
 800115c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <Process_CmdVel+0xb4>)
 8001162:	f005 fc2b 	bl	80069bc <HAL_UART_Transmit>
}
 8001166:	bf00      	nop
 8001168:	3798      	adds	r7, #152	@ 0x98
 800116a:	46bd      	mov	sp, r7
 800116c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001170:	080112b0 	.word	0x080112b0
 8001174:	200005f8 	.word	0x200005f8

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <MX_GPIO_Init+0xf4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a36      	ldr	r2, [pc, #216]	@ (800126c <MX_GPIO_Init+0xf4>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_GPIO_Init+0xf4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a30      	ldr	r2, [pc, #192]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b25      	ldr	r3, [pc, #148]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a24      	ldr	r2, [pc, #144]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_ENC_1_Pin|CS_ENC_2_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f001 fb6a 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_ENC_3_Pin|MOTOR3_DIR_Pin|MOTOR2_DIR_Pin|MOTOR1_DIR_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001202:	481b      	ldr	r0, [pc, #108]	@ (8001270 <MX_GPIO_Init+0xf8>)
 8001204:	f001 fb64 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <MX_GPIO_Init+0xf8>)
 8001220:	f001 f9ac 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_ENC_1_Pin|CS_ENC_2_Pin;
 8001224:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f001 f99c 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_ENC_3_Pin|MOTOR3_DIR_Pin|MOTOR2_DIR_Pin|MOTOR1_DIR_Pin;
 8001244:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4804      	ldr	r0, [pc, #16]	@ (8001270 <MX_GPIO_Init+0xf8>)
 800125e:	f001 f98d 	bl	800257c <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	48000800 	.word	0x48000800

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 ff4f 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f849 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f7ff ff79 	bl	8001178 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001286:	f000 fc5f 	bl	8001b48 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800128a:	f000 fe89 	bl	8001fa0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800128e:	f00a f957 	bl	800b540 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001292:	f000 fce9 	bl	8001c68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001296:	f000 fd41 	bl	8001d1c <MX_TIM4_Init>
  MX_SPI2_Init();
 800129a:	f000 fa03 	bl	80016a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	4916      	ldr	r1, [pc, #88]	@ (80012fc <main+0x88>)
 80012a2:	4817      	ldr	r0, [pc, #92]	@ (8001300 <main+0x8c>)
 80012a4:	f005 fc14 	bl	8006ad0 <HAL_UART_Receive_IT>

  timer_init();
 80012a8:	f000 fc34 	bl	8001b14 <timer_init>
  SPI_init();
 80012ac:	f000 faa2 	bl	80017f4 <SPI_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	float linear_x = cmd_vel_data.linear_x;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <main+0x90>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	617b      	str	r3, [r7, #20]
	float linear_y = cmd_vel_data.linear_y;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <main+0x90>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	613b      	str	r3, [r7, #16]
	float linear_z = cmd_vel_data.linear_z;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <main+0x90>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	60fb      	str	r3, [r7, #12]


	float angular_x = cmd_vel_data.angular_x;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <main+0x90>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	60bb      	str	r3, [r7, #8]
	float angular_y = cmd_vel_data.angular_y;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <main+0x90>)
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	607b      	str	r3, [r7, #4]
	float angular_z = cmd_vel_data.angular_z;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <main+0x90>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	603b      	str	r3, [r7, #0]

	calculate_motor_duty_cycles(linear_x, linear_y, angular_z, &motor1, &motor2, &motor3);
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <main+0x94>)
 80012d6:	490d      	ldr	r1, [pc, #52]	@ (800130c <main+0x98>)
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <main+0x9c>)
 80012da:	ed97 1a00 	vldr	s2, [r7]
 80012de:	edd7 0a04 	vldr	s1, [r7, #16]
 80012e2:	ed97 0a05 	vldr	s0, [r7, #20]
 80012e6:	f000 f8ff 	bl	80014e8 <calculate_motor_duty_cycles>

	HAL_Delay(10); // Small delay for control loop timing
 80012ea:	200a      	movs	r0, #10
 80012ec:	f000 ff92 	bl	8002214 <HAL_Delay>
	//HAL_Delay(2000);
	//motor.duty_cycle = -20.0;
	//motor_update(&motor);
	  HAL_Delay(2000);
 80012f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012f4:	f000 ff8e 	bl	8002214 <HAL_Delay>
  {
 80012f8:	bf00      	nop
 80012fa:	e7d9      	b.n	80012b0 <main+0x3c>
 80012fc:	200004a8 	.word	0x200004a8
 8001300:	200005f8 	.word	0x200005f8
 8001304:	20000490 	.word	0x20000490
 8001308:	20000050 	.word	0x20000050
 800130c:	20000028 	.word	0x20000028
 8001310:	20000000 	.word	0x20000000

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b096      	sub	sp, #88	@ 0x58
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2244      	movs	r2, #68	@ 0x44
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00b ff33 	bl	800d18e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001336:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800133a:	f002 fc9f 	bl	8003c7c <HAL_PWREx_ControlVoltageScaling>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001344:	f000 f85a 	bl	80013fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001348:	2310      	movs	r3, #16
 800134a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001354:	2360      	movs	r3, #96	@ 0x60
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2302      	movs	r3, #2
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800135c:	2301      	movs	r3, #1
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001364:	2324      	movs	r3, #36	@ 0x24
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fce5 	bl	8003d48 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001384:	f000 f83a 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2303      	movs	r3, #3
 800138e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f8ad 	bl	8004500 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013ac:	f000 f826 	bl	80013fc <Error_Handler>
  }
}
 80013b0:	bf00      	nop
 80013b2:	3758      	adds	r7, #88	@ 0x58
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_UART_RxCpltCallback+0x38>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10d      	bne.n	80013e6 <HAL_UART_RxCpltCallback+0x2e>
        USART_Receive_CmdVel(huart, &cmd_vel_data);
 80013ca:	490a      	ldr	r1, [pc, #40]	@ (80013f4 <HAL_UART_RxCpltCallback+0x3c>)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fe09 	bl	8000fe4 <USART_Receive_CmdVel>
        HAL_UART_Receive_IT(huart, &rx_data, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <HAL_UART_RxCpltCallback+0x40>)
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f005 fb7a 	bl	8006ad0 <HAL_UART_Receive_IT>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013dc:	2120      	movs	r1, #32
 80013de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e2:	f001 fa8d 	bl	8002900 <HAL_GPIO_TogglePin>

    }
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40004400 	.word	0x40004400
 80013f4:	20000490 	.word	0x20000490
 80013f8:	200004a8 	.word	0x200004a8

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <motor_update>:
}



void motor_update(motor_st *motor_data)
{
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    uint16_t scaled_duty_cycle;
    uint16_t arr_value = __HAL_TIM_GET_AUTORELOAD(motor_data->pwm_timer);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	81bb      	strh	r3, [r7, #12]

    // Check if the motor is enabled
    if (motor_data->duty_cycle >= 0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f7ff fb6c 	bl	8000b04 <__aeabi_dcmpge>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <motor_update+0x42>
    {
        motor_enable(motor_data);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f91a 	bl	800166c <motor_enable>
        HAL_GPIO_WritePin(motor_data->dir_port, motor_data->dir_pin, GPIO_PIN_SET);    }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	889b      	ldrh	r3, [r3, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f001 fa44 	bl	80028d0 <HAL_GPIO_WritePin>
 8001448:	e01b      	b.n	8001482 <motor_update+0x7a>
    else if (motor_data->duty_cycle < 0)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f7ff fb40 	bl	8000adc <__aeabi_dcmplt>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <motor_update+0x72>
    {
        HAL_GPIO_WritePin(motor_data->dir_port, motor_data->dir_pin, GPIO_PIN_RESET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	f001 fa2f 	bl	80028d0 <HAL_GPIO_WritePin>
        motor_enable(motor_data);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f8fa 	bl	800166c <motor_enable>
 8001478:	e003      	b.n	8001482 <motor_update+0x7a>
    }
    else
    {
        motor_disable(motor_data);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f904 	bl	8001688 <motor_disable>
        return;
 8001480:	e02d      	b.n	80014de <motor_update+0xd6>
    }

    // Scale the duty cycle based on the motor's duty cycle
    scaled_duty_cycle = (uint16_t)((fabs(motor_data->duty_cycle) / 100.0f) * arr_value);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001488:	4614      	mov	r4, r2
 800148a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <motor_update+0xdc>)
 8001494:	4620      	mov	r0, r4
 8001496:	4629      	mov	r1, r5
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	89bb      	ldrh	r3, [r7, #12]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f83c 	bl	8000524 <__aeabi_i2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f8a0 	bl	80005f8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb72 	bl	8000ba8 <__aeabi_d2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	81fb      	strh	r3, [r7, #14]
    if (scaled_duty_cycle > arr_value)
 80014c8:	89fa      	ldrh	r2, [r7, #14]
 80014ca:	89bb      	ldrh	r3, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d901      	bls.n	80014d4 <motor_update+0xcc>
    {
        scaled_duty_cycle = arr_value;
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	81fb      	strh	r3, [r7, #14]
    }

    __HAL_TIM_SET_COMPARE(motor_data->pwm_timer, TIM_CHANNEL_1, scaled_duty_cycle);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
    //char duty_cycle_str[50];
    //int len = snprintf(duty_cycle_str, sizeof(duty_cycle_str), "Duty Cycle: %.2f\n", motor_data->duty_cycle);
    //HAL_UART_Transmit(&huart2, (uint8_t *)duty_cycle_str, len, HAL_MAX_DELAY);
}
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	40590000 	.word	0x40590000

080014e8 <calculate_motor_duty_cycles>:



void calculate_motor_duty_cycles(float linear_x, float linear_y, float omega, motor_st *motor1, motor_st *motor2, motor_st *motor3) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
 80014fe:	603a      	str	r2, [r7, #0]

    float duty_cycle_1 = (linear_x * cosf(MOTOR1_ANGLE) + linear_y * sinf(MOTOR1_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 8001500:	edd7 7a05 	vldr	s15, [r7, #20]
 8001504:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800164c <calculate_motor_duty_cycles+0x164>
 8001508:	ee27 7a87 	vmul.f32	s14, s15, s14
 800150c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001510:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001650 <calculate_motor_duty_cycles+0x168>
 8001514:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001654 <calculate_motor_duty_cycles+0x16c>
 8001524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float duty_cycle_2 = (linear_x * cosf(MOTOR2_ANGLE) + linear_y * sinf(MOTOR2_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 8001538:	edd7 7a05 	vldr	s15, [r7, #20]
 800153c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800165c <calculate_motor_duty_cycles+0x174>
 8001540:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001544:	edd7 7a04 	vldr	s15, [r7, #16]
 8001548:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001660 <calculate_motor_duty_cycles+0x178>
 800154c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001554:	edd7 7a03 	vldr	s15, [r7, #12]
 8001558:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001654 <calculate_motor_duty_cycles+0x16c>
 800155c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_cycle_3 = (linear_x * cosf(MOTOR3_ANGLE) + linear_y * sinf(MOTOR3_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 8001570:	edd7 7a04 	vldr	s15, [r7, #16]
 8001574:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001664 <calculate_motor_duty_cycles+0x17c>
 8001578:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001654 <calculate_motor_duty_cycles+0x16c>
 800158c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	edc7 7a07 	vstr	s15, [r7, #28]

    duty_cycle_1 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_1));
 80015a0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 80015a4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80015a8:	f00f fdfb 	bl	80111a2 <fminf>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001668 <calculate_motor_duty_cycles+0x180>
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f00f fdd6 	bl	8011168 <fmaxf>
 80015bc:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    duty_cycle_2 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_2));
 80015c0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 80015c4:	ed97 0a08 	vldr	s0, [r7, #32]
 80015c8:	f00f fdeb 	bl	80111a2 <fminf>
 80015cc:	eef0 7a40 	vmov.f32	s15, s0
 80015d0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001668 <calculate_motor_duty_cycles+0x180>
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	f00f fdc6 	bl	8011168 <fmaxf>
 80015dc:	ed87 0a08 	vstr	s0, [r7, #32]
    duty_cycle_3 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_3));
 80015e0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001658 <calculate_motor_duty_cycles+0x170>
 80015e4:	ed97 0a07 	vldr	s0, [r7, #28]
 80015e8:	f00f fddb 	bl	80111a2 <fminf>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001668 <calculate_motor_duty_cycles+0x180>
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f00f fdb6 	bl	8011168 <fmaxf>
 80015fc:	ed87 0a07 	vstr	s0, [r7, #28]

    motor1->duty_cycle = duty_cycle_1;
 8001600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor2->duty_cycle = duty_cycle_2;
 8001610:	6a38      	ldr	r0, [r7, #32]
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor3->duty_cycle = duty_cycle_3;
 8001620:	69f8      	ldr	r0, [r7, #28]
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    motor_update(motor1);
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f7ff fee9 	bl	8001408 <motor_update>
    motor_update(motor2);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fee6 	bl	8001408 <motor_update>
    motor_update(motor3);
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff fee3 	bl	8001408 <motor_update>
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	befffffd 	.word	0xbefffffd
 8001650:	bf5db3d8 	.word	0xbf5db3d8
 8001654:	3d4ccccd 	.word	0x3d4ccccd
 8001658:	42c80000 	.word	0x42c80000
 800165c:	bf000001 	.word	0xbf000001
 8001660:	3f5db3d7 	.word	0x3f5db3d7
 8001664:	00000000 	.word	0x00000000
 8001668:	c2c80000 	.word	0xc2c80000

0800166c <motor_enable>:


void motor_enable(motor_st *motor_data){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(motor_data->pwm_timer, TIM_CHANNEL_1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f8a0 	bl	80057c0 <HAL_TIM_PWM_Start>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <motor_disable>:


void motor_disable(motor_st *motor_data){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(motor_data->pwm_timer, TIM_CHANNEL_1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 f998 	bl	80059cc <HAL_TIM_PWM_Stop>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <MX_SPI2_Init+0x78>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016dc:	2230      	movs	r2, #48	@ 0x30
 80016de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_SPI2_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_SPI2_Init+0x74>)
 8001700:	2208      	movs	r2, #8
 8001702:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_SPI2_Init+0x74>)
 8001706:	f003 fddb 	bl	80052c0 <HAL_SPI_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001710:	f7ff fe74 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200004ac 	.word	0x200004ac
 800171c:	40003800 	.word	0x40003800

08001720 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <HAL_SPI_MspInit+0xc4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d14c      	bne.n	80017dc <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001742:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174c:	6593      	str	r3, [r2, #88]	@ 0x58
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_SPI_MspInit+0xc8>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800178a:	2304      	movs	r3, #4
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179a:	2305      	movs	r3, #5
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <HAL_SPI_MspInit+0xcc>)
 80017a6:	f000 fee9 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017bc:	2305      	movs	r3, #5
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480a      	ldr	r0, [pc, #40]	@ (80017f0 <HAL_SPI_MspInit+0xd0>)
 80017c8:	f000 fed8 	bl	800257c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2024      	movs	r0, #36	@ 0x24
 80017d2:	f000 fe1e 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017d6:	2024      	movs	r0, #36	@ 0x24
 80017d8:	f000 fe37 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40003800 	.word	0x40003800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000400 	.word	0x48000400

080017f4 <SPI_init>:
    .enc_2 = {.cs_pin = CS_ENC_2_Pin, .cs_port = CS_ENC_2_GPIO_Port}, // Encoder 2
    .enc_3 = {.cs_pin = CS_ENC_3_Pin, .cs_port = CS_ENC_3_GPIO_Port} // Encoder 3
};


void SPI_init(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(encoders.enc_1.cs_port, encoders.enc_1.cs_pin, GPIO_PIN_SET);
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <SPI_init+0x38>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <SPI_init+0x38>)
 80017fe:	8891      	ldrh	r1, [r2, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f001 f864 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_2.cs_port, encoders.enc_2.cs_pin, GPIO_PIN_SET);
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <SPI_init+0x38>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4a07      	ldr	r2, [pc, #28]	@ (800182c <SPI_init+0x38>)
 800180e:	8a11      	ldrh	r1, [r2, #16]
 8001810:	2201      	movs	r2, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f85c 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_3.cs_port, encoders.enc_3.cs_pin, GPIO_PIN_SET);
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <SPI_init+0x38>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a03      	ldr	r2, [pc, #12]	@ (800182c <SPI_init+0x38>)
 800181e:	8b91      	ldrh	r1, [r2, #28]
 8001820:	2201      	movs	r2, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f854 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000078 	.word	0x20000078

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ce:	f000 fc81 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80018de:	f004 f90b 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000514 	.word	0x20000514

080018ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018f2:	f004 f901 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000514 	.word	0x20000514

08001900 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001906:	f004 f8f7 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000514 	.word	0x20000514

08001914 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <TIM1_CC_IRQHandler+0x10>)
 800191a:	f004 f8ed 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000514 	.word	0x20000514

08001928 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <SPI2_IRQHandler+0x10>)
 800192e:	f003 fd6b 	bl	8005408 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200004ac 	.word	0x200004ac

0800193c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <USART2_IRQHandler+0x10>)
 8001942:	f005 f911 	bl	8006b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200005f8 	.word	0x200005f8

08001950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <OTG_FS_IRQHandler+0x10>)
 8001956:	f001 f92b 	bl	8002bb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20001b64 	.word	0x20001b64

08001964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800197e:	f00b fc6f 	bl	800d260 <__errno>
 8001982:	4603      	mov	r3, r0
 8001984:	2216      	movs	r2, #22
 8001986:	601a      	str	r2, [r3, #0]
  return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_exit>:

void _exit (int status)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffe7 	bl	8001974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a6:	bf00      	nop
 80019a8:	e7fd      	b.n	80019a6 <_exit+0x12>

080019aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e00a      	b.n	80019d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019bc:	f3af 8000 	nop.w
 80019c0:	4601      	mov	r1, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf0      	blt.n	80019bc <_read+0x12>
  }

  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e009      	b.n	8001a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbf1      	blt.n	80019f6 <_write+0x12>
  }
  return len;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_close>:

int _close(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a44:	605a      	str	r2, [r3, #4]
  return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_isatty>:

int _isatty(int file)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f00b fbd4 	bl	800d260 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20018000 	.word	0x20018000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	20000510 	.word	0x20000510
 8001aec:	200023b8 	.word	0x200023b8

08001af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <timer_init>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void timer_init(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  MX_TIM1_Init();
 8001b18:	f000 f816 	bl	8001b48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b1c:	f000 f8a4 	bl	8001c68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b20:	f000 f8fc 	bl	8001d1c <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <timer_init+0x28>)
 8001b26:	f003 fd83 	bl	8005630 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <timer_init+0x2c>)
 8001b2c:	f003 fd80 	bl	8005630 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b30:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <timer_init+0x30>)
 8001b32:	f003 fd7d 	bl	8005630 <HAL_TIM_Base_Start_IT>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000514 	.word	0x20000514
 8001b40:	20000560 	.word	0x20000560
 8001b44:	200005ac 	.word	0x200005ac

08001b48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b096      	sub	sp, #88	@ 0x58
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	222c      	movs	r2, #44	@ 0x2c
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00b fb0a 	bl	800d18e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b7c:	4a39      	ldr	r2, [pc, #228]	@ (8001c64 <MX_TIM1_Init+0x11c>)
 8001b7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b80:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b82:	2247      	movs	r2, #71	@ 0x47
 8001b84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b8c:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b9a:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001ba2:	2280      	movs	r2, #128	@ 0x80
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ba6:	482e      	ldr	r0, [pc, #184]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001ba8:	f003 fdb2 	bl	8005710 <HAL_TIM_PWM_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f7ff fc23 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4825      	ldr	r0, [pc, #148]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001bca:	f004 fd85 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bd4:	f7ff fc12 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	@ 0x60
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4818      	ldr	r0, [pc, #96]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001bfe:	f004 f883 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c08:	f7ff fbf8 	bl	80013fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001c42:	f004 fdd1 	bl	80067e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001c4c:	f7ff fbd6 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c50:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <MX_TIM1_Init+0x118>)
 8001c52:	f000 f923 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001c56:	bf00      	nop
 8001c58:	3758      	adds	r7, #88	@ 0x58
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000514 	.word	0x20000514
 8001c64:	40012c00 	.word	0x40012c00

08001c68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c8e:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <MX_TIM3_Init+0xb0>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c94:	2247      	movs	r2, #71	@ 0x47
 8001c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cb2:	4818      	ldr	r0, [pc, #96]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cb4:	f003 fd2c 	bl	8005710 <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cbe:	f7ff fb9d 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4810      	ldr	r0, [pc, #64]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cd2:	f004 fd01 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cdc:	f7ff fb8e 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce0:	2360      	movs	r3, #96	@ 0x60
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cf8:	f004 f806 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d02:	f7ff fb7b 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d06:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001d08:	f000 f8c8 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	@ 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000560 	.word	0x20000560
 8001d18:	40000400 	.word	0x40000400

08001d1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	615a      	str	r2, [r3, #20]
 8001d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <MX_TIM4_Init+0xb0>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 77;
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d48:	224d      	movs	r2, #77	@ 0x4d
 8001d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d66:	4818      	ldr	r0, [pc, #96]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d68:	f003 fcd2 	bl	8005710 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d72:	f7ff fb43 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001d86:	f004 fca7 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d90:	f7ff fb34 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	@ 0x60
 8001d96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4807      	ldr	r0, [pc, #28]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001dac:	f003 ffac 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001db6:	f7ff fb21 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dba:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <MX_TIM4_Init+0xac>)
 8001dbc:	f000 f86e 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200005ac 	.word	0x200005ac
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xbc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12c      	bne.n	8001e3c <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de6:	4a2a      	ldr	r2, [pc, #168]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001de8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2018      	movs	r0, #24
 8001e00:	f000 fb07 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e04:	2018      	movs	r0, #24
 8001e06:	f000 fb20 	bl	800244a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2019      	movs	r0, #25
 8001e10:	f000 faff 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e14:	2019      	movs	r0, #25
 8001e16:	f000 fb18 	bl	800244a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201a      	movs	r0, #26
 8001e20:	f000 faf7 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e24:	201a      	movs	r0, #26
 8001e26:	f000 fb10 	bl	800244a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	201b      	movs	r0, #27
 8001e30:	f000 faef 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e34:	201b      	movs	r0, #27
 8001e36:	f000 fb08 	bl	800244a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e3a:	e022      	b.n	8001e82 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <HAL_TIM_PWM_MspInit+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10c      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
}
 8001e5e:	e010      	b.n	8001e82 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM4)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <HAL_TIM_PWM_MspInit+0xc8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10b      	bne.n	8001e82 <HAL_TIM_PWM_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800

08001e9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	@ 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a34      	ldr	r2, [pc, #208]	@ (8001f8c <HAL_TIM_MspPostInit+0xf0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11e      	bne.n	8001efc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a33      	ldr	r2, [pc, #204]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin;
 8001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef6:	f000 fb41 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001efa:	e043      	b.n	8001f84 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_TIM_MspPostInit+0xf8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11d      	bne.n	8001f42 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f12:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR2_PWM_Pin;
 8001f1e:	2340      	movs	r3, #64	@ 0x40
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3c:	f000 fb1e 	bl	800257c <HAL_GPIO_Init>
}
 8001f40:	e020      	b.n	8001f84 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_TIM_MspPostInit+0xfc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f50:	4a0f      	ldr	r2, [pc, #60]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f58:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_TIM_MspPostInit+0xf4>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR3_PWM_Pin;
 8001f64:	2340      	movs	r3, #64	@ 0x40
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f74:	2302      	movs	r3, #2
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	@ (8001f9c <HAL_TIM_MspPostInit+0x100>)
 8001f80:	f000 fafc 	bl	800257c <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fa6:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <MX_USART2_UART_Init+0x5c>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <MX_USART2_UART_Init+0x58>)
 8001fe4:	f004 fc9c 	bl	8006920 <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fee:	f7ff fa05 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200005f8 	.word	0x200005f8
 8001ffc:	40004400 	.word	0x40004400

08002000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0ac      	sub	sp, #176	@ 0xb0
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2288      	movs	r2, #136	@ 0x88
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f00b f8b4 	bl	800d18e <memset>
  if(uartHandle->Instance==USART2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a25      	ldr	r2, [pc, #148]	@ (80020c0 <HAL_UART_MspInit+0xc0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d143      	bne.n	80020b8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002030:	2302      	movs	r3, #2
 8002032:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002034:	2300      	movs	r3, #0
 8002036:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fc83 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002048:	f7ff f9d8 	bl	80013fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 8002052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002056:	6593      	str	r3, [r2, #88]	@ 0x58
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_UART_MspInit+0xc4>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207c:	230c      	movs	r3, #12
 800207e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002094:	2307      	movs	r3, #7
 8002096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a4:	f000 fa6a 	bl	800257c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	2026      	movs	r0, #38	@ 0x26
 80020ae:	f000 f9b0 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b2:	2026      	movs	r0, #38	@ 0x26
 80020b4:	f000 f9c9 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020b8:	bf00      	nop
 80020ba:	37b0      	adds	r7, #176	@ 0xb0
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40004400 	.word	0x40004400
 80020c4:	40021000 	.word	0x40021000

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff fd10 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f00b f8b9 	bl	800d26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7ff f8bb 	bl	8001274 <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 800210c:	080117f4 	.word	0x080117f4
  ldr r2, =_sbss
 8002110:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002114:	200023b4 	.word	0x200023b4

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>
	...

0800211c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_Init+0x3c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_Init+0x3c>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002132:	2003      	movs	r0, #3
 8002134:	f000 f962 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f80f 	bl	800215c <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	e001      	b.n	800214e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800214a:	f7ff fb71 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214e:	79fb      	ldrb	r3, [r7, #7]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_InitTick+0x6c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_InitTick+0x70>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_InitTick+0x6c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f96d 	bl	8002466 <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d809      	bhi.n	80021ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a0:	f000 f937 	bl	8002412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a4:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <HAL_InitTick+0x74>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e007      	b.n	80021bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e004      	b.n	80021bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e001      	b.n	80021bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000a4 	.word	0x200000a4
 80021cc:	2000009c 	.word	0x2000009c
 80021d0:	200000a0 	.word	0x200000a0

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	200000a4 	.word	0x200000a4
 80021f8:	20000680 	.word	0x20000680

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000680 	.word	0x20000680

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200000a4 	.word	0x200000a4

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	@ (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	@ (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff3e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff31 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d008      	beq.n	80024a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e022      	b.n	80024ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 020e 	bic.w	r2, r2, #14
 80024b6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	f003 021c 	and.w	r2, r3, #28
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d005      	beq.n	800251e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e029      	b.n	8002572 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020e 	bic.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f003 021c 	and.w	r2, r3, #28
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f202 	lsl.w	r2, r1, r2
 8002550:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
    }
  }
  return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e17f      	b.n	800288c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8171 	beq.w	8002886 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d118      	bne.n	800265c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002630:	2201      	movs	r2, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	f003 0201 	and.w	r2, r3, #1
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b03      	cmp	r3, #3
 8002666:	d017      	beq.n	8002698 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80ac 	beq.w	8002886 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b5f      	ldr	r3, [pc, #380]	@ (80028ac <HAL_GPIO_Init+0x330>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002732:	4a5e      	ldr	r2, [pc, #376]	@ (80028ac <HAL_GPIO_Init+0x330>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6613      	str	r3, [r2, #96]	@ 0x60
 800273a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ac <HAL_GPIO_Init+0x330>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002746:	4a5a      	ldr	r2, [pc, #360]	@ (80028b0 <HAL_GPIO_Init+0x334>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x242>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	@ (80028b4 <HAL_GPIO_Init+0x338>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x23e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4e      	ldr	r2, [pc, #312]	@ (80028b8 <HAL_GPIO_Init+0x33c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x23a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4d      	ldr	r2, [pc, #308]	@ (80028bc <HAL_GPIO_Init+0x340>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x236>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4c      	ldr	r2, [pc, #304]	@ (80028c0 <HAL_GPIO_Init+0x344>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x232>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4b      	ldr	r2, [pc, #300]	@ (80028c4 <HAL_GPIO_Init+0x348>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x22e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4a      	ldr	r2, [pc, #296]	@ (80028c8 <HAL_GPIO_Init+0x34c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x22a>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027be:	2300      	movs	r3, #0
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d0:	4937      	ldr	r1, [pc, #220]	@ (80028b0 <HAL_GPIO_Init+0x334>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_GPIO_Init+0x350>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002802:	4a32      	ldr	r2, [pc, #200]	@ (80028cc <HAL_GPIO_Init+0x350>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002808:	4b30      	ldr	r3, [pc, #192]	@ (80028cc <HAL_GPIO_Init+0x350>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800282c:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <HAL_GPIO_Init+0x350>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002832:	4b26      	ldr	r3, [pc, #152]	@ (80028cc <HAL_GPIO_Init+0x350>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002856:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_GPIO_Init+0x350>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_GPIO_Init+0x350>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <HAL_GPIO_Init+0x350>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f ae78 	bne.w	800258c <HAL_GPIO_Init+0x10>
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000
 80028b4:	48000400 	.word	0x48000400
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000c00 	.word	0x48000c00
 80028c0:	48001000 	.word	0x48001000
 80028c4:	48001400 	.word	0x48001400
 80028c8:	48001800 	.word	0x48001800
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43d9      	mvns	r1, r3
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	400b      	ands	r3, r1
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e101      	b.n	8002b4a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f008 ffe2 	bl	800b924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2203      	movs	r2, #3
 8002964:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f005 fc99 	bl	80082aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7c1a      	ldrb	r2, [r3, #16]
 8002980:	f88d 2000 	strb.w	r2, [sp]
 8002984:	3304      	adds	r3, #4
 8002986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002988:	f005 fbb4 	bl	80080f4 <USB_CoreInit>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0d5      	b.n	8002b4a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 fc91 	bl	80082cc <USB_SetCurrentMode>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0c6      	b.n	8002b4a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e04a      	b.n	8002a58 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3315      	adds	r3, #21
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3314      	adds	r3, #20
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	b298      	uxth	r0, r3
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	332e      	adds	r3, #46	@ 0x2e
 80029fe:	4602      	mov	r2, r0
 8002a00:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3318      	adds	r3, #24
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	331c      	adds	r3, #28
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3324      	adds	r3, #36	@ 0x24
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3301      	adds	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	791b      	ldrb	r3, [r3, #4]
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d3af      	bcc.n	80029c2 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e044      	b.n	8002af2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3b5      	bcc.n	8002a68 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7c1a      	ldrb	r2, [r3, #16]
 8002b04:	f88d 2000 	strb.w	r2, [sp]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	f005 fc2a 	bl	8008364 <USB_DevInit>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e013      	b.n	8002b4a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7b1b      	ldrb	r3, [r3, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f001 f86d 	bl	8003c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f006 fbe1 	bl	800930a <USB_DevDisconnect>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_PCD_Start+0x1c>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e01c      	b.n	8002ba8 <HAL_PCD_Start+0x56>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7b5b      	ldrb	r3, [r3, #13]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f005 fb7a 	bl	8008288 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f006 fb95 	bl	80092c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08d      	sub	sp, #52	@ 0x34
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f006 fc53 	bl	8009472 <USB_GetMode>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8481 	bne.w	80034d6 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f006 fbb7 	bl	800934c <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8477 	beq.w	80034d4 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f006 fba4 	bl	800934c <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f002 0202 	and.w	r2, r2, #2
 8002c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f006 fb92 	bl	800934c <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d161      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0210 	bic.w	r2, r2, #16
 8002c40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	0c5b      	lsrs	r3, r3, #17
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d124      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d035      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6a38      	ldr	r0, [r7, #32]
 8002c8e:	f006 f9c9 	bl	8009024 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9e:	441a      	add	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb0:	441a      	add	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	615a      	str	r2, [r3, #20]
 8002cb6:	e016      	b.n	8002ce6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	0c5b      	lsrs	r3, r3, #17
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d110      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cca:	2208      	movs	r2, #8
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6a38      	ldr	r0, [r7, #32]
 8002cd0:	f006 f9a8 	bl	8009024 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ce0:	441a      	add	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0210 	orr.w	r2, r2, #16
 8002cf4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f006 fb26 	bl	800934c <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d0a:	f040 80a7 	bne.w	8002e5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f006 fb2b 	bl	8009372 <USB_ReadDevAllOutEpInterrupt>
 8002d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d1e:	e099      	b.n	8002e54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 808e 	beq.w	8002e48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f006 fb4f 	bl	80093da <USB_ReadDevOutEPInterrupt>
 8002d3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	2301      	movs	r3, #1
 8002d58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fe81 	bl	8003a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 febd 	bl	8003b00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2310      	movs	r3, #16
 8002da0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d030      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d109      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	78db      	ldrb	r3, [r3, #3]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d108      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f008 fee8 	bl	800bbcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	2320      	movs	r3, #32
 8002e28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f47f af62 	bne.w	8002d20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fa73 	bl	800934c <USB_ReadInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e70:	f040 80a4 	bne.w	8002fbc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f006 fa94 	bl	80093a6 <USB_ReadDevAllInEpInterrupt>
 8002e7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e84:	e096      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 808b 	beq.w	8002fa8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f006 faba 	bl	8009416 <USB_ReadDevInEPInterrupt>
 8002ea2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d020      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ece:	4013      	ands	r3, r2
 8002ed0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f008 fdd9 	bl	800baa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f06:	461a      	mov	r2, r3
 8002f08:	2308      	movs	r3, #8
 8002f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f22:	461a      	mov	r2, r3
 8002f24:	2310      	movs	r3, #16
 8002f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2340      	movs	r3, #64	@ 0x40
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d023      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f50:	6a38      	ldr	r0, [r7, #32]
 8002f52:	f005 fb4f 	bl	80085f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3310      	adds	r3, #16
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	78db      	ldrb	r3, [r3, #3]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f008 fe36 	bl	800bbf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f90:	461a      	mov	r2, r3
 8002f92:	2302      	movs	r3, #2
 8002f94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fcd6 	bl	8003954 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	3301      	adds	r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f47f af65 	bne.w	8002e86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f006 f9c3 	bl	800934c <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fd0:	d122      	bne.n	8003018 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f009 f86a 	bl	800c0d4 <HAL_PCDEx_LPM_Callback>
 8003000:	e002      	b.n	8003008 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f008 fdba 	bl	800bb7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f006 f995 	bl	800934c <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800302c:	d112      	bne.n	8003054 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f008 fd76 	bl	800bb30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f006 f977 	bl	800934c <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003068:	d121      	bne.n	80030ae <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003078:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800309e:	2101      	movs	r1, #1
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f009 f817 	bl	800c0d4 <HAL_PCDEx_LPM_Callback>
 80030a6:	e002      	b.n	80030ae <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f008 fd41 	bl	800bb30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f006 f94a 	bl	800934c <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	f040 80b6 	bne.w	8003232 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2110      	movs	r1, #16
 80030e0:	4618      	mov	r0, r3
 80030e2:	f005 fa87 	bl	80085f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ea:	e046      	b.n	800317a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	440a      	add	r2, r1
 8003116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800311a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800311e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003132:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800314e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800316e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003172:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	3301      	adds	r3, #1
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	791b      	ldrb	r3, [r3, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	4293      	cmp	r3, r2
 8003184:	d3b2      	bcc.n	80030ec <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003194:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003198:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7bdb      	ldrb	r3, [r3, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b2:	f043 030b 	orr.w	r3, r3, #11
 80031b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c8:	f043 030b 	orr.w	r3, r3, #11
 80031cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ce:	e015      	b.n	80031fc <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031e2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80031e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031f6:	f043 030b 	orr.w	r3, r3, #11
 80031fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800320a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800320e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f006 f959 	bl	80094d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f006 f888 	bl	800934c <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003246:	d123      	bne.n	8003290 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f006 f91e 	bl	800948e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f005 fa45 	bl	80086e6 <USB_GetDevSpeed>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681c      	ldr	r4, [r3, #0]
 8003268:	f001 fad6 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 800326c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	4620      	mov	r0, r4
 8003276:	f004 ff6b 	bl	8008150 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f008 fc39 	bl	800baf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f006 f859 	bl	800934c <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10a      	bne.n	80032ba <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f008 fc16 	bl	800bad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f002 0208 	and.w	r2, r2, #8
 80032b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f006 f844 	bl	800934c <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ca:	2b80      	cmp	r3, #128	@ 0x80
 80032cc:	d123      	bne.n	8003316 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032da:	2301      	movs	r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032de:	e014      	b.n	800330a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 faf7 	bl	80038f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	3301      	adds	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	4293      	cmp	r3, r2
 8003314:	d3e4      	bcc.n	80032e0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f006 f816 	bl	800934c <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332a:	d13c      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800332c:	2301      	movs	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	e02b      	b.n	800338a <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3318      	adds	r3, #24
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d115      	bne.n	8003384 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003358:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800335a:	2b00      	cmp	r3, #0
 800335c:	da12      	bge.n	8003384 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3317      	adds	r3, #23
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fab7 	bl	80038f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	3301      	adds	r3, #1
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	791b      	ldrb	r3, [r3, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	4293      	cmp	r3, r2
 8003394:	d3cd      	bcc.n	8003332 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f005 ffce 	bl	800934c <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ba:	d156      	bne.n	800346a <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c0:	e045      	b.n	800344e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d12e      	bne.n	8003448 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da2b      	bge.n	8003448 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003400:	429a      	cmp	r2, r3
 8003402:	d121      	bne.n	8003448 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003444:	6053      	str	r3, [r2, #4]
            break;
 8003446:	e008      	b.n	800345a <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	4293      	cmp	r3, r2
 8003458:	d3b3      	bcc.n	80033c2 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 ff6c 	bl	800934c <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347e:	d10a      	bne.n	8003496 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f008 fbc7 	bl	800bc14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f005 ff56 	bl	800934c <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d115      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f008 fbb7 	bl	800bc30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e000      	b.n	80034d6 <HAL_PCD_IRQHandler+0x926>
      return;
 80034d4:	bf00      	nop
    }
  }
}
 80034d6:	3734      	adds	r7, #52	@ 0x34
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_SetAddress+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e012      	b.n	800351c <HAL_PCD_SetAddress+0x40>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f005 feb5 	bl	800927c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	70fb      	strb	r3, [r7, #3]
 8003536:	460b      	mov	r3, r1
 8003538:	803b      	strh	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0f      	bge.n	800356a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3310      	adds	r3, #16
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	e00f      	b.n	800358a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003596:	883b      	ldrh	r3, [r7, #0]
 8003598:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	78ba      	ldrb	r2, [r7, #2]
 80035a4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035b8:	78bb      	ldrb	r3, [r7, #2]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d102      	bne.n	80035c4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_EP_Open+0xae>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e00e      	b.n	80035f0 <HAL_PCD_EP_Open+0xcc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 f89f 	bl	8008724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035ee:	7afb      	ldrb	r3, [r7, #11]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0f      	bge.n	800362c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3310      	adds	r3, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	705a      	strb	r2, [r3, #1]
 800362a:	e00f      	b.n	800364c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_PCD_EP_Close+0x6e>
 8003662:	2302      	movs	r3, #2
 8003664:	e00e      	b.n	8003684 <HAL_PCD_EP_Close+0x8c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	f005 f8dd 	bl	8008834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369c:	7afb      	ldrb	r3, [r7, #11]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2200      	movs	r2, #0
 80036cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f005 f983 	bl	80089ec <USB_EPStartXfer>

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003730:	7afb      	ldrb	r3, [r7, #11]
 8003732:	f003 020f 	and.w	r2, r3, #15
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	3310      	adds	r3, #16
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	3304      	adds	r3, #4
 8003746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	b2da      	uxtb	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	4618      	mov	r0, r3
 8003774:	f005 f93a 	bl	80089ec <USB_EPStartXfer>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	7912      	ldrb	r2, [r2, #4]
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04e      	b.n	800383e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0f      	bge.n	80037c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3310      	adds	r3, #16
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	705a      	strb	r2, [r3, #1]
 80037c6:	e00d      	b.n	80037e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_EP_SetStall+0x82>
 8003800:	2302      	movs	r3, #2
 8003802:	e01c      	b.n	800383e <HAL_PCD_EP_SetStall+0xbc>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f005 fc5e 	bl	80090d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f005 fe50 	bl	80094d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	7912      	ldrb	r2, [r2, #4]
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e042      	b.n	80038ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0f      	bge.n	800388c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	3310      	adds	r3, #16
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
 800388a:	e00f      	b.n	80038ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_PCD_EP_ClrStall+0x86>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e00e      	b.n	80038ea <HAL_PCD_EP_ClrStall+0xa4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 fc68 	bl	80091b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	da0c      	bge.n	8003920 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	3310      	adds	r3, #16
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	3304      	adds	r3, #4
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e00c      	b.n	800393a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fa8b 	bl	8008e5c <USB_EPStopXfer>
 8003946:	4603      	mov	r3, r0
 8003948:	72fb      	strb	r3, [r7, #11]

  return ret;
 800394a:	7afb      	ldrb	r3, [r7, #11]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3310      	adds	r3, #16
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d901      	bls.n	800398c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e067      	b.n	8003a5c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d902      	bls.n	80039a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3303      	adds	r3, #3
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039b0:	e026      	b.n	8003a00 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d902      	bls.n	80039ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3303      	adds	r3, #3
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68d9      	ldr	r1, [r3, #12]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f005 fae4 	bl	8008fb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	441a      	add	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d809      	bhi.n	8003a2a <PCD_WriteEmptyTxFifo+0xd6>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d203      	bcs.n	8003a2a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1c3      	bne.n	80039b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d811      	bhi.n	8003a5a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	6939      	ldr	r1, [r7, #16]
 8003a52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a56:	4013      	ands	r3, r2
 8003a58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	333c      	adds	r3, #60	@ 0x3c
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <PCD_EP_OutXfrComplete_int+0x98>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d124      	bne.n	8003ae4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab6:	6093      	str	r3, [r2, #8]
 8003ab8:	e01a      	b.n	8003af0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f007 ffc5 	bl	800ba6c <HAL_PCD_DataOutStageCallback>
 8003ae2:	e005      	b.n	8003af0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f007 ffbe 	bl	800ba6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	4f54310a 	.word	0x4f54310a

08003b00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	333c      	adds	r3, #60	@ 0x3c
 8003b18:	3304      	adds	r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <PCD_EP_OutSetupPacket_int+0x64>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d90e      	bls.n	8003b54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f007 ff77 	bl	800ba48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	4f54300a 	.word	0x4f54300a

08003b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
 8003b74:	4613      	mov	r3, r2
 8003b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b86:	883b      	ldrh	r3, [r7, #0]
 8003b88:	0419      	lsls	r1, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b94:	e028      	b.n	8003be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e00d      	b.n	8003bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	3340      	adds	r3, #64	@ 0x40
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3ec      	bcc.n	8003baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	0418      	lsls	r0, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4302      	orrs	r2, r0
 8003be0:	3340      	adds	r3, #64	@ 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	f043 0303 	orr.w	r3, r3, #3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c8a:	d130      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8c:	4b23      	ldr	r3, [pc, #140]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d038      	beq.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9a:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2232      	movs	r2, #50	@ 0x32
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0c9b      	lsrs	r3, r3, #18
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc0:	e002      	b.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc8:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd4:	d102      	bne.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f2      	bne.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce8:	d110      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e00f      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cee:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfa:	d007      	beq.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d04:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	2000009c 	.word	0x2000009c
 8003d24:	431bde83 	.word	0x431bde83

08003d28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003d2c:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a04      	ldr	r2, [pc, #16]	@ (8003d44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d36:	6053      	str	r3, [r2, #4]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40007000 	.word	0x40007000

08003d48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e3ca      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b97      	ldr	r3, [pc, #604]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	4b94      	ldr	r3, [pc, #592]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80e4 	beq.w	8003f44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4a>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	f040 808b 	bne.w	8003ea0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 8087 	bne.w	8003ea0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d92:	4b89      	ldr	r3, [pc, #548]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e3a2      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	4b82      	ldr	r3, [pc, #520]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x7c>
 8003dba:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCC_OscConfig+0x88>
 8003dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d223      	bcs.n	8003e1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fd55 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e383      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de8:	4b73      	ldr	r3, [pc, #460]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a72      	ldr	r2, [pc, #456]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003dee:	f043 0308 	orr.w	r3, r3, #8
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b70      	ldr	r3, [pc, #448]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	496d      	ldr	r1, [pc, #436]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e06:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	4968      	ldr	r1, [pc, #416]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
 8003e1a:	e025      	b.n	8003e68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1c:	4b66      	ldr	r3, [pc, #408]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a65      	ldr	r2, [pc, #404]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e22:	f043 0308 	orr.w	r3, r3, #8
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4960      	ldr	r1, [pc, #384]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	495b      	ldr	r1, [pc, #364]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fd15 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e343      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e68:	f000 fc4a 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b52      	ldr	r3, [pc, #328]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4950      	ldr	r1, [pc, #320]	@ (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e88:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc4 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f965 	bl	800215c <HAL_InitTick>
 8003e92:	4603      	mov	r3, r0
 8003e94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d052      	beq.n	8003f42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	e327      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d032      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ea8:	4b43      	ldr	r3, [pc, #268]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a42      	ldr	r2, [pc, #264]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f9a2 	bl	80021fc <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ebc:	f7fe f99e 	bl	80021fc <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e310      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ece:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eda:	4b37      	ldr	r3, [pc, #220]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a36      	ldr	r2, [pc, #216]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b34      	ldr	r3, [pc, #208]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4931      	ldr	r1, [pc, #196]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	492c      	ldr	r1, [pc, #176]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	e01a      	b.n	8003f44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a29      	ldr	r2, [pc, #164]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe f96f 	bl	80021fc <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f22:	f7fe f96b 	bl	80021fc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e2dd      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f34:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x1da>
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d074      	beq.n	800403a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d005      	beq.n	8003f62 <HAL_RCC_OscConfig+0x21a>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d10e      	bne.n	8003f7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d064      	beq.n	8004038 <HAL_RCC_OscConfig+0x2f0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d160      	bne.n	8004038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e2ba      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x24a>
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e026      	b.n	8003fe0 <HAL_RCC_OscConfig+0x298>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x280>
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a05      	ldr	r2, [pc, #20]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a02      	ldr	r2, [pc, #8]	@ (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x298>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	08011350 	.word	0x08011350
 8003fc0:	2000009c 	.word	0x2000009c
 8003fc4:	200000a0 	.word	0x200000a0
 8003fc8:	4ba0      	ldr	r3, [pc, #640]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b9d      	ldr	r3, [pc, #628]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a9c      	ldr	r2, [pc, #624]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f908 	bl	80021fc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe f904 	bl	80021fc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e276      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004002:	4b92      	ldr	r3, [pc, #584]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2a8>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe f8f4 	bl	80021fc <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004018:	f7fe f8f0 	bl	80021fc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e262      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402a:	4b88      	ldr	r3, [pc, #544]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x2d0>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d060      	beq.n	8004108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d005      	beq.n	8004058 <HAL_RCC_OscConfig+0x310>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d119      	bne.n	8004086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d116      	bne.n	8004086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	4b7c      	ldr	r3, [pc, #496]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x328>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e23f      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b76      	ldr	r3, [pc, #472]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	4973      	ldr	r1, [pc, #460]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004084:	e040      	b.n	8004108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d023      	beq.n	80040d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408e:	4b6f      	ldr	r3, [pc, #444]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6e      	ldr	r2, [pc, #440]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fe f8af 	bl	80021fc <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a2:	f7fe f8ab 	bl	80021fc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e21d      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b4:	4b65      	ldr	r3, [pc, #404]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b62      	ldr	r3, [pc, #392]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	495f      	ldr	r1, [pc, #380]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
 80040d4:	e018      	b.n	8004108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d6:	4b5d      	ldr	r3, [pc, #372]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5c      	ldr	r2, [pc, #368]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fe f88b 	bl	80021fc <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fe f887 	bl	80021fc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1f9      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03c      	beq.n	800418e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01c      	beq.n	8004156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411c:	4b4b      	ldr	r3, [pc, #300]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004122:	4a4a      	ldr	r2, [pc, #296]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe f866 	bl	80021fc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe f862 	bl	80021fc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1d4      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004146:	4b41      	ldr	r3, [pc, #260]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <HAL_RCC_OscConfig+0x3ec>
 8004154:	e01b      	b.n	800418e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004156:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415c:	4a3b      	ldr	r2, [pc, #236]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fe f849 	bl	80021fc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416e:	f7fe f845 	bl	80021fc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1b7      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004180:	4b32      	ldr	r3, [pc, #200]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ef      	bne.n	800416e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80a6 	beq.w	80042e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041a0:	4b2a      	ldr	r3, [pc, #168]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b27      	ldr	r3, [pc, #156]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	4a26      	ldr	r2, [pc, #152]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b8:	4b24      	ldr	r3, [pc, #144]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c4:	2301      	movs	r3, #1
 80041c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c8:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <HAL_RCC_OscConfig+0x508>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d118      	bne.n	8004206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004250 <HAL_RCC_OscConfig+0x508>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <HAL_RCC_OscConfig+0x508>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e0:	f7fe f80c 	bl	80021fc <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e8:	f7fe f808 	bl	80021fc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e17a      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fa:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <HAL_RCC_OscConfig+0x508>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d108      	bne.n	8004220 <HAL_RCC_OscConfig+0x4d8>
 800420e:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	4a0d      	ldr	r2, [pc, #52]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800421e:	e029      	b.n	8004274 <HAL_RCC_OscConfig+0x52c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b05      	cmp	r3, #5
 8004226:	d115      	bne.n	8004254 <HAL_RCC_OscConfig+0x50c>
 8004228:	4b08      	ldr	r3, [pc, #32]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	4a07      	ldr	r2, [pc, #28]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	4a03      	ldr	r2, [pc, #12]	@ (800424c <HAL_RCC_OscConfig+0x504>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x52c>
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
 8004254:	4b9c      	ldr	r3, [pc, #624]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	4a9b      	ldr	r2, [pc, #620]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004264:	4b98      	ldr	r3, [pc, #608]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	4a97      	ldr	r2, [pc, #604]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d016      	beq.n	80042aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd ffbe 	bl	80021fc <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd ffba 	bl	80021fc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e12a      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	4b8b      	ldr	r3, [pc, #556]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ed      	beq.n	8004284 <HAL_RCC_OscConfig+0x53c>
 80042a8:	e015      	b.n	80042d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd ffa7 	bl	80021fc <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd ffa3 	bl	80021fc <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e113      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c8:	4b7f      	ldr	r3, [pc, #508]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ed      	bne.n	80042b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b7a      	ldr	r3, [pc, #488]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e0:	4a79      	ldr	r2, [pc, #484]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80fe 	beq.w	80044ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 80d0 	bne.w	800449c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042fc:	4b72      	ldr	r3, [pc, #456]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	429a      	cmp	r2, r3
 800430e:	d130      	bne.n	8004372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	3b01      	subs	r3, #1
 800431c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d127      	bne.n	8004372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d11f      	bne.n	8004372 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800433c:	2a07      	cmp	r2, #7
 800433e:	bf14      	ite	ne
 8004340:	2201      	movne	r2, #1
 8004342:	2200      	moveq	r2, #0
 8004344:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004346:	4293      	cmp	r3, r2
 8004348:	d113      	bne.n	8004372 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d109      	bne.n	8004372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d06e      	beq.n	8004450 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d069      	beq.n	800444c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0ad      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004394:	4b4c      	ldr	r3, [pc, #304]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a4b      	ldr	r2, [pc, #300]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800439a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043a0:	f7fd ff2c 	bl	80021fc <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fd ff28 	bl	80021fc <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e09a      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ba:	4b43      	ldr	r3, [pc, #268]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c6:	4b40      	ldr	r3, [pc, #256]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	4b40      	ldr	r3, [pc, #256]	@ (80044cc <HAL_RCC_OscConfig+0x784>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043d6:	3a01      	subs	r2, #1
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043e0:	0212      	lsls	r2, r2, #8
 80043e2:	4311      	orrs	r1, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043e8:	0852      	lsrs	r2, r2, #1
 80043ea:	3a01      	subs	r2, #1
 80043ec:	0552      	lsls	r2, r2, #21
 80043ee:	4311      	orrs	r1, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043f4:	0852      	lsrs	r2, r2, #1
 80043f6:	3a01      	subs	r2, #1
 80043f8:	0652      	lsls	r2, r2, #25
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004400:	0912      	lsrs	r2, r2, #4
 8004402:	0452      	lsls	r2, r2, #17
 8004404:	430a      	orrs	r2, r1
 8004406:	4930      	ldr	r1, [pc, #192]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004408:	4313      	orrs	r3, r2
 800440a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800440c:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004424:	f7fd feea 	bl	80021fc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd fee6 	bl	80021fc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e058      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443e:	4b22      	ldr	r3, [pc, #136]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800444a:	e050      	b.n	80044ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04f      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004450:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d148      	bne.n	80044ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800445c:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a19      	ldr	r2, [pc, #100]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004468:	4b17      	ldr	r3, [pc, #92]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004474:	f7fd fec2 	bl	80021fc <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fd febe 	bl	80021fc <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e030      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448e:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x734>
 800449a:	e028      	b.n	80044ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d023      	beq.n	80044ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <HAL_RCC_OscConfig+0x780>)
 80044a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd fea5 	bl	80021fc <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b4:	e00c      	b.n	80044d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fd fea1 	bl	80021fc <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d905      	bls.n	80044d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e013      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <HAL_RCC_OscConfig+0x7b0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ec      	bne.n	80044b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_RCC_OscConfig+0x7b0>)
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4905      	ldr	r1, [pc, #20]	@ (80044f8 <HAL_RCC_OscConfig+0x7b0>)
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCC_OscConfig+0x7b4>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60cb      	str	r3, [r1, #12]
 80044e8:	e001      	b.n	80044ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	feeefffc 	.word	0xfeeefffc

08004500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0e7      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004514:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d910      	bls.n	8004544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b72      	ldr	r3, [pc, #456]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 0207 	bic.w	r2, r3, #7
 800452a:	4970      	ldr	r1, [pc, #448]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b6e      	ldr	r3, [pc, #440]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cf      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d010      	beq.n	8004572 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800455c:	429a      	cmp	r2, r3
 800455e:	d908      	bls.n	8004572 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b63      	ldr	r3, [pc, #396]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4960      	ldr	r1, [pc, #384]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04c      	beq.n	8004618 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	4b5a      	ldr	r3, [pc, #360]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d121      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0a6      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459e:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d115      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e09a      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b6:	4b4e      	ldr	r3, [pc, #312]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e08e      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c6:	4b4a      	ldr	r3, [pc, #296]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e086      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d6:	4b46      	ldr	r3, [pc, #280]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 0203 	bic.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4943      	ldr	r1, [pc, #268]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e8:	f7fd fe08 	bl	80021fc <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f0:	f7fd fe04 	bl	80021fc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e06e      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 020c 	and.w	r2, r3, #12
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	429a      	cmp	r2, r3
 8004616:	d1eb      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b31      	ldr	r3, [pc, #196]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004630:	429a      	cmp	r2, r3
 8004632:	d208      	bcs.n	8004646 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b2e      	ldr	r3, [pc, #184]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	492b      	ldr	r1, [pc, #172]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004646:	4b29      	ldr	r3, [pc, #164]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d210      	bcs.n	8004676 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004654:	4b25      	ldr	r3, [pc, #148]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0207 	bic.w	r2, r3, #7
 800465c:	4923      	ldr	r1, [pc, #140]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004664:	4b21      	ldr	r3, [pc, #132]	@ (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e036      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4918      	ldr	r1, [pc, #96]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a0:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4910      	ldr	r1, [pc, #64]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046b4:	f000 f824 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	490b      	ldr	r1, [pc, #44]	@ (80046f4 <HAL_RCC_ClockConfig+0x1f4>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	4a09      	ldr	r2, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1f8>)
 80046d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046d4:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_ClockConfig+0x1fc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fd fd3f 	bl	800215c <HAL_InitTick>
 80046de:	4603      	mov	r3, r0
 80046e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08011350 	.word	0x08011350
 80046f8:	2000009c 	.word	0x2000009c
 80046fc:	200000a0 	.word	0x200000a0

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470e:	4b3e      	ldr	r3, [pc, #248]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004718:	4b3b      	ldr	r3, [pc, #236]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d121      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d11e      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004734:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004740:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e005      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004750:	4b2d      	ldr	r3, [pc, #180]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800475c:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <HAL_RCC_GetSysClockFreq+0x10c>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10d      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b04      	cmp	r3, #4
 8004776:	d102      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004778:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x110>)
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e004      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d101      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004784:	4b23      	ldr	r3, [pc, #140]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x114>)
 8004786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d134      	bne.n	80047f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800478e:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d003      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0xac>
 80047a4:	e005      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a8:	617b      	str	r3, [r7, #20]
      break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ae:	617b      	str	r3, [r7, #20]
      break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	3301      	adds	r3, #1
 80047c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	fb03 f202 	mul.w	r2, r3, r2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047de:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	0e5b      	lsrs	r3, r3, #25
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	3301      	adds	r3, #1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047f8:	69bb      	ldr	r3, [r7, #24]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	@ 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	08011368 	.word	0x08011368
 8004810:	00f42400 	.word	0x00f42400
 8004814:	007a1200 	.word	0x007a1200

08004818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000009c 	.word	0x2000009c

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	08011360 	.word	0x08011360

0800485c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004860:	f7ff ffda 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0adb      	lsrs	r3, r3, #11
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4904      	ldr	r1, [pc, #16]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	08011360 	.word	0x08011360

08004888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004894:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a0:	f7ff f9de 	bl	8003c60 <HAL_PWREx_GetVoltageRange>
 80048a4:	6178      	str	r0, [r7, #20]
 80048a6:	e014      	b.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a8:	4b25      	ldr	r3, [pc, #148]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c0:	f7ff f9ce 	bl	8003c60 <HAL_PWREx_GetVoltageRange>
 80048c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d8:	d10b      	bne.n	80048f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d919      	bls.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80048e4:	d902      	bls.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048e6:	2302      	movs	r3, #2
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e013      	b.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048ec:	2301      	movs	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e010      	b.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	d902      	bls.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048f8:	2303      	movs	r3, #3
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e00a      	b.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b80      	cmp	r3, #128	@ 0x80
 8004902:	d102      	bne.n	800490a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004904:	2302      	movs	r3, #2
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e004      	b.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b70      	cmp	r3, #112	@ 0x70
 800490e:	d101      	bne.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004910:	2301      	movs	r3, #1
 8004912:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 0207 	bic.w	r2, r3, #7
 800491c:	4909      	ldr	r1, [pc, #36]	@ (8004944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d001      	beq.n	8004936 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	40022000 	.word	0x40022000

08004948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004950:	2300      	movs	r3, #0
 8004952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004954:	2300      	movs	r3, #0
 8004956:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004960:	2b00      	cmp	r3, #0
 8004962:	d041      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004968:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800496c:	d02a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800496e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004972:	d824      	bhi.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004974:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004978:	d008      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800497a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800497e:	d81e      	bhi.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004988:	d010      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800498a:	e018      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800498c:	4b86      	ldr	r3, [pc, #536]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a85      	ldr	r2, [pc, #532]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004996:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004998:	e015      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fabb 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049aa:	e00c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3320      	adds	r3, #32
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fba6 	bl	8005104 <RCCEx_PLLSAI2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	74fb      	strb	r3, [r7, #19]
      break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049cc:	4b76      	ldr	r3, [pc, #472]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049da:	4973      	ldr	r1, [pc, #460]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049e2:	e001      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d041      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049fc:	d02a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a02:	d824      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a0e:	d81e      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a1a:	e018      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a61      	ldr	r2, [pc, #388]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a28:	e015      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa73 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3a:	e00c      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3320      	adds	r3, #32
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb5e 	bl	8005104 <RCCEx_PLLSAI2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	74fb      	strb	r3, [r7, #19]
      break;
 8004a52:	e000      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a6a:	494f      	ldr	r1, [pc, #316]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a72:	e001      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a0 	beq.w	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa0:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	4a40      	ldr	r2, [pc, #256]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004abc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac8:	f7fd fb98 	bl	80021fc <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ace:	e009      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad0:	f7fd fb94 	bl	80021fc <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d902      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ae4:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d15c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004af6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01f      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d019      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b14:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	4a20      	ldr	r2, [pc, #128]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b40:	4a19      	ldr	r2, [pc, #100]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fd fb53 	bl	80021fc <HAL_GetTick>
 8004b56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b58:	e00b      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fd fb4f 	bl	80021fc <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d902      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ec      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b86:	4b08      	ldr	r3, [pc, #32]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b96:	4904      	ldr	r1, [pc, #16]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b9e:	e009      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
 8004ba4:	e006      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb4:	7c7b      	ldrb	r3, [r7, #17]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bba:	4b9e      	ldr	r3, [pc, #632]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	4a9d      	ldr	r2, [pc, #628]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd2:	4b98      	ldr	r3, [pc, #608]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f023 0203 	bic.w	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	4994      	ldr	r1, [pc, #592]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f023 020c 	bic.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	498c      	ldr	r1, [pc, #560]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c16:	4b87      	ldr	r3, [pc, #540]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	4983      	ldr	r1, [pc, #524]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c38:	4b7e      	ldr	r3, [pc, #504]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	497b      	ldr	r1, [pc, #492]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c5a:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c68:	4972      	ldr	r1, [pc, #456]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8a:	496a      	ldr	r1, [pc, #424]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9e:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	4961      	ldr	r1, [pc, #388]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cce:	4959      	ldr	r1, [pc, #356]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce2:	4b54      	ldr	r3, [pc, #336]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	4950      	ldr	r1, [pc, #320]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d04:	4b4b      	ldr	r3, [pc, #300]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	4948      	ldr	r1, [pc, #288]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d26:	4b43      	ldr	r3, [pc, #268]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	493f      	ldr	r1, [pc, #252]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d028      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d48:	4b3a      	ldr	r3, [pc, #232]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d56:	4937      	ldr	r1, [pc, #220]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d66:	d106      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d68:	4b32      	ldr	r3, [pc, #200]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a31      	ldr	r2, [pc, #196]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d72:	60d3      	str	r3, [r2, #12]
 8004d74:	e011      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8c8 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d028      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004da6:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db4:	491f      	ldr	r1, [pc, #124]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd0:	60d3      	str	r3, [r2, #12]
 8004dd2:	e011      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	2101      	movs	r1, #1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f899 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e12:	4908      	ldr	r1, [pc, #32]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e22:	d109      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a02      	ldr	r2, [pc, #8]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2e:	60d3      	str	r3, [r2, #12]
 8004e30:	e014      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f867 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e52:	7cfb      	ldrb	r3, [r7, #19]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02f      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e76:	4928      	ldr	r1, [pc, #160]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e86:	d10d      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f844 	bl	8004f1c <RCCEx_PLLSAI1_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e98:	7cfb      	ldrb	r3, [r7, #19]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d014      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	74bb      	strb	r3, [r7, #18]
 8004ea2:	e011      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3320      	adds	r3, #32
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f925 	bl	8005104 <RCCEx_PLLSAI2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ed4:	4b10      	ldr	r3, [pc, #64]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee2:	490d      	ldr	r1, [pc, #52]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ef6:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f06:	4904      	ldr	r1, [pc, #16]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000

08004f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f2a:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f36:	4b72      	ldr	r3, [pc, #456]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0203 	and.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d10d      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
       ||
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d047      	beq.n	8004ff2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
 8004f66:	e044      	b.n	8004ff2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d018      	beq.n	8004fa2 <RCCEx_PLLSAI1_Config+0x86>
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d825      	bhi.n	8004fc0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d002      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0x62>
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d009      	beq.n	8004f90 <RCCEx_PLLSAI1_Config+0x74>
 8004f7c:	e020      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f7e:	4b60      	ldr	r3, [pc, #384]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11d      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f8e:	e01a      	b.n	8004fc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f90:	4b5b      	ldr	r3, [pc, #364]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d116      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa0:	e013      	b.n	8004fca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fa2:	4b57      	ldr	r3, [pc, #348]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10f      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fae:	4b54      	ldr	r3, [pc, #336]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fbe:	e006      	b.n	8004fce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc4:	e004      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e002      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10d      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	430b      	orrs	r3, r1
 8004fec:	4944      	ldr	r1, [pc, #272]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d17d      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ff8:	4b41      	ldr	r3, [pc, #260]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a40      	ldr	r2, [pc, #256]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd f8fa 	bl	80021fc <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800500c:	f7fd f8f6 	bl	80021fc <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
        break;
 800501e:	e005      	b.n	800502c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005020:	4b37      	ldr	r3, [pc, #220]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ef      	bne.n	800500c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d160      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d111      	bne.n	800505c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005038:	4b31      	ldr	r3, [pc, #196]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	0211      	lsls	r1, r2, #8
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68d2      	ldr	r2, [r2, #12]
 800504e:	0912      	lsrs	r2, r2, #4
 8005050:	0452      	lsls	r2, r2, #17
 8005052:	430a      	orrs	r2, r1
 8005054:	492a      	ldr	r1, [pc, #168]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]
 800505a:	e027      	b.n	80050ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d112      	bne.n	8005088 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005062:	4b27      	ldr	r3, [pc, #156]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800506a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	0211      	lsls	r1, r2, #8
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6912      	ldr	r2, [r2, #16]
 8005078:	0852      	lsrs	r2, r2, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	0552      	lsls	r2, r2, #21
 800507e:	430a      	orrs	r2, r1
 8005080:	491f      	ldr	r1, [pc, #124]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
 8005086:	e011      	b.n	80050ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005088:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005090:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6892      	ldr	r2, [r2, #8]
 8005098:	0211      	lsls	r1, r2, #8
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6952      	ldr	r2, [r2, #20]
 800509e:	0852      	lsrs	r2, r2, #1
 80050a0:	3a01      	subs	r2, #1
 80050a2:	0652      	lsls	r2, r2, #25
 80050a4:	430a      	orrs	r2, r1
 80050a6:	4916      	ldr	r1, [pc, #88]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050ac:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a13      	ldr	r2, [pc, #76]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fd f8a0 	bl	80021fc <HAL_GetTick>
 80050bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050be:	e009      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c0:	f7fd f89c 	bl	80021fc <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d902      	bls.n	80050d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	73fb      	strb	r3, [r7, #15]
          break;
 80050d2:	e005      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ef      	beq.n	80050c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	4904      	ldr	r1, [pc, #16]	@ (8005100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000

08005104 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005112:	4b6a      	ldr	r3, [pc, #424]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800511e:	4b67      	ldr	r3, [pc, #412]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0203 	and.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d10d      	bne.n	800514a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
       ||
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005136:	4b61      	ldr	r3, [pc, #388]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
       ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d047      	beq.n	80051da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	e044      	b.n	80051da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d018      	beq.n	800518a <RCCEx_PLLSAI2_Config+0x86>
 8005158:	2b03      	cmp	r3, #3
 800515a:	d825      	bhi.n	80051a8 <RCCEx_PLLSAI2_Config+0xa4>
 800515c:	2b01      	cmp	r3, #1
 800515e:	d002      	beq.n	8005166 <RCCEx_PLLSAI2_Config+0x62>
 8005160:	2b02      	cmp	r3, #2
 8005162:	d009      	beq.n	8005178 <RCCEx_PLLSAI2_Config+0x74>
 8005164:	e020      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005166:	4b55      	ldr	r3, [pc, #340]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005176:	e01a      	b.n	80051ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005178:	4b50      	ldr	r3, [pc, #320]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005180:	2b00      	cmp	r3, #0
 8005182:	d116      	bne.n	80051b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005188:	e013      	b.n	80051b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800518a:	4b4c      	ldr	r3, [pc, #304]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005196:	4b49      	ldr	r3, [pc, #292]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051a6:	e006      	b.n	80051b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
      break;
 80051ac:	e004      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ae:	bf00      	nop
 80051b0:	e002      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051be:	4b3f      	ldr	r3, [pc, #252]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	430b      	orrs	r3, r1
 80051d4:	4939      	ldr	r1, [pc, #228]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d167      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051e0:	4b36      	ldr	r3, [pc, #216]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a35      	ldr	r2, [pc, #212]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ec:	f7fd f806 	bl	80021fc <HAL_GetTick>
 80051f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f2:	e009      	b.n	8005208 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051f4:	f7fd f802 	bl	80021fc <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d902      	bls.n	8005208 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	73fb      	strb	r3, [r7, #15]
        break;
 8005206:	e005      	b.n	8005214 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005208:	4b2c      	ldr	r3, [pc, #176]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ef      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d14a      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005220:	4b26      	ldr	r3, [pc, #152]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6892      	ldr	r2, [r2, #8]
 8005230:	0211      	lsls	r1, r2, #8
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	0912      	lsrs	r2, r2, #4
 8005238:	0452      	lsls	r2, r2, #17
 800523a:	430a      	orrs	r2, r1
 800523c:	491f      	ldr	r1, [pc, #124]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	4313      	orrs	r3, r2
 8005240:	614b      	str	r3, [r1, #20]
 8005242:	e011      	b.n	8005268 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005244:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800524c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6892      	ldr	r2, [r2, #8]
 8005254:	0211      	lsls	r1, r2, #8
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6912      	ldr	r2, [r2, #16]
 800525a:	0852      	lsrs	r2, r2, #1
 800525c:	3a01      	subs	r2, #1
 800525e:	0652      	lsls	r2, r2, #25
 8005260:	430a      	orrs	r2, r1
 8005262:	4916      	ldr	r1, [pc, #88]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005264:	4313      	orrs	r3, r2
 8005266:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fc ffc2 	bl	80021fc <HAL_GetTick>
 8005278:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800527a:	e009      	b.n	8005290 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800527c:	f7fc ffbe 	bl	80021fc <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d902      	bls.n	8005290 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	73fb      	strb	r3, [r7, #15]
          break;
 800528e:	e005      	b.n	800529c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005290:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ef      	beq.n	800527c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052a2:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4904      	ldr	r1, [pc, #16]	@ (80052bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000

080052c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e095      	b.n	80053fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d108      	bne.n	80052ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e2:	d009      	beq.n	80052f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	61da      	str	r2, [r3, #28]
 80052ea:	e005      	b.n	80052f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fa04 	bl	8001720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800532e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005338:	d902      	bls.n	8005340 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e002      	b.n	8005346 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005344:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800534e:	d007      	beq.n	8005360 <HAL_SPI_Init+0xa0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	ea42 0103 	orr.w	r1, r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 0204 	and.w	r2, r3, #4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053dc:	ea42 0103 	orr.w	r1, r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10e      	bne.n	8005448 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
    return;
 8005446:	e0ce      	b.n	80055e6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_SPI_IRQHandler+0x5e>
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
    return;
 8005464:	e0bf      	b.n	80055e6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_SPI_IRQHandler+0x7e>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80b0 	beq.w	80055e6 <HAL_SPI_IRQHandler+0x1de>
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80aa 	beq.w	80055e6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d023      	beq.n	80054e4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d011      	beq.n	80054cc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	e00b      	b.n	80054e4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
        return;
 80054e2:	e080      	b.n	80055e6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005526:	f043 0208 	orr.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	2b00      	cmp	r3, #0
 8005542:	d04f      	beq.n	80055e4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005552:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <HAL_SPI_IRQHandler+0x168>
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d034      	beq.n	80055da <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0203 	bic.w	r2, r2, #3
 800557e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <HAL_SPI_IRQHandler+0x1e4>)
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	4618      	mov	r0, r3
 8005596:	f7fc ffb0 	bl	80024fa <HAL_DMA_Abort_IT>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	4a0c      	ldr	r2, [pc, #48]	@ (80055ec <HAL_SPI_IRQHandler+0x1e4>)
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fc ff9a 	bl	80024fa <HAL_DMA_Abort_IT>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80055d8:	e003      	b.n	80055e2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f808 	bl	80055f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055e0:	e000      	b.n	80055e4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80055e2:	bf00      	nop
    return;
 80055e4:	bf00      	nop
  }
}
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	08005605 	.word	0x08005605

080055f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ffe5 	bl	80055f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e04f      	b.n	80056e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a23      	ldr	r2, [pc, #140]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d018      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1f      	ldr	r2, [pc, #124]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1e      	ldr	r2, [pc, #120]	@ (80056fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <HAL_TIM_Base_Start_IT+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <HAL_TIM_Base_Start_IT+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_Base_Start_IT+0x76>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <HAL_TIM_Base_Start_IT+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d115      	bne.n	80056d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	4b17      	ldr	r3, [pc, #92]	@ (800570c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d015      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0xb4>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056be:	d011      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	e008      	b.n	80056e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e000      	b.n	80056e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40013400 	.word	0x40013400
 8005708:	40014000 	.word	0x40014000
 800570c:	00010007 	.word	0x00010007

08005710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e049      	b.n	80057b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc fb4a 	bl	8001dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f000 fc20 	bl	8005f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_TIM_PWM_Start+0x24>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e03c      	b.n	800585e <HAL_TIM_PWM_Start+0x9e>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d109      	bne.n	80057fe <HAL_TIM_PWM_Start+0x3e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e02f      	b.n	800585e <HAL_TIM_PWM_Start+0x9e>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d109      	bne.n	8005818 <HAL_TIM_PWM_Start+0x58>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e022      	b.n	800585e <HAL_TIM_PWM_Start+0x9e>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d109      	bne.n	8005832 <HAL_TIM_PWM_Start+0x72>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e015      	b.n	800585e <HAL_TIM_PWM_Start+0x9e>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b10      	cmp	r3, #16
 8005836:	d109      	bne.n	800584c <HAL_TIM_PWM_Start+0x8c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e008      	b.n	800585e <HAL_TIM_PWM_Start+0x9e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e09c      	b.n	80059a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <HAL_TIM_PWM_Start+0xb6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005874:	e023      	b.n	80058be <HAL_TIM_PWM_Start+0xfe>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d104      	bne.n	8005886 <HAL_TIM_PWM_Start+0xc6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005884:	e01b      	b.n	80058be <HAL_TIM_PWM_Start+0xfe>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0xd6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005894:	e013      	b.n	80058be <HAL_TIM_PWM_Start+0xfe>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0xe6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a4:	e00b      	b.n	80058be <HAL_TIM_PWM_Start+0xfe>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0xf6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b4:	e003      	b.n	80058be <HAL_TIM_PWM_Start+0xfe>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fee0 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <HAL_TIM_PWM_Start+0x1e8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_TIM_PWM_Start+0x13e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a34      	ldr	r2, [pc, #208]	@ (80059ac <HAL_TIM_PWM_Start+0x1ec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_TIM_PWM_Start+0x13e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a32      	ldr	r2, [pc, #200]	@ (80059b0 <HAL_TIM_PWM_Start+0x1f0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIM_PWM_Start+0x13e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a31      	ldr	r2, [pc, #196]	@ (80059b4 <HAL_TIM_PWM_Start+0x1f4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIM_PWM_Start+0x13e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2f      	ldr	r2, [pc, #188]	@ (80059b8 <HAL_TIM_PWM_Start+0x1f8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_Start+0x142>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_TIM_PWM_Start+0x144>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005916:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <HAL_TIM_PWM_Start+0x1e8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01d      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592a:	d018      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a22      	ldr	r2, [pc, #136]	@ (80059bc <HAL_TIM_PWM_Start+0x1fc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a21      	ldr	r2, [pc, #132]	@ (80059c0 <HAL_TIM_PWM_Start+0x200>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1f      	ldr	r2, [pc, #124]	@ (80059c4 <HAL_TIM_PWM_Start+0x204>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a17      	ldr	r2, [pc, #92]	@ (80059ac <HAL_TIM_PWM_Start+0x1ec>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIM_PWM_Start+0x19e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_TIM_PWM_Start+0x1f0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d115      	bne.n	800598a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	4b18      	ldr	r3, [pc, #96]	@ (80059c8 <HAL_TIM_PWM_Start+0x208>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d015      	beq.n	800599c <HAL_TIM_PWM_Start+0x1dc>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005976:	d011      	beq.n	800599c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	e008      	b.n	800599c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e000      	b.n	800599e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	00010007 	.word	0x00010007

080059cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fe54 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae4 <HAL_TIM_PWM_Stop+0x118>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <HAL_TIM_PWM_Stop+0x4a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ae8 <HAL_TIM_PWM_Stop+0x11c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIM_PWM_Stop+0x4a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3b      	ldr	r2, [pc, #236]	@ (8005aec <HAL_TIM_PWM_Stop+0x120>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIM_PWM_Stop+0x4a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3a      	ldr	r2, [pc, #232]	@ (8005af0 <HAL_TIM_PWM_Stop+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIM_PWM_Stop+0x4a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <HAL_TIM_PWM_Stop+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_PWM_Stop+0x4e>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_TIM_PWM_Stop+0x50>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <HAL_TIM_PWM_Stop+0x84>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_PWM_Stop+0x84>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <HAL_TIM_PWM_Stop+0xb4>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_PWM_Stop+0xb4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_TIM_PWM_Stop+0xc4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8e:	e023      	b.n	8005ad8 <HAL_TIM_PWM_Stop+0x10c>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_PWM_Stop+0xd4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9e:	e01b      	b.n	8005ad8 <HAL_TIM_PWM_Stop+0x10c>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d104      	bne.n	8005ab0 <HAL_TIM_PWM_Stop+0xe4>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aae:	e013      	b.n	8005ad8 <HAL_TIM_PWM_Stop+0x10c>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d104      	bne.n	8005ac0 <HAL_TIM_PWM_Stop+0xf4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005abe:	e00b      	b.n	8005ad8 <HAL_TIM_PWM_Stop+0x10c>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d104      	bne.n	8005ad0 <HAL_TIM_PWM_Stop+0x104>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ace:	e003      	b.n	8005ad8 <HAL_TIM_PWM_Stop+0x10c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa08 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9fa 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa0b 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0204 	mvn.w	r2, #4
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9e2 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9d4 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9e5 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0208 	mvn.w	r2, #8
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9bc 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9ae 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f9bf 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f996 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f988 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f999 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f966 	bl	8005f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fe33 	bl	80068f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fe2b 	bl	800690c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f953 	bl	8005f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0220 	mvn.w	r2, #32
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fdf3 	bl	80068e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0ff      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b14      	cmp	r3, #20
 8005d32:	f200 80f0 	bhi.w	8005f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d36:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005f17 	.word	0x08005f17
 8005d44:	08005f17 	.word	0x08005f17
 8005d48:	08005f17 	.word	0x08005f17
 8005d4c:	08005dd1 	.word	0x08005dd1
 8005d50:	08005f17 	.word	0x08005f17
 8005d54:	08005f17 	.word	0x08005f17
 8005d58:	08005f17 	.word	0x08005f17
 8005d5c:	08005e13 	.word	0x08005e13
 8005d60:	08005f17 	.word	0x08005f17
 8005d64:	08005f17 	.word	0x08005f17
 8005d68:	08005f17 	.word	0x08005f17
 8005d6c:	08005e53 	.word	0x08005e53
 8005d70:	08005f17 	.word	0x08005f17
 8005d74:	08005f17 	.word	0x08005f17
 8005d78:	08005f17 	.word	0x08005f17
 8005d7c:	08005e95 	.word	0x08005e95
 8005d80:	08005f17 	.word	0x08005f17
 8005d84:	08005f17 	.word	0x08005f17
 8005d88:	08005f17 	.word	0x08005f17
 8005d8c:	08005ed5 	.word	0x08005ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f9a2 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0204 	bic.w	r2, r2, #4
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	619a      	str	r2, [r3, #24]
      break;
 8005dce:	e0a5      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fa12 	bl	8006200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]
      break;
 8005e10:	e084      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fa7b 	bl	8006314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0204 	bic.w	r2, r2, #4
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
      break;
 8005e50:	e064      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fae3 	bl	8006424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
      break;
 8005e92:	e043      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb2c 	bl	80064f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0208 	orr.w	r2, r2, #8
 8005eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0204 	bic.w	r2, r2, #4
 8005ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ed2:	e023      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fb70 	bl	80065c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005efe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	021a      	lsls	r2, r3, #8
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f14:	e002      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop

08005f30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a43      	ldr	r2, [pc, #268]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a42      	ldr	r2, [pc, #264]	@ (80060c8 <TIM_Base_SetConfig+0x134>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a41      	ldr	r2, [pc, #260]	@ (80060cc <TIM_Base_SetConfig+0x138>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a40      	ldr	r2, [pc, #256]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d108      	bne.n	8005fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01f      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d01b      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a32      	ldr	r2, [pc, #200]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d017      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a31      	ldr	r2, [pc, #196]	@ (80060c8 <TIM_Base_SetConfig+0x134>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a30      	ldr	r2, [pc, #192]	@ (80060cc <TIM_Base_SetConfig+0x138>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <TIM_Base_SetConfig+0x140>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2d      	ldr	r2, [pc, #180]	@ (80060d8 <TIM_Base_SetConfig+0x144>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2c      	ldr	r2, [pc, #176]	@ (80060dc <TIM_Base_SetConfig+0x148>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0xf8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0xf8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <TIM_Base_SetConfig+0x140>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0xf8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <TIM_Base_SetConfig+0x144>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0xf8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a15      	ldr	r2, [pc, #84]	@ (80060dc <TIM_Base_SetConfig+0x148>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d103      	bne.n	8006094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f023 0201 	bic.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]
  }
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a2c      	ldr	r2, [pc, #176]	@ (80061ec <TIM_OC1_SetConfig+0x10c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00f      	beq.n	8006160 <TIM_OC1_SetConfig+0x80>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2b      	ldr	r2, [pc, #172]	@ (80061f0 <TIM_OC1_SetConfig+0x110>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_OC1_SetConfig+0x80>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a2a      	ldr	r2, [pc, #168]	@ (80061f4 <TIM_OC1_SetConfig+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_OC1_SetConfig+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a29      	ldr	r2, [pc, #164]	@ (80061f8 <TIM_OC1_SetConfig+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC1_SetConfig+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a28      	ldr	r2, [pc, #160]	@ (80061fc <TIM_OC1_SetConfig+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10c      	bne.n	800617a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0308 	bic.w	r3, r3, #8
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1b      	ldr	r2, [pc, #108]	@ (80061ec <TIM_OC1_SetConfig+0x10c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_OC1_SetConfig+0xc2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <TIM_OC1_SetConfig+0x110>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_OC1_SetConfig+0xc2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a19      	ldr	r2, [pc, #100]	@ (80061f4 <TIM_OC1_SetConfig+0x114>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC1_SetConfig+0xc2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <TIM_OC1_SetConfig+0x118>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC1_SetConfig+0xc2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a17      	ldr	r2, [pc, #92]	@ (80061fc <TIM_OC1_SetConfig+0x11c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f023 0210 	bic.w	r2, r3, #16
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0320 	bic.w	r3, r3, #32
 800624e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <TIM_OC2_SetConfig+0x100>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_OC2_SetConfig+0x6c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a27      	ldr	r2, [pc, #156]	@ (8006304 <TIM_OC2_SetConfig+0x104>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10d      	bne.n	8006288 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <TIM_OC2_SetConfig+0x100>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00f      	beq.n	80062b0 <TIM_OC2_SetConfig+0xb0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <TIM_OC2_SetConfig+0x104>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_OC2_SetConfig+0xb0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <TIM_OC2_SetConfig+0x108>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_OC2_SetConfig+0xb0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1a      	ldr	r2, [pc, #104]	@ (800630c <TIM_OC2_SetConfig+0x10c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC2_SetConfig+0xb0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a19      	ldr	r2, [pc, #100]	@ (8006310 <TIM_OC2_SetConfig+0x110>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d113      	bne.n	80062d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40013400 	.word	0x40013400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800

08006314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <TIM_OC3_SetConfig+0xfc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC3_SetConfig+0x6a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	@ (8006414 <TIM_OC3_SetConfig+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d10d      	bne.n	800639a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1c      	ldr	r2, [pc, #112]	@ (8006410 <TIM_OC3_SetConfig+0xfc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <TIM_OC3_SetConfig+0xae>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <TIM_OC3_SetConfig+0x100>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00b      	beq.n	80063c2 <TIM_OC3_SetConfig+0xae>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006418 <TIM_OC3_SetConfig+0x104>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d007      	beq.n	80063c2 <TIM_OC3_SetConfig+0xae>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a19      	ldr	r2, [pc, #100]	@ (800641c <TIM_OC3_SetConfig+0x108>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC3_SetConfig+0xae>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a18      	ldr	r2, [pc, #96]	@ (8006420 <TIM_OC3_SetConfig+0x10c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d113      	bne.n	80063ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40013400 	.word	0x40013400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <TIM_OC4_SetConfig+0xc0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00f      	beq.n	80064a8 <TIM_OC4_SetConfig+0x84>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a17      	ldr	r2, [pc, #92]	@ (80064e8 <TIM_OC4_SetConfig+0xc4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_OC4_SetConfig+0x84>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <TIM_OC4_SetConfig+0xc8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_OC4_SetConfig+0x84>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <TIM_OC4_SetConfig+0xcc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC4_SetConfig+0x84>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <TIM_OC4_SetConfig+0xd0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d109      	bne.n	80064bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	019b      	lsls	r3, r3, #6
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800653c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a17      	ldr	r2, [pc, #92]	@ (80065ac <TIM_OC5_SetConfig+0xb4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_OC5_SetConfig+0x7a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a16      	ldr	r2, [pc, #88]	@ (80065b0 <TIM_OC5_SetConfig+0xb8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_OC5_SetConfig+0x7a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <TIM_OC5_SetConfig+0xbc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_OC5_SetConfig+0x7a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a14      	ldr	r2, [pc, #80]	@ (80065b8 <TIM_OC5_SetConfig+0xc0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC5_SetConfig+0x7a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <TIM_OC5_SetConfig+0xc4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d109      	bne.n	8006586 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800

080065c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	051b      	lsls	r3, r3, #20
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a18      	ldr	r2, [pc, #96]	@ (8006678 <TIM_OC6_SetConfig+0xb8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00f      	beq.n	800663c <TIM_OC6_SetConfig+0x7c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a17      	ldr	r2, [pc, #92]	@ (800667c <TIM_OC6_SetConfig+0xbc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00b      	beq.n	800663c <TIM_OC6_SetConfig+0x7c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a16      	ldr	r2, [pc, #88]	@ (8006680 <TIM_OC6_SetConfig+0xc0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d007      	beq.n	800663c <TIM_OC6_SetConfig+0x7c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a15      	ldr	r2, [pc, #84]	@ (8006684 <TIM_OC6_SetConfig+0xc4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC6_SetConfig+0x7c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a14      	ldr	r2, [pc, #80]	@ (8006688 <TIM_OC6_SetConfig+0xc8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d109      	bne.n	8006650 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40013400 	.word	0x40013400
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800

0800668c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e068      	b.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2e      	ldr	r2, [pc, #184]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2d      	ldr	r2, [pc, #180]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800672a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1e      	ldr	r2, [pc, #120]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006762:	d018      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1a      	ldr	r2, [pc, #104]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a13      	ldr	r2, [pc, #76]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a14      	ldr	r2, [pc, #80]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10c      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800679c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40013400 	.word	0x40013400
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000

080067e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006800:	2302      	movs	r3, #2
 8006802:	e065      	b.n	80068d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a14      	ldr	r2, [pc, #80]	@ (80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d115      	bne.n	80068be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40013400 	.word	0x40013400

080068e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e040      	b.n	80069b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fb fb5c 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	@ 0x24
 800694c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fedc 	bl	8007724 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc21 	bl	80071b4 <UART_SetConfig>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e01b      	b.n	80069b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800698a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800699a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 ff5b 	bl	8007868 <UART_CheckIdleState>
 80069b2:	4603      	mov	r3, r0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d177      	bne.n	8006ac4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <HAL_UART_Transmit+0x24>
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e070      	b.n	8006ac6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2221      	movs	r2, #33	@ 0x21
 80069f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069f2:	f7fb fc03 	bl	80021fc <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a10:	d108      	bne.n	8006a24 <HAL_UART_Transmit+0x68>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e003      	b.n	8006a2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a2c:	e02f      	b.n	8006a8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2180      	movs	r1, #128	@ 0x80
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 ffbd 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e03b      	b.n	8006ac6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a60:	b292      	uxth	r2, r2
 8006a62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	3302      	adds	r3, #2
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e007      	b.n	8006a7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1c9      	bne.n	8006a2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2140      	movs	r1, #64	@ 0x40
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 ff87 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e005      	b.n	8006ac6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e000      	b.n	8006ac6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ac4:	2302      	movs	r3, #2
  }
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d137      	bne.n	8006b58 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_UART_Receive_IT+0x24>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e030      	b.n	8006b5a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <HAL_UART_Receive_IT+0x94>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d01f      	beq.n	8006b48 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	613b      	str	r3, [r7, #16]
   return(result);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69f9      	ldr	r1, [r7, #28]
 8006b3a:	6a3a      	ldr	r2, [r7, #32]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 ffa0 	bl	8007a94 <UART_Start_Receive_IT>
 8006b54:	4603      	mov	r3, r0
 8006b56:	e000      	b.n	8006b5a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3728      	adds	r7, #40	@ 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40008000 	.word	0x40008000

08006b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b96:	4013      	ands	r3, r2
 8006b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d115      	bne.n	8006bd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 82ca 	beq.w	800715a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
      }
      return;
 8006bce:	e2c4      	b.n	800715a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8117 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006bea:	4b85      	ldr	r3, [pc, #532]	@ (8006e00 <HAL_UART_IRQHandler+0x298>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 810a 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <HAL_UART_IRQHandler+0xbc>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2201      	movs	r2, #1
 8006c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c1a:	f043 0201 	orr.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0xec>
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2202      	movs	r2, #2
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d011      	beq.n	8006c84 <HAL_UART_IRQHandler+0x11c>
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2204      	movs	r2, #4
 8006c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c7a:	f043 0202 	orr.w	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d017      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2208      	movs	r2, #8
 8006cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb6:	f043 0208 	orr.w	r2, r3, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d012      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x18a>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00c      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8230 	beq.w	800715e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3a:	2b40      	cmp	r3, #64	@ 0x40
 8006d3c:	d005      	beq.n	8006d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04f      	beq.n	8006dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 ff68 	bl	8007c20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5a:	2b40      	cmp	r3, #64	@ 0x40
 8006d5c:	d141      	bne.n	8006de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1d9      	bne.n	8006d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d013      	beq.n	8006dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <HAL_UART_IRQHandler+0x29c>)
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fb fb9b 	bl	80024fa <HAL_DMA_Abort_IT>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d017      	beq.n	8006dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	e00f      	b.n	8006dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9d4 	bl	8007188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	e00b      	b.n	8006dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f9d0 	bl	8007188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de8:	e007      	b.n	8006dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9cc 	bl	8007188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006df8:	e1b1      	b.n	800715e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfa:	bf00      	nop
    return;
 8006dfc:	e1af      	b.n	800715e <HAL_UART_IRQHandler+0x5f6>
 8006dfe:	bf00      	nop
 8006e00:	04000120 	.word	0x04000120
 8006e04:	08007ce9 	.word	0x08007ce9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 816a 	bne.w	80070e6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8163 	beq.w	80070e6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 815c 	beq.w	80070e6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	f040 80d4 	bne.w	8006fee <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80ad 	beq.w	8006fb6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e66:	429a      	cmp	r2, r3
 8006e68:	f080 80a5 	bcs.w	8006fb6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 8086 	bne.w	8006f94 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1da      	bne.n	8006e88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e1      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e3      	bne.n	8006f0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f64:	f023 0310 	bic.w	r3, r3, #16
 8006f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e4      	bne.n	8006f54 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fb fa75 	bl	800247e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f8f4 	bl	800719c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006fb4:	e0d5      	b.n	8007162 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	f040 80ce 	bne.w	8007162 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	f040 80c5 	bne.w	8007162 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8d8 	bl	800719c <HAL_UARTEx_RxEventCallback>
      return;
 8006fec:	e0b9      	b.n	8007162 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80ab 	beq.w	8007166 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80a6 	beq.w	8007166 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800702e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
 800703e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e4      	bne.n	800701a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	623b      	str	r3, [r7, #32]
   return(result);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f023 0301 	bic.w	r3, r3, #1
 8007066:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007074:	633a      	str	r2, [r7, #48]	@ 0x30
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800707a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e3      	bne.n	8007050 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0310 	bic.w	r3, r3, #16
 80070b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	69b9      	ldr	r1, [r7, #24]
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	617b      	str	r3, [r7, #20]
   return(result);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e4      	bne.n	800709c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f85c 	bl	800719c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e4:	e03f      	b.n	8007166 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00e      	beq.n	8007110 <HAL_UART_IRQHandler+0x5a8>
 80070f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 ffe9 	bl	80080e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800710e:	e02d      	b.n	800716c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01c      	beq.n	800716a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
    }
    return;
 8007138:	e017      	b.n	800716a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d012      	beq.n	800716c <HAL_UART_IRQHandler+0x604>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00c      	beq.n	800716c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fdde 	bl	8007d14 <UART_EndTransmit_IT>
    return;
 8007158:	e008      	b.n	800716c <HAL_UART_IRQHandler+0x604>
      return;
 800715a:	bf00      	nop
 800715c:	e006      	b.n	800716c <HAL_UART_IRQHandler+0x604>
    return;
 800715e:	bf00      	nop
 8007160:	e004      	b.n	800716c <HAL_UART_IRQHandler+0x604>
      return;
 8007162:	bf00      	nop
 8007164:	e002      	b.n	800716c <HAL_UART_IRQHandler+0x604>
      return;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <HAL_UART_IRQHandler+0x604>
    return;
 800716a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800716c:	37e8      	adds	r7, #232	@ 0xe8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop

08007174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b8:	b08a      	sub	sp, #40	@ 0x28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	4313      	orrs	r3, r2
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4ba4      	ldr	r3, [pc, #656]	@ (8007474 <UART_SetConfig+0x2c0>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a99      	ldr	r2, [pc, #612]	@ (8007478 <UART_SetConfig+0x2c4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721c:	4313      	orrs	r3, r2
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a90      	ldr	r2, [pc, #576]	@ (800747c <UART_SetConfig+0x2c8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d126      	bne.n	800728c <UART_SetConfig+0xd8>
 800723e:	4b90      	ldr	r3, [pc, #576]	@ (8007480 <UART_SetConfig+0x2cc>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	2b03      	cmp	r3, #3
 800724a:	d81b      	bhi.n	8007284 <UART_SetConfig+0xd0>
 800724c:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <UART_SetConfig+0xa0>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007265 	.word	0x08007265
 8007258:	08007275 	.word	0x08007275
 800725c:	0800726d 	.word	0x0800726d
 8007260:	0800727d 	.word	0x0800727d
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726a:	e116      	b.n	800749a <UART_SetConfig+0x2e6>
 800726c:	2302      	movs	r3, #2
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007272:	e112      	b.n	800749a <UART_SetConfig+0x2e6>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e10e      	b.n	800749a <UART_SetConfig+0x2e6>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e10a      	b.n	800749a <UART_SetConfig+0x2e6>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e106      	b.n	800749a <UART_SetConfig+0x2e6>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a7c      	ldr	r2, [pc, #496]	@ (8007484 <UART_SetConfig+0x2d0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d138      	bne.n	8007308 <UART_SetConfig+0x154>
 8007296:	4b7a      	ldr	r3, [pc, #488]	@ (8007480 <UART_SetConfig+0x2cc>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d82d      	bhi.n	8007300 <UART_SetConfig+0x14c>
 80072a4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <UART_SetConfig+0xf8>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	08007301 	.word	0x08007301
 80072b4:	08007301 	.word	0x08007301
 80072b8:	08007301 	.word	0x08007301
 80072bc:	080072f1 	.word	0x080072f1
 80072c0:	08007301 	.word	0x08007301
 80072c4:	08007301 	.word	0x08007301
 80072c8:	08007301 	.word	0x08007301
 80072cc:	080072e9 	.word	0x080072e9
 80072d0:	08007301 	.word	0x08007301
 80072d4:	08007301 	.word	0x08007301
 80072d8:	08007301 	.word	0x08007301
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e6:	e0d8      	b.n	800749a <UART_SetConfig+0x2e6>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ee:	e0d4      	b.n	800749a <UART_SetConfig+0x2e6>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f6:	e0d0      	b.n	800749a <UART_SetConfig+0x2e6>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fe:	e0cc      	b.n	800749a <UART_SetConfig+0x2e6>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007306:	e0c8      	b.n	800749a <UART_SetConfig+0x2e6>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a5e      	ldr	r2, [pc, #376]	@ (8007488 <UART_SetConfig+0x2d4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d125      	bne.n	800735e <UART_SetConfig+0x1aa>
 8007312:	4b5b      	ldr	r3, [pc, #364]	@ (8007480 <UART_SetConfig+0x2cc>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007318:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800731c:	2b30      	cmp	r3, #48	@ 0x30
 800731e:	d016      	beq.n	800734e <UART_SetConfig+0x19a>
 8007320:	2b30      	cmp	r3, #48	@ 0x30
 8007322:	d818      	bhi.n	8007356 <UART_SetConfig+0x1a2>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d00a      	beq.n	800733e <UART_SetConfig+0x18a>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d814      	bhi.n	8007356 <UART_SetConfig+0x1a2>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <UART_SetConfig+0x182>
 8007330:	2b10      	cmp	r3, #16
 8007332:	d008      	beq.n	8007346 <UART_SetConfig+0x192>
 8007334:	e00f      	b.n	8007356 <UART_SetConfig+0x1a2>
 8007336:	2300      	movs	r3, #0
 8007338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800733c:	e0ad      	b.n	800749a <UART_SetConfig+0x2e6>
 800733e:	2302      	movs	r3, #2
 8007340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007344:	e0a9      	b.n	800749a <UART_SetConfig+0x2e6>
 8007346:	2304      	movs	r3, #4
 8007348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800734c:	e0a5      	b.n	800749a <UART_SetConfig+0x2e6>
 800734e:	2308      	movs	r3, #8
 8007350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007354:	e0a1      	b.n	800749a <UART_SetConfig+0x2e6>
 8007356:	2310      	movs	r3, #16
 8007358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735c:	e09d      	b.n	800749a <UART_SetConfig+0x2e6>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a4a      	ldr	r2, [pc, #296]	@ (800748c <UART_SetConfig+0x2d8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d125      	bne.n	80073b4 <UART_SetConfig+0x200>
 8007368:	4b45      	ldr	r3, [pc, #276]	@ (8007480 <UART_SetConfig+0x2cc>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007372:	2bc0      	cmp	r3, #192	@ 0xc0
 8007374:	d016      	beq.n	80073a4 <UART_SetConfig+0x1f0>
 8007376:	2bc0      	cmp	r3, #192	@ 0xc0
 8007378:	d818      	bhi.n	80073ac <UART_SetConfig+0x1f8>
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d00a      	beq.n	8007394 <UART_SetConfig+0x1e0>
 800737e:	2b80      	cmp	r3, #128	@ 0x80
 8007380:	d814      	bhi.n	80073ac <UART_SetConfig+0x1f8>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <UART_SetConfig+0x1d8>
 8007386:	2b40      	cmp	r3, #64	@ 0x40
 8007388:	d008      	beq.n	800739c <UART_SetConfig+0x1e8>
 800738a:	e00f      	b.n	80073ac <UART_SetConfig+0x1f8>
 800738c:	2300      	movs	r3, #0
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007392:	e082      	b.n	800749a <UART_SetConfig+0x2e6>
 8007394:	2302      	movs	r3, #2
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739a:	e07e      	b.n	800749a <UART_SetConfig+0x2e6>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a2:	e07a      	b.n	800749a <UART_SetConfig+0x2e6>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073aa:	e076      	b.n	800749a <UART_SetConfig+0x2e6>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b2:	e072      	b.n	800749a <UART_SetConfig+0x2e6>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a35      	ldr	r2, [pc, #212]	@ (8007490 <UART_SetConfig+0x2dc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d12a      	bne.n	8007414 <UART_SetConfig+0x260>
 80073be:	4b30      	ldr	r3, [pc, #192]	@ (8007480 <UART_SetConfig+0x2cc>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073cc:	d01a      	beq.n	8007404 <UART_SetConfig+0x250>
 80073ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d2:	d81b      	bhi.n	800740c <UART_SetConfig+0x258>
 80073d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d8:	d00c      	beq.n	80073f4 <UART_SetConfig+0x240>
 80073da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073de:	d815      	bhi.n	800740c <UART_SetConfig+0x258>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <UART_SetConfig+0x238>
 80073e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073e8:	d008      	beq.n	80073fc <UART_SetConfig+0x248>
 80073ea:	e00f      	b.n	800740c <UART_SetConfig+0x258>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f2:	e052      	b.n	800749a <UART_SetConfig+0x2e6>
 80073f4:	2302      	movs	r3, #2
 80073f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fa:	e04e      	b.n	800749a <UART_SetConfig+0x2e6>
 80073fc:	2304      	movs	r3, #4
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007402:	e04a      	b.n	800749a <UART_SetConfig+0x2e6>
 8007404:	2308      	movs	r3, #8
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740a:	e046      	b.n	800749a <UART_SetConfig+0x2e6>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007412:	e042      	b.n	800749a <UART_SetConfig+0x2e6>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a17      	ldr	r2, [pc, #92]	@ (8007478 <UART_SetConfig+0x2c4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d13a      	bne.n	8007494 <UART_SetConfig+0x2e0>
 800741e:	4b18      	ldr	r3, [pc, #96]	@ (8007480 <UART_SetConfig+0x2cc>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800742c:	d01a      	beq.n	8007464 <UART_SetConfig+0x2b0>
 800742e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007432:	d81b      	bhi.n	800746c <UART_SetConfig+0x2b8>
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007438:	d00c      	beq.n	8007454 <UART_SetConfig+0x2a0>
 800743a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800743e:	d815      	bhi.n	800746c <UART_SetConfig+0x2b8>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <UART_SetConfig+0x298>
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007448:	d008      	beq.n	800745c <UART_SetConfig+0x2a8>
 800744a:	e00f      	b.n	800746c <UART_SetConfig+0x2b8>
 800744c:	2300      	movs	r3, #0
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007452:	e022      	b.n	800749a <UART_SetConfig+0x2e6>
 8007454:	2302      	movs	r3, #2
 8007456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800745a:	e01e      	b.n	800749a <UART_SetConfig+0x2e6>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007462:	e01a      	b.n	800749a <UART_SetConfig+0x2e6>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746a:	e016      	b.n	800749a <UART_SetConfig+0x2e6>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007472:	e012      	b.n	800749a <UART_SetConfig+0x2e6>
 8007474:	efff69f3 	.word	0xefff69f3
 8007478:	40008000 	.word	0x40008000
 800747c:	40013800 	.word	0x40013800
 8007480:	40021000 	.word	0x40021000
 8007484:	40004400 	.word	0x40004400
 8007488:	40004800 	.word	0x40004800
 800748c:	40004c00 	.word	0x40004c00
 8007490:	40005000 	.word	0x40005000
 8007494:	2310      	movs	r3, #16
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a9f      	ldr	r2, [pc, #636]	@ (800771c <UART_SetConfig+0x568>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d17a      	bne.n	800759a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d824      	bhi.n	80074f6 <UART_SetConfig+0x342>
 80074ac:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <UART_SetConfig+0x300>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074f7 	.word	0x080074f7
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074f7 	.word	0x080074f7
 80074c4:	080074e7 	.word	0x080074e7
 80074c8:	080074f7 	.word	0x080074f7
 80074cc:	080074f7 	.word	0x080074f7
 80074d0:	080074f7 	.word	0x080074f7
 80074d4:	080074ef 	.word	0x080074ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d8:	f7fd f9aa 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80074dc:	61f8      	str	r0, [r7, #28]
        break;
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007720 <UART_SetConfig+0x56c>)
 80074e2:	61fb      	str	r3, [r7, #28]
        break;
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e6:	f7fd f90b 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80074ea:	61f8      	str	r0, [r7, #28]
        break;
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f2:	61fb      	str	r3, [r7, #28]
        break;
 80074f4:	e005      	b.n	8007502 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007500:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80fb 	beq.w	8007700 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	429a      	cmp	r2, r3
 8007518:	d305      	bcc.n	8007526 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	429a      	cmp	r2, r3
 8007524:	d903      	bls.n	800752e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800752c:	e0e8      	b.n	8007700 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2200      	movs	r2, #0
 8007532:	461c      	mov	r4, r3
 8007534:	4615      	mov	r5, r2
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	022b      	lsls	r3, r5, #8
 8007540:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007544:	0222      	lsls	r2, r4, #8
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	6849      	ldr	r1, [r1, #4]
 800754a:	0849      	lsrs	r1, r1, #1
 800754c:	2000      	movs	r0, #0
 800754e:	4688      	mov	r8, r1
 8007550:	4681      	mov	r9, r0
 8007552:	eb12 0a08 	adds.w	sl, r2, r8
 8007556:	eb43 0b09 	adc.w	fp, r3, r9
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007568:	4650      	mov	r0, sl
 800756a:	4659      	mov	r1, fp
 800756c:	f7f9 fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4613      	mov	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800757e:	d308      	bcc.n	8007592 <UART_SetConfig+0x3de>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007586:	d204      	bcs.n	8007592 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	60da      	str	r2, [r3, #12]
 8007590:	e0b6      	b.n	8007700 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007598:	e0b2      	b.n	8007700 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a2:	d15e      	bne.n	8007662 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d828      	bhi.n	80075fe <UART_SetConfig+0x44a>
 80075ac:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <UART_SetConfig+0x400>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	080075ff 	.word	0x080075ff
 80075c4:	080075ef 	.word	0x080075ef
 80075c8:	080075ff 	.word	0x080075ff
 80075cc:	080075ff 	.word	0x080075ff
 80075d0:	080075ff 	.word	0x080075ff
 80075d4:	080075f7 	.word	0x080075f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d8:	f7fd f92a 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80075dc:	61f8      	str	r0, [r7, #28]
        break;
 80075de:	e014      	b.n	800760a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e0:	f7fd f93c 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 80075e4:	61f8      	str	r0, [r7, #28]
        break;
 80075e6:	e010      	b.n	800760a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007720 <UART_SetConfig+0x56c>)
 80075ea:	61fb      	str	r3, [r7, #28]
        break;
 80075ec:	e00d      	b.n	800760a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ee:	f7fd f887 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80075f2:	61f8      	str	r0, [r7, #28]
        break;
 80075f4:	e009      	b.n	800760a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075fa:	61fb      	str	r3, [r7, #28]
        break;
 80075fc:	e005      	b.n	800760a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d077      	beq.n	8007700 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	005a      	lsls	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	441a      	add	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b0f      	cmp	r3, #15
 800762a:	d916      	bls.n	800765a <UART_SetConfig+0x4a6>
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007632:	d212      	bcs.n	800765a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f023 030f 	bic.w	r3, r3, #15
 800763c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	b29b      	uxth	r3, r3
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	b29a      	uxth	r2, r3
 800764a:	8afb      	ldrh	r3, [r7, #22]
 800764c:	4313      	orrs	r3, r2
 800764e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	8afa      	ldrh	r2, [r7, #22]
 8007656:	60da      	str	r2, [r3, #12]
 8007658:	e052      	b.n	8007700 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007660:	e04e      	b.n	8007700 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007662:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007666:	2b08      	cmp	r3, #8
 8007668:	d827      	bhi.n	80076ba <UART_SetConfig+0x506>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x4bc>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076a5 	.word	0x080076a5
 800767c:	080076bb 	.word	0x080076bb
 8007680:	080076ab 	.word	0x080076ab
 8007684:	080076bb 	.word	0x080076bb
 8007688:	080076bb 	.word	0x080076bb
 800768c:	080076bb 	.word	0x080076bb
 8007690:	080076b3 	.word	0x080076b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fd f8cc 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8007698:	61f8      	str	r0, [r7, #28]
        break;
 800769a:	e014      	b.n	80076c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800769c:	f7fd f8de 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 80076a0:	61f8      	str	r0, [r7, #28]
        break;
 80076a2:	e010      	b.n	80076c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007720 <UART_SetConfig+0x56c>)
 80076a6:	61fb      	str	r3, [r7, #28]
        break;
 80076a8:	e00d      	b.n	80076c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076aa:	f7fd f829 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80076ae:	61f8      	str	r0, [r7, #28]
        break;
 80076b0:	e009      	b.n	80076c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076b6:	61fb      	str	r3, [r7, #28]
        break;
 80076b8:	e005      	b.n	80076c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076c4:	bf00      	nop
    }

    if (pclk != 0U)
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d019      	beq.n	8007700 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	085a      	lsrs	r2, r3, #1
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	441a      	add	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d909      	bls.n	80076fa <UART_SetConfig+0x546>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d205      	bcs.n	80076fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60da      	str	r2, [r3, #12]
 80076f8:	e002      	b.n	8007700 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800770c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007710:	4618      	mov	r0, r3
 8007712:	3728      	adds	r7, #40	@ 0x28
 8007714:	46bd      	mov	sp, r7
 8007716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771a:	bf00      	nop
 800771c:	40008000 	.word	0x40008000
 8007720:	00f42400 	.word	0x00f42400

08007724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01a      	beq.n	800783a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007822:	d10a      	bne.n	800783a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	605a      	str	r2, [r3, #4]
  }
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b098      	sub	sp, #96	@ 0x60
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007878:	f7fa fcc0 	bl	80021fc <HAL_GetTick>
 800787c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b08      	cmp	r3, #8
 800788a:	d12e      	bne.n	80078ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800788c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007894:	2200      	movs	r2, #0
 8007896:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f88c 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d021      	beq.n	80078ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e062      	b.n	80079b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d149      	bne.n	800798c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f856 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03c      	beq.n	800798c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	623b      	str	r3, [r7, #32]
   return(result);
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30
 8007932:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	60fb      	str	r3, [r7, #12]
   return(result);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0301 	bic.w	r3, r3, #1
 800795a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e011      	b.n	80079b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3758      	adds	r7, #88	@ 0x58
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	e04f      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079d0:	d04b      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fa fc13 	bl	80021fc <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e04e      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d037      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b80      	cmp	r3, #128	@ 0x80
 80079fe:	d034      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b40      	cmp	r3, #64	@ 0x40
 8007a04:	d031      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d110      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f8ff 	bl	8007c20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2208      	movs	r2, #8
 8007a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e029      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a44:	d111      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f8e5 	bl	8007c20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e00f      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d0a0      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b097      	sub	sp, #92	@ 0x5c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac6:	d10e      	bne.n	8007ae6 <UART_Start_Receive_IT+0x52>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <UART_Start_Receive_IT+0x48>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ada:	e02d      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	@ 0xff
 8007ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ae4:	e028      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <UART_Start_Receive_IT+0x76>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <UART_Start_Receive_IT+0x6c>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	22ff      	movs	r2, #255	@ 0xff
 8007afa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007afe:	e01b      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	227f      	movs	r2, #127	@ 0x7f
 8007b04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b08:	e016      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b12:	d10d      	bne.n	8007b30 <UART_Start_Receive_IT+0x9c>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <UART_Start_Receive_IT+0x92>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	227f      	movs	r2, #127	@ 0x7f
 8007b20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b24:	e008      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	223f      	movs	r2, #63	@ 0x3f
 8007b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b2e:	e003      	b.n	8007b38 <UART_Start_Receive_IT+0xa4>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2222      	movs	r2, #34	@ 0x22
 8007b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b84:	d107      	bne.n	8007b96 <UART_Start_Receive_IT+0x102>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4a21      	ldr	r2, [pc, #132]	@ (8007c18 <UART_Start_Receive_IT+0x184>)
 8007b92:	669a      	str	r2, [r3, #104]	@ 0x68
 8007b94:	e002      	b.n	8007b9c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a20      	ldr	r2, [pc, #128]	@ (8007c1c <UART_Start_Receive_IT+0x188>)
 8007b9a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d019      	beq.n	8007bd8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e6      	bne.n	8007ba4 <UART_Start_Receive_IT+0x110>
 8007bd6:	e018      	b.n	8007c0a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	613b      	str	r3, [r7, #16]
   return(result);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f043 0320 	orr.w	r3, r3, #32
 8007bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf6:	623b      	str	r3, [r7, #32]
 8007bf8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	69f9      	ldr	r1, [r7, #28]
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	375c      	adds	r7, #92	@ 0x5c
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	08007f25 	.word	0x08007f25
 8007c1c:	08007d69 	.word	0x08007d69

08007c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b095      	sub	sp, #84	@ 0x54
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d118      	bne.n	8007cc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f023 0310 	bic.w	r3, r3, #16
 8007caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6979      	ldr	r1, [r7, #20]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cdc:	bf00      	nop
 8007cde:	3754      	adds	r7, #84	@ 0x54
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fa3e 	bl	8007188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6979      	ldr	r1, [r7, #20]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	613b      	str	r3, [r7, #16]
   return(result);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fa0a 	bl	8007174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d60:	bf00      	nop
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b09c      	sub	sp, #112	@ 0x70
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d80:	2b22      	cmp	r3, #34	@ 0x22
 8007d82:	f040 80be 	bne.w	8007f02 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d94:	b2d9      	uxtb	r1, r3
 8007d96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da0:	400a      	ands	r2, r1
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 80a3 	bne.w	8007f16 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e22:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e5      	bne.n	8007e02 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a34      	ldr	r2, [pc, #208]	@ (8007f20 <UART_RxISR_8BIT+0x1b8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d01f      	beq.n	8007e94 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d018      	beq.n	8007e94 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e76:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d12e      	bne.n	8007efa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0310 	bic.w	r3, r3, #16
 8007eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec0:	61fb      	str	r3, [r7, #28]
 8007ec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e6      	bne.n	8007ea2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f003 0310 	and.w	r3, r3, #16
 8007ede:	2b10      	cmp	r3, #16
 8007ee0:	d103      	bne.n	8007eea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff f952 	bl	800719c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef8:	e00d      	b.n	8007f16 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7f9 fa5c 	bl	80013b8 <HAL_UART_RxCpltCallback>
}
 8007f00:	e009      	b.n	8007f16 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	8b1b      	ldrh	r3, [r3, #24]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	b292      	uxth	r2, r2
 8007f14:	831a      	strh	r2, [r3, #24]
}
 8007f16:	bf00      	nop
 8007f18:	3770      	adds	r7, #112	@ 0x70
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40008000 	.word	0x40008000

08007f24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b09c      	sub	sp, #112	@ 0x70
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f3c:	2b22      	cmp	r3, #34	@ 0x22
 8007f3e:	f040 80be 	bne.w	80080be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007f56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f66:	1c9a      	adds	r2, r3, #2
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 80a3 	bne.w	80080d2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fde:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e5      	bne.n	8007fbe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a34      	ldr	r2, [pc, #208]	@ (80080dc <UART_RxISR_16BIT+0x1b8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d01f      	beq.n	8008050 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	61fb      	str	r3, [r7, #28]
   return(result);
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800803c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800803e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008054:	2b01      	cmp	r3, #1
 8008056:	d12e      	bne.n	80080b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	60bb      	str	r3, [r7, #8]
   return(result);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f023 0310 	bic.w	r3, r3, #16
 8008072:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6979      	ldr	r1, [r7, #20]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	613b      	str	r3, [r7, #16]
   return(result);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b10      	cmp	r3, #16
 800809c:	d103      	bne.n	80080a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2210      	movs	r2, #16
 80080a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff f874 	bl	800719c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080b4:	e00d      	b.n	80080d2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7f9 f97e 	bl	80013b8 <HAL_UART_RxCpltCallback>
}
 80080bc:	e009      	b.n	80080d2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	8b1b      	ldrh	r3, [r3, #24]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0208 	orr.w	r2, r2, #8
 80080ce:	b292      	uxth	r2, r2
 80080d0:	831a      	strh	r2, [r3, #24]
}
 80080d2:	bf00      	nop
 80080d4:	3770      	adds	r7, #112	@ 0x70
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	40008000 	.word	0x40008000

080080e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080f4:	b084      	sub	sp, #16
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	f107 001c 	add.w	r0, r7, #28
 8008102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fa26 	bl	8009564 <USB_CoreReset>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800811c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008130:	e005      	b.n	800813e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800814a:	b004      	add	sp, #16
 800814c:	4770      	bx	lr
	...

08008150 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d165      	bne.n	8008230 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4a3e      	ldr	r2, [pc, #248]	@ (8008260 <USB_SetTurnaroundTime+0x110>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d906      	bls.n	800817a <USB_SetTurnaroundTime+0x2a>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4a3d      	ldr	r2, [pc, #244]	@ (8008264 <USB_SetTurnaroundTime+0x114>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d202      	bcs.n	800817a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008174:	230f      	movs	r3, #15
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e05c      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4a39      	ldr	r2, [pc, #228]	@ (8008264 <USB_SetTurnaroundTime+0x114>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d306      	bcc.n	8008190 <USB_SetTurnaroundTime+0x40>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4a38      	ldr	r2, [pc, #224]	@ (8008268 <USB_SetTurnaroundTime+0x118>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d202      	bcs.n	8008190 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800818a:	230e      	movs	r3, #14
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	e051      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4a35      	ldr	r2, [pc, #212]	@ (8008268 <USB_SetTurnaroundTime+0x118>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d306      	bcc.n	80081a6 <USB_SetTurnaroundTime+0x56>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4a34      	ldr	r2, [pc, #208]	@ (800826c <USB_SetTurnaroundTime+0x11c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d202      	bcs.n	80081a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081a0:	230d      	movs	r3, #13
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e046      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a30      	ldr	r2, [pc, #192]	@ (800826c <USB_SetTurnaroundTime+0x11c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d306      	bcc.n	80081bc <USB_SetTurnaroundTime+0x6c>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008270 <USB_SetTurnaroundTime+0x120>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d802      	bhi.n	80081bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081b6:	230c      	movs	r3, #12
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e03b      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4a2c      	ldr	r2, [pc, #176]	@ (8008270 <USB_SetTurnaroundTime+0x120>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d906      	bls.n	80081d2 <USB_SetTurnaroundTime+0x82>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008274 <USB_SetTurnaroundTime+0x124>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d802      	bhi.n	80081d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081cc:	230b      	movs	r3, #11
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e030      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4a27      	ldr	r2, [pc, #156]	@ (8008274 <USB_SetTurnaroundTime+0x124>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d906      	bls.n	80081e8 <USB_SetTurnaroundTime+0x98>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4a26      	ldr	r2, [pc, #152]	@ (8008278 <USB_SetTurnaroundTime+0x128>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d802      	bhi.n	80081e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081e2:	230a      	movs	r3, #10
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	e025      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4a23      	ldr	r2, [pc, #140]	@ (8008278 <USB_SetTurnaroundTime+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d906      	bls.n	80081fe <USB_SetTurnaroundTime+0xae>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4a22      	ldr	r2, [pc, #136]	@ (800827c <USB_SetTurnaroundTime+0x12c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d202      	bcs.n	80081fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081f8:	2309      	movs	r3, #9
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e01a      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4a1e      	ldr	r2, [pc, #120]	@ (800827c <USB_SetTurnaroundTime+0x12c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d306      	bcc.n	8008214 <USB_SetTurnaroundTime+0xc4>
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	4a1d      	ldr	r2, [pc, #116]	@ (8008280 <USB_SetTurnaroundTime+0x130>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d802      	bhi.n	8008214 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800820e:	2308      	movs	r3, #8
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e00f      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <USB_SetTurnaroundTime+0x130>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d906      	bls.n	800822a <USB_SetTurnaroundTime+0xda>
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <USB_SetTurnaroundTime+0x134>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d202      	bcs.n	800822a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008224:	2307      	movs	r3, #7
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e004      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800822a:	2306      	movs	r3, #6
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	e001      	b.n	8008234 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008230:	2309      	movs	r3, #9
 8008232:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	029b      	lsls	r3, r3, #10
 8008248:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800824c:	431a      	orrs	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	00d8acbf 	.word	0x00d8acbf
 8008264:	00e4e1c0 	.word	0x00e4e1c0
 8008268:	00f42400 	.word	0x00f42400
 800826c:	01067380 	.word	0x01067380
 8008270:	011a499f 	.word	0x011a499f
 8008274:	01312cff 	.word	0x01312cff
 8008278:	014ca43f 	.word	0x014ca43f
 800827c:	016e3600 	.word	0x016e3600
 8008280:	01a6ab1f 	.word	0x01a6ab1f
 8008284:	01e84800 	.word	0x01e84800

08008288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f043 0201 	orr.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f023 0201 	bic.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d115      	bne.n	800831a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082fa:	200a      	movs	r0, #10
 80082fc:	f7f9 ff8a 	bl	8002214 <HAL_Delay>
      ms += 10U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	330a      	adds	r3, #10
 8008304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f8b3 	bl	8009472 <USB_GetMode>
 800830c:	4603      	mov	r3, r0
 800830e:	2b01      	cmp	r3, #1
 8008310:	d01e      	beq.n	8008350 <USB_SetCurrentMode+0x84>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2bc7      	cmp	r3, #199	@ 0xc7
 8008316:	d9f0      	bls.n	80082fa <USB_SetCurrentMode+0x2e>
 8008318:	e01a      	b.n	8008350 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d115      	bne.n	800834c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800832c:	200a      	movs	r0, #10
 800832e:	f7f9 ff71 	bl	8002214 <HAL_Delay>
      ms += 10U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	330a      	adds	r3, #10
 8008336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f89a 	bl	8009472 <USB_GetMode>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <USB_SetCurrentMode+0x84>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2bc7      	cmp	r3, #199	@ 0xc7
 8008348:	d9f0      	bls.n	800832c <USB_SetCurrentMode+0x60>
 800834a:	e001      	b.n	8008350 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e005      	b.n	800835c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2bc8      	cmp	r3, #200	@ 0xc8
 8008354:	d101      	bne.n	800835a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008364:	b084      	sub	sp, #16
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	e009      	b.n	8008398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3340      	adds	r3, #64	@ 0x40
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	2200      	movs	r2, #0
 8008390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b0e      	cmp	r3, #14
 800839c:	d9f2      	bls.n	8008384 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800839e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d11c      	bne.n	80083e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e005      	b.n	80083ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083f2:	461a      	mov	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083f8:	2103      	movs	r1, #3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f95a 	bl	80086b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008400:	2110      	movs	r1, #16
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8f6 	bl	80085f4 <USB_FlushTxFifo>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f920 	bl	8008658 <USB_FlushRxFifo>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	461a      	mov	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008434:	461a      	mov	r2, r3
 8008436:	2300      	movs	r3, #0
 8008438:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	461a      	mov	r2, r3
 8008442:	2300      	movs	r3, #0
 8008444:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	e043      	b.n	80084d4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008462:	d118      	bne.n	8008496 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008476:	461a      	mov	r2, r3
 8008478:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e013      	b.n	80084a8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e008      	b.n	80084a8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b4:	461a      	mov	r2, r3
 80084b6:	2300      	movs	r3, #0
 80084b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c6:	461a      	mov	r2, r3
 80084c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084d8:	461a      	mov	r2, r3
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	4293      	cmp	r3, r2
 80084de:	d3b5      	bcc.n	800844c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	e043      	b.n	800856e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084fc:	d118      	bne.n	8008530 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	461a      	mov	r2, r3
 8008512:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	e013      	b.n	8008542 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008526:	461a      	mov	r2, r3
 8008528:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e008      	b.n	8008542 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853c:	461a      	mov	r2, r3
 800853e:	2300      	movs	r3, #0
 8008540:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	2300      	movs	r3, #0
 8008552:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008560:	461a      	mov	r2, r3
 8008562:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	3301      	adds	r3, #1
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008572:	461a      	mov	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4293      	cmp	r3, r2
 8008578:	d3b5      	bcc.n	80084e6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800858c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800859a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f043 0210 	orr.w	r2, r3, #16
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	4b10      	ldr	r3, [pc, #64]	@ (80085f0 <USB_DevInit+0x28c>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f043 0208 	orr.w	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d107      	bne.n	80085e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085d8:	f043 0304 	orr.w	r3, r3, #4
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085ec:	b004      	add	sp, #16
 80085ee:	4770      	bx	lr
 80085f0:	803c3800 	.word	0x803c3800

080085f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800860e:	d901      	bls.n	8008614 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e01b      	b.n	800864c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	daf2      	bge.n	8008602 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	019b      	lsls	r3, r3, #6
 8008624:	f043 0220 	orr.w	r2, r3, #32
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008638:	d901      	bls.n	800863e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e006      	b.n	800864c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b20      	cmp	r3, #32
 8008648:	d0f0      	beq.n	800862c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008670:	d901      	bls.n	8008676 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e018      	b.n	80086a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	daf2      	bge.n	8008664 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2210      	movs	r2, #16
 8008686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008694:	d901      	bls.n	800869a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e006      	b.n	80086a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d0f0      	beq.n	8008688 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086d4:	4313      	orrs	r3, r2
 80086d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b087      	sub	sp, #28
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0306 	and.w	r3, r3, #6
 80086fe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d002      	beq.n	800870c <USB_GetDevSpeed+0x26>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b06      	cmp	r3, #6
 800870a:	d102      	bne.n	8008712 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800870c:	2302      	movs	r3, #2
 800870e:	75fb      	strb	r3, [r7, #23]
 8008710:	e001      	b.n	8008716 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008712:	230f      	movs	r3, #15
 8008714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
}
 8008718:	4618      	mov	r0, r3
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d13a      	bne.n	80087b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f303 	lsl.w	r3, r1, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	68f9      	ldr	r1, [r7, #12]
 800875a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800875e:	4313      	orrs	r3, r2
 8008760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d155      	bne.n	8008824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	791b      	ldrb	r3, [r3, #4]
 8008792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	059b      	lsls	r3, r3, #22
 800879a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800879c:	4313      	orrs	r3, r2
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	e036      	b.n	8008824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087bc:	69da      	ldr	r2, [r3, #28]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	2101      	movs	r1, #1
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087d4:	4313      	orrs	r3, r2
 80087d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d11a      	bne.n	8008824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	791b      	ldrb	r3, [r3, #4]
 8008808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800880a:	430b      	orrs	r3, r1
 800880c:	4313      	orrs	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800881a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d161      	bne.n	8008914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008866:	d11f      	bne.n	80088a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008882:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	2101      	movs	r1, #1
 80088ba:	fa01 f303 	lsl.w	r3, r1, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	43db      	mvns	r3, r3
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c8:	4013      	ands	r3, r2
 80088ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f303 	lsl.w	r3, r1, r3
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	43db      	mvns	r3, r3
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088ec:	4013      	ands	r3, r2
 80088ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	0159      	lsls	r1, r3, #5
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	440b      	add	r3, r1
 8008906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890a:	4619      	mov	r1, r3
 800890c:	4b35      	ldr	r3, [pc, #212]	@ (80089e4 <USB_DeactivateEndpoint+0x1b0>)
 800890e:	4013      	ands	r3, r2
 8008910:	600b      	str	r3, [r1, #0]
 8008912:	e060      	b.n	80089d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892a:	d11f      	bne.n	800896c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008946:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800894a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800896a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	2101      	movs	r1, #1
 800897e:	fa01 f303 	lsl.w	r3, r1, r3
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	43db      	mvns	r3, r3
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800898c:	4013      	ands	r3, r2
 800898e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	2101      	movs	r1, #1
 80089a2:	fa01 f303 	lsl.w	r3, r1, r3
 80089a6:	041b      	lsls	r3, r3, #16
 80089a8:	43db      	mvns	r3, r3
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089b0:	4013      	ands	r3, r2
 80089b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	0159      	lsls	r1, r3, #5
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	440b      	add	r3, r1
 80089ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ce:	4619      	mov	r1, r3
 80089d0:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <USB_DeactivateEndpoint+0x1b4>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	ec337800 	.word	0xec337800
 80089e8:	eff37800 	.word	0xeff37800

080089ec <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	f040 812d 	bne.w	8008c64 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d132      	bne.n	8008a78 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a2c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a30:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a70:	0cdb      	lsrs	r3, r3, #19
 8008a72:	04db      	lsls	r3, r3, #19
 8008a74:	6113      	str	r3, [r2, #16]
 8008a76:	e097      	b.n	8008ba8 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a92:	0cdb      	lsrs	r3, r3, #19
 8008a94:	04db      	lsls	r3, r3, #19
 8008a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ab6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008aba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d11a      	bne.n	8008af8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d903      	bls.n	8008ad6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008af4:	6113      	str	r3, [r2, #16]
 8008af6:	e044      	b.n	8008b82 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	691a      	ldr	r2, [r3, #16]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	1e5a      	subs	r2, r3, #1
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
 8008b1e:	04d9      	lsls	r1, r3, #19
 8008b20:	4b8f      	ldr	r3, [pc, #572]	@ (8008d60 <USB_EPStartXfer+0x374>)
 8008b22:	400b      	ands	r3, r1
 8008b24:	6939      	ldr	r1, [r7, #16]
 8008b26:	0148      	lsls	r0, r1, #5
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b30:	4313      	orrs	r3, r2
 8008b32:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d122      	bne.n	8008b82 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b56:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b5a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	89fb      	ldrh	r3, [r7, #14]
 8008b6c:	075b      	lsls	r3, r3, #29
 8008b6e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008b72:	6939      	ldr	r1, [r7, #16]
 8008b74:	0148      	lsls	r0, r1, #5
 8008b76:	6979      	ldr	r1, [r7, #20]
 8008b78:	4401      	add	r1, r0
 8008b7a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b98:	6939      	ldr	r1, [r7, #16]
 8008b9a:	0148      	lsls	r0, r1, #5
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	4401      	add	r1, r0
 8008ba0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bc6:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d015      	beq.n	8008bfc <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 813a 	beq.w	8008e4e <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	2101      	movs	r1, #1
 8008bec:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bfa:	e128      	b.n	8008e4e <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d110      	bne.n	8008c2e <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	e00f      	b.n	8008c4e <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c4c:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9a7 	bl	8008fb0 <USB_WritePacket>
 8008c62:	e0f4      	b.n	8008e4e <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7e:	0cdb      	lsrs	r3, r3, #19
 8008c80:	04db      	lsls	r3, r3, #19
 8008c82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ca2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ca6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d12f      	bne.n	8008d0e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cdc:	6939      	ldr	r1, [r7, #16]
 8008cde:	0148      	lsls	r0, r1, #5
 8008ce0:	6979      	ldr	r1, [r7, #20]
 8008ce2:	4401      	add	r1, r0
 8008ce4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d0a:	6113      	str	r3, [r2, #16]
 8008d0c:	e062      	b.n	8008dd4 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d126      	bne.n	8008d64 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2c:	6939      	ldr	r1, [r7, #16]
 8008d2e:	0148      	lsls	r0, r1, #5
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	4401      	add	r1, r0
 8008d34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d5a:	6113      	str	r3, [r2, #16]
 8008d5c:	e03a      	b.n	8008dd4 <USB_EPStartXfer+0x3e8>
 8008d5e:	bf00      	nop
 8008d60:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	1e5a      	subs	r2, r3, #1
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	89fa      	ldrh	r2, [r7, #14]
 8008d80:	fb03 f202 	mul.w	r2, r3, r2
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	89fb      	ldrh	r3, [r7, #14]
 8008d98:	04d9      	lsls	r1, r3, #19
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e58 <USB_EPStartXfer+0x46c>)
 8008d9c:	400b      	ands	r3, r1
 8008d9e:	6939      	ldr	r1, [r7, #16]
 8008da0:	0148      	lsls	r0, r1, #5
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	4401      	add	r1, r0
 8008da6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008daa:	4313      	orrs	r3, r2
 8008dac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc4:	6939      	ldr	r1, [r7, #16]
 8008dc6:	0148      	lsls	r0, r1, #5
 8008dc8:	6979      	ldr	r1, [r7, #20]
 8008dca:	4401      	add	r1, r0
 8008dcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d128      	bne.n	8008e2e <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d110      	bne.n	8008e0e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	e00f      	b.n	8008e2e <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e2c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e48:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	1ff80000 	.word	0x1ff80000

08008e5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d14a      	bne.n	8008f10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e92:	f040 8086 	bne.w	8008fa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	7812      	ldrb	r2, [r2, #0]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	7812      	ldrb	r2, [r2, #0]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008edc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d902      	bls.n	8008ef4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef2:	e056      	b.n	8008fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f0c:	d0e7      	beq.n	8008ede <USB_EPStopXfer+0x82>
 8008f0e:	e048      	b.n	8008fa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f28:	d13b      	bne.n	8008fa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d902      	bls.n	8008f88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
          break;
 8008f86:	e00c      	b.n	8008fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fa0:	d0e7      	beq.n	8008f72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b089      	sub	sp, #36	@ 0x24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	71fb      	strb	r3, [r7, #7]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008fce:	88bb      	ldrh	r3, [r7, #4]
 8008fd0:	3303      	adds	r3, #3
 8008fd2:	089b      	lsrs	r3, r3, #2
 8008fd4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	e018      	b.n	800900e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	031a      	lsls	r2, r3, #12
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe8:	461a      	mov	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	3301      	adds	r3, #1
 8009000:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3301      	adds	r3, #1
 8009006:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	3301      	adds	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	429a      	cmp	r2, r3
 8009014:	d3e2      	bcc.n	8008fdc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3724      	adds	r7, #36	@ 0x24
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009024:	b480      	push	{r7}
 8009026:	b08b      	sub	sp, #44	@ 0x2c
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	089b      	lsrs	r3, r3, #2
 800903e:	b29b      	uxth	r3, r3
 8009040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009042:	88fb      	ldrh	r3, [r7, #6]
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800904a:	2300      	movs	r3, #0
 800904c:	623b      	str	r3, [r7, #32]
 800904e:	e014      	b.n	800907a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	601a      	str	r2, [r3, #0]
    pDest++;
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	3301      	adds	r3, #1
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	3301      	adds	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	3301      	adds	r3, #1
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	3301      	adds	r3, #1
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	3301      	adds	r3, #1
 8009078:	623b      	str	r3, [r7, #32]
 800907a:	6a3a      	ldr	r2, [r7, #32]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	429a      	cmp	r2, r3
 8009080:	d3e6      	bcc.n	8009050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009082:	8bfb      	ldrh	r3, [r7, #30]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01e      	beq.n	80090c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009092:	461a      	mov	r2, r3
 8009094:	f107 0310 	add.w	r3, r7, #16
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	fa22 f303 	lsr.w	r3, r2, r3
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	701a      	strb	r2, [r3, #0]
      i++;
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	3301      	adds	r3, #1
 80090b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	3301      	adds	r3, #1
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090ba:	8bfb      	ldrh	r3, [r7, #30]
 80090bc:	3b01      	subs	r3, #1
 80090be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090c0:	8bfb      	ldrh	r3, [r7, #30]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1ea      	bne.n	800909c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	372c      	adds	r7, #44	@ 0x2c
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d12c      	bne.n	800914a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	db12      	blt.n	8009128 <USB_EPSetStall+0x54>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00f      	beq.n	8009128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	e02b      	b.n	80091a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db12      	blt.n	8009182 <USB_EPSetStall+0xae>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00f      	beq.n	8009182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	440a      	add	r2, r1
 8009178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800917c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d128      	bne.n	800921e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	0151      	lsls	r1, r2, #5
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	440a      	add	r2, r1
 80091e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	791b      	ldrb	r3, [r3, #4]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d003      	beq.n	80091fc <USB_EPClearStall+0x4c>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	791b      	ldrb	r3, [r3, #4]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d138      	bne.n	800926e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	e027      	b.n	800926e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009238:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800923c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	791b      	ldrb	r3, [r3, #4]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d003      	beq.n	800924e <USB_EPClearStall+0x9e>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d10f      	bne.n	800926e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800926c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800929a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800929e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092b0:	68f9      	ldr	r1, [r7, #12]
 80092b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b6:	4313      	orrs	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092f6:	f023 0302 	bic.w	r3, r3, #2
 80092fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009338:	f043 0302 	orr.w	r3, r3, #2
 800933c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4013      	ands	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009364:	68fb      	ldr	r3, [r7, #12]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009372:	b480      	push	{r7}
 8009374:	b085      	sub	sp, #20
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	4013      	ands	r3, r2
 8009394:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	0c1b      	lsrs	r3, r3, #16
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b085      	sub	sp, #20
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	4013      	ands	r3, r2
 80093c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	b29b      	uxth	r3, r3
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	4013      	ands	r3, r2
 8009406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009408:	68bb      	ldr	r3, [r7, #8]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009416:	b480      	push	{r7}
 8009418:	b087      	sub	sp, #28
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	460b      	mov	r3, r1
 8009420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009438:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	01db      	lsls	r3, r3, #7
 8009448:	b2db      	uxtb	r3, r3
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	4013      	ands	r3, r2
 8009462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009464:	68bb      	ldr	r3, [r7, #8]
}
 8009466:	4618      	mov	r0, r3
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0301 	and.w	r3, r3, #1
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094ac:	f023 0307 	bic.w	r3, r3, #7
 80094b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	333c      	adds	r3, #60	@ 0x3c
 80094e6:	3304      	adds	r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009560 <USB_EP0_OutStart+0x8c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d90a      	bls.n	800950a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009504:	d101      	bne.n	800950a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e024      	b.n	8009554 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009538:	f043 0318 	orr.w	r3, r3, #24
 800953c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009550:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	4f54300a 	.word	0x4f54300a

08009564 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800957c:	d901      	bls.n	8009582 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e01b      	b.n	80095ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	daf2      	bge.n	8009570 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a6:	d901      	bls.n	80095ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e006      	b.n	80095ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d0f0      	beq.n	800959a <USB_CoreReset+0x36>

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80095d8:	f002 fdca 	bl	800c170 <USBD_static_malloc>
 80095dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d109      	bne.n	80095f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	32b0      	adds	r2, #176	@ 0xb0
 80095ee:	2100      	movs	r1, #0
 80095f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095f4:	2302      	movs	r3, #2
 80095f6:	e0d4      	b.n	80097a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095fc:	2100      	movs	r1, #0
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f003 fdc5 	bl	800d18e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	32b0      	adds	r2, #176	@ 0xb0
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	32b0      	adds	r2, #176	@ 0xb0
 800961e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	7c1b      	ldrb	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d138      	bne.n	80096a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009630:	4b5e      	ldr	r3, [pc, #376]	@ (80097ac <USBD_CDC_Init+0x1e4>)
 8009632:	7819      	ldrb	r1, [r3, #0]
 8009634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009638:	2202      	movs	r2, #2
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f002 fb84 	bl	800bd48 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009640:	4b5a      	ldr	r3, [pc, #360]	@ (80097ac <USBD_CDC_Init+0x1e4>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 020f 	and.w	r2, r3, #15
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	3324      	adds	r3, #36	@ 0x24
 8009656:	2201      	movs	r2, #1
 8009658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800965a:	4b55      	ldr	r3, [pc, #340]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 800965c:	7819      	ldrb	r1, [r3, #0]
 800965e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009662:	2202      	movs	r2, #2
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f002 fb6f 	bl	800bd48 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800966a:	4b51      	ldr	r3, [pc, #324]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 020f 	and.w	r2, r3, #15
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009682:	2201      	movs	r2, #1
 8009684:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009686:	4b4b      	ldr	r3, [pc, #300]	@ (80097b4 <USBD_CDC_Init+0x1ec>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 020f 	and.w	r2, r3, #15
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	3326      	adds	r3, #38	@ 0x26
 800969c:	2210      	movs	r2, #16
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	e035      	b.n	800970e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096a2:	4b42      	ldr	r3, [pc, #264]	@ (80097ac <USBD_CDC_Init+0x1e4>)
 80096a4:	7819      	ldrb	r1, [r3, #0]
 80096a6:	2340      	movs	r3, #64	@ 0x40
 80096a8:	2202      	movs	r2, #2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f002 fb4c 	bl	800bd48 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096b0:	4b3e      	ldr	r3, [pc, #248]	@ (80097ac <USBD_CDC_Init+0x1e4>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	3324      	adds	r3, #36	@ 0x24
 80096c6:	2201      	movs	r2, #1
 80096c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096ca:	4b39      	ldr	r3, [pc, #228]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	2340      	movs	r3, #64	@ 0x40
 80096d0:	2202      	movs	r2, #2
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f002 fb38 	bl	800bd48 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096d8:	4b35      	ldr	r3, [pc, #212]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f003 020f 	and.w	r2, r3, #15
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096f0:	2201      	movs	r2, #1
 80096f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096f4:	4b2f      	ldr	r3, [pc, #188]	@ (80097b4 <USBD_CDC_Init+0x1ec>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	3326      	adds	r3, #38	@ 0x26
 800970a:	2210      	movs	r2, #16
 800970c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800970e:	4b29      	ldr	r3, [pc, #164]	@ (80097b4 <USBD_CDC_Init+0x1ec>)
 8009710:	7819      	ldrb	r1, [r3, #0]
 8009712:	2308      	movs	r3, #8
 8009714:	2203      	movs	r2, #3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f002 fb16 	bl	800bd48 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800971c:	4b25      	ldr	r3, [pc, #148]	@ (80097b4 <USBD_CDC_Init+0x1ec>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	3324      	adds	r3, #36	@ 0x24
 8009732:	2201      	movs	r2, #1
 8009734:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	33b0      	adds	r3, #176	@ 0xb0
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800976c:	2302      	movs	r3, #2
 800976e:	e018      	b.n	80097a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7c1b      	ldrb	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009778:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 800977a:	7819      	ldrb	r1, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 fc58 	bl	800c03c <USBD_LL_PrepareReceive>
 800978c:	e008      	b.n	80097a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800978e:	4b08      	ldr	r3, [pc, #32]	@ (80097b0 <USBD_CDC_Init+0x1e8>)
 8009790:	7819      	ldrb	r1, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f002 fc4e 	bl	800c03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	2000012f 	.word	0x2000012f
 80097b0:	20000130 	.word	0x20000130
 80097b4:	20000131 	.word	0x20000131

080097b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80097c4:	4b3a      	ldr	r3, [pc, #232]	@ (80098b0 <USBD_CDC_DeInit+0xf8>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f002 fafa 	bl	800bdc4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097d0:	4b37      	ldr	r3, [pc, #220]	@ (80098b0 <USBD_CDC_DeInit+0xf8>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	3324      	adds	r3, #36	@ 0x24
 80097e6:	2200      	movs	r2, #0
 80097e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097ea:	4b32      	ldr	r3, [pc, #200]	@ (80098b4 <USBD_CDC_DeInit+0xfc>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f002 fae7 	bl	800bdc4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097f6:	4b2f      	ldr	r3, [pc, #188]	@ (80098b4 <USBD_CDC_DeInit+0xfc>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 020f 	and.w	r2, r3, #15
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800980e:	2200      	movs	r2, #0
 8009810:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009812:	4b29      	ldr	r3, [pc, #164]	@ (80098b8 <USBD_CDC_DeInit+0x100>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 fad3 	bl	800bdc4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800981e:	4b26      	ldr	r3, [pc, #152]	@ (80098b8 <USBD_CDC_DeInit+0x100>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	f003 020f 	and.w	r2, r3, #15
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	3324      	adds	r3, #36	@ 0x24
 8009834:	2200      	movs	r2, #0
 8009836:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009838:	4b1f      	ldr	r3, [pc, #124]	@ (80098b8 <USBD_CDC_DeInit+0x100>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f003 020f 	and.w	r2, r3, #15
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	440b      	add	r3, r1
 800984c:	3326      	adds	r3, #38	@ 0x26
 800984e:	2200      	movs	r2, #0
 8009850:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	32b0      	adds	r2, #176	@ 0xb0
 800985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01f      	beq.n	80098a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	33b0      	adds	r3, #176	@ 0xb0
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32b0      	adds	r2, #176	@ 0xb0
 8009882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009886:	4618      	mov	r0, r3
 8009888:	f002 fc80 	bl	800c18c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	@ 0xb0
 8009896:	2100      	movs	r1, #0
 8009898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000012f 	.word	0x2000012f
 80098b4:	20000130 	.word	0x20000130
 80098b8:	20000131 	.word	0x20000131

080098bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	32b0      	adds	r2, #176	@ 0xb0
 80098d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e0bf      	b.n	8009a6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d050      	beq.n	800999a <USBD_CDC_Setup+0xde>
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	f040 80af 	bne.w	8009a5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88db      	ldrh	r3, [r3, #6]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d03a      	beq.n	800997c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b25b      	sxtb	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	da1b      	bge.n	8009948 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	33b0      	adds	r3, #176	@ 0xb0
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009926:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	88d2      	ldrh	r2, [r2, #6]
 800992c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	88db      	ldrh	r3, [r3, #6]
 8009932:	2b07      	cmp	r3, #7
 8009934:	bf28      	it	cs
 8009936:	2307      	movcs	r3, #7
 8009938:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	89fa      	ldrh	r2, [r7, #14]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 fd7d 	bl	800b440 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009946:	e090      	b.n	8009a6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	785a      	ldrb	r2, [r3, #1]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88db      	ldrh	r3, [r3, #6]
 8009956:	2b3f      	cmp	r3, #63	@ 0x3f
 8009958:	d803      	bhi.n	8009962 <USBD_CDC_Setup+0xa6>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	88db      	ldrh	r3, [r3, #6]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	e000      	b.n	8009964 <USBD_CDC_Setup+0xa8>
 8009962:	2240      	movs	r2, #64	@ 0x40
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800996a:	6939      	ldr	r1, [r7, #16]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009972:	461a      	mov	r2, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 fd8f 	bl	800b498 <USBD_CtlPrepareRx>
      break;
 800997a:	e076      	b.n	8009a6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	33b0      	adds	r3, #176	@ 0xb0
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	7850      	ldrb	r0, [r2, #1]
 8009992:	2200      	movs	r2, #0
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	4798      	blx	r3
      break;
 8009998:	e067      	b.n	8009a6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	2b0b      	cmp	r3, #11
 80099a0:	d851      	bhi.n	8009a46 <USBD_CDC_Setup+0x18a>
 80099a2:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <USBD_CDC_Setup+0xec>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099d9 	.word	0x080099d9
 80099ac:	08009a55 	.word	0x08009a55
 80099b0:	08009a47 	.word	0x08009a47
 80099b4:	08009a47 	.word	0x08009a47
 80099b8:	08009a47 	.word	0x08009a47
 80099bc:	08009a47 	.word	0x08009a47
 80099c0:	08009a47 	.word	0x08009a47
 80099c4:	08009a47 	.word	0x08009a47
 80099c8:	08009a47 	.word	0x08009a47
 80099cc:	08009a47 	.word	0x08009a47
 80099d0:	08009a03 	.word	0x08009a03
 80099d4:	08009a2d 	.word	0x08009a2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d107      	bne.n	80099f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099e4:	f107 030a 	add.w	r3, r7, #10
 80099e8:	2202      	movs	r2, #2
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 fd27 	bl	800b440 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099f2:	e032      	b.n	8009a5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fca5 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 80099fc:	2303      	movs	r3, #3
 80099fe:	75fb      	strb	r3, [r7, #23]
          break;
 8009a00:	e02b      	b.n	8009a5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d107      	bne.n	8009a1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a0e:	f107 030d 	add.w	r3, r7, #13
 8009a12:	2201      	movs	r2, #1
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fd12 	bl	800b440 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a1c:	e01d      	b.n	8009a5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 fc90 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
          break;
 8009a2a:	e016      	b.n	8009a5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d00f      	beq.n	8009a58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 fc83 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a40:	2303      	movs	r3, #3
 8009a42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a44:	e008      	b.n	8009a58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 fc7c 	bl	800b346 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	75fb      	strb	r3, [r7, #23]
          break;
 8009a52:	e002      	b.n	8009a5a <USBD_CDC_Setup+0x19e>
          break;
 8009a54:	bf00      	nop
 8009a56:	e008      	b.n	8009a6a <USBD_CDC_Setup+0x1ae>
          break;
 8009a58:	bf00      	nop
      }
      break;
 8009a5a:	e006      	b.n	8009a6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fc71 	bl	800b346 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a64:	2303      	movs	r3, #3
 8009a66:	75fb      	strb	r3, [r7, #23]
      break;
 8009a68:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	32b0      	adds	r2, #176	@ 0xb0
 8009a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e065      	b.n	8009b6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32b0      	adds	r2, #176	@ 0xb0
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	f003 020f 	and.w	r2, r3, #15
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d02f      	beq.n	8009b28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	3318      	adds	r3, #24
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f003 010f 	and.w	r1, r3, #15
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	440b      	add	r3, r1
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4403      	add	r3, r0
 8009af0:	331c      	adds	r3, #28
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d112      	bne.n	8009b28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	f003 020f 	and.w	r2, r3, #15
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	3318      	adds	r3, #24
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b1a:	78f9      	ldrb	r1, [r7, #3]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2200      	movs	r2, #0
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f002 fa53 	bl	800bfcc <USBD_LL_Transmit>
 8009b26:	e01f      	b.n	8009b68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	33b0      	adds	r3, #176	@ 0xb0
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d010      	beq.n	8009b68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	33b0      	adds	r3, #176	@ 0xb0
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b64:	78fa      	ldrb	r2, [r7, #3]
 8009b66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	32b0      	adds	r2, #176	@ 0xb0
 8009b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	32b0      	adds	r2, #176	@ 0xb0
 8009b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e01a      	b.n	8009bda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f002 fa7f 	bl	800c0ac <USBD_LL_GetRxDataSize>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	33b0      	adds	r3, #176	@ 0xb0
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	32b0      	adds	r2, #176	@ 0xb0
 8009bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e024      	b.n	8009c4e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	33b0      	adds	r3, #176	@ 0xb0
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d019      	beq.n	8009c4c <USBD_CDC_EP0_RxReady+0x6a>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c1e:	2bff      	cmp	r3, #255	@ 0xff
 8009c20:	d014      	beq.n	8009c4c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	33b0      	adds	r3, #176	@ 0xb0
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	22ff      	movs	r2, #255	@ 0xff
 8009c48:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c60:	2182      	movs	r1, #130	@ 0x82
 8009c62:	4818      	ldr	r0, [pc, #96]	@ (8009cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c64:	f000 fd0f 	bl	800a686 <USBD_GetEpDesc>
 8009c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	4815      	ldr	r0, [pc, #84]	@ (8009cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c6e:	f000 fd0a 	bl	800a686 <USBD_GetEpDesc>
 8009c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c74:	2181      	movs	r1, #129	@ 0x81
 8009c76:	4813      	ldr	r0, [pc, #76]	@ (8009cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c78:	f000 fd05 	bl	800a686 <USBD_GetEpDesc>
 8009c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2210      	movs	r2, #16
 8009c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d006      	beq.n	8009c9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c98:	711a      	strb	r2, [r3, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cac:	711a      	strb	r2, [r3, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2243      	movs	r2, #67	@ 0x43
 8009cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cb8:	4b02      	ldr	r3, [pc, #8]	@ (8009cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200000ec 	.word	0x200000ec

08009cc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cd0:	2182      	movs	r1, #130	@ 0x82
 8009cd2:	4818      	ldr	r0, [pc, #96]	@ (8009d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cd4:	f000 fcd7 	bl	800a686 <USBD_GetEpDesc>
 8009cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4815      	ldr	r0, [pc, #84]	@ (8009d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cde:	f000 fcd2 	bl	800a686 <USBD_GetEpDesc>
 8009ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ce4:	2181      	movs	r1, #129	@ 0x81
 8009ce6:	4813      	ldr	r0, [pc, #76]	@ (8009d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ce8:	f000 fccd 	bl	800a686 <USBD_GetEpDesc>
 8009cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2200      	movs	r2, #0
 8009d04:	711a      	strb	r2, [r3, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f042 0202 	orr.w	r2, r2, #2
 8009d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	711a      	strb	r2, [r3, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f042 0202 	orr.w	r2, r2, #2
 8009d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2243      	movs	r2, #67	@ 0x43
 8009d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d28:	4b02      	ldr	r3, [pc, #8]	@ (8009d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200000ec 	.word	0x200000ec

08009d38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d40:	2182      	movs	r1, #130	@ 0x82
 8009d42:	4818      	ldr	r0, [pc, #96]	@ (8009da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d44:	f000 fc9f 	bl	800a686 <USBD_GetEpDesc>
 8009d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	4815      	ldr	r0, [pc, #84]	@ (8009da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d4e:	f000 fc9a 	bl	800a686 <USBD_GetEpDesc>
 8009d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d54:	2181      	movs	r1, #129	@ 0x81
 8009d56:	4813      	ldr	r0, [pc, #76]	@ (8009da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d58:	f000 fc95 	bl	800a686 <USBD_GetEpDesc>
 8009d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2210      	movs	r2, #16
 8009d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d006      	beq.n	8009d7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d78:	711a      	strb	r2, [r3, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d8c:	711a      	strb	r2, [r3, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2243      	movs	r2, #67	@ 0x43
 8009d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d98:	4b02      	ldr	r3, [pc, #8]	@ (8009da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200000ec 	.word	0x200000ec

08009da8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	220a      	movs	r2, #10
 8009db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009db6:	4b03      	ldr	r3, [pc, #12]	@ (8009dc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	200000a8 	.word	0x200000a8

08009dc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e009      	b.n	8009df0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	33b0      	adds	r3, #176	@ 0xb0
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	32b0      	adds	r2, #176	@ 0xb0
 8009e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e008      	b.n	8009e34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	32b0      	adds	r2, #176	@ 0xb0
 8009e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e004      	b.n	8009e6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	32b0      	adds	r2, #176	@ 0xb0
 8009e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32b0      	adds	r2, #176	@ 0xb0
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e018      	b.n	8009edc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7c1b      	ldrb	r3, [r3, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <USBD_CDC_ReceivePacket+0x68>)
 8009eb4:	7819      	ldrb	r1, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f002 f8bb 	bl	800c03c <USBD_LL_PrepareReceive>
 8009ec6:	e008      	b.n	8009eda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ec8:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <USBD_CDC_ReceivePacket+0x68>)
 8009eca:	7819      	ldrb	r1, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ed2:	2340      	movs	r3, #64	@ 0x40
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 f8b1 	bl	800c03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20000130 	.word	0x20000130

08009ee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e01f      	b.n	8009f40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	79fa      	ldrb	r2, [r7, #7]
 8009f32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f001 fe89 	bl	800bc4c <USBD_LL_Init>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e025      	b.n	8009fac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	32ae      	adds	r2, #174	@ 0xae
 8009f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00f      	beq.n	8009f9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	32ae      	adds	r2, #174	@ 0xae
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	f107 020e 	add.w	r2, r7, #14
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	4602      	mov	r2, r0
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fe91 	bl	800bce4 <USBD_LL_Start>
 8009fc2:	4603      	mov	r3, r0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d009      	beq.n	800a010 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	4611      	mov	r1, r2
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	4798      	blx	r3
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	4611      	mov	r1, r2
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	4618      	mov	r0, r3
 800a062:	f001 f936 	bl	800b2d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a074:	461a      	mov	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a082:	f003 031f 	and.w	r3, r3, #31
 800a086:	2b02      	cmp	r3, #2
 800a088:	d01a      	beq.n	800a0c0 <USBD_LL_SetupStage+0x72>
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d822      	bhi.n	800a0d4 <USBD_LL_SetupStage+0x86>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <USBD_LL_SetupStage+0x4a>
 800a092:	2b01      	cmp	r3, #1
 800a094:	d00a      	beq.n	800a0ac <USBD_LL_SetupStage+0x5e>
 800a096:	e01d      	b.n	800a0d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fb63 	bl	800a76c <USBD_StdDevReq>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0aa:	e020      	b.n	800a0ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fbcb 	bl	800a850 <USBD_StdItfReq>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a0be:	e016      	b.n	800a0ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fc2d 	bl	800a928 <USBD_StdEPReq>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d2:	e00c      	b.n	800a0ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fea4 	bl	800be30 <USBD_LL_StallEP>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ec:	bf00      	nop
  }

  return ret;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	460b      	mov	r3, r1
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d16e      	bne.n	800a1ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a11e:	2b03      	cmp	r3, #3
 800a120:	f040 8098 	bne.w	800a254 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d913      	bls.n	800a158 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	1ad2      	subs	r2, r2, r3
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	4293      	cmp	r3, r2
 800a148:	bf28      	it	cs
 800a14a:	4613      	movcs	r3, r2
 800a14c:	461a      	mov	r2, r3
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f001 f9be 	bl	800b4d2 <USBD_CtlContinueRx>
 800a156:	e07d      	b.n	800a254 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a15e:	f003 031f 	and.w	r3, r3, #31
 800a162:	2b02      	cmp	r3, #2
 800a164:	d014      	beq.n	800a190 <USBD_LL_DataOutStage+0x98>
 800a166:	2b02      	cmp	r3, #2
 800a168:	d81d      	bhi.n	800a1a6 <USBD_LL_DataOutStage+0xae>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <USBD_LL_DataOutStage+0x7c>
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d003      	beq.n	800a17a <USBD_LL_DataOutStage+0x82>
 800a172:	e018      	b.n	800a1a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	75bb      	strb	r3, [r7, #22]
            break;
 800a178:	e018      	b.n	800a1ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a180:	b2db      	uxtb	r3, r3
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 fa64 	bl	800a652 <USBD_CoreFindIF>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75bb      	strb	r3, [r7, #22]
            break;
 800a18e:	e00d      	b.n	800a1ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a196:	b2db      	uxtb	r3, r3
 800a198:	4619      	mov	r1, r3
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 fa66 	bl	800a66c <USBD_CoreFindEP>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a1a4:	e002      	b.n	800a1ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a1aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1ac:	7dbb      	ldrb	r3, [r7, #22]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d119      	bne.n	800a1e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d113      	bne.n	800a1e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a1be:	7dba      	ldrb	r2, [r7, #22]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	32ae      	adds	r2, #174	@ 0xae
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a1ce:	7dba      	ldrb	r2, [r7, #22]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a1d6:	7dba      	ldrb	r2, [r7, #22]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	32ae      	adds	r2, #174	@ 0xae
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f001 f984 	bl	800b4f4 <USBD_CtlSendStatus>
 800a1ec:	e032      	b.n	800a254 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fa37 	bl	800a66c <USBD_CoreFindEP>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a202:	7dbb      	ldrb	r3, [r7, #22]
 800a204:	2bff      	cmp	r3, #255	@ 0xff
 800a206:	d025      	beq.n	800a254 <USBD_LL_DataOutStage+0x15c>
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d122      	bne.n	800a254 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b03      	cmp	r3, #3
 800a218:	d117      	bne.n	800a24a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a21a:	7dba      	ldrb	r2, [r7, #22]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	32ae      	adds	r2, #174	@ 0xae
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00f      	beq.n	800a24a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a22a:	7dba      	ldrb	r2, [r7, #22]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a232:	7dba      	ldrb	r2, [r7, #22]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	32ae      	adds	r2, #174	@ 0xae
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	7afa      	ldrb	r2, [r7, #11]
 800a240:	4611      	mov	r1, r2
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	4798      	blx	r3
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	e000      	b.n	800a256 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	460b      	mov	r3, r1
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d16f      	bne.n	800a352 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3314      	adds	r3, #20
 800a276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d15a      	bne.n	800a338 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d914      	bls.n	800a2b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f001 f8e6 	bl	800b476 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f001 fec3 	bl	800c03c <USBD_LL_PrepareReceive>
 800a2b6:	e03f      	b.n	800a338 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d11c      	bne.n	800a2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d316      	bcc.n	800a2fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d20f      	bcs.n	800a2fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f001 f8c7 	bl	800b476 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f001 fea0 	bl	800c03c <USBD_LL_PrepareReceive>
 800a2fc:	e01c      	b.n	800a338 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b03      	cmp	r3, #3
 800a308:	d10f      	bne.n	800a32a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d009      	beq.n	800a32a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a32a:	2180      	movs	r1, #128	@ 0x80
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f001 fd7f 	bl	800be30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f001 f8f1 	bl	800b51a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d03a      	beq.n	800a3b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fe42 	bl	8009fcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a350:	e032      	b.n	800a3b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a352:	7afb      	ldrb	r3, [r7, #11]
 800a354:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	4619      	mov	r1, r3
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f985 	bl	800a66c <USBD_CoreFindEP>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	2bff      	cmp	r3, #255	@ 0xff
 800a36a:	d025      	beq.n	800a3b8 <USBD_LL_DataInStage+0x15a>
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d122      	bne.n	800a3b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d11c      	bne.n	800a3b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a37e:	7dfa      	ldrb	r2, [r7, #23]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	32ae      	adds	r2, #174	@ 0xae
 800a384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d014      	beq.n	800a3b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a38e:	7dfa      	ldrb	r2, [r7, #23]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a396:	7dfa      	ldrb	r2, [r7, #23]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	32ae      	adds	r2, #174	@ 0xae
 800a39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	7afa      	ldrb	r2, [r7, #11]
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	4798      	blx	r3
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3ae:	7dbb      	ldrb	r3, [r7, #22]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a3b4:	7dbb      	ldrb	r3, [r7, #22]
 800a3b6:	e000      	b.n	800a3ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d014      	beq.n	800a428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00e      	beq.n	800a428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6852      	ldr	r2, [r2, #4]
 800a416:	b2d2      	uxtb	r2, r2
 800a418:	4611      	mov	r1, r2
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	4798      	blx	r3
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a428:	2340      	movs	r3, #64	@ 0x40
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 fc8a 	bl	800bd48 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2240      	movs	r2, #64	@ 0x40
 800a440:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a444:	2340      	movs	r3, #64	@ 0x40
 800a446:	2200      	movs	r2, #0
 800a448:	2180      	movs	r1, #128	@ 0x80
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fc7c 	bl	800bd48 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2240      	movs	r2, #64	@ 0x40
 800a45a:	621a      	str	r2, [r3, #32]

  return ret;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b04      	cmp	r3, #4
 800a498:	d006      	beq.n	800a4a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d106      	bne.n	800a4e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d110      	bne.n	800a524 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	32ae      	adds	r2, #174	@ 0xae
 800a544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e01c      	b.n	800a58a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d115      	bne.n	800a588 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32ae      	adds	r2, #174	@ 0xae
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	32ae      	adds	r2, #174	@ 0xae
 800a57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	78fa      	ldrb	r2, [r7, #3]
 800a582:	4611      	mov	r1, r2
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	32ae      	adds	r2, #174	@ 0xae
 800a5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e01c      	b.n	800a5ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d115      	bne.n	800a5ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	32ae      	adds	r2, #174	@ 0xae
 800a5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00b      	beq.n	800a5ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32ae      	adds	r2, #174	@ 0xae
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6852      	ldr	r2, [r2, #4]
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	4611      	mov	r1, r2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a65e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a678:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	885b      	ldrh	r3, [r3, #2]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d91f      	bls.n	800a6ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6b2:	e013      	b.n	800a6dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6b4:	f107 030a 	add.w	r3, r7, #10
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6978      	ldr	r0, [r7, #20]
 800a6bc:	f000 f81b 	bl	800a6f6 <USBD_GetNextDesc>
 800a6c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d108      	bne.n	800a6dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	789b      	ldrb	r3, [r3, #2]
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d008      	beq.n	800a6ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	897b      	ldrh	r3, [r7, #10]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d8e5      	bhi.n	800a6b4 <USBD_GetEpDesc+0x2e>
 800a6e8:	e000      	b.n	800a6ec <USBD_GetEpDesc+0x66>
          break;
 800a6ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a6ec:	693b      	ldr	r3, [r7, #16]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	7812      	ldrb	r2, [r2, #0]
 800a70c:	4413      	add	r3, r2
 800a70e:	b29a      	uxth	r2, r3
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	461a      	mov	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4413      	add	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a720:	68fb      	ldr	r3, [r7, #12]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a72e:	b480      	push	{r7}
 800a730:	b087      	sub	sp, #28
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	3301      	adds	r3, #1
 800a744:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a74c:	8a3b      	ldrh	r3, [r7, #16]
 800a74e:	021b      	lsls	r3, r3, #8
 800a750:	b21a      	sxth	r2, r3
 800a752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a756:	4313      	orrs	r3, r2
 800a758:	b21b      	sxth	r3, r3
 800a75a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a75c:	89fb      	ldrh	r3, [r7, #14]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	371c      	adds	r7, #28
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a782:	2b40      	cmp	r3, #64	@ 0x40
 800a784:	d005      	beq.n	800a792 <USBD_StdDevReq+0x26>
 800a786:	2b40      	cmp	r3, #64	@ 0x40
 800a788:	d857      	bhi.n	800a83a <USBD_StdDevReq+0xce>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00f      	beq.n	800a7ae <USBD_StdDevReq+0x42>
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d153      	bne.n	800a83a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	32ae      	adds	r2, #174	@ 0xae
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ac:	e04a      	b.n	800a844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	d83b      	bhi.n	800a82e <USBD_StdDevReq+0xc2>
 800a7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <USBD_StdDevReq+0x50>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800a82f 	.word	0x0800a82f
 800a7c8:	0800a81b 	.word	0x0800a81b
 800a7cc:	0800a82f 	.word	0x0800a82f
 800a7d0:	0800a7ef 	.word	0x0800a7ef
 800a7d4:	0800a7e5 	.word	0x0800a7e5
 800a7d8:	0800a82f 	.word	0x0800a82f
 800a7dc:	0800a807 	.word	0x0800a807
 800a7e0:	0800a7f9 	.word	0x0800a7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa3c 	bl	800ac64 <USBD_GetDescriptor>
          break;
 800a7ec:	e024      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fbcb 	bl	800af8c <USBD_SetAddress>
          break;
 800a7f6:	e01f      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc0a 	bl	800b014 <USBD_SetConfig>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
          break;
 800a804:	e018      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fcad 	bl	800b168 <USBD_GetConfig>
          break;
 800a80e:	e013      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fcde 	bl	800b1d4 <USBD_GetStatus>
          break;
 800a818:	e00e      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fd0d 	bl	800b23c <USBD_SetFeature>
          break;
 800a822:	e009      	b.n	800a838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fd31 	bl	800b28e <USBD_ClrFeature>
          break;
 800a82c:	e004      	b.n	800a838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fd88 	bl	800b346 <USBD_CtlError>
          break;
 800a836:	bf00      	nop
      }
      break;
 800a838:	e004      	b.n	800a844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fd82 	bl	800b346 <USBD_CtlError>
      break;
 800a842:	bf00      	nop
  }

  return ret;
 800a844:	7bfb      	ldrb	r3, [r7, #15]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop

0800a850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a866:	2b40      	cmp	r3, #64	@ 0x40
 800a868:	d005      	beq.n	800a876 <USBD_StdItfReq+0x26>
 800a86a:	2b40      	cmp	r3, #64	@ 0x40
 800a86c:	d852      	bhi.n	800a914 <USBD_StdItfReq+0xc4>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <USBD_StdItfReq+0x26>
 800a872:	2b20      	cmp	r3, #32
 800a874:	d14e      	bne.n	800a914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	2b02      	cmp	r3, #2
 800a882:	d840      	bhi.n	800a906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	889b      	ldrh	r3, [r3, #4]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d836      	bhi.n	800a8fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	889b      	ldrh	r3, [r3, #4]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff fedb 	bl	800a652 <USBD_CoreFindIF>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
 800a8a2:	2bff      	cmp	r3, #255	@ 0xff
 800a8a4:	d01d      	beq.n	800a8e2 <USBD_StdItfReq+0x92>
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d11a      	bne.n	800a8e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8ac:	7bba      	ldrb	r2, [r7, #14]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32ae      	adds	r2, #174	@ 0xae
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00f      	beq.n	800a8dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a8bc:	7bba      	ldrb	r2, [r7, #14]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8c4:	7bba      	ldrb	r2, [r7, #14]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	32ae      	adds	r2, #174	@ 0xae
 800a8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8da:	e004      	b.n	800a8e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8e0:	e001      	b.n	800a8e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	88db      	ldrh	r3, [r3, #6]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d110      	bne.n	800a910 <USBD_StdItfReq+0xc0>
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10d      	bne.n	800a910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fdfd 	bl	800b4f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8fa:	e009      	b.n	800a910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fd21 	bl	800b346 <USBD_CtlError>
          break;
 800a904:	e004      	b.n	800a910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fd1c 	bl	800b346 <USBD_CtlError>
          break;
 800a90e:	e000      	b.n	800a912 <USBD_StdItfReq+0xc2>
          break;
 800a910:	bf00      	nop
      }
      break;
 800a912:	e004      	b.n	800a91e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fd15 	bl	800b346 <USBD_CtlError>
      break;
 800a91c:	bf00      	nop
  }

  return ret;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	889b      	ldrh	r3, [r3, #4]
 800a93a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a944:	2b40      	cmp	r3, #64	@ 0x40
 800a946:	d007      	beq.n	800a958 <USBD_StdEPReq+0x30>
 800a948:	2b40      	cmp	r3, #64	@ 0x40
 800a94a:	f200 817f 	bhi.w	800ac4c <USBD_StdEPReq+0x324>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02a      	beq.n	800a9a8 <USBD_StdEPReq+0x80>
 800a952:	2b20      	cmp	r3, #32
 800a954:	f040 817a 	bne.w	800ac4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff fe85 	bl	800a66c <USBD_CoreFindEP>
 800a962:	4603      	mov	r3, r0
 800a964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a966:	7b7b      	ldrb	r3, [r7, #13]
 800a968:	2bff      	cmp	r3, #255	@ 0xff
 800a96a:	f000 8174 	beq.w	800ac56 <USBD_StdEPReq+0x32e>
 800a96e:	7b7b      	ldrb	r3, [r7, #13]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f040 8170 	bne.w	800ac56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a976:	7b7a      	ldrb	r2, [r7, #13]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a97e:	7b7a      	ldrb	r2, [r7, #13]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	32ae      	adds	r2, #174	@ 0xae
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8163 	beq.w	800ac56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a990:	7b7a      	ldrb	r2, [r7, #13]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	32ae      	adds	r2, #174	@ 0xae
 800a996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9a6:	e156      	b.n	800ac56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d008      	beq.n	800a9c2 <USBD_StdEPReq+0x9a>
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	f300 8145 	bgt.w	800ac40 <USBD_StdEPReq+0x318>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 809b 	beq.w	800aaf2 <USBD_StdEPReq+0x1ca>
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d03c      	beq.n	800aa3a <USBD_StdEPReq+0x112>
 800a9c0:	e13e      	b.n	800ac40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d002      	beq.n	800a9d4 <USBD_StdEPReq+0xac>
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d016      	beq.n	800aa00 <USBD_StdEPReq+0xd8>
 800a9d2:	e02c      	b.n	800aa2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00d      	beq.n	800a9f6 <USBD_StdEPReq+0xce>
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b80      	cmp	r3, #128	@ 0x80
 800a9de:	d00a      	beq.n	800a9f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 fa23 	bl	800be30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ea:	2180      	movs	r1, #128	@ 0x80
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fa1f 	bl	800be30 <USBD_LL_StallEP>
 800a9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f4:	e020      	b.n	800aa38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fca4 	bl	800b346 <USBD_CtlError>
              break;
 800a9fe:	e01b      	b.n	800aa38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10e      	bne.n	800aa26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <USBD_StdEPReq+0xfe>
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	2b80      	cmp	r3, #128	@ 0x80
 800aa12:	d008      	beq.n	800aa26 <USBD_StdEPReq+0xfe>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	88db      	ldrh	r3, [r3, #6]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 fa05 	bl	800be30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fd64 	bl	800b4f4 <USBD_CtlSendStatus>

              break;
 800aa2c:	e004      	b.n	800aa38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fc88 	bl	800b346 <USBD_CtlError>
              break;
 800aa36:	bf00      	nop
          }
          break;
 800aa38:	e107      	b.n	800ac4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d002      	beq.n	800aa4c <USBD_StdEPReq+0x124>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d016      	beq.n	800aa78 <USBD_StdEPReq+0x150>
 800aa4a:	e04b      	b.n	800aae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00d      	beq.n	800aa6e <USBD_StdEPReq+0x146>
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b80      	cmp	r3, #128	@ 0x80
 800aa56:	d00a      	beq.n	800aa6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 f9e7 	bl	800be30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa62:	2180      	movs	r1, #128	@ 0x80
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 f9e3 	bl	800be30 <USBD_LL_StallEP>
 800aa6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa6c:	e040      	b.n	800aaf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fc68 	bl	800b346 <USBD_CtlError>
              break;
 800aa76:	e03b      	b.n	800aaf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	885b      	ldrh	r3, [r3, #2]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d136      	bne.n	800aaee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d004      	beq.n	800aa94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fa04 	bl	800be9c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fd2d 	bl	800b4f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff fde4 	bl	800a66c <USBD_CoreFindEP>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaa8:	7b7b      	ldrb	r3, [r7, #13]
 800aaaa:	2bff      	cmp	r3, #255	@ 0xff
 800aaac:	d01f      	beq.n	800aaee <USBD_StdEPReq+0x1c6>
 800aaae:	7b7b      	ldrb	r3, [r7, #13]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11c      	bne.n	800aaee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aab4:	7b7a      	ldrb	r2, [r7, #13]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aabc:	7b7a      	ldrb	r2, [r7, #13]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	@ 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d010      	beq.n	800aaee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aacc:	7b7a      	ldrb	r2, [r7, #13]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	32ae      	adds	r2, #174	@ 0xae
 800aad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
 800aade:	4603      	mov	r3, r0
 800aae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aae2:	e004      	b.n	800aaee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fc2d 	bl	800b346 <USBD_CtlError>
              break;
 800aaec:	e000      	b.n	800aaf0 <USBD_StdEPReq+0x1c8>
              break;
 800aaee:	bf00      	nop
          }
          break;
 800aaf0:	e0ab      	b.n	800ac4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d002      	beq.n	800ab04 <USBD_StdEPReq+0x1dc>
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d032      	beq.n	800ab68 <USBD_StdEPReq+0x240>
 800ab02:	e097      	b.n	800ac34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d007      	beq.n	800ab1a <USBD_StdEPReq+0x1f2>
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	2b80      	cmp	r3, #128	@ 0x80
 800ab0e:	d004      	beq.n	800ab1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fc17 	bl	800b346 <USBD_CtlError>
                break;
 800ab18:	e091      	b.n	800ac3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	da0b      	bge.n	800ab3a <USBD_StdEPReq+0x212>
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	3310      	adds	r3, #16
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	3304      	adds	r3, #4
 800ab38:	e00b      	b.n	800ab52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
 800ab3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	4413      	add	r3, r2
 800ab50:	3304      	adds	r3, #4
 800ab52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fc6d 	bl	800b440 <USBD_CtlSendData>
              break;
 800ab66:	e06a      	b.n	800ac3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da11      	bge.n	800ab94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	f003 020f 	and.w	r2, r3, #15
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	4413      	add	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	440b      	add	r3, r1
 800ab82:	3324      	adds	r3, #36	@ 0x24
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d117      	bne.n	800abba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fbda 	bl	800b346 <USBD_CtlError>
                  break;
 800ab92:	e054      	b.n	800ac3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	f003 020f 	and.w	r2, r3, #15
 800ab9a:	6879      	ldr	r1, [r7, #4]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fbc7 	bl	800b346 <USBD_CtlError>
                  break;
 800abb8:	e041      	b.n	800ac3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da0b      	bge.n	800abda <USBD_StdEPReq+0x2b2>
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	3310      	adds	r3, #16
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	4413      	add	r3, r2
 800abd6:	3304      	adds	r3, #4
 800abd8:	e00b      	b.n	800abf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	3304      	adds	r3, #4
 800abf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <USBD_StdEPReq+0x2d8>
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b80      	cmp	r3, #128	@ 0x80
 800abfe:	d103      	bne.n	800ac08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	e00e      	b.n	800ac26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 f97b 	bl	800bf08 <USBD_LL_IsStallEP>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc07 	bl	800b440 <USBD_CtlSendData>
              break;
 800ac32:	e004      	b.n	800ac3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fb85 	bl	800b346 <USBD_CtlError>
              break;
 800ac3c:	bf00      	nop
          }
          break;
 800ac3e:	e004      	b.n	800ac4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fb7f 	bl	800b346 <USBD_CtlError>
          break;
 800ac48:	bf00      	nop
      }
      break;
 800ac4a:	e005      	b.n	800ac58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fb79 	bl	800b346 <USBD_CtlError>
      break;
 800ac54:	e000      	b.n	800ac58 <USBD_StdEPReq+0x330>
      break;
 800ac56:	bf00      	nop
  }

  return ret;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3b01      	subs	r3, #1
 800ac84:	2b0e      	cmp	r3, #14
 800ac86:	f200 8152 	bhi.w	800af2e <USBD_GetDescriptor+0x2ca>
 800ac8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <USBD_GetDescriptor+0x2c>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800ad01 	.word	0x0800ad01
 800ac94:	0800ad19 	.word	0x0800ad19
 800ac98:	0800ad59 	.word	0x0800ad59
 800ac9c:	0800af2f 	.word	0x0800af2f
 800aca0:	0800af2f 	.word	0x0800af2f
 800aca4:	0800aecf 	.word	0x0800aecf
 800aca8:	0800aefb 	.word	0x0800aefb
 800acac:	0800af2f 	.word	0x0800af2f
 800acb0:	0800af2f 	.word	0x0800af2f
 800acb4:	0800af2f 	.word	0x0800af2f
 800acb8:	0800af2f 	.word	0x0800af2f
 800acbc:	0800af2f 	.word	0x0800af2f
 800acc0:	0800af2f 	.word	0x0800af2f
 800acc4:	0800af2f 	.word	0x0800af2f
 800acc8:	0800accd 	.word	0x0800accd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7c12      	ldrb	r2, [r2, #16]
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
 800acec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acee:	e126      	b.n	800af3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fb27 	bl	800b346 <USBD_CtlError>
        err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
      break;
 800acfe:	e11e      	b.n	800af3e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7c12      	ldrb	r2, [r2, #16]
 800ad0c:	f107 0108 	add.w	r1, r7, #8
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
      break;
 800ad16:	e112      	b.n	800af3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10d      	bne.n	800ad3c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad28:	f107 0208 	add.w	r2, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3301      	adds	r3, #1
 800ad36:	2202      	movs	r2, #2
 800ad38:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad3a:	e100      	b.n	800af3e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad44:	f107 0208 	add.w	r2, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	2202      	movs	r2, #2
 800ad54:	701a      	strb	r2, [r3, #0]
      break;
 800ad56:	e0f2      	b.n	800af3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	885b      	ldrh	r3, [r3, #2]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	f200 80ac 	bhi.w	800aebc <USBD_GetDescriptor+0x258>
 800ad64:	a201      	add	r2, pc, #4	@ (adr r2, 800ad6c <USBD_GetDescriptor+0x108>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad85 	.word	0x0800ad85
 800ad70:	0800adb9 	.word	0x0800adb9
 800ad74:	0800aded 	.word	0x0800aded
 800ad78:	0800ae21 	.word	0x0800ae21
 800ad7c:	0800ae55 	.word	0x0800ae55
 800ad80:	0800ae89 	.word	0x0800ae89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e091      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 facb 	bl	800b346 <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e089      	b.n	800aecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e077      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fab1 	bl	800b346 <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e06f      	b.n	800aecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e05d      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa97 	bl	800b346 <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e055      	b.n	800aecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae42:	e043      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa7d 	bl	800b346 <USBD_CtlError>
            err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
          break;
 800ae52:	e03b      	b.n	800aecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00b      	beq.n	800ae78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	7c12      	ldrb	r2, [r2, #16]
 800ae6c:	f107 0108 	add.w	r1, r7, #8
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
 800ae74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae76:	e029      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa63 	bl	800b346 <USBD_CtlError>
            err++;
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	3301      	adds	r3, #1
 800ae84:	72fb      	strb	r3, [r7, #11]
          break;
 800ae86:	e021      	b.n	800aecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeaa:	e00f      	b.n	800aecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa49 	bl	800b346 <USBD_CtlError>
            err++;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeba:	e007      	b.n	800aecc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fa41 	bl	800b346 <USBD_CtlError>
          err++;
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	3301      	adds	r3, #1
 800aec8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aeca:	bf00      	nop
      }
      break;
 800aecc:	e037      	b.n	800af3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	7c1b      	ldrb	r3, [r3, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aedc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aede:	f107 0208 	add.w	r2, r7, #8
 800aee2:	4610      	mov	r0, r2
 800aee4:	4798      	blx	r3
 800aee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aee8:	e029      	b.n	800af3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fa2a 	bl	800b346 <USBD_CtlError>
        err++;
 800aef2:	7afb      	ldrb	r3, [r7, #11]
 800aef4:	3301      	adds	r3, #1
 800aef6:	72fb      	strb	r3, [r7, #11]
      break;
 800aef8:	e021      	b.n	800af3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7c1b      	ldrb	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0a:	f107 0208 	add.w	r2, r7, #8
 800af0e:	4610      	mov	r0, r2
 800af10:	4798      	blx	r3
 800af12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	2207      	movs	r2, #7
 800af1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af1c:	e00f      	b.n	800af3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa10 	bl	800b346 <USBD_CtlError>
        err++;
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	3301      	adds	r3, #1
 800af2a:	72fb      	strb	r3, [r7, #11]
      break;
 800af2c:	e007      	b.n	800af3e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa08 	bl	800b346 <USBD_CtlError>
      err++;
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	3301      	adds	r3, #1
 800af3a:	72fb      	strb	r3, [r7, #11]
      break;
 800af3c:	bf00      	nop
  }

  if (err != 0U)
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11e      	bne.n	800af82 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	88db      	ldrh	r3, [r3, #6]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d016      	beq.n	800af7a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800af4c:	893b      	ldrh	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00e      	beq.n	800af70 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	88da      	ldrh	r2, [r3, #6]
 800af56:	893b      	ldrh	r3, [r7, #8]
 800af58:	4293      	cmp	r3, r2
 800af5a:	bf28      	it	cs
 800af5c:	4613      	movcs	r3, r2
 800af5e:	b29b      	uxth	r3, r3
 800af60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af62:	893b      	ldrh	r3, [r7, #8]
 800af64:	461a      	mov	r2, r3
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa69 	bl	800b440 <USBD_CtlSendData>
 800af6e:	e009      	b.n	800af84 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9e7 	bl	800b346 <USBD_CtlError>
 800af78:	e004      	b.n	800af84 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 faba 	bl	800b4f4 <USBD_CtlSendStatus>
 800af80:	e000      	b.n	800af84 <USBD_GetDescriptor+0x320>
    return;
 800af82:	bf00      	nop
  }
}
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop

0800af8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	889b      	ldrh	r3, [r3, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d131      	bne.n	800b002 <USBD_SetAddress+0x76>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	88db      	ldrh	r3, [r3, #6]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d12d      	bne.n	800b002 <USBD_SetAddress+0x76>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800afac:	d829      	bhi.n	800b002 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d104      	bne.n	800afd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f9bc 	bl	800b346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afce:	e01d      	b.n	800b00c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7bfa      	ldrb	r2, [r7, #15]
 800afd4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 ffbf 	bl	800bf60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa86 	bl	800b4f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff6:	e009      	b.n	800b00c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b000:	e004      	b.n	800b00c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f99e 	bl	800b346 <USBD_CtlError>
  }
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	b2da      	uxtb	r2, r3
 800b028:	4b4e      	ldr	r3, [pc, #312]	@ (800b164 <USBD_SetConfig+0x150>)
 800b02a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b02c:	4b4d      	ldr	r3, [pc, #308]	@ (800b164 <USBD_SetConfig+0x150>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d905      	bls.n	800b040 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f985 	bl	800b346 <USBD_CtlError>
    return USBD_FAIL;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e08c      	b.n	800b15a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d002      	beq.n	800b052 <USBD_SetConfig+0x3e>
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d029      	beq.n	800b0a4 <USBD_SetConfig+0x90>
 800b050:	e075      	b.n	800b13e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b052:	4b44      	ldr	r3, [pc, #272]	@ (800b164 <USBD_SetConfig+0x150>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d020      	beq.n	800b09c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b05a:	4b42      	ldr	r3, [pc, #264]	@ (800b164 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b064:	4b3f      	ldr	r3, [pc, #252]	@ (800b164 <USBD_SetConfig+0x150>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fe ffb9 	bl	8009fe2 <USBD_SetClassConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f962 	bl	800b346 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b08a:	e065      	b.n	800b158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fa31 	bl	800b4f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2203      	movs	r2, #3
 800b096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b09a:	e05d      	b.n	800b158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fa29 	bl	800b4f4 <USBD_CtlSendStatus>
      break;
 800b0a2:	e059      	b.n	800b158 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0a4:	4b2f      	ldr	r3, [pc, #188]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d112      	bne.n	800b0d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b0b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0be:	4b29      	ldr	r3, [pc, #164]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7fe ffa8 	bl	800a01a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa12 	bl	800b4f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0d0:	e042      	b.n	800b158 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0d2:	4b24      	ldr	r3, [pc, #144]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d02a      	beq.n	800b136 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fe ff96 	bl	800a01a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b164 <USBD_SetConfig+0x150>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7fe ff6f 	bl	8009fe2 <USBD_SetClassConfig>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00f      	beq.n	800b12e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f918 	bl	800b346 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7fe ff7b 	bl	800a01a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b12c:	e014      	b.n	800b158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9e0 	bl	800b4f4 <USBD_CtlSendStatus>
      break;
 800b134:	e010      	b.n	800b158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9dc 	bl	800b4f4 <USBD_CtlSendStatus>
      break;
 800b13c:	e00c      	b.n	800b158 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f900 	bl	800b346 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7fe ff64 	bl	800a01a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	73fb      	strb	r3, [r7, #15]
      break;
 800b156:	bf00      	nop
  }

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20000684 	.word	0x20000684

0800b168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	88db      	ldrh	r3, [r3, #6]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d004      	beq.n	800b184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f8e2 	bl	800b346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b182:	e023      	b.n	800b1cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	dc02      	bgt.n	800b196 <USBD_GetConfig+0x2e>
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc03      	bgt.n	800b19c <USBD_GetConfig+0x34>
 800b194:	e015      	b.n	800b1c2 <USBD_GetConfig+0x5a>
 800b196:	2b03      	cmp	r3, #3
 800b198:	d00b      	beq.n	800b1b2 <USBD_GetConfig+0x4a>
 800b19a:	e012      	b.n	800b1c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f948 	bl	800b440 <USBD_CtlSendData>
        break;
 800b1b0:	e00c      	b.n	800b1cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f940 	bl	800b440 <USBD_CtlSendData>
        break;
 800b1c0:	e004      	b.n	800b1cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f8be 	bl	800b346 <USBD_CtlError>
        break;
 800b1ca:	bf00      	nop
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d81e      	bhi.n	800b22a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d004      	beq.n	800b1fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8a5 	bl	800b346 <USBD_CtlError>
        break;
 800b1fc:	e01a      	b.n	800b234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f043 0202 	orr.w	r2, r3, #2
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	330c      	adds	r3, #12
 800b21e:	2202      	movs	r2, #2
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f90c 	bl	800b440 <USBD_CtlSendData>
      break;
 800b228:	e004      	b.n	800b234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f88a 	bl	800b346 <USBD_CtlError>
      break;
 800b232:	bf00      	nop
  }
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d107      	bne.n	800b25e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f94c 	bl	800b4f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b25c:	e013      	b.n	800b286 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	885b      	ldrh	r3, [r3, #2]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d10b      	bne.n	800b27e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	889b      	ldrh	r3, [r3, #4]
 800b26a:	0a1b      	lsrs	r3, r3, #8
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f93c 	bl	800b4f4 <USBD_CtlSendStatus>
}
 800b27c:	e003      	b.n	800b286 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f860 	bl	800b346 <USBD_CtlError>
}
 800b286:	bf00      	nop
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d80b      	bhi.n	800b2be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d10c      	bne.n	800b2c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f91c 	bl	800b4f4 <USBD_CtlSendStatus>
      }
      break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f840 	bl	800b346 <USBD_CtlError>
      break;
 800b2c6:	e000      	b.n	800b2ca <USBD_ClrFeature+0x3c>
      break;
 800b2c8:	bf00      	nop
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	781a      	ldrb	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff fa16 	bl	800a72e <SWAPBYTE>
 800b302:	4603      	mov	r3, r0
 800b304:	461a      	mov	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fa09 	bl	800a72e <SWAPBYTE>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff f9fc 	bl	800a72e <SWAPBYTE>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	80da      	strh	r2, [r3, #6]
}
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b350:	2180      	movs	r1, #128	@ 0x80
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fd6c 	bl	800be30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b358:	2100      	movs	r1, #0
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fd68 	bl	800be30 <USBD_LL_StallEP>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d042      	beq.n	800b404 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b382:	6938      	ldr	r0, [r7, #16]
 800b384:	f000 f842 	bl	800b40c <USBD_GetLen>
 800b388:	4603      	mov	r3, r0
 800b38a:	3301      	adds	r3, #1
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b392:	d808      	bhi.n	800b3a6 <USBD_GetString+0x3e>
 800b394:	6938      	ldr	r0, [r7, #16]
 800b396:	f000 f839 	bl	800b40c <USBD_GetLen>
 800b39a:	4603      	mov	r3, r0
 800b39c:	3301      	adds	r3, #1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	e001      	b.n	800b3aa <USBD_GetString+0x42>
 800b3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3d0:	e013      	b.n	800b3fa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	7812      	ldrb	r2, [r2, #0]
 800b3dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
    idx++;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e7      	bne.n	800b3d2 <USBD_GetString+0x6a>
 800b402:	e000      	b.n	800b406 <USBD_GetString+0x9e>
    return;
 800b404:	bf00      	nop
  }
}
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b41c:	e005      	b.n	800b42a <USBD_GetLen+0x1e>
  {
    len++;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	3301      	adds	r3, #1
 800b422:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3301      	adds	r3, #1
 800b428:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1f5      	bne.n	800b41e <USBD_GetLen+0x12>
  }

  return len;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2202      	movs	r2, #2
 800b450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	2100      	movs	r1, #0
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 fdb0 	bl	800bfcc <USBD_LL_Transmit>

  return USBD_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	2100      	movs	r1, #0
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 fd9f 	bl	800bfcc <USBD_LL_Transmit>

  return USBD_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2203      	movs	r2, #3
 800b4a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fdba 	bl	800c03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 fda9 	bl	800c03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2204      	movs	r2, #4
 800b500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b504:	2300      	movs	r3, #0
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fd5e 	bl	800bfcc <USBD_LL_Transmit>

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2205      	movs	r2, #5
 800b526:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b52a:	2300      	movs	r3, #0
 800b52c:	2200      	movs	r2, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fd83 	bl	800c03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b544:	2200      	movs	r2, #0
 800b546:	4912      	ldr	r1, [pc, #72]	@ (800b590 <MX_USB_DEVICE_Init+0x50>)
 800b548:	4812      	ldr	r0, [pc, #72]	@ (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b54a:	f7fe fccd 	bl	8009ee8 <USBD_Init>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b554:	f7f5 ff52 	bl	80013fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b558:	490f      	ldr	r1, [pc, #60]	@ (800b598 <MX_USB_DEVICE_Init+0x58>)
 800b55a:	480e      	ldr	r0, [pc, #56]	@ (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b55c:	f7fe fcf4 	bl	8009f48 <USBD_RegisterClass>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b566:	f7f5 ff49 	bl	80013fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b56a:	490c      	ldr	r1, [pc, #48]	@ (800b59c <MX_USB_DEVICE_Init+0x5c>)
 800b56c:	4809      	ldr	r0, [pc, #36]	@ (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b56e:	f7fe fc2b 	bl	8009dc8 <USBD_CDC_RegisterInterface>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b578:	f7f5 ff40 	bl	80013fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b57c:	4805      	ldr	r0, [pc, #20]	@ (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b57e:	f7fe fd19 	bl	8009fb4 <USBD_Start>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b588:	f7f5 ff38 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b58c:	bf00      	nop
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000148 	.word	0x20000148
 800b594:	20000688 	.word	0x20000688
 800b598:	200000b4 	.word	0x200000b4
 800b59c:	20000134 	.word	0x20000134

0800b5a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4905      	ldr	r1, [pc, #20]	@ (800b5bc <CDC_Init_FS+0x1c>)
 800b5a8:	4805      	ldr	r0, [pc, #20]	@ (800b5c0 <CDC_Init_FS+0x20>)
 800b5aa:	f7fe fc27 	bl	8009dfc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5ae:	4905      	ldr	r1, [pc, #20]	@ (800b5c4 <CDC_Init_FS+0x24>)
 800b5b0:	4803      	ldr	r0, [pc, #12]	@ (800b5c0 <CDC_Init_FS+0x20>)
 800b5b2:	f7fe fc45 	bl	8009e40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20001164 	.word	0x20001164
 800b5c0:	20000688 	.word	0x20000688
 800b5c4:	20000964 	.word	0x20000964

0800b5c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	71fb      	strb	r3, [r7, #7]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b23      	cmp	r3, #35	@ 0x23
 800b5ec:	d84a      	bhi.n	800b684 <CDC_Control_FS+0xac>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <CDC_Control_FS+0x1c>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b685 	.word	0x0800b685
 800b5f8:	0800b685 	.word	0x0800b685
 800b5fc:	0800b685 	.word	0x0800b685
 800b600:	0800b685 	.word	0x0800b685
 800b604:	0800b685 	.word	0x0800b685
 800b608:	0800b685 	.word	0x0800b685
 800b60c:	0800b685 	.word	0x0800b685
 800b610:	0800b685 	.word	0x0800b685
 800b614:	0800b685 	.word	0x0800b685
 800b618:	0800b685 	.word	0x0800b685
 800b61c:	0800b685 	.word	0x0800b685
 800b620:	0800b685 	.word	0x0800b685
 800b624:	0800b685 	.word	0x0800b685
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b685 	.word	0x0800b685
 800b634:	0800b685 	.word	0x0800b685
 800b638:	0800b685 	.word	0x0800b685
 800b63c:	0800b685 	.word	0x0800b685
 800b640:	0800b685 	.word	0x0800b685
 800b644:	0800b685 	.word	0x0800b685
 800b648:	0800b685 	.word	0x0800b685
 800b64c:	0800b685 	.word	0x0800b685
 800b650:	0800b685 	.word	0x0800b685
 800b654:	0800b685 	.word	0x0800b685
 800b658:	0800b685 	.word	0x0800b685
 800b65c:	0800b685 	.word	0x0800b685
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b685 	.word	0x0800b685
 800b668:	0800b685 	.word	0x0800b685
 800b66c:	0800b685 	.word	0x0800b685
 800b670:	0800b685 	.word	0x0800b685
 800b674:	0800b685 	.word	0x0800b685
 800b678:	0800b685 	.word	0x0800b685
 800b67c:	0800b685 	.word	0x0800b685
 800b680:	0800b685 	.word	0x0800b685
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b684:	bf00      	nop
  }

  return (USBD_OK);
 800b686:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4805      	ldr	r0, [pc, #20]	@ (800b6b8 <CDC_Receive_FS+0x24>)
 800b6a2:	f7fe fbcd 	bl	8009e40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6a6:	4804      	ldr	r0, [pc, #16]	@ (800b6b8 <CDC_Receive_FS+0x24>)
 800b6a8:	f7fe fbe8 	bl	8009e7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000688 	.word	0x20000688

0800b6bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2212      	movs	r2, #18
 800b6f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6f2:	4b03      	ldr	r3, [pc, #12]	@ (800b700 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000168 	.word	0x20000168

0800b704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2204      	movs	r2, #4
 800b714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b716:	4b03      	ldr	r3, [pc, #12]	@ (800b724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b718:	4618      	mov	r0, r3
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20000188 	.word	0x20000188

0800b728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	6039      	str	r1, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d105      	bne.n	800b746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4907      	ldr	r1, [pc, #28]	@ (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
 800b73e:	4808      	ldr	r0, [pc, #32]	@ (800b760 <USBD_FS_ProductStrDescriptor+0x38>)
 800b740:	f7ff fe12 	bl	800b368 <USBD_GetString>
 800b744:	e004      	b.n	800b750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	4904      	ldr	r1, [pc, #16]	@ (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
 800b74a:	4805      	ldr	r0, [pc, #20]	@ (800b760 <USBD_FS_ProductStrDescriptor+0x38>)
 800b74c:	f7ff fe0c 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b750:	4b02      	ldr	r3, [pc, #8]	@ (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20001964 	.word	0x20001964
 800b760:	080112fc 	.word	0x080112fc

0800b764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	6039      	str	r1, [r7, #0]
 800b76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	4904      	ldr	r1, [pc, #16]	@ (800b784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b774:	4804      	ldr	r0, [pc, #16]	@ (800b788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b776:	f7ff fdf7 	bl	800b368 <USBD_GetString>
  return USBD_StrDesc;
 800b77a:	4b02      	ldr	r3, [pc, #8]	@ (800b784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20001964 	.word	0x20001964
 800b788:	08011314 	.word	0x08011314

0800b78c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	221a      	movs	r2, #26
 800b79c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b79e:	f000 f855 	bl	800b84c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7a2:	4b02      	ldr	r3, [pc, #8]	@ (800b7ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	2000018c 	.word	0x2000018c

0800b7b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	6039      	str	r1, [r7, #0]
 800b7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4907      	ldr	r1, [pc, #28]	@ (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7c6:	4808      	ldr	r0, [pc, #32]	@ (800b7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c8:	f7ff fdce 	bl	800b368 <USBD_GetString>
 800b7cc:	e004      	b.n	800b7d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4904      	ldr	r1, [pc, #16]	@ (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7d2:	4805      	ldr	r0, [pc, #20]	@ (800b7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7d4:	f7ff fdc8 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	@ (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20001964 	.word	0x20001964
 800b7e8:	08011328 	.word	0x08011328

0800b7ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	6039      	str	r1, [r7, #0]
 800b7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4907      	ldr	r1, [pc, #28]	@ (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b802:	4808      	ldr	r0, [pc, #32]	@ (800b824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b804:	f7ff fdb0 	bl	800b368 <USBD_GetString>
 800b808:	e004      	b.n	800b814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4904      	ldr	r1, [pc, #16]	@ (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b80e:	4805      	ldr	r0, [pc, #20]	@ (800b824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b810:	f7ff fdaa 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b814:	4b02      	ldr	r3, [pc, #8]	@ (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001964 	.word	0x20001964
 800b824:	08011334 	.word	0x08011334

0800b828 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	220c      	movs	r2, #12
 800b838:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b83a:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	2000017c 	.word	0x2000017c

0800b84c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b852:	4b0f      	ldr	r3, [pc, #60]	@ (800b890 <Get_SerialNum+0x44>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b858:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <Get_SerialNum+0x48>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b85e:	4b0e      	ldr	r3, [pc, #56]	@ (800b898 <Get_SerialNum+0x4c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4413      	add	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b872:	2208      	movs	r2, #8
 800b874:	4909      	ldr	r1, [pc, #36]	@ (800b89c <Get_SerialNum+0x50>)
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f000 f814 	bl	800b8a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b87c:	2204      	movs	r2, #4
 800b87e:	4908      	ldr	r1, [pc, #32]	@ (800b8a0 <Get_SerialNum+0x54>)
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f000 f80f 	bl	800b8a4 <IntToUnicode>
  }
}
 800b886:	bf00      	nop
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	1fff7590 	.word	0x1fff7590
 800b894:	1fff7594 	.word	0x1fff7594
 800b898:	1fff7598 	.word	0x1fff7598
 800b89c:	2000018e 	.word	0x2000018e
 800b8a0:	2000019e 	.word	0x2000019e

0800b8a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]
 800b8ba:	e027      	b.n	800b90c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	0f1b      	lsrs	r3, r3, #28
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	d80b      	bhi.n	800b8dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	0f1b      	lsrs	r3, r3, #28
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	440b      	add	r3, r1
 800b8d4:	3230      	adds	r2, #48	@ 0x30
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	e00a      	b.n	800b8f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	0f1b      	lsrs	r3, r3, #28
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	440b      	add	r3, r1
 800b8ec:	3237      	adds	r2, #55	@ 0x37
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4413      	add	r3, r2
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	3301      	adds	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]
 800b90c:	7dfa      	ldrb	r2, [r7, #23]
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	429a      	cmp	r2, r3
 800b912:	d3d3      	bcc.n	800b8bc <IntToUnicode+0x18>
  }
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b0ac      	sub	sp, #176	@ 0xb0
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b92c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	605a      	str	r2, [r3, #4]
 800b936:	609a      	str	r2, [r3, #8]
 800b938:	60da      	str	r2, [r3, #12]
 800b93a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b93c:	f107 0314 	add.w	r3, r7, #20
 800b940:	2288      	movs	r2, #136	@ 0x88
 800b942:	2100      	movs	r1, #0
 800b944:	4618      	mov	r0, r3
 800b946:	f001 fc22 	bl	800d18e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b952:	d173      	bne.n	800ba3c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b958:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b95a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b95e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b962:	2301      	movs	r3, #1
 800b964:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b966:	2301      	movs	r3, #1
 800b968:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b96a:	2318      	movs	r3, #24
 800b96c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b96e:	2307      	movs	r3, #7
 800b970:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b972:	2302      	movs	r3, #2
 800b974:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b976:	2302      	movs	r3, #2
 800b978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b97a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b97e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b980:	f107 0314 	add.w	r3, r7, #20
 800b984:	4618      	mov	r0, r3
 800b986:	f7f8 ffdf 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800b990:	f7f5 fd34 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b994:	4b2b      	ldr	r3, [pc, #172]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b998:	4a2a      	ldr	r2, [pc, #168]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b9a0:	4b28      	ldr	r3, [pc, #160]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	613b      	str	r3, [r7, #16]
 800b9aa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b9ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b9b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b9c6:	230a      	movs	r3, #10
 800b9c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b9d6:	f7f6 fdd1 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b9da:	4b1a      	ldr	r3, [pc, #104]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b9dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9de:	4a19      	ldr	r2, [pc, #100]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b9e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b9e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b9e6:	4b17      	ldr	r3, [pc, #92]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800b9f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d114      	bne.n	800ba28 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9fe:	4b11      	ldr	r3, [pc, #68]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800ba00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba02:	4a10      	ldr	r2, [pc, #64]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800ba04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba08:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800ba0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba12:	60bb      	str	r3, [r7, #8]
 800ba14:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800ba16:	f7f8 f987 	bl	8003d28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba1e:	4a09      	ldr	r2, [pc, #36]	@ (800ba44 <HAL_PCD_MspInit+0x120>)
 800ba20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba24:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba26:	e001      	b.n	800ba2c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ba28:	f7f8 f97e 	bl	8003d28 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2043      	movs	r0, #67	@ 0x43
 800ba32:	f7f6 fcee 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba36:	2043      	movs	r0, #67	@ 0x43
 800ba38:	f7f6 fd07 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba3c:	bf00      	nop
 800ba3e:	37b0      	adds	r7, #176	@ 0xb0
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	40021000 	.word	0x40021000

0800ba48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f7fe faf5 	bl	800a04e <USBD_LL_SetupStage>
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	460b      	mov	r3, r1
 800ba76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba7e:	78fa      	ldrb	r2, [r7, #3]
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	440b      	add	r3, r1
 800ba8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	78fb      	ldrb	r3, [r7, #3]
 800ba94:	4619      	mov	r1, r3
 800ba96:	f7fe fb2f 	bl	800a0f8 <USBD_LL_DataOutStage>
}
 800ba9a:	bf00      	nop
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	460b      	mov	r3, r1
 800baac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bab4:	78fa      	ldrb	r2, [r7, #3]
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	4613      	mov	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	3320      	adds	r3, #32
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	4619      	mov	r1, r3
 800baca:	f7fe fbc8 	bl	800a25e <USBD_LL_DataInStage>
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fe fd02 	bl	800a4ee <USBD_LL_SOF>
}
 800baea:	bf00      	nop
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bafa:	2301      	movs	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	79db      	ldrb	r3, [r3, #7]
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d001      	beq.n	800bb0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb06:	f7f5 fc79 	bl	80013fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb10:	7bfa      	ldrb	r2, [r7, #15]
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fca6 	bl	800a466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fe fc4e 	bl	800a3c2 <USBD_LL_Reset>
}
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
	...

0800bb30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb4a:	f043 0301 	orr.w	r3, r3, #1
 800bb4e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fc95 	bl	800a486 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	7adb      	ldrb	r3, [r3, #11]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb64:	4b04      	ldr	r3, [pc, #16]	@ (800bb78 <HAL_PCD_SuspendCallback+0x48>)
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	4a03      	ldr	r2, [pc, #12]	@ (800bb78 <HAL_PCD_SuspendCallback+0x48>)
 800bb6a:	f043 0306 	orr.w	r3, r3, #6
 800bb6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed00 	.word	0xe000ed00

0800bb7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6812      	ldr	r2, [r2, #0]
 800bb92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb96:	f023 0301 	bic.w	r3, r3, #1
 800bb9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7adb      	ldrb	r3, [r3, #11]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bba4:	4b08      	ldr	r3, [pc, #32]	@ (800bbc8 <HAL_PCD_ResumeCallback+0x4c>)
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	4a07      	ldr	r2, [pc, #28]	@ (800bbc8 <HAL_PCD_ResumeCallback+0x4c>)
 800bbaa:	f023 0306 	bic.w	r3, r3, #6
 800bbae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bbb0:	f000 faf6 	bl	800c1a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe fc7f 	bl	800a4be <USBD_LL_Resume>
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	e000ed00 	.word	0xe000ed00

0800bbcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fcd5 	bl	800a592 <USBD_LL_IsoOUTIncomplete>
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc02:	78fa      	ldrb	r2, [r7, #3]
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe fc91 	bl	800a52e <USBD_LL_IsoINIncomplete>
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fe fce7 	bl	800a5f6 <USBD_LL_DevConnected>
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fce4 	bl	800a60c <USBD_LL_DevDisconnected>
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d13c      	bne.n	800bcd6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc5c:	4a20      	ldr	r2, [pc, #128]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a1e      	ldr	r2, [pc, #120]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc6c:	4b1c      	ldr	r3, [pc, #112]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bc74:	4b1a      	ldr	r3, [pc, #104]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc76:	2206      	movs	r2, #6
 800bc78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bc7a:	4b19      	ldr	r3, [pc, #100]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc80:	4b17      	ldr	r3, [pc, #92]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc82:	2202      	movs	r2, #2
 800bc84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc86:	4b16      	ldr	r3, [pc, #88]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc8c:	4b14      	ldr	r3, [pc, #80]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bc92:	4b13      	ldr	r3, [pc, #76]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bc98:	4b11      	ldr	r3, [pc, #68]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc9e:	4b10      	ldr	r3, [pc, #64]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bca4:	4b0e      	ldr	r3, [pc, #56]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bcaa:	480d      	ldr	r0, [pc, #52]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bcac:	f7f6 fe42 	bl	8002934 <HAL_PCD_Init>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bcb6:	f7f5 fba1 	bl	80013fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcba:	2180      	movs	r1, #128	@ 0x80
 800bcbc:	4808      	ldr	r0, [pc, #32]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bcbe:	f7f7 ff9a 	bl	8003bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcc2:	2240      	movs	r2, #64	@ 0x40
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4806      	ldr	r0, [pc, #24]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bcc8:	f7f7 ff4e 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bccc:	2280      	movs	r2, #128	@ 0x80
 800bcce:	2101      	movs	r1, #1
 800bcd0:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <USBD_LL_Init+0x94>)
 800bcd2:	f7f7 ff49 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20001b64 	.word	0x20001b64

0800bce4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f6 ff29 	bl	8002b52 <HAL_PCD_Start>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d816      	bhi.n	800bd38 <USBD_LL_Start+0x54>
 800bd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd10 <USBD_LL_Start+0x2c>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd27 	.word	0x0800bd27
 800bd18:	0800bd2d 	.word	0x0800bd2d
 800bd1c:	0800bd33 	.word	0x0800bd33
    case HAL_OK :
      usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]
    break;
 800bd24:	e00b      	b.n	800bd3e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd26:	2303      	movs	r3, #3
 800bd28:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2a:	e008      	b.n	800bd3e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd30:	e005      	b.n	800bd3e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd32:	2303      	movs	r3, #3
 800bd34:	73fb      	strb	r3, [r7, #15]
    break;
 800bd36:	e002      	b.n	800bd3e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	bf00      	nop
  }
  return usb_status;
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	70fb      	strb	r3, [r7, #3]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70bb      	strb	r3, [r7, #2]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd70:	78bb      	ldrb	r3, [r7, #2]
 800bd72:	883a      	ldrh	r2, [r7, #0]
 800bd74:	78f9      	ldrb	r1, [r7, #3]
 800bd76:	f7f7 fbd5 	bl	8003524 <HAL_PCD_EP_Open>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d817      	bhi.n	800bdb4 <USBD_LL_OpenEP+0x6c>
 800bd84:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <USBD_LL_OpenEP+0x44>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bda3 	.word	0x0800bda3
 800bd94:	0800bda9 	.word	0x0800bda9
 800bd98:	0800bdaf 	.word	0x0800bdaf
    case HAL_OK :
      usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bda0:	e00b      	b.n	800bdba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bda2:	2303      	movs	r3, #3
 800bda4:	73fb      	strb	r3, [r7, #15]
    break;
 800bda6:	e008      	b.n	800bdba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bdac:	e005      	b.n	800bdba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb2:	e002      	b.n	800bdba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb8:	bf00      	nop
  }
  return usb_status;
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdde:	78fa      	ldrb	r2, [r7, #3]
 800bde0:	4611      	mov	r1, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f7 fc08 	bl	80035f8 <HAL_PCD_EP_Close>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d816      	bhi.n	800be20 <USBD_LL_CloseEP+0x5c>
 800bdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf8 <USBD_LL_CloseEP+0x34>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be09 	.word	0x0800be09
 800bdfc:	0800be0f 	.word	0x0800be0f
 800be00:	0800be15 	.word	0x0800be15
 800be04:	0800be1b 	.word	0x0800be1b
    case HAL_OK :
      usb_status = USBD_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]
    break;
 800be0c:	e00b      	b.n	800be26 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be0e:	2303      	movs	r3, #3
 800be10:	73fb      	strb	r3, [r7, #15]
    break;
 800be12:	e008      	b.n	800be26 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be14:	2301      	movs	r3, #1
 800be16:	73fb      	strb	r3, [r7, #15]
    break;
 800be18:	e005      	b.n	800be26 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	73fb      	strb	r3, [r7, #15]
    break;
 800be1e:	e002      	b.n	800be26 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be20:	2303      	movs	r3, #3
 800be22:	73fb      	strb	r3, [r7, #15]
    break;
 800be24:	bf00      	nop
  }
  return usb_status;
 800be26:	7bfb      	ldrb	r3, [r7, #15]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be4a:	78fa      	ldrb	r2, [r7, #3]
 800be4c:	4611      	mov	r1, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f7 fc97 	bl	8003782 <HAL_PCD_EP_SetStall>
 800be54:	4603      	mov	r3, r0
 800be56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d816      	bhi.n	800be8c <USBD_LL_StallEP+0x5c>
 800be5e:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <USBD_LL_StallEP+0x34>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800be75 	.word	0x0800be75
 800be68:	0800be7b 	.word	0x0800be7b
 800be6c:	0800be81 	.word	0x0800be81
 800be70:	0800be87 	.word	0x0800be87
    case HAL_OK :
      usb_status = USBD_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
    break;
 800be78:	e00b      	b.n	800be92 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be7a:	2303      	movs	r3, #3
 800be7c:	73fb      	strb	r3, [r7, #15]
    break;
 800be7e:	e008      	b.n	800be92 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be80:	2301      	movs	r3, #1
 800be82:	73fb      	strb	r3, [r7, #15]
    break;
 800be84:	e005      	b.n	800be92 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be86:	2303      	movs	r3, #3
 800be88:	73fb      	strb	r3, [r7, #15]
    break;
 800be8a:	e002      	b.n	800be92 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	73fb      	strb	r3, [r7, #15]
    break;
 800be90:	bf00      	nop
  }
  return usb_status;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f7 fcc3 	bl	8003846 <HAL_PCD_EP_ClrStall>
 800bec0:	4603      	mov	r3, r0
 800bec2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d816      	bhi.n	800bef8 <USBD_LL_ClearStallEP+0x5c>
 800beca:	a201      	add	r2, pc, #4	@ (adr r2, 800bed0 <USBD_LL_ClearStallEP+0x34>)
 800becc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed0:	0800bee1 	.word	0x0800bee1
 800bed4:	0800bee7 	.word	0x0800bee7
 800bed8:	0800beed 	.word	0x0800beed
 800bedc:	0800bef3 	.word	0x0800bef3
    case HAL_OK :
      usb_status = USBD_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]
    break;
 800bee4:	e00b      	b.n	800befe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bee6:	2303      	movs	r3, #3
 800bee8:	73fb      	strb	r3, [r7, #15]
    break;
 800beea:	e008      	b.n	800befe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800beec:	2301      	movs	r3, #1
 800beee:	73fb      	strb	r3, [r7, #15]
    break;
 800bef0:	e005      	b.n	800befe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	73fb      	strb	r3, [r7, #15]
    break;
 800bef6:	e002      	b.n	800befe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	73fb      	strb	r3, [r7, #15]
    break;
 800befc:	bf00      	nop
  }
  return usb_status;
 800befe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	da0b      	bge.n	800bf3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	3316      	adds	r3, #22
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	e00b      	b.n	800bf54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	4613      	mov	r3, r2
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bf52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf7a:	78fa      	ldrb	r2, [r7, #3]
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f7 faac 	bl	80034dc <HAL_PCD_SetAddress>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d816      	bhi.n	800bfbc <USBD_LL_SetUSBAddress+0x5c>
 800bf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf94 <USBD_LL_SetUSBAddress+0x34>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfab 	.word	0x0800bfab
 800bf9c:	0800bfb1 	.word	0x0800bfb1
 800bfa0:	0800bfb7 	.word	0x0800bfb7
    case HAL_OK :
      usb_status = USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa8:	e00b      	b.n	800bfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	73fb      	strb	r3, [r7, #15]
    break;
 800bfae:	e008      	b.n	800bfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb4:	e005      	b.n	800bfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfba:	e002      	b.n	800bfc2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc0:	bf00      	nop
  }
  return usb_status;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfea:	7af9      	ldrb	r1, [r7, #11]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	f7f7 fb96 	bl	8003720 <HAL_PCD_EP_Transmit>
 800bff4:	4603      	mov	r3, r0
 800bff6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bff8:	7dbb      	ldrb	r3, [r7, #22]
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d816      	bhi.n	800c02c <USBD_LL_Transmit+0x60>
 800bffe:	a201      	add	r2, pc, #4	@ (adr r2, 800c004 <USBD_LL_Transmit+0x38>)
 800c000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c004:	0800c015 	.word	0x0800c015
 800c008:	0800c01b 	.word	0x0800c01b
 800c00c:	0800c021 	.word	0x0800c021
 800c010:	0800c027 	.word	0x0800c027
    case HAL_OK :
      usb_status = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	75fb      	strb	r3, [r7, #23]
    break;
 800c018:	e00b      	b.n	800c032 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	75fb      	strb	r3, [r7, #23]
    break;
 800c01e:	e008      	b.n	800c032 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c020:	2301      	movs	r3, #1
 800c022:	75fb      	strb	r3, [r7, #23]
    break;
 800c024:	e005      	b.n	800c032 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	75fb      	strb	r3, [r7, #23]
    break;
 800c02a:	e002      	b.n	800c032 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c02c:	2303      	movs	r3, #3
 800c02e:	75fb      	strb	r3, [r7, #23]
    break;
 800c030:	bf00      	nop
  }
  return usb_status;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	607a      	str	r2, [r7, #4]
 800c046:	603b      	str	r3, [r7, #0]
 800c048:	460b      	mov	r3, r1
 800c04a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c05a:	7af9      	ldrb	r1, [r7, #11]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	f7f7 fb14 	bl	800368c <HAL_PCD_EP_Receive>
 800c064:	4603      	mov	r3, r0
 800c066:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c068:	7dbb      	ldrb	r3, [r7, #22]
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d816      	bhi.n	800c09c <USBD_LL_PrepareReceive+0x60>
 800c06e:	a201      	add	r2, pc, #4	@ (adr r2, 800c074 <USBD_LL_PrepareReceive+0x38>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c085 	.word	0x0800c085
 800c078:	0800c08b 	.word	0x0800c08b
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c097 	.word	0x0800c097
    case HAL_OK :
      usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	75fb      	strb	r3, [r7, #23]
    break;
 800c088:	e00b      	b.n	800c0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	75fb      	strb	r3, [r7, #23]
    break;
 800c08e:	e008      	b.n	800c0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c090:	2301      	movs	r3, #1
 800c092:	75fb      	strb	r3, [r7, #23]
    break;
 800c094:	e005      	b.n	800c0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c096:	2303      	movs	r3, #3
 800c098:	75fb      	strb	r3, [r7, #23]
    break;
 800c09a:	e002      	b.n	800c0a2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	75fb      	strb	r3, [r7, #23]
    break;
 800c0a0:	bf00      	nop
  }
  return usb_status;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f7 fb14 	bl	80036f0 <HAL_PCD_EP_GetRxCount>
 800c0c8:	4603      	mov	r3, r0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <HAL_PCDEx_LPM_Callback+0x18>
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d01f      	beq.n	800c12a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c0ea:	e03b      	b.n	800c164 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7adb      	ldrb	r3, [r3, #11]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d007      	beq.n	800c104 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c0f4:	f000 f854 	bl	800c1a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c16c <HAL_PCDEx_LPM_Callback+0x98>)
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c16c <HAL_PCDEx_LPM_Callback+0x98>)
 800c0fe:	f023 0306 	bic.w	r3, r3, #6
 800c102:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6812      	ldr	r2, [r2, #0]
 800c112:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c116:	f023 0301 	bic.w	r3, r3, #1
 800c11a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe f9cb 	bl	800a4be <USBD_LL_Resume>
    break;
 800c128:	e01c      	b.n	800c164 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	6812      	ldr	r2, [r2, #0]
 800c138:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c13c:	f043 0301 	orr.w	r3, r3, #1
 800c140:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe f99c 	bl	800a486 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	7adb      	ldrb	r3, [r3, #11]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c156:	4b05      	ldr	r3, [pc, #20]	@ (800c16c <HAL_PCDEx_LPM_Callback+0x98>)
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	4a04      	ldr	r2, [pc, #16]	@ (800c16c <HAL_PCDEx_LPM_Callback+0x98>)
 800c15c:	f043 0306 	orr.w	r3, r3, #6
 800c160:	6113      	str	r3, [r2, #16]
    break;
 800c162:	bf00      	nop
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	e000ed00 	.word	0xe000ed00

0800c170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c178:	4b03      	ldr	r3, [pc, #12]	@ (800c188 <USBD_static_malloc+0x18>)
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	20002048 	.word	0x20002048

0800c18c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]

}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c1a4:	f7f5 f8b6 	bl	8001314 <SystemClock_Config>
}
 800c1a8:	bf00      	nop
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <__cvt>:
 800c1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b0:	ec57 6b10 	vmov	r6, r7, d0
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	bfbb      	ittet	lt
 800c1be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c1c2:	461f      	movlt	r7, r3
 800c1c4:	2300      	movge	r3, #0
 800c1c6:	232d      	movlt	r3, #45	@ 0x2d
 800c1c8:	700b      	strb	r3, [r1, #0]
 800c1ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c1d0:	4691      	mov	r9, r2
 800c1d2:	f023 0820 	bic.w	r8, r3, #32
 800c1d6:	bfbc      	itt	lt
 800c1d8:	4632      	movlt	r2, r6
 800c1da:	4616      	movlt	r6, r2
 800c1dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1e0:	d005      	beq.n	800c1ee <__cvt+0x42>
 800c1e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c1e6:	d100      	bne.n	800c1ea <__cvt+0x3e>
 800c1e8:	3401      	adds	r4, #1
 800c1ea:	2102      	movs	r1, #2
 800c1ec:	e000      	b.n	800c1f0 <__cvt+0x44>
 800c1ee:	2103      	movs	r1, #3
 800c1f0:	ab03      	add	r3, sp, #12
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	ab02      	add	r3, sp, #8
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	ec47 6b10 	vmov	d0, r6, r7
 800c1fc:	4653      	mov	r3, sl
 800c1fe:	4622      	mov	r2, r4
 800c200:	f001 f8ea 	bl	800d3d8 <_dtoa_r>
 800c204:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c208:	4605      	mov	r5, r0
 800c20a:	d119      	bne.n	800c240 <__cvt+0x94>
 800c20c:	f019 0f01 	tst.w	r9, #1
 800c210:	d00e      	beq.n	800c230 <__cvt+0x84>
 800c212:	eb00 0904 	add.w	r9, r0, r4
 800c216:	2200      	movs	r2, #0
 800c218:	2300      	movs	r3, #0
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 800c222:	b108      	cbz	r0, 800c228 <__cvt+0x7c>
 800c224:	f8cd 900c 	str.w	r9, [sp, #12]
 800c228:	2230      	movs	r2, #48	@ 0x30
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	454b      	cmp	r3, r9
 800c22e:	d31e      	bcc.n	800c26e <__cvt+0xc2>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c234:	1b5b      	subs	r3, r3, r5
 800c236:	4628      	mov	r0, r5
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	b004      	add	sp, #16
 800c23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c240:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c244:	eb00 0904 	add.w	r9, r0, r4
 800c248:	d1e5      	bne.n	800c216 <__cvt+0x6a>
 800c24a:	7803      	ldrb	r3, [r0, #0]
 800c24c:	2b30      	cmp	r3, #48	@ 0x30
 800c24e:	d10a      	bne.n	800c266 <__cvt+0xba>
 800c250:	2200      	movs	r2, #0
 800c252:	2300      	movs	r3, #0
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800c25c:	b918      	cbnz	r0, 800c266 <__cvt+0xba>
 800c25e:	f1c4 0401 	rsb	r4, r4, #1
 800c262:	f8ca 4000 	str.w	r4, [sl]
 800c266:	f8da 3000 	ldr.w	r3, [sl]
 800c26a:	4499      	add	r9, r3
 800c26c:	e7d3      	b.n	800c216 <__cvt+0x6a>
 800c26e:	1c59      	adds	r1, r3, #1
 800c270:	9103      	str	r1, [sp, #12]
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	e7d9      	b.n	800c22a <__cvt+0x7e>

0800c276 <__exponent>:
 800c276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c278:	2900      	cmp	r1, #0
 800c27a:	bfba      	itte	lt
 800c27c:	4249      	neglt	r1, r1
 800c27e:	232d      	movlt	r3, #45	@ 0x2d
 800c280:	232b      	movge	r3, #43	@ 0x2b
 800c282:	2909      	cmp	r1, #9
 800c284:	7002      	strb	r2, [r0, #0]
 800c286:	7043      	strb	r3, [r0, #1]
 800c288:	dd29      	ble.n	800c2de <__exponent+0x68>
 800c28a:	f10d 0307 	add.w	r3, sp, #7
 800c28e:	461d      	mov	r5, r3
 800c290:	270a      	movs	r7, #10
 800c292:	461a      	mov	r2, r3
 800c294:	fbb1 f6f7 	udiv	r6, r1, r7
 800c298:	fb07 1416 	mls	r4, r7, r6, r1
 800c29c:	3430      	adds	r4, #48	@ 0x30
 800c29e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	2c63      	cmp	r4, #99	@ 0x63
 800c2a6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	dcf1      	bgt.n	800c292 <__exponent+0x1c>
 800c2ae:	3130      	adds	r1, #48	@ 0x30
 800c2b0:	1e94      	subs	r4, r2, #2
 800c2b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c2b6:	1c41      	adds	r1, r0, #1
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	42ab      	cmp	r3, r5
 800c2bc:	d30a      	bcc.n	800c2d4 <__exponent+0x5e>
 800c2be:	f10d 0309 	add.w	r3, sp, #9
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	42ac      	cmp	r4, r5
 800c2c6:	bf88      	it	hi
 800c2c8:	2300      	movhi	r3, #0
 800c2ca:	3302      	adds	r3, #2
 800c2cc:	4403      	add	r3, r0
 800c2ce:	1a18      	subs	r0, r3, r0
 800c2d0:	b003      	add	sp, #12
 800c2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c2d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c2dc:	e7ed      	b.n	800c2ba <__exponent+0x44>
 800c2de:	2330      	movs	r3, #48	@ 0x30
 800c2e0:	3130      	adds	r1, #48	@ 0x30
 800c2e2:	7083      	strb	r3, [r0, #2]
 800c2e4:	70c1      	strb	r1, [r0, #3]
 800c2e6:	1d03      	adds	r3, r0, #4
 800c2e8:	e7f1      	b.n	800c2ce <__exponent+0x58>
	...

0800c2ec <_printf_float>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	b08d      	sub	sp, #52	@ 0x34
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2f8:	4616      	mov	r6, r2
 800c2fa:	461f      	mov	r7, r3
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	f000 ff65 	bl	800d1cc <_localeconv_r>
 800c302:	6803      	ldr	r3, [r0, #0]
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	4618      	mov	r0, r3
 800c308:	f7f3 ffb2 	bl	8000270 <strlen>
 800c30c:	2300      	movs	r3, #0
 800c30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c310:	f8d8 3000 	ldr.w	r3, [r8]
 800c314:	9005      	str	r0, [sp, #20]
 800c316:	3307      	adds	r3, #7
 800c318:	f023 0307 	bic.w	r3, r3, #7
 800c31c:	f103 0208 	add.w	r2, r3, #8
 800c320:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c324:	f8d4 b000 	ldr.w	fp, [r4]
 800c328:	f8c8 2000 	str.w	r2, [r8]
 800c32c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c330:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f8cd 8018 	str.w	r8, [sp, #24]
 800c33a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c33e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c342:	4b9c      	ldr	r3, [pc, #624]	@ (800c5b4 <_printf_float+0x2c8>)
 800c344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c348:	f7f4 fbf0 	bl	8000b2c <__aeabi_dcmpun>
 800c34c:	bb70      	cbnz	r0, 800c3ac <_printf_float+0xc0>
 800c34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c352:	4b98      	ldr	r3, [pc, #608]	@ (800c5b4 <_printf_float+0x2c8>)
 800c354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c358:	f7f4 fbca 	bl	8000af0 <__aeabi_dcmple>
 800c35c:	bb30      	cbnz	r0, 800c3ac <_printf_float+0xc0>
 800c35e:	2200      	movs	r2, #0
 800c360:	2300      	movs	r3, #0
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f4 fbb9 	bl	8000adc <__aeabi_dcmplt>
 800c36a:	b110      	cbz	r0, 800c372 <_printf_float+0x86>
 800c36c:	232d      	movs	r3, #45	@ 0x2d
 800c36e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c372:	4a91      	ldr	r2, [pc, #580]	@ (800c5b8 <_printf_float+0x2cc>)
 800c374:	4b91      	ldr	r3, [pc, #580]	@ (800c5bc <_printf_float+0x2d0>)
 800c376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c37a:	bf94      	ite	ls
 800c37c:	4690      	movls	r8, r2
 800c37e:	4698      	movhi	r8, r3
 800c380:	2303      	movs	r3, #3
 800c382:	6123      	str	r3, [r4, #16]
 800c384:	f02b 0304 	bic.w	r3, fp, #4
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	f04f 0900 	mov.w	r9, #0
 800c38e:	9700      	str	r7, [sp, #0]
 800c390:	4633      	mov	r3, r6
 800c392:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c394:	4621      	mov	r1, r4
 800c396:	4628      	mov	r0, r5
 800c398:	f000 f9d2 	bl	800c740 <_printf_common>
 800c39c:	3001      	adds	r0, #1
 800c39e:	f040 808d 	bne.w	800c4bc <_printf_float+0x1d0>
 800c3a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3a6:	b00d      	add	sp, #52	@ 0x34
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ac:	4642      	mov	r2, r8
 800c3ae:	464b      	mov	r3, r9
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 fbba 	bl	8000b2c <__aeabi_dcmpun>
 800c3b8:	b140      	cbz	r0, 800c3cc <_printf_float+0xe0>
 800c3ba:	464b      	mov	r3, r9
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfbc      	itt	lt
 800c3c0:	232d      	movlt	r3, #45	@ 0x2d
 800c3c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c3c6:	4a7e      	ldr	r2, [pc, #504]	@ (800c5c0 <_printf_float+0x2d4>)
 800c3c8:	4b7e      	ldr	r3, [pc, #504]	@ (800c5c4 <_printf_float+0x2d8>)
 800c3ca:	e7d4      	b.n	800c376 <_printf_float+0x8a>
 800c3cc:	6863      	ldr	r3, [r4, #4]
 800c3ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c3d2:	9206      	str	r2, [sp, #24]
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	d13b      	bne.n	800c450 <_printf_float+0x164>
 800c3d8:	2306      	movs	r3, #6
 800c3da:	6063      	str	r3, [r4, #4]
 800c3dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	9303      	str	r3, [sp, #12]
 800c3e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c3ec:	ab09      	add	r3, sp, #36	@ 0x24
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	6861      	ldr	r1, [r4, #4]
 800c3f2:	ec49 8b10 	vmov	d0, r8, r9
 800c3f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f7ff fed6 	bl	800c1ac <__cvt>
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c404:	2b47      	cmp	r3, #71	@ 0x47
 800c406:	4680      	mov	r8, r0
 800c408:	d129      	bne.n	800c45e <_printf_float+0x172>
 800c40a:	1cc8      	adds	r0, r1, #3
 800c40c:	db02      	blt.n	800c414 <_printf_float+0x128>
 800c40e:	6863      	ldr	r3, [r4, #4]
 800c410:	4299      	cmp	r1, r3
 800c412:	dd41      	ble.n	800c498 <_printf_float+0x1ac>
 800c414:	f1aa 0a02 	sub.w	sl, sl, #2
 800c418:	fa5f fa8a 	uxtb.w	sl, sl
 800c41c:	3901      	subs	r1, #1
 800c41e:	4652      	mov	r2, sl
 800c420:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c424:	9109      	str	r1, [sp, #36]	@ 0x24
 800c426:	f7ff ff26 	bl	800c276 <__exponent>
 800c42a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c42c:	1813      	adds	r3, r2, r0
 800c42e:	2a01      	cmp	r2, #1
 800c430:	4681      	mov	r9, r0
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	dc02      	bgt.n	800c43c <_printf_float+0x150>
 800c436:	6822      	ldr	r2, [r4, #0]
 800c438:	07d2      	lsls	r2, r2, #31
 800c43a:	d501      	bpl.n	800c440 <_printf_float+0x154>
 800c43c:	3301      	adds	r3, #1
 800c43e:	6123      	str	r3, [r4, #16]
 800c440:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0a2      	beq.n	800c38e <_printf_float+0xa2>
 800c448:	232d      	movs	r3, #45	@ 0x2d
 800c44a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c44e:	e79e      	b.n	800c38e <_printf_float+0xa2>
 800c450:	9a06      	ldr	r2, [sp, #24]
 800c452:	2a47      	cmp	r2, #71	@ 0x47
 800c454:	d1c2      	bne.n	800c3dc <_printf_float+0xf0>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1c0      	bne.n	800c3dc <_printf_float+0xf0>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7bd      	b.n	800c3da <_printf_float+0xee>
 800c45e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c462:	d9db      	bls.n	800c41c <_printf_float+0x130>
 800c464:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c468:	d118      	bne.n	800c49c <_printf_float+0x1b0>
 800c46a:	2900      	cmp	r1, #0
 800c46c:	6863      	ldr	r3, [r4, #4]
 800c46e:	dd0b      	ble.n	800c488 <_printf_float+0x19c>
 800c470:	6121      	str	r1, [r4, #16]
 800c472:	b913      	cbnz	r3, 800c47a <_printf_float+0x18e>
 800c474:	6822      	ldr	r2, [r4, #0]
 800c476:	07d0      	lsls	r0, r2, #31
 800c478:	d502      	bpl.n	800c480 <_printf_float+0x194>
 800c47a:	3301      	adds	r3, #1
 800c47c:	440b      	add	r3, r1
 800c47e:	6123      	str	r3, [r4, #16]
 800c480:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c482:	f04f 0900 	mov.w	r9, #0
 800c486:	e7db      	b.n	800c440 <_printf_float+0x154>
 800c488:	b913      	cbnz	r3, 800c490 <_printf_float+0x1a4>
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	07d2      	lsls	r2, r2, #31
 800c48e:	d501      	bpl.n	800c494 <_printf_float+0x1a8>
 800c490:	3302      	adds	r3, #2
 800c492:	e7f4      	b.n	800c47e <_printf_float+0x192>
 800c494:	2301      	movs	r3, #1
 800c496:	e7f2      	b.n	800c47e <_printf_float+0x192>
 800c498:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c49e:	4299      	cmp	r1, r3
 800c4a0:	db05      	blt.n	800c4ae <_printf_float+0x1c2>
 800c4a2:	6823      	ldr	r3, [r4, #0]
 800c4a4:	6121      	str	r1, [r4, #16]
 800c4a6:	07d8      	lsls	r0, r3, #31
 800c4a8:	d5ea      	bpl.n	800c480 <_printf_float+0x194>
 800c4aa:	1c4b      	adds	r3, r1, #1
 800c4ac:	e7e7      	b.n	800c47e <_printf_float+0x192>
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	bfd4      	ite	le
 800c4b2:	f1c1 0202 	rsble	r2, r1, #2
 800c4b6:	2201      	movgt	r2, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	e7e0      	b.n	800c47e <_printf_float+0x192>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	055a      	lsls	r2, r3, #21
 800c4c0:	d407      	bmi.n	800c4d2 <_printf_float+0x1e6>
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b8      	blx	r7
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	d12b      	bne.n	800c528 <_printf_float+0x23c>
 800c4d0:	e767      	b.n	800c3a2 <_printf_float+0xb6>
 800c4d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4d6:	f240 80dd 	bls.w	800c694 <_printf_float+0x3a8>
 800c4da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f7f4 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d033      	beq.n	800c552 <_printf_float+0x266>
 800c4ea:	4a37      	ldr	r2, [pc, #220]	@ (800c5c8 <_printf_float+0x2dc>)
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b8      	blx	r7
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	f43f af54 	beq.w	800c3a2 <_printf_float+0xb6>
 800c4fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4fe:	4543      	cmp	r3, r8
 800c500:	db02      	blt.n	800c508 <_printf_float+0x21c>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	07d8      	lsls	r0, r3, #31
 800c506:	d50f      	bpl.n	800c528 <_printf_float+0x23c>
 800c508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c50c:	4631      	mov	r1, r6
 800c50e:	4628      	mov	r0, r5
 800c510:	47b8      	blx	r7
 800c512:	3001      	adds	r0, #1
 800c514:	f43f af45 	beq.w	800c3a2 <_printf_float+0xb6>
 800c518:	f04f 0900 	mov.w	r9, #0
 800c51c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c520:	f104 0a1a 	add.w	sl, r4, #26
 800c524:	45c8      	cmp	r8, r9
 800c526:	dc09      	bgt.n	800c53c <_printf_float+0x250>
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	079b      	lsls	r3, r3, #30
 800c52c:	f100 8103 	bmi.w	800c736 <_printf_float+0x44a>
 800c530:	68e0      	ldr	r0, [r4, #12]
 800c532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c534:	4298      	cmp	r0, r3
 800c536:	bfb8      	it	lt
 800c538:	4618      	movlt	r0, r3
 800c53a:	e734      	b.n	800c3a6 <_printf_float+0xba>
 800c53c:	2301      	movs	r3, #1
 800c53e:	4652      	mov	r2, sl
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	f43f af2b 	beq.w	800c3a2 <_printf_float+0xb6>
 800c54c:	f109 0901 	add.w	r9, r9, #1
 800c550:	e7e8      	b.n	800c524 <_printf_float+0x238>
 800c552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c554:	2b00      	cmp	r3, #0
 800c556:	dc39      	bgt.n	800c5cc <_printf_float+0x2e0>
 800c558:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c8 <_printf_float+0x2dc>)
 800c55a:	2301      	movs	r3, #1
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	f43f af1d 	beq.w	800c3a2 <_printf_float+0xb6>
 800c568:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c56c:	ea59 0303 	orrs.w	r3, r9, r3
 800c570:	d102      	bne.n	800c578 <_printf_float+0x28c>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	07d9      	lsls	r1, r3, #31
 800c576:	d5d7      	bpl.n	800c528 <_printf_float+0x23c>
 800c578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	f43f af0d 	beq.w	800c3a2 <_printf_float+0xb6>
 800c588:	f04f 0a00 	mov.w	sl, #0
 800c58c:	f104 0b1a 	add.w	fp, r4, #26
 800c590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c592:	425b      	negs	r3, r3
 800c594:	4553      	cmp	r3, sl
 800c596:	dc01      	bgt.n	800c59c <_printf_float+0x2b0>
 800c598:	464b      	mov	r3, r9
 800c59a:	e793      	b.n	800c4c4 <_printf_float+0x1d8>
 800c59c:	2301      	movs	r3, #1
 800c59e:	465a      	mov	r2, fp
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f43f aefb 	beq.w	800c3a2 <_printf_float+0xb6>
 800c5ac:	f10a 0a01 	add.w	sl, sl, #1
 800c5b0:	e7ee      	b.n	800c590 <_printf_float+0x2a4>
 800c5b2:	bf00      	nop
 800c5b4:	7fefffff 	.word	0x7fefffff
 800c5b8:	08011398 	.word	0x08011398
 800c5bc:	0801139c 	.word	0x0801139c
 800c5c0:	080113a0 	.word	0x080113a0
 800c5c4:	080113a4 	.word	0x080113a4
 800c5c8:	08011738 	.word	0x08011738
 800c5cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c5d2:	4553      	cmp	r3, sl
 800c5d4:	bfa8      	it	ge
 800c5d6:	4653      	movge	r3, sl
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	4699      	mov	r9, r3
 800c5dc:	dc36      	bgt.n	800c64c <_printf_float+0x360>
 800c5de:	f04f 0b00 	mov.w	fp, #0
 800c5e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5e6:	f104 021a 	add.w	r2, r4, #26
 800c5ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5ec:	9306      	str	r3, [sp, #24]
 800c5ee:	eba3 0309 	sub.w	r3, r3, r9
 800c5f2:	455b      	cmp	r3, fp
 800c5f4:	dc31      	bgt.n	800c65a <_printf_float+0x36e>
 800c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f8:	459a      	cmp	sl, r3
 800c5fa:	dc3a      	bgt.n	800c672 <_printf_float+0x386>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	07da      	lsls	r2, r3, #31
 800c600:	d437      	bmi.n	800c672 <_printf_float+0x386>
 800c602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c604:	ebaa 0903 	sub.w	r9, sl, r3
 800c608:	9b06      	ldr	r3, [sp, #24]
 800c60a:	ebaa 0303 	sub.w	r3, sl, r3
 800c60e:	4599      	cmp	r9, r3
 800c610:	bfa8      	it	ge
 800c612:	4699      	movge	r9, r3
 800c614:	f1b9 0f00 	cmp.w	r9, #0
 800c618:	dc33      	bgt.n	800c682 <_printf_float+0x396>
 800c61a:	f04f 0800 	mov.w	r8, #0
 800c61e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c622:	f104 0b1a 	add.w	fp, r4, #26
 800c626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c628:	ebaa 0303 	sub.w	r3, sl, r3
 800c62c:	eba3 0309 	sub.w	r3, r3, r9
 800c630:	4543      	cmp	r3, r8
 800c632:	f77f af79 	ble.w	800c528 <_printf_float+0x23c>
 800c636:	2301      	movs	r3, #1
 800c638:	465a      	mov	r2, fp
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	f43f aeae 	beq.w	800c3a2 <_printf_float+0xb6>
 800c646:	f108 0801 	add.w	r8, r8, #1
 800c64a:	e7ec      	b.n	800c626 <_printf_float+0x33a>
 800c64c:	4642      	mov	r2, r8
 800c64e:	4631      	mov	r1, r6
 800c650:	4628      	mov	r0, r5
 800c652:	47b8      	blx	r7
 800c654:	3001      	adds	r0, #1
 800c656:	d1c2      	bne.n	800c5de <_printf_float+0x2f2>
 800c658:	e6a3      	b.n	800c3a2 <_printf_float+0xb6>
 800c65a:	2301      	movs	r3, #1
 800c65c:	4631      	mov	r1, r6
 800c65e:	4628      	mov	r0, r5
 800c660:	9206      	str	r2, [sp, #24]
 800c662:	47b8      	blx	r7
 800c664:	3001      	adds	r0, #1
 800c666:	f43f ae9c 	beq.w	800c3a2 <_printf_float+0xb6>
 800c66a:	9a06      	ldr	r2, [sp, #24]
 800c66c:	f10b 0b01 	add.w	fp, fp, #1
 800c670:	e7bb      	b.n	800c5ea <_printf_float+0x2fe>
 800c672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	47b8      	blx	r7
 800c67c:	3001      	adds	r0, #1
 800c67e:	d1c0      	bne.n	800c602 <_printf_float+0x316>
 800c680:	e68f      	b.n	800c3a2 <_printf_float+0xb6>
 800c682:	9a06      	ldr	r2, [sp, #24]
 800c684:	464b      	mov	r3, r9
 800c686:	4442      	add	r2, r8
 800c688:	4631      	mov	r1, r6
 800c68a:	4628      	mov	r0, r5
 800c68c:	47b8      	blx	r7
 800c68e:	3001      	adds	r0, #1
 800c690:	d1c3      	bne.n	800c61a <_printf_float+0x32e>
 800c692:	e686      	b.n	800c3a2 <_printf_float+0xb6>
 800c694:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c698:	f1ba 0f01 	cmp.w	sl, #1
 800c69c:	dc01      	bgt.n	800c6a2 <_printf_float+0x3b6>
 800c69e:	07db      	lsls	r3, r3, #31
 800c6a0:	d536      	bpl.n	800c710 <_printf_float+0x424>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae78 	beq.w	800c3a2 <_printf_float+0xb6>
 800c6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f43f ae70 	beq.w	800c3a2 <_printf_float+0xb6>
 800c6c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c6ce:	f7f4 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6d2:	b9c0      	cbnz	r0, 800c706 <_printf_float+0x41a>
 800c6d4:	4653      	mov	r3, sl
 800c6d6:	f108 0201 	add.w	r2, r8, #1
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b8      	blx	r7
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d10c      	bne.n	800c6fe <_printf_float+0x412>
 800c6e4:	e65d      	b.n	800c3a2 <_printf_float+0xb6>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	465a      	mov	r2, fp
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b8      	blx	r7
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	f43f ae56 	beq.w	800c3a2 <_printf_float+0xb6>
 800c6f6:	f108 0801 	add.w	r8, r8, #1
 800c6fa:	45d0      	cmp	r8, sl
 800c6fc:	dbf3      	blt.n	800c6e6 <_printf_float+0x3fa>
 800c6fe:	464b      	mov	r3, r9
 800c700:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c704:	e6df      	b.n	800c4c6 <_printf_float+0x1da>
 800c706:	f04f 0800 	mov.w	r8, #0
 800c70a:	f104 0b1a 	add.w	fp, r4, #26
 800c70e:	e7f4      	b.n	800c6fa <_printf_float+0x40e>
 800c710:	2301      	movs	r3, #1
 800c712:	4642      	mov	r2, r8
 800c714:	e7e1      	b.n	800c6da <_printf_float+0x3ee>
 800c716:	2301      	movs	r3, #1
 800c718:	464a      	mov	r2, r9
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f ae3e 	beq.w	800c3a2 <_printf_float+0xb6>
 800c726:	f108 0801 	add.w	r8, r8, #1
 800c72a:	68e3      	ldr	r3, [r4, #12]
 800c72c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c72e:	1a5b      	subs	r3, r3, r1
 800c730:	4543      	cmp	r3, r8
 800c732:	dcf0      	bgt.n	800c716 <_printf_float+0x42a>
 800c734:	e6fc      	b.n	800c530 <_printf_float+0x244>
 800c736:	f04f 0800 	mov.w	r8, #0
 800c73a:	f104 0919 	add.w	r9, r4, #25
 800c73e:	e7f4      	b.n	800c72a <_printf_float+0x43e>

0800c740 <_printf_common>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	4616      	mov	r6, r2
 800c746:	4698      	mov	r8, r3
 800c748:	688a      	ldr	r2, [r1, #8]
 800c74a:	690b      	ldr	r3, [r1, #16]
 800c74c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c750:	4293      	cmp	r3, r2
 800c752:	bfb8      	it	lt
 800c754:	4613      	movlt	r3, r2
 800c756:	6033      	str	r3, [r6, #0]
 800c758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c75c:	4607      	mov	r7, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b10a      	cbz	r2, 800c766 <_printf_common+0x26>
 800c762:	3301      	adds	r3, #1
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	0699      	lsls	r1, r3, #26
 800c76a:	bf42      	ittt	mi
 800c76c:	6833      	ldrmi	r3, [r6, #0]
 800c76e:	3302      	addmi	r3, #2
 800c770:	6033      	strmi	r3, [r6, #0]
 800c772:	6825      	ldr	r5, [r4, #0]
 800c774:	f015 0506 	ands.w	r5, r5, #6
 800c778:	d106      	bne.n	800c788 <_printf_common+0x48>
 800c77a:	f104 0a19 	add.w	sl, r4, #25
 800c77e:	68e3      	ldr	r3, [r4, #12]
 800c780:	6832      	ldr	r2, [r6, #0]
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	42ab      	cmp	r3, r5
 800c786:	dc26      	bgt.n	800c7d6 <_printf_common+0x96>
 800c788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c78c:	6822      	ldr	r2, [r4, #0]
 800c78e:	3b00      	subs	r3, #0
 800c790:	bf18      	it	ne
 800c792:	2301      	movne	r3, #1
 800c794:	0692      	lsls	r2, r2, #26
 800c796:	d42b      	bmi.n	800c7f0 <_printf_common+0xb0>
 800c798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c79c:	4641      	mov	r1, r8
 800c79e:	4638      	mov	r0, r7
 800c7a0:	47c8      	blx	r9
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d01e      	beq.n	800c7e4 <_printf_common+0xa4>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	6922      	ldr	r2, [r4, #16]
 800c7aa:	f003 0306 	and.w	r3, r3, #6
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	bf02      	ittt	eq
 800c7b2:	68e5      	ldreq	r5, [r4, #12]
 800c7b4:	6833      	ldreq	r3, [r6, #0]
 800c7b6:	1aed      	subeq	r5, r5, r3
 800c7b8:	68a3      	ldr	r3, [r4, #8]
 800c7ba:	bf0c      	ite	eq
 800c7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7c0:	2500      	movne	r5, #0
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	bfc4      	itt	gt
 800c7c6:	1a9b      	subgt	r3, r3, r2
 800c7c8:	18ed      	addgt	r5, r5, r3
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	341a      	adds	r4, #26
 800c7ce:	42b5      	cmp	r5, r6
 800c7d0:	d11a      	bne.n	800c808 <_printf_common+0xc8>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e008      	b.n	800c7e8 <_printf_common+0xa8>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4652      	mov	r2, sl
 800c7da:	4641      	mov	r1, r8
 800c7dc:	4638      	mov	r0, r7
 800c7de:	47c8      	blx	r9
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d103      	bne.n	800c7ec <_printf_common+0xac>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	e7c6      	b.n	800c77e <_printf_common+0x3e>
 800c7f0:	18e1      	adds	r1, r4, r3
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	2030      	movs	r0, #48	@ 0x30
 800c7f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7fa:	4422      	add	r2, r4
 800c7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c804:	3302      	adds	r3, #2
 800c806:	e7c7      	b.n	800c798 <_printf_common+0x58>
 800c808:	2301      	movs	r3, #1
 800c80a:	4622      	mov	r2, r4
 800c80c:	4641      	mov	r1, r8
 800c80e:	4638      	mov	r0, r7
 800c810:	47c8      	blx	r9
 800c812:	3001      	adds	r0, #1
 800c814:	d0e6      	beq.n	800c7e4 <_printf_common+0xa4>
 800c816:	3601      	adds	r6, #1
 800c818:	e7d9      	b.n	800c7ce <_printf_common+0x8e>
	...

0800c81c <_printf_i>:
 800c81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	7e0f      	ldrb	r7, [r1, #24]
 800c822:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c824:	2f78      	cmp	r7, #120	@ 0x78
 800c826:	4691      	mov	r9, r2
 800c828:	4680      	mov	r8, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	469a      	mov	sl, r3
 800c82e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c832:	d807      	bhi.n	800c844 <_printf_i+0x28>
 800c834:	2f62      	cmp	r7, #98	@ 0x62
 800c836:	d80a      	bhi.n	800c84e <_printf_i+0x32>
 800c838:	2f00      	cmp	r7, #0
 800c83a:	f000 80d2 	beq.w	800c9e2 <_printf_i+0x1c6>
 800c83e:	2f58      	cmp	r7, #88	@ 0x58
 800c840:	f000 80b9 	beq.w	800c9b6 <_printf_i+0x19a>
 800c844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c848:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c84c:	e03a      	b.n	800c8c4 <_printf_i+0xa8>
 800c84e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c852:	2b15      	cmp	r3, #21
 800c854:	d8f6      	bhi.n	800c844 <_printf_i+0x28>
 800c856:	a101      	add	r1, pc, #4	@ (adr r1, 800c85c <_printf_i+0x40>)
 800c858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c85c:	0800c8b5 	.word	0x0800c8b5
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c845 	.word	0x0800c845
 800c868:	0800c845 	.word	0x0800c845
 800c86c:	0800c845 	.word	0x0800c845
 800c870:	0800c845 	.word	0x0800c845
 800c874:	0800c8c9 	.word	0x0800c8c9
 800c878:	0800c845 	.word	0x0800c845
 800c87c:	0800c845 	.word	0x0800c845
 800c880:	0800c845 	.word	0x0800c845
 800c884:	0800c845 	.word	0x0800c845
 800c888:	0800c9c9 	.word	0x0800c9c9
 800c88c:	0800c8f3 	.word	0x0800c8f3
 800c890:	0800c983 	.word	0x0800c983
 800c894:	0800c845 	.word	0x0800c845
 800c898:	0800c845 	.word	0x0800c845
 800c89c:	0800c9eb 	.word	0x0800c9eb
 800c8a0:	0800c845 	.word	0x0800c845
 800c8a4:	0800c8f3 	.word	0x0800c8f3
 800c8a8:	0800c845 	.word	0x0800c845
 800c8ac:	0800c845 	.word	0x0800c845
 800c8b0:	0800c98b 	.word	0x0800c98b
 800c8b4:	6833      	ldr	r3, [r6, #0]
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6032      	str	r2, [r6, #0]
 800c8bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e09d      	b.n	800ca04 <_printf_i+0x1e8>
 800c8c8:	6833      	ldr	r3, [r6, #0]
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	1d19      	adds	r1, r3, #4
 800c8ce:	6031      	str	r1, [r6, #0]
 800c8d0:	0606      	lsls	r6, r0, #24
 800c8d2:	d501      	bpl.n	800c8d8 <_printf_i+0xbc>
 800c8d4:	681d      	ldr	r5, [r3, #0]
 800c8d6:	e003      	b.n	800c8e0 <_printf_i+0xc4>
 800c8d8:	0645      	lsls	r5, r0, #25
 800c8da:	d5fb      	bpl.n	800c8d4 <_printf_i+0xb8>
 800c8dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	da03      	bge.n	800c8ec <_printf_i+0xd0>
 800c8e4:	232d      	movs	r3, #45	@ 0x2d
 800c8e6:	426d      	negs	r5, r5
 800c8e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8ec:	4859      	ldr	r0, [pc, #356]	@ (800ca54 <_printf_i+0x238>)
 800c8ee:	230a      	movs	r3, #10
 800c8f0:	e011      	b.n	800c916 <_printf_i+0xfa>
 800c8f2:	6821      	ldr	r1, [r4, #0]
 800c8f4:	6833      	ldr	r3, [r6, #0]
 800c8f6:	0608      	lsls	r0, r1, #24
 800c8f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8fc:	d402      	bmi.n	800c904 <_printf_i+0xe8>
 800c8fe:	0649      	lsls	r1, r1, #25
 800c900:	bf48      	it	mi
 800c902:	b2ad      	uxthmi	r5, r5
 800c904:	2f6f      	cmp	r7, #111	@ 0x6f
 800c906:	4853      	ldr	r0, [pc, #332]	@ (800ca54 <_printf_i+0x238>)
 800c908:	6033      	str	r3, [r6, #0]
 800c90a:	bf14      	ite	ne
 800c90c:	230a      	movne	r3, #10
 800c90e:	2308      	moveq	r3, #8
 800c910:	2100      	movs	r1, #0
 800c912:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c916:	6866      	ldr	r6, [r4, #4]
 800c918:	60a6      	str	r6, [r4, #8]
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	bfa2      	ittt	ge
 800c91e:	6821      	ldrge	r1, [r4, #0]
 800c920:	f021 0104 	bicge.w	r1, r1, #4
 800c924:	6021      	strge	r1, [r4, #0]
 800c926:	b90d      	cbnz	r5, 800c92c <_printf_i+0x110>
 800c928:	2e00      	cmp	r6, #0
 800c92a:	d04b      	beq.n	800c9c4 <_printf_i+0x1a8>
 800c92c:	4616      	mov	r6, r2
 800c92e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c932:	fb03 5711 	mls	r7, r3, r1, r5
 800c936:	5dc7      	ldrb	r7, [r0, r7]
 800c938:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c93c:	462f      	mov	r7, r5
 800c93e:	42bb      	cmp	r3, r7
 800c940:	460d      	mov	r5, r1
 800c942:	d9f4      	bls.n	800c92e <_printf_i+0x112>
 800c944:	2b08      	cmp	r3, #8
 800c946:	d10b      	bne.n	800c960 <_printf_i+0x144>
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	07df      	lsls	r7, r3, #31
 800c94c:	d508      	bpl.n	800c960 <_printf_i+0x144>
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	6861      	ldr	r1, [r4, #4]
 800c952:	4299      	cmp	r1, r3
 800c954:	bfde      	ittt	le
 800c956:	2330      	movle	r3, #48	@ 0x30
 800c958:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c95c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c960:	1b92      	subs	r2, r2, r6
 800c962:	6122      	str	r2, [r4, #16]
 800c964:	f8cd a000 	str.w	sl, [sp]
 800c968:	464b      	mov	r3, r9
 800c96a:	aa03      	add	r2, sp, #12
 800c96c:	4621      	mov	r1, r4
 800c96e:	4640      	mov	r0, r8
 800c970:	f7ff fee6 	bl	800c740 <_printf_common>
 800c974:	3001      	adds	r0, #1
 800c976:	d14a      	bne.n	800ca0e <_printf_i+0x1f2>
 800c978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c97c:	b004      	add	sp, #16
 800c97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	f043 0320 	orr.w	r3, r3, #32
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	4833      	ldr	r0, [pc, #204]	@ (800ca58 <_printf_i+0x23c>)
 800c98c:	2778      	movs	r7, #120	@ 0x78
 800c98e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	6831      	ldr	r1, [r6, #0]
 800c996:	061f      	lsls	r7, r3, #24
 800c998:	f851 5b04 	ldr.w	r5, [r1], #4
 800c99c:	d402      	bmi.n	800c9a4 <_printf_i+0x188>
 800c99e:	065f      	lsls	r7, r3, #25
 800c9a0:	bf48      	it	mi
 800c9a2:	b2ad      	uxthmi	r5, r5
 800c9a4:	6031      	str	r1, [r6, #0]
 800c9a6:	07d9      	lsls	r1, r3, #31
 800c9a8:	bf44      	itt	mi
 800c9aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c9ae:	6023      	strmi	r3, [r4, #0]
 800c9b0:	b11d      	cbz	r5, 800c9ba <_printf_i+0x19e>
 800c9b2:	2310      	movs	r3, #16
 800c9b4:	e7ac      	b.n	800c910 <_printf_i+0xf4>
 800c9b6:	4827      	ldr	r0, [pc, #156]	@ (800ca54 <_printf_i+0x238>)
 800c9b8:	e7e9      	b.n	800c98e <_printf_i+0x172>
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	f023 0320 	bic.w	r3, r3, #32
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	e7f6      	b.n	800c9b2 <_printf_i+0x196>
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	e7bd      	b.n	800c944 <_printf_i+0x128>
 800c9c8:	6833      	ldr	r3, [r6, #0]
 800c9ca:	6825      	ldr	r5, [r4, #0]
 800c9cc:	6961      	ldr	r1, [r4, #20]
 800c9ce:	1d18      	adds	r0, r3, #4
 800c9d0:	6030      	str	r0, [r6, #0]
 800c9d2:	062e      	lsls	r6, r5, #24
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	d501      	bpl.n	800c9dc <_printf_i+0x1c0>
 800c9d8:	6019      	str	r1, [r3, #0]
 800c9da:	e002      	b.n	800c9e2 <_printf_i+0x1c6>
 800c9dc:	0668      	lsls	r0, r5, #25
 800c9de:	d5fb      	bpl.n	800c9d8 <_printf_i+0x1bc>
 800c9e0:	8019      	strh	r1, [r3, #0]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	6123      	str	r3, [r4, #16]
 800c9e6:	4616      	mov	r6, r2
 800c9e8:	e7bc      	b.n	800c964 <_printf_i+0x148>
 800c9ea:	6833      	ldr	r3, [r6, #0]
 800c9ec:	1d1a      	adds	r2, r3, #4
 800c9ee:	6032      	str	r2, [r6, #0]
 800c9f0:	681e      	ldr	r6, [r3, #0]
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7f3 fbea 	bl	80001d0 <memchr>
 800c9fc:	b108      	cbz	r0, 800ca02 <_printf_i+0x1e6>
 800c9fe:	1b80      	subs	r0, r0, r6
 800ca00:	6060      	str	r0, [r4, #4]
 800ca02:	6863      	ldr	r3, [r4, #4]
 800ca04:	6123      	str	r3, [r4, #16]
 800ca06:	2300      	movs	r3, #0
 800ca08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca0c:	e7aa      	b.n	800c964 <_printf_i+0x148>
 800ca0e:	6923      	ldr	r3, [r4, #16]
 800ca10:	4632      	mov	r2, r6
 800ca12:	4649      	mov	r1, r9
 800ca14:	4640      	mov	r0, r8
 800ca16:	47d0      	blx	sl
 800ca18:	3001      	adds	r0, #1
 800ca1a:	d0ad      	beq.n	800c978 <_printf_i+0x15c>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	079b      	lsls	r3, r3, #30
 800ca20:	d413      	bmi.n	800ca4a <_printf_i+0x22e>
 800ca22:	68e0      	ldr	r0, [r4, #12]
 800ca24:	9b03      	ldr	r3, [sp, #12]
 800ca26:	4298      	cmp	r0, r3
 800ca28:	bfb8      	it	lt
 800ca2a:	4618      	movlt	r0, r3
 800ca2c:	e7a6      	b.n	800c97c <_printf_i+0x160>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4632      	mov	r2, r6
 800ca32:	4649      	mov	r1, r9
 800ca34:	4640      	mov	r0, r8
 800ca36:	47d0      	blx	sl
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d09d      	beq.n	800c978 <_printf_i+0x15c>
 800ca3c:	3501      	adds	r5, #1
 800ca3e:	68e3      	ldr	r3, [r4, #12]
 800ca40:	9903      	ldr	r1, [sp, #12]
 800ca42:	1a5b      	subs	r3, r3, r1
 800ca44:	42ab      	cmp	r3, r5
 800ca46:	dcf2      	bgt.n	800ca2e <_printf_i+0x212>
 800ca48:	e7eb      	b.n	800ca22 <_printf_i+0x206>
 800ca4a:	2500      	movs	r5, #0
 800ca4c:	f104 0619 	add.w	r6, r4, #25
 800ca50:	e7f5      	b.n	800ca3e <_printf_i+0x222>
 800ca52:	bf00      	nop
 800ca54:	080113a8 	.word	0x080113a8
 800ca58:	080113b9 	.word	0x080113b9

0800ca5c <_scanf_float>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	b087      	sub	sp, #28
 800ca62:	4617      	mov	r7, r2
 800ca64:	9303      	str	r3, [sp, #12]
 800ca66:	688b      	ldr	r3, [r1, #8]
 800ca68:	1e5a      	subs	r2, r3, #1
 800ca6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca6e:	bf81      	itttt	hi
 800ca70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca74:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca7c:	608b      	strhi	r3, [r1, #8]
 800ca7e:	680b      	ldr	r3, [r1, #0]
 800ca80:	460a      	mov	r2, r1
 800ca82:	f04f 0500 	mov.w	r5, #0
 800ca86:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca8a:	f842 3b1c 	str.w	r3, [r2], #28
 800ca8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca92:	4680      	mov	r8, r0
 800ca94:	460c      	mov	r4, r1
 800ca96:	bf98      	it	ls
 800ca98:	f04f 0b00 	movls.w	fp, #0
 800ca9c:	9201      	str	r2, [sp, #4]
 800ca9e:	4616      	mov	r6, r2
 800caa0:	46aa      	mov	sl, r5
 800caa2:	46a9      	mov	r9, r5
 800caa4:	9502      	str	r5, [sp, #8]
 800caa6:	68a2      	ldr	r2, [r4, #8]
 800caa8:	b152      	cbz	r2, 800cac0 <_scanf_float+0x64>
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b4e      	cmp	r3, #78	@ 0x4e
 800cab0:	d864      	bhi.n	800cb7c <_scanf_float+0x120>
 800cab2:	2b40      	cmp	r3, #64	@ 0x40
 800cab4:	d83c      	bhi.n	800cb30 <_scanf_float+0xd4>
 800cab6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800caba:	b2c8      	uxtb	r0, r1
 800cabc:	280e      	cmp	r0, #14
 800cabe:	d93a      	bls.n	800cb36 <_scanf_float+0xda>
 800cac0:	f1b9 0f00 	cmp.w	r9, #0
 800cac4:	d003      	beq.n	800cace <_scanf_float+0x72>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cad2:	f1ba 0f01 	cmp.w	sl, #1
 800cad6:	f200 8117 	bhi.w	800cd08 <_scanf_float+0x2ac>
 800cada:	9b01      	ldr	r3, [sp, #4]
 800cadc:	429e      	cmp	r6, r3
 800cade:	f200 8108 	bhi.w	800ccf2 <_scanf_float+0x296>
 800cae2:	2001      	movs	r0, #1
 800cae4:	b007      	add	sp, #28
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800caee:	2a0d      	cmp	r2, #13
 800caf0:	d8e6      	bhi.n	800cac0 <_scanf_float+0x64>
 800caf2:	a101      	add	r1, pc, #4	@ (adr r1, 800caf8 <_scanf_float+0x9c>)
 800caf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800caf8:	0800cc3f 	.word	0x0800cc3f
 800cafc:	0800cac1 	.word	0x0800cac1
 800cb00:	0800cac1 	.word	0x0800cac1
 800cb04:	0800cac1 	.word	0x0800cac1
 800cb08:	0800cc9f 	.word	0x0800cc9f
 800cb0c:	0800cc77 	.word	0x0800cc77
 800cb10:	0800cac1 	.word	0x0800cac1
 800cb14:	0800cac1 	.word	0x0800cac1
 800cb18:	0800cc4d 	.word	0x0800cc4d
 800cb1c:	0800cac1 	.word	0x0800cac1
 800cb20:	0800cac1 	.word	0x0800cac1
 800cb24:	0800cac1 	.word	0x0800cac1
 800cb28:	0800cac1 	.word	0x0800cac1
 800cb2c:	0800cc05 	.word	0x0800cc05
 800cb30:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cb34:	e7db      	b.n	800caee <_scanf_float+0x92>
 800cb36:	290e      	cmp	r1, #14
 800cb38:	d8c2      	bhi.n	800cac0 <_scanf_float+0x64>
 800cb3a:	a001      	add	r0, pc, #4	@ (adr r0, 800cb40 <_scanf_float+0xe4>)
 800cb3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb40:	0800cbf5 	.word	0x0800cbf5
 800cb44:	0800cac1 	.word	0x0800cac1
 800cb48:	0800cbf5 	.word	0x0800cbf5
 800cb4c:	0800cc8b 	.word	0x0800cc8b
 800cb50:	0800cac1 	.word	0x0800cac1
 800cb54:	0800cb9d 	.word	0x0800cb9d
 800cb58:	0800cbdb 	.word	0x0800cbdb
 800cb5c:	0800cbdb 	.word	0x0800cbdb
 800cb60:	0800cbdb 	.word	0x0800cbdb
 800cb64:	0800cbdb 	.word	0x0800cbdb
 800cb68:	0800cbdb 	.word	0x0800cbdb
 800cb6c:	0800cbdb 	.word	0x0800cbdb
 800cb70:	0800cbdb 	.word	0x0800cbdb
 800cb74:	0800cbdb 	.word	0x0800cbdb
 800cb78:	0800cbdb 	.word	0x0800cbdb
 800cb7c:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb7e:	d809      	bhi.n	800cb94 <_scanf_float+0x138>
 800cb80:	2b60      	cmp	r3, #96	@ 0x60
 800cb82:	d8b2      	bhi.n	800caea <_scanf_float+0x8e>
 800cb84:	2b54      	cmp	r3, #84	@ 0x54
 800cb86:	d07b      	beq.n	800cc80 <_scanf_float+0x224>
 800cb88:	2b59      	cmp	r3, #89	@ 0x59
 800cb8a:	d199      	bne.n	800cac0 <_scanf_float+0x64>
 800cb8c:	2d07      	cmp	r5, #7
 800cb8e:	d197      	bne.n	800cac0 <_scanf_float+0x64>
 800cb90:	2508      	movs	r5, #8
 800cb92:	e02c      	b.n	800cbee <_scanf_float+0x192>
 800cb94:	2b74      	cmp	r3, #116	@ 0x74
 800cb96:	d073      	beq.n	800cc80 <_scanf_float+0x224>
 800cb98:	2b79      	cmp	r3, #121	@ 0x79
 800cb9a:	e7f6      	b.n	800cb8a <_scanf_float+0x12e>
 800cb9c:	6821      	ldr	r1, [r4, #0]
 800cb9e:	05c8      	lsls	r0, r1, #23
 800cba0:	d51b      	bpl.n	800cbda <_scanf_float+0x17e>
 800cba2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cba6:	6021      	str	r1, [r4, #0]
 800cba8:	f109 0901 	add.w	r9, r9, #1
 800cbac:	f1bb 0f00 	cmp.w	fp, #0
 800cbb0:	d003      	beq.n	800cbba <_scanf_float+0x15e>
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cbb8:	60a2      	str	r2, [r4, #8]
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	60a3      	str	r3, [r4, #8]
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	f340 8087 	ble.w	800cce0 <_scanf_float+0x284>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	e765      	b.n	800caa6 <_scanf_float+0x4a>
 800cbda:	eb1a 0105 	adds.w	r1, sl, r5
 800cbde:	f47f af6f 	bne.w	800cac0 <_scanf_float+0x64>
 800cbe2:	6822      	ldr	r2, [r4, #0]
 800cbe4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cbe8:	6022      	str	r2, [r4, #0]
 800cbea:	460d      	mov	r5, r1
 800cbec:	468a      	mov	sl, r1
 800cbee:	f806 3b01 	strb.w	r3, [r6], #1
 800cbf2:	e7e2      	b.n	800cbba <_scanf_float+0x15e>
 800cbf4:	6822      	ldr	r2, [r4, #0]
 800cbf6:	0610      	lsls	r0, r2, #24
 800cbf8:	f57f af62 	bpl.w	800cac0 <_scanf_float+0x64>
 800cbfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc00:	6022      	str	r2, [r4, #0]
 800cc02:	e7f4      	b.n	800cbee <_scanf_float+0x192>
 800cc04:	f1ba 0f00 	cmp.w	sl, #0
 800cc08:	d10e      	bne.n	800cc28 <_scanf_float+0x1cc>
 800cc0a:	f1b9 0f00 	cmp.w	r9, #0
 800cc0e:	d10e      	bne.n	800cc2e <_scanf_float+0x1d2>
 800cc10:	6822      	ldr	r2, [r4, #0]
 800cc12:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc16:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc1a:	d108      	bne.n	800cc2e <_scanf_float+0x1d2>
 800cc1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	f04f 0a01 	mov.w	sl, #1
 800cc26:	e7e2      	b.n	800cbee <_scanf_float+0x192>
 800cc28:	f1ba 0f02 	cmp.w	sl, #2
 800cc2c:	d055      	beq.n	800ccda <_scanf_float+0x27e>
 800cc2e:	2d01      	cmp	r5, #1
 800cc30:	d002      	beq.n	800cc38 <_scanf_float+0x1dc>
 800cc32:	2d04      	cmp	r5, #4
 800cc34:	f47f af44 	bne.w	800cac0 <_scanf_float+0x64>
 800cc38:	3501      	adds	r5, #1
 800cc3a:	b2ed      	uxtb	r5, r5
 800cc3c:	e7d7      	b.n	800cbee <_scanf_float+0x192>
 800cc3e:	f1ba 0f01 	cmp.w	sl, #1
 800cc42:	f47f af3d 	bne.w	800cac0 <_scanf_float+0x64>
 800cc46:	f04f 0a02 	mov.w	sl, #2
 800cc4a:	e7d0      	b.n	800cbee <_scanf_float+0x192>
 800cc4c:	b97d      	cbnz	r5, 800cc6e <_scanf_float+0x212>
 800cc4e:	f1b9 0f00 	cmp.w	r9, #0
 800cc52:	f47f af38 	bne.w	800cac6 <_scanf_float+0x6a>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc60:	f040 8108 	bne.w	800ce74 <_scanf_float+0x418>
 800cc64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	2501      	movs	r5, #1
 800cc6c:	e7bf      	b.n	800cbee <_scanf_float+0x192>
 800cc6e:	2d03      	cmp	r5, #3
 800cc70:	d0e2      	beq.n	800cc38 <_scanf_float+0x1dc>
 800cc72:	2d05      	cmp	r5, #5
 800cc74:	e7de      	b.n	800cc34 <_scanf_float+0x1d8>
 800cc76:	2d02      	cmp	r5, #2
 800cc78:	f47f af22 	bne.w	800cac0 <_scanf_float+0x64>
 800cc7c:	2503      	movs	r5, #3
 800cc7e:	e7b6      	b.n	800cbee <_scanf_float+0x192>
 800cc80:	2d06      	cmp	r5, #6
 800cc82:	f47f af1d 	bne.w	800cac0 <_scanf_float+0x64>
 800cc86:	2507      	movs	r5, #7
 800cc88:	e7b1      	b.n	800cbee <_scanf_float+0x192>
 800cc8a:	6822      	ldr	r2, [r4, #0]
 800cc8c:	0591      	lsls	r1, r2, #22
 800cc8e:	f57f af17 	bpl.w	800cac0 <_scanf_float+0x64>
 800cc92:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc9c:	e7a7      	b.n	800cbee <_scanf_float+0x192>
 800cc9e:	6822      	ldr	r2, [r4, #0]
 800cca0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cca4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cca8:	d006      	beq.n	800ccb8 <_scanf_float+0x25c>
 800ccaa:	0550      	lsls	r0, r2, #21
 800ccac:	f57f af08 	bpl.w	800cac0 <_scanf_float+0x64>
 800ccb0:	f1b9 0f00 	cmp.w	r9, #0
 800ccb4:	f000 80de 	beq.w	800ce74 <_scanf_float+0x418>
 800ccb8:	0591      	lsls	r1, r2, #22
 800ccba:	bf58      	it	pl
 800ccbc:	9902      	ldrpl	r1, [sp, #8]
 800ccbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccc2:	bf58      	it	pl
 800ccc4:	eba9 0101 	subpl.w	r1, r9, r1
 800ccc8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cccc:	bf58      	it	pl
 800ccce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ccd2:	6022      	str	r2, [r4, #0]
 800ccd4:	f04f 0900 	mov.w	r9, #0
 800ccd8:	e789      	b.n	800cbee <_scanf_float+0x192>
 800ccda:	f04f 0a03 	mov.w	sl, #3
 800ccde:	e786      	b.n	800cbee <_scanf_float+0x192>
 800cce0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cce4:	4639      	mov	r1, r7
 800cce6:	4640      	mov	r0, r8
 800cce8:	4798      	blx	r3
 800ccea:	2800      	cmp	r0, #0
 800ccec:	f43f aedb 	beq.w	800caa6 <_scanf_float+0x4a>
 800ccf0:	e6e6      	b.n	800cac0 <_scanf_float+0x64>
 800ccf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4798      	blx	r3
 800cd00:	6923      	ldr	r3, [r4, #16]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	e6e8      	b.n	800cada <_scanf_float+0x7e>
 800cd08:	1e6b      	subs	r3, r5, #1
 800cd0a:	2b06      	cmp	r3, #6
 800cd0c:	d824      	bhi.n	800cd58 <_scanf_float+0x2fc>
 800cd0e:	2d02      	cmp	r5, #2
 800cd10:	d836      	bhi.n	800cd80 <_scanf_float+0x324>
 800cd12:	9b01      	ldr	r3, [sp, #4]
 800cd14:	429e      	cmp	r6, r3
 800cd16:	f67f aee4 	bls.w	800cae2 <_scanf_float+0x86>
 800cd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd22:	463a      	mov	r2, r7
 800cd24:	4640      	mov	r0, r8
 800cd26:	4798      	blx	r3
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	6123      	str	r3, [r4, #16]
 800cd2e:	e7f0      	b.n	800cd12 <_scanf_float+0x2b6>
 800cd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd34:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cd38:	463a      	mov	r2, r7
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4798      	blx	r3
 800cd3e:	6923      	ldr	r3, [r4, #16]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	6123      	str	r3, [r4, #16]
 800cd44:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cd48:	fa5f fa8a 	uxtb.w	sl, sl
 800cd4c:	f1ba 0f02 	cmp.w	sl, #2
 800cd50:	d1ee      	bne.n	800cd30 <_scanf_float+0x2d4>
 800cd52:	3d03      	subs	r5, #3
 800cd54:	b2ed      	uxtb	r5, r5
 800cd56:	1b76      	subs	r6, r6, r5
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	05da      	lsls	r2, r3, #23
 800cd5c:	d530      	bpl.n	800cdc0 <_scanf_float+0x364>
 800cd5e:	055b      	lsls	r3, r3, #21
 800cd60:	d511      	bpl.n	800cd86 <_scanf_float+0x32a>
 800cd62:	9b01      	ldr	r3, [sp, #4]
 800cd64:	429e      	cmp	r6, r3
 800cd66:	f67f aebc 	bls.w	800cae2 <_scanf_float+0x86>
 800cd6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd72:	463a      	mov	r2, r7
 800cd74:	4640      	mov	r0, r8
 800cd76:	4798      	blx	r3
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	e7f0      	b.n	800cd62 <_scanf_float+0x306>
 800cd80:	46aa      	mov	sl, r5
 800cd82:	46b3      	mov	fp, r6
 800cd84:	e7de      	b.n	800cd44 <_scanf_float+0x2e8>
 800cd86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	2965      	cmp	r1, #101	@ 0x65
 800cd8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cd92:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	d00c      	beq.n	800cdb4 <_scanf_float+0x358>
 800cd9a:	2945      	cmp	r1, #69	@ 0x45
 800cd9c:	d00a      	beq.n	800cdb4 <_scanf_float+0x358>
 800cd9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cda2:	463a      	mov	r2, r7
 800cda4:	4640      	mov	r0, r8
 800cda6:	4798      	blx	r3
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	1eb5      	subs	r5, r6, #2
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdb8:	463a      	mov	r2, r7
 800cdba:	4640      	mov	r0, r8
 800cdbc:	4798      	blx	r3
 800cdbe:	462e      	mov	r6, r5
 800cdc0:	6822      	ldr	r2, [r4, #0]
 800cdc2:	f012 0210 	ands.w	r2, r2, #16
 800cdc6:	d001      	beq.n	800cdcc <_scanf_float+0x370>
 800cdc8:	2000      	movs	r0, #0
 800cdca:	e68b      	b.n	800cae4 <_scanf_float+0x88>
 800cdcc:	7032      	strb	r2, [r6, #0]
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cdd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdd8:	d11c      	bne.n	800ce14 <_scanf_float+0x3b8>
 800cdda:	9b02      	ldr	r3, [sp, #8]
 800cddc:	454b      	cmp	r3, r9
 800cdde:	eba3 0209 	sub.w	r2, r3, r9
 800cde2:	d123      	bne.n	800ce2c <_scanf_float+0x3d0>
 800cde4:	9901      	ldr	r1, [sp, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	4640      	mov	r0, r8
 800cdea:	f002 fc6d 	bl	800f6c8 <_strtod_r>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	6821      	ldr	r1, [r4, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f011 0f02 	tst.w	r1, #2
 800cdf8:	ec57 6b10 	vmov	r6, r7, d0
 800cdfc:	f103 0204 	add.w	r2, r3, #4
 800ce00:	d01f      	beq.n	800ce42 <_scanf_float+0x3e6>
 800ce02:	9903      	ldr	r1, [sp, #12]
 800ce04:	600a      	str	r2, [r1, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	e9c3 6700 	strd	r6, r7, [r3]
 800ce0c:	68e3      	ldr	r3, [r4, #12]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	60e3      	str	r3, [r4, #12]
 800ce12:	e7d9      	b.n	800cdc8 <_scanf_float+0x36c>
 800ce14:	9b04      	ldr	r3, [sp, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0e4      	beq.n	800cde4 <_scanf_float+0x388>
 800ce1a:	9905      	ldr	r1, [sp, #20]
 800ce1c:	230a      	movs	r3, #10
 800ce1e:	3101      	adds	r1, #1
 800ce20:	4640      	mov	r0, r8
 800ce22:	f002 fcd1 	bl	800f7c8 <_strtol_r>
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	9e05      	ldr	r6, [sp, #20]
 800ce2a:	1ac2      	subs	r2, r0, r3
 800ce2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce30:	429e      	cmp	r6, r3
 800ce32:	bf28      	it	cs
 800ce34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce38:	4910      	ldr	r1, [pc, #64]	@ (800ce7c <_scanf_float+0x420>)
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f000 f918 	bl	800d070 <siprintf>
 800ce40:	e7d0      	b.n	800cde4 <_scanf_float+0x388>
 800ce42:	f011 0f04 	tst.w	r1, #4
 800ce46:	9903      	ldr	r1, [sp, #12]
 800ce48:	600a      	str	r2, [r1, #0]
 800ce4a:	d1dc      	bne.n	800ce06 <_scanf_float+0x3aa>
 800ce4c:	681d      	ldr	r5, [r3, #0]
 800ce4e:	4632      	mov	r2, r6
 800ce50:	463b      	mov	r3, r7
 800ce52:	4630      	mov	r0, r6
 800ce54:	4639      	mov	r1, r7
 800ce56:	f7f3 fe69 	bl	8000b2c <__aeabi_dcmpun>
 800ce5a:	b128      	cbz	r0, 800ce68 <_scanf_float+0x40c>
 800ce5c:	4808      	ldr	r0, [pc, #32]	@ (800ce80 <_scanf_float+0x424>)
 800ce5e:	f000 fa2d 	bl	800d2bc <nanf>
 800ce62:	ed85 0a00 	vstr	s0, [r5]
 800ce66:	e7d1      	b.n	800ce0c <_scanf_float+0x3b0>
 800ce68:	4630      	mov	r0, r6
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	f7f3 febc 	bl	8000be8 <__aeabi_d2f>
 800ce70:	6028      	str	r0, [r5, #0]
 800ce72:	e7cb      	b.n	800ce0c <_scanf_float+0x3b0>
 800ce74:	f04f 0900 	mov.w	r9, #0
 800ce78:	e629      	b.n	800cace <_scanf_float+0x72>
 800ce7a:	bf00      	nop
 800ce7c:	080113ca 	.word	0x080113ca
 800ce80:	08011780 	.word	0x08011780

0800ce84 <std>:
 800ce84:	2300      	movs	r3, #0
 800ce86:	b510      	push	{r4, lr}
 800ce88:	4604      	mov	r4, r0
 800ce8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce92:	6083      	str	r3, [r0, #8]
 800ce94:	8181      	strh	r1, [r0, #12]
 800ce96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce98:	81c2      	strh	r2, [r0, #14]
 800ce9a:	6183      	str	r3, [r0, #24]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	2208      	movs	r2, #8
 800cea0:	305c      	adds	r0, #92	@ 0x5c
 800cea2:	f000 f974 	bl	800d18e <memset>
 800cea6:	4b0d      	ldr	r3, [pc, #52]	@ (800cedc <std+0x58>)
 800cea8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cee0 <std+0x5c>)
 800ceac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceae:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <std+0x60>)
 800ceb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <std+0x64>)
 800ceb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ceec <std+0x68>)
 800ceb8:	6224      	str	r4, [r4, #32]
 800ceba:	429c      	cmp	r4, r3
 800cebc:	d006      	beq.n	800cecc <std+0x48>
 800cebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cec2:	4294      	cmp	r4, r2
 800cec4:	d002      	beq.n	800cecc <std+0x48>
 800cec6:	33d0      	adds	r3, #208	@ 0xd0
 800cec8:	429c      	cmp	r4, r3
 800ceca:	d105      	bne.n	800ced8 <std+0x54>
 800cecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ced0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced4:	f000 b9ee 	b.w	800d2b4 <__retarget_lock_init_recursive>
 800ced8:	bd10      	pop	{r4, pc}
 800ceda:	bf00      	nop
 800cedc:	0800d105 	.word	0x0800d105
 800cee0:	0800d12b 	.word	0x0800d12b
 800cee4:	0800d163 	.word	0x0800d163
 800cee8:	0800d187 	.word	0x0800d187
 800ceec:	20002268 	.word	0x20002268

0800cef0 <stdio_exit_handler>:
 800cef0:	4a02      	ldr	r2, [pc, #8]	@ (800cefc <stdio_exit_handler+0xc>)
 800cef2:	4903      	ldr	r1, [pc, #12]	@ (800cf00 <stdio_exit_handler+0x10>)
 800cef4:	4803      	ldr	r0, [pc, #12]	@ (800cf04 <stdio_exit_handler+0x14>)
 800cef6:	f000 b869 	b.w	800cfcc <_fwalk_sglue>
 800cefa:	bf00      	nop
 800cefc:	200001a8 	.word	0x200001a8
 800cf00:	080101b9 	.word	0x080101b9
 800cf04:	200001b8 	.word	0x200001b8

0800cf08 <cleanup_stdio>:
 800cf08:	6841      	ldr	r1, [r0, #4]
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	@ (800cf3c <cleanup_stdio+0x34>)
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	4604      	mov	r4, r0
 800cf12:	d001      	beq.n	800cf18 <cleanup_stdio+0x10>
 800cf14:	f003 f950 	bl	80101b8 <_fflush_r>
 800cf18:	68a1      	ldr	r1, [r4, #8]
 800cf1a:	4b09      	ldr	r3, [pc, #36]	@ (800cf40 <cleanup_stdio+0x38>)
 800cf1c:	4299      	cmp	r1, r3
 800cf1e:	d002      	beq.n	800cf26 <cleanup_stdio+0x1e>
 800cf20:	4620      	mov	r0, r4
 800cf22:	f003 f949 	bl	80101b8 <_fflush_r>
 800cf26:	68e1      	ldr	r1, [r4, #12]
 800cf28:	4b06      	ldr	r3, [pc, #24]	@ (800cf44 <cleanup_stdio+0x3c>)
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	d004      	beq.n	800cf38 <cleanup_stdio+0x30>
 800cf2e:	4620      	mov	r0, r4
 800cf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf34:	f003 b940 	b.w	80101b8 <_fflush_r>
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20002268 	.word	0x20002268
 800cf40:	200022d0 	.word	0x200022d0
 800cf44:	20002338 	.word	0x20002338

0800cf48 <global_stdio_init.part.0>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf78 <global_stdio_init.part.0+0x30>)
 800cf4c:	4c0b      	ldr	r4, [pc, #44]	@ (800cf7c <global_stdio_init.part.0+0x34>)
 800cf4e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf80 <global_stdio_init.part.0+0x38>)
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	4620      	mov	r0, r4
 800cf54:	2200      	movs	r2, #0
 800cf56:	2104      	movs	r1, #4
 800cf58:	f7ff ff94 	bl	800ce84 <std>
 800cf5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf60:	2201      	movs	r2, #1
 800cf62:	2109      	movs	r1, #9
 800cf64:	f7ff ff8e 	bl	800ce84 <std>
 800cf68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf72:	2112      	movs	r1, #18
 800cf74:	f7ff bf86 	b.w	800ce84 <std>
 800cf78:	200023a0 	.word	0x200023a0
 800cf7c:	20002268 	.word	0x20002268
 800cf80:	0800cef1 	.word	0x0800cef1

0800cf84 <__sfp_lock_acquire>:
 800cf84:	4801      	ldr	r0, [pc, #4]	@ (800cf8c <__sfp_lock_acquire+0x8>)
 800cf86:	f000 b996 	b.w	800d2b6 <__retarget_lock_acquire_recursive>
 800cf8a:	bf00      	nop
 800cf8c:	200023a9 	.word	0x200023a9

0800cf90 <__sfp_lock_release>:
 800cf90:	4801      	ldr	r0, [pc, #4]	@ (800cf98 <__sfp_lock_release+0x8>)
 800cf92:	f000 b991 	b.w	800d2b8 <__retarget_lock_release_recursive>
 800cf96:	bf00      	nop
 800cf98:	200023a9 	.word	0x200023a9

0800cf9c <__sinit>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	f7ff fff0 	bl	800cf84 <__sfp_lock_acquire>
 800cfa4:	6a23      	ldr	r3, [r4, #32]
 800cfa6:	b11b      	cbz	r3, 800cfb0 <__sinit+0x14>
 800cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfac:	f7ff bff0 	b.w	800cf90 <__sfp_lock_release>
 800cfb0:	4b04      	ldr	r3, [pc, #16]	@ (800cfc4 <__sinit+0x28>)
 800cfb2:	6223      	str	r3, [r4, #32]
 800cfb4:	4b04      	ldr	r3, [pc, #16]	@ (800cfc8 <__sinit+0x2c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1f5      	bne.n	800cfa8 <__sinit+0xc>
 800cfbc:	f7ff ffc4 	bl	800cf48 <global_stdio_init.part.0>
 800cfc0:	e7f2      	b.n	800cfa8 <__sinit+0xc>
 800cfc2:	bf00      	nop
 800cfc4:	0800cf09 	.word	0x0800cf09
 800cfc8:	200023a0 	.word	0x200023a0

0800cfcc <_fwalk_sglue>:
 800cfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	4688      	mov	r8, r1
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	2600      	movs	r6, #0
 800cfd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfdc:	f1b9 0901 	subs.w	r9, r9, #1
 800cfe0:	d505      	bpl.n	800cfee <_fwalk_sglue+0x22>
 800cfe2:	6824      	ldr	r4, [r4, #0]
 800cfe4:	2c00      	cmp	r4, #0
 800cfe6:	d1f7      	bne.n	800cfd8 <_fwalk_sglue+0xc>
 800cfe8:	4630      	mov	r0, r6
 800cfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d907      	bls.n	800d004 <_fwalk_sglue+0x38>
 800cff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cff8:	3301      	adds	r3, #1
 800cffa:	d003      	beq.n	800d004 <_fwalk_sglue+0x38>
 800cffc:	4629      	mov	r1, r5
 800cffe:	4638      	mov	r0, r7
 800d000:	47c0      	blx	r8
 800d002:	4306      	orrs	r6, r0
 800d004:	3568      	adds	r5, #104	@ 0x68
 800d006:	e7e9      	b.n	800cfdc <_fwalk_sglue+0x10>

0800d008 <sniprintf>:
 800d008:	b40c      	push	{r2, r3}
 800d00a:	b530      	push	{r4, r5, lr}
 800d00c:	4b17      	ldr	r3, [pc, #92]	@ (800d06c <sniprintf+0x64>)
 800d00e:	1e0c      	subs	r4, r1, #0
 800d010:	681d      	ldr	r5, [r3, #0]
 800d012:	b09d      	sub	sp, #116	@ 0x74
 800d014:	da08      	bge.n	800d028 <sniprintf+0x20>
 800d016:	238b      	movs	r3, #139	@ 0x8b
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d01e:	b01d      	add	sp, #116	@ 0x74
 800d020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d024:	b002      	add	sp, #8
 800d026:	4770      	bx	lr
 800d028:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d02c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d030:	bf14      	ite	ne
 800d032:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d036:	4623      	moveq	r3, r4
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d040:	9002      	str	r0, [sp, #8]
 800d042:	9006      	str	r0, [sp, #24]
 800d044:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d048:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d04a:	ab21      	add	r3, sp, #132	@ 0x84
 800d04c:	a902      	add	r1, sp, #8
 800d04e:	4628      	mov	r0, r5
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	f002 fc17 	bl	800f884 <_svfiprintf_r>
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	bfbc      	itt	lt
 800d05a:	238b      	movlt	r3, #139	@ 0x8b
 800d05c:	602b      	strlt	r3, [r5, #0]
 800d05e:	2c00      	cmp	r4, #0
 800d060:	d0dd      	beq.n	800d01e <sniprintf+0x16>
 800d062:	9b02      	ldr	r3, [sp, #8]
 800d064:	2200      	movs	r2, #0
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	e7d9      	b.n	800d01e <sniprintf+0x16>
 800d06a:	bf00      	nop
 800d06c:	200001b4 	.word	0x200001b4

0800d070 <siprintf>:
 800d070:	b40e      	push	{r1, r2, r3}
 800d072:	b500      	push	{lr}
 800d074:	b09c      	sub	sp, #112	@ 0x70
 800d076:	ab1d      	add	r3, sp, #116	@ 0x74
 800d078:	9002      	str	r0, [sp, #8]
 800d07a:	9006      	str	r0, [sp, #24]
 800d07c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d080:	4809      	ldr	r0, [pc, #36]	@ (800d0a8 <siprintf+0x38>)
 800d082:	9107      	str	r1, [sp, #28]
 800d084:	9104      	str	r1, [sp, #16]
 800d086:	4909      	ldr	r1, [pc, #36]	@ (800d0ac <siprintf+0x3c>)
 800d088:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08c:	9105      	str	r1, [sp, #20]
 800d08e:	6800      	ldr	r0, [r0, #0]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	a902      	add	r1, sp, #8
 800d094:	f002 fbf6 	bl	800f884 <_svfiprintf_r>
 800d098:	9b02      	ldr	r3, [sp, #8]
 800d09a:	2200      	movs	r2, #0
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	b01c      	add	sp, #112	@ 0x70
 800d0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a4:	b003      	add	sp, #12
 800d0a6:	4770      	bx	lr
 800d0a8:	200001b4 	.word	0x200001b4
 800d0ac:	ffff0208 	.word	0xffff0208

0800d0b0 <siscanf>:
 800d0b0:	b40e      	push	{r1, r2, r3}
 800d0b2:	b530      	push	{r4, r5, lr}
 800d0b4:	b09c      	sub	sp, #112	@ 0x70
 800d0b6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d0b8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d0bc:	f854 5b04 	ldr.w	r5, [r4], #4
 800d0c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d0c4:	9002      	str	r0, [sp, #8]
 800d0c6:	9006      	str	r0, [sp, #24]
 800d0c8:	f7f3 f8d2 	bl	8000270 <strlen>
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d0fc <siscanf+0x4c>)
 800d0ce:	9003      	str	r0, [sp, #12]
 800d0d0:	9007      	str	r0, [sp, #28]
 800d0d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0d4:	480a      	ldr	r0, [pc, #40]	@ (800d100 <siscanf+0x50>)
 800d0d6:	9401      	str	r4, [sp, #4]
 800d0d8:	2300      	movs	r3, #0
 800d0da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0dc:	9314      	str	r3, [sp, #80]	@ 0x50
 800d0de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0e6:	462a      	mov	r2, r5
 800d0e8:	4623      	mov	r3, r4
 800d0ea:	a902      	add	r1, sp, #8
 800d0ec:	6800      	ldr	r0, [r0, #0]
 800d0ee:	f002 fd1d 	bl	800fb2c <__ssvfiscanf_r>
 800d0f2:	b01c      	add	sp, #112	@ 0x70
 800d0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0f8:	b003      	add	sp, #12
 800d0fa:	4770      	bx	lr
 800d0fc:	0800d127 	.word	0x0800d127
 800d100:	200001b4 	.word	0x200001b4

0800d104 <__sread>:
 800d104:	b510      	push	{r4, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10c:	f000 f884 	bl	800d218 <_read_r>
 800d110:	2800      	cmp	r0, #0
 800d112:	bfab      	itete	ge
 800d114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d116:	89a3      	ldrhlt	r3, [r4, #12]
 800d118:	181b      	addge	r3, r3, r0
 800d11a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d11e:	bfac      	ite	ge
 800d120:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d122:	81a3      	strhlt	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__seofread>:
 800d126:	2000      	movs	r0, #0
 800d128:	4770      	bx	lr

0800d12a <__swrite>:
 800d12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12e:	461f      	mov	r7, r3
 800d130:	898b      	ldrh	r3, [r1, #12]
 800d132:	05db      	lsls	r3, r3, #23
 800d134:	4605      	mov	r5, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4616      	mov	r6, r2
 800d13a:	d505      	bpl.n	800d148 <__swrite+0x1e>
 800d13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d140:	2302      	movs	r3, #2
 800d142:	2200      	movs	r2, #0
 800d144:	f000 f856 	bl	800d1f4 <_lseek_r>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d15e:	f000 b86d 	b.w	800d23c <_write_r>

0800d162 <__sseek>:
 800d162:	b510      	push	{r4, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16a:	f000 f843 	bl	800d1f4 <_lseek_r>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	bf15      	itete	ne
 800d174:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d17a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d17e:	81a3      	strheq	r3, [r4, #12]
 800d180:	bf18      	it	ne
 800d182:	81a3      	strhne	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__sclose>:
 800d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18a:	f000 b823 	b.w	800d1d4 <_close_r>

0800d18e <memset>:
 800d18e:	4402      	add	r2, r0
 800d190:	4603      	mov	r3, r0
 800d192:	4293      	cmp	r3, r2
 800d194:	d100      	bne.n	800d198 <memset+0xa>
 800d196:	4770      	bx	lr
 800d198:	f803 1b01 	strb.w	r1, [r3], #1
 800d19c:	e7f9      	b.n	800d192 <memset+0x4>

0800d19e <strstr>:
 800d19e:	780a      	ldrb	r2, [r1, #0]
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	b96a      	cbnz	r2, 800d1c0 <strstr+0x22>
 800d1a4:	bd70      	pop	{r4, r5, r6, pc}
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d109      	bne.n	800d1be <strstr+0x20>
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0f6      	beq.n	800d1a4 <strstr+0x6>
 800d1b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d1ba:	429e      	cmp	r6, r3
 800d1bc:	d0f7      	beq.n	800d1ae <strstr+0x10>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	7803      	ldrb	r3, [r0, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d1ef      	bne.n	800d1a6 <strstr+0x8>
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	e7ec      	b.n	800d1a4 <strstr+0x6>
	...

0800d1cc <_localeconv_r>:
 800d1cc:	4800      	ldr	r0, [pc, #0]	@ (800d1d0 <_localeconv_r+0x4>)
 800d1ce:	4770      	bx	lr
 800d1d0:	200002f4 	.word	0x200002f4

0800d1d4 <_close_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d06      	ldr	r5, [pc, #24]	@ (800d1f0 <_close_r+0x1c>)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	f7f4 fc1c 	bl	8001a1c <_close>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d102      	bne.n	800d1ee <_close_r+0x1a>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b103      	cbz	r3, 800d1ee <_close_r+0x1a>
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	200023a4 	.word	0x200023a4

0800d1f4 <_lseek_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	4d07      	ldr	r5, [pc, #28]	@ (800d214 <_lseek_r+0x20>)
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	4608      	mov	r0, r1
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	2200      	movs	r2, #0
 800d200:	602a      	str	r2, [r5, #0]
 800d202:	461a      	mov	r2, r3
 800d204:	f7f4 fc31 	bl	8001a6a <_lseek>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_lseek_r+0x1e>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_lseek_r+0x1e>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	200023a4 	.word	0x200023a4

0800d218 <_read_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	@ (800d238 <_read_r+0x20>)
 800d21c:	4604      	mov	r4, r0
 800d21e:	4608      	mov	r0, r1
 800d220:	4611      	mov	r1, r2
 800d222:	2200      	movs	r2, #0
 800d224:	602a      	str	r2, [r5, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f7f4 fbbf 	bl	80019aa <_read>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d102      	bne.n	800d236 <_read_r+0x1e>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	b103      	cbz	r3, 800d236 <_read_r+0x1e>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	200023a4 	.word	0x200023a4

0800d23c <_write_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	@ (800d25c <_write_r+0x20>)
 800d240:	4604      	mov	r4, r0
 800d242:	4608      	mov	r0, r1
 800d244:	4611      	mov	r1, r2
 800d246:	2200      	movs	r2, #0
 800d248:	602a      	str	r2, [r5, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	f7f4 fbca 	bl	80019e4 <_write>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d102      	bne.n	800d25a <_write_r+0x1e>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	b103      	cbz	r3, 800d25a <_write_r+0x1e>
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	200023a4 	.word	0x200023a4

0800d260 <__errno>:
 800d260:	4b01      	ldr	r3, [pc, #4]	@ (800d268 <__errno+0x8>)
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	200001b4 	.word	0x200001b4

0800d26c <__libc_init_array>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4d0d      	ldr	r5, [pc, #52]	@ (800d2a4 <__libc_init_array+0x38>)
 800d270:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a8 <__libc_init_array+0x3c>)
 800d272:	1b64      	subs	r4, r4, r5
 800d274:	10a4      	asrs	r4, r4, #2
 800d276:	2600      	movs	r6, #0
 800d278:	42a6      	cmp	r6, r4
 800d27a:	d109      	bne.n	800d290 <__libc_init_array+0x24>
 800d27c:	4d0b      	ldr	r5, [pc, #44]	@ (800d2ac <__libc_init_array+0x40>)
 800d27e:	4c0c      	ldr	r4, [pc, #48]	@ (800d2b0 <__libc_init_array+0x44>)
 800d280:	f003 ffc8 	bl	8011214 <_init>
 800d284:	1b64      	subs	r4, r4, r5
 800d286:	10a4      	asrs	r4, r4, #2
 800d288:	2600      	movs	r6, #0
 800d28a:	42a6      	cmp	r6, r4
 800d28c:	d105      	bne.n	800d29a <__libc_init_array+0x2e>
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f855 3b04 	ldr.w	r3, [r5], #4
 800d294:	4798      	blx	r3
 800d296:	3601      	adds	r6, #1
 800d298:	e7ee      	b.n	800d278 <__libc_init_array+0xc>
 800d29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29e:	4798      	blx	r3
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7f2      	b.n	800d28a <__libc_init_array+0x1e>
 800d2a4:	080117ec 	.word	0x080117ec
 800d2a8:	080117ec 	.word	0x080117ec
 800d2ac:	080117ec 	.word	0x080117ec
 800d2b0:	080117f0 	.word	0x080117f0

0800d2b4 <__retarget_lock_init_recursive>:
 800d2b4:	4770      	bx	lr

0800d2b6 <__retarget_lock_acquire_recursive>:
 800d2b6:	4770      	bx	lr

0800d2b8 <__retarget_lock_release_recursive>:
 800d2b8:	4770      	bx	lr
	...

0800d2bc <nanf>:
 800d2bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d2c4 <nanf+0x8>
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	7fc00000 	.word	0x7fc00000

0800d2c8 <quorem>:
 800d2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	6903      	ldr	r3, [r0, #16]
 800d2ce:	690c      	ldr	r4, [r1, #16]
 800d2d0:	42a3      	cmp	r3, r4
 800d2d2:	4607      	mov	r7, r0
 800d2d4:	db7e      	blt.n	800d3d4 <quorem+0x10c>
 800d2d6:	3c01      	subs	r4, #1
 800d2d8:	f101 0814 	add.w	r8, r1, #20
 800d2dc:	00a3      	lsls	r3, r4, #2
 800d2de:	f100 0514 	add.w	r5, r0, #20
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2e8:	9301      	str	r3, [sp, #4]
 800d2ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2fe:	d32e      	bcc.n	800d35e <quorem+0x96>
 800d300:	f04f 0a00 	mov.w	sl, #0
 800d304:	46c4      	mov	ip, r8
 800d306:	46ae      	mov	lr, r5
 800d308:	46d3      	mov	fp, sl
 800d30a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d30e:	b298      	uxth	r0, r3
 800d310:	fb06 a000 	mla	r0, r6, r0, sl
 800d314:	0c02      	lsrs	r2, r0, #16
 800d316:	0c1b      	lsrs	r3, r3, #16
 800d318:	fb06 2303 	mla	r3, r6, r3, r2
 800d31c:	f8de 2000 	ldr.w	r2, [lr]
 800d320:	b280      	uxth	r0, r0
 800d322:	b292      	uxth	r2, r2
 800d324:	1a12      	subs	r2, r2, r0
 800d326:	445a      	add	r2, fp
 800d328:	f8de 0000 	ldr.w	r0, [lr]
 800d32c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d330:	b29b      	uxth	r3, r3
 800d332:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d336:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d33a:	b292      	uxth	r2, r2
 800d33c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d340:	45e1      	cmp	r9, ip
 800d342:	f84e 2b04 	str.w	r2, [lr], #4
 800d346:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d34a:	d2de      	bcs.n	800d30a <quorem+0x42>
 800d34c:	9b00      	ldr	r3, [sp, #0]
 800d34e:	58eb      	ldr	r3, [r5, r3]
 800d350:	b92b      	cbnz	r3, 800d35e <quorem+0x96>
 800d352:	9b01      	ldr	r3, [sp, #4]
 800d354:	3b04      	subs	r3, #4
 800d356:	429d      	cmp	r5, r3
 800d358:	461a      	mov	r2, r3
 800d35a:	d32f      	bcc.n	800d3bc <quorem+0xf4>
 800d35c:	613c      	str	r4, [r7, #16]
 800d35e:	4638      	mov	r0, r7
 800d360:	f001 f9c2 	bl	800e6e8 <__mcmp>
 800d364:	2800      	cmp	r0, #0
 800d366:	db25      	blt.n	800d3b4 <quorem+0xec>
 800d368:	4629      	mov	r1, r5
 800d36a:	2000      	movs	r0, #0
 800d36c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d370:	f8d1 c000 	ldr.w	ip, [r1]
 800d374:	fa1f fe82 	uxth.w	lr, r2
 800d378:	fa1f f38c 	uxth.w	r3, ip
 800d37c:	eba3 030e 	sub.w	r3, r3, lr
 800d380:	4403      	add	r3, r0
 800d382:	0c12      	lsrs	r2, r2, #16
 800d384:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d388:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d392:	45c1      	cmp	r9, r8
 800d394:	f841 3b04 	str.w	r3, [r1], #4
 800d398:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d39c:	d2e6      	bcs.n	800d36c <quorem+0xa4>
 800d39e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3a6:	b922      	cbnz	r2, 800d3b2 <quorem+0xea>
 800d3a8:	3b04      	subs	r3, #4
 800d3aa:	429d      	cmp	r5, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	d30b      	bcc.n	800d3c8 <quorem+0x100>
 800d3b0:	613c      	str	r4, [r7, #16]
 800d3b2:	3601      	adds	r6, #1
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	b003      	add	sp, #12
 800d3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3bc:	6812      	ldr	r2, [r2, #0]
 800d3be:	3b04      	subs	r3, #4
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	d1cb      	bne.n	800d35c <quorem+0x94>
 800d3c4:	3c01      	subs	r4, #1
 800d3c6:	e7c6      	b.n	800d356 <quorem+0x8e>
 800d3c8:	6812      	ldr	r2, [r2, #0]
 800d3ca:	3b04      	subs	r3, #4
 800d3cc:	2a00      	cmp	r2, #0
 800d3ce:	d1ef      	bne.n	800d3b0 <quorem+0xe8>
 800d3d0:	3c01      	subs	r4, #1
 800d3d2:	e7ea      	b.n	800d3aa <quorem+0xe2>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e7ee      	b.n	800d3b6 <quorem+0xee>

0800d3d8 <_dtoa_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	69c7      	ldr	r7, [r0, #28]
 800d3de:	b099      	sub	sp, #100	@ 0x64
 800d3e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3e4:	ec55 4b10 	vmov	r4, r5, d0
 800d3e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d3ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3ec:	4683      	mov	fp, r0
 800d3ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3f2:	b97f      	cbnz	r7, 800d414 <_dtoa_r+0x3c>
 800d3f4:	2010      	movs	r0, #16
 800d3f6:	f000 fdfd 	bl	800dff4 <malloc>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d400:	b920      	cbnz	r0, 800d40c <_dtoa_r+0x34>
 800d402:	4ba7      	ldr	r3, [pc, #668]	@ (800d6a0 <_dtoa_r+0x2c8>)
 800d404:	21ef      	movs	r1, #239	@ 0xef
 800d406:	48a7      	ldr	r0, [pc, #668]	@ (800d6a4 <_dtoa_r+0x2cc>)
 800d408:	f002 ffc6 	bl	8010398 <__assert_func>
 800d40c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d410:	6007      	str	r7, [r0, #0]
 800d412:	60c7      	str	r7, [r0, #12]
 800d414:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d418:	6819      	ldr	r1, [r3, #0]
 800d41a:	b159      	cbz	r1, 800d434 <_dtoa_r+0x5c>
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	604a      	str	r2, [r1, #4]
 800d420:	2301      	movs	r3, #1
 800d422:	4093      	lsls	r3, r2
 800d424:	608b      	str	r3, [r1, #8]
 800d426:	4658      	mov	r0, fp
 800d428:	f000 feda 	bl	800e1e0 <_Bfree>
 800d42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	1e2b      	subs	r3, r5, #0
 800d436:	bfb9      	ittee	lt
 800d438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d43c:	9303      	strlt	r3, [sp, #12]
 800d43e:	2300      	movge	r3, #0
 800d440:	6033      	strge	r3, [r6, #0]
 800d442:	9f03      	ldr	r7, [sp, #12]
 800d444:	4b98      	ldr	r3, [pc, #608]	@ (800d6a8 <_dtoa_r+0x2d0>)
 800d446:	bfbc      	itt	lt
 800d448:	2201      	movlt	r2, #1
 800d44a:	6032      	strlt	r2, [r6, #0]
 800d44c:	43bb      	bics	r3, r7
 800d44e:	d112      	bne.n	800d476 <_dtoa_r+0x9e>
 800d450:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d452:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d45c:	4323      	orrs	r3, r4
 800d45e:	f000 854d 	beq.w	800defc <_dtoa_r+0xb24>
 800d462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d464:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d6bc <_dtoa_r+0x2e4>
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 854f 	beq.w	800df0c <_dtoa_r+0xb34>
 800d46e:	f10a 0303 	add.w	r3, sl, #3
 800d472:	f000 bd49 	b.w	800df08 <_dtoa_r+0xb30>
 800d476:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d47a:	2200      	movs	r2, #0
 800d47c:	ec51 0b17 	vmov	r0, r1, d7
 800d480:	2300      	movs	r3, #0
 800d482:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d486:	f7f3 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d48a:	4680      	mov	r8, r0
 800d48c:	b158      	cbz	r0, 800d4a6 <_dtoa_r+0xce>
 800d48e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d490:	2301      	movs	r3, #1
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d496:	b113      	cbz	r3, 800d49e <_dtoa_r+0xc6>
 800d498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d49a:	4b84      	ldr	r3, [pc, #528]	@ (800d6ac <_dtoa_r+0x2d4>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d6c0 <_dtoa_r+0x2e8>
 800d4a2:	f000 bd33 	b.w	800df0c <_dtoa_r+0xb34>
 800d4a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4aa:	aa16      	add	r2, sp, #88	@ 0x58
 800d4ac:	a917      	add	r1, sp, #92	@ 0x5c
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	f001 fa3a 	bl	800e928 <__d2b>
 800d4b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	2e00      	cmp	r6, #0
 800d4bc:	d077      	beq.n	800d5ae <_dtoa_r+0x1d6>
 800d4be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d4c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d4d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d4d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d4d8:	4619      	mov	r1, r3
 800d4da:	2200      	movs	r2, #0
 800d4dc:	4b74      	ldr	r3, [pc, #464]	@ (800d6b0 <_dtoa_r+0x2d8>)
 800d4de:	f7f2 fed3 	bl	8000288 <__aeabi_dsub>
 800d4e2:	a369      	add	r3, pc, #420	@ (adr r3, 800d688 <_dtoa_r+0x2b0>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f3 f886 	bl	80005f8 <__aeabi_dmul>
 800d4ec:	a368      	add	r3, pc, #416	@ (adr r3, 800d690 <_dtoa_r+0x2b8>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f2 fecb 	bl	800028c <__adddf3>
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	f7f3 f812 	bl	8000524 <__aeabi_i2d>
 800d500:	a365      	add	r3, pc, #404	@ (adr r3, 800d698 <_dtoa_r+0x2c0>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f3 f877 	bl	80005f8 <__aeabi_dmul>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4620      	mov	r0, r4
 800d510:	4629      	mov	r1, r5
 800d512:	f7f2 febb 	bl	800028c <__adddf3>
 800d516:	4604      	mov	r4, r0
 800d518:	460d      	mov	r5, r1
 800d51a:	f7f3 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800d51e:	2200      	movs	r2, #0
 800d520:	4607      	mov	r7, r0
 800d522:	2300      	movs	r3, #0
 800d524:	4620      	mov	r0, r4
 800d526:	4629      	mov	r1, r5
 800d528:	f7f3 fad8 	bl	8000adc <__aeabi_dcmplt>
 800d52c:	b140      	cbz	r0, 800d540 <_dtoa_r+0x168>
 800d52e:	4638      	mov	r0, r7
 800d530:	f7f2 fff8 	bl	8000524 <__aeabi_i2d>
 800d534:	4622      	mov	r2, r4
 800d536:	462b      	mov	r3, r5
 800d538:	f7f3 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d53c:	b900      	cbnz	r0, 800d540 <_dtoa_r+0x168>
 800d53e:	3f01      	subs	r7, #1
 800d540:	2f16      	cmp	r7, #22
 800d542:	d851      	bhi.n	800d5e8 <_dtoa_r+0x210>
 800d544:	4b5b      	ldr	r3, [pc, #364]	@ (800d6b4 <_dtoa_r+0x2dc>)
 800d546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d552:	f7f3 fac3 	bl	8000adc <__aeabi_dcmplt>
 800d556:	2800      	cmp	r0, #0
 800d558:	d048      	beq.n	800d5ec <_dtoa_r+0x214>
 800d55a:	3f01      	subs	r7, #1
 800d55c:	2300      	movs	r3, #0
 800d55e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d560:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d562:	1b9b      	subs	r3, r3, r6
 800d564:	1e5a      	subs	r2, r3, #1
 800d566:	bf44      	itt	mi
 800d568:	f1c3 0801 	rsbmi	r8, r3, #1
 800d56c:	2300      	movmi	r3, #0
 800d56e:	9208      	str	r2, [sp, #32]
 800d570:	bf54      	ite	pl
 800d572:	f04f 0800 	movpl.w	r8, #0
 800d576:	9308      	strmi	r3, [sp, #32]
 800d578:	2f00      	cmp	r7, #0
 800d57a:	db39      	blt.n	800d5f0 <_dtoa_r+0x218>
 800d57c:	9b08      	ldr	r3, [sp, #32]
 800d57e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d580:	443b      	add	r3, r7
 800d582:	9308      	str	r3, [sp, #32]
 800d584:	2300      	movs	r3, #0
 800d586:	930a      	str	r3, [sp, #40]	@ 0x28
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	2b09      	cmp	r3, #9
 800d58c:	d864      	bhi.n	800d658 <_dtoa_r+0x280>
 800d58e:	2b05      	cmp	r3, #5
 800d590:	bfc4      	itt	gt
 800d592:	3b04      	subgt	r3, #4
 800d594:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d598:	f1a3 0302 	sub.w	r3, r3, #2
 800d59c:	bfcc      	ite	gt
 800d59e:	2400      	movgt	r4, #0
 800d5a0:	2401      	movle	r4, #1
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d863      	bhi.n	800d66e <_dtoa_r+0x296>
 800d5a6:	e8df f003 	tbb	[pc, r3]
 800d5aa:	372a      	.short	0x372a
 800d5ac:	5535      	.short	0x5535
 800d5ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d5b2:	441e      	add	r6, r3
 800d5b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d5b8:	2b20      	cmp	r3, #32
 800d5ba:	bfc1      	itttt	gt
 800d5bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d5c0:	409f      	lslgt	r7, r3
 800d5c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d5c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d5ca:	bfd6      	itet	le
 800d5cc:	f1c3 0320 	rsble	r3, r3, #32
 800d5d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d5d4:	fa04 f003 	lslle.w	r0, r4, r3
 800d5d8:	f7f2 ff94 	bl	8000504 <__aeabi_ui2d>
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d5e2:	3e01      	subs	r6, #1
 800d5e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d5e6:	e777      	b.n	800d4d8 <_dtoa_r+0x100>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e7b8      	b.n	800d55e <_dtoa_r+0x186>
 800d5ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800d5ee:	e7b7      	b.n	800d560 <_dtoa_r+0x188>
 800d5f0:	427b      	negs	r3, r7
 800d5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	eba8 0807 	sub.w	r8, r8, r7
 800d5fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5fc:	e7c4      	b.n	800d588 <_dtoa_r+0x1b0>
 800d5fe:	2300      	movs	r3, #0
 800d600:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d604:	2b00      	cmp	r3, #0
 800d606:	dc35      	bgt.n	800d674 <_dtoa_r+0x29c>
 800d608:	2301      	movs	r3, #1
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	9307      	str	r3, [sp, #28]
 800d60e:	461a      	mov	r2, r3
 800d610:	920e      	str	r2, [sp, #56]	@ 0x38
 800d612:	e00b      	b.n	800d62c <_dtoa_r+0x254>
 800d614:	2301      	movs	r3, #1
 800d616:	e7f3      	b.n	800d600 <_dtoa_r+0x228>
 800d618:	2300      	movs	r3, #0
 800d61a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d61c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61e:	18fb      	adds	r3, r7, r3
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	2b01      	cmp	r3, #1
 800d626:	9307      	str	r3, [sp, #28]
 800d628:	bfb8      	it	lt
 800d62a:	2301      	movlt	r3, #1
 800d62c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d630:	2100      	movs	r1, #0
 800d632:	2204      	movs	r2, #4
 800d634:	f102 0514 	add.w	r5, r2, #20
 800d638:	429d      	cmp	r5, r3
 800d63a:	d91f      	bls.n	800d67c <_dtoa_r+0x2a4>
 800d63c:	6041      	str	r1, [r0, #4]
 800d63e:	4658      	mov	r0, fp
 800d640:	f000 fd8e 	bl	800e160 <_Balloc>
 800d644:	4682      	mov	sl, r0
 800d646:	2800      	cmp	r0, #0
 800d648:	d13c      	bne.n	800d6c4 <_dtoa_r+0x2ec>
 800d64a:	4b1b      	ldr	r3, [pc, #108]	@ (800d6b8 <_dtoa_r+0x2e0>)
 800d64c:	4602      	mov	r2, r0
 800d64e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d652:	e6d8      	b.n	800d406 <_dtoa_r+0x2e>
 800d654:	2301      	movs	r3, #1
 800d656:	e7e0      	b.n	800d61a <_dtoa_r+0x242>
 800d658:	2401      	movs	r4, #1
 800d65a:	2300      	movs	r3, #0
 800d65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d65e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	9307      	str	r3, [sp, #28]
 800d668:	2200      	movs	r2, #0
 800d66a:	2312      	movs	r3, #18
 800d66c:	e7d0      	b.n	800d610 <_dtoa_r+0x238>
 800d66e:	2301      	movs	r3, #1
 800d670:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d672:	e7f5      	b.n	800d660 <_dtoa_r+0x288>
 800d674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	9307      	str	r3, [sp, #28]
 800d67a:	e7d7      	b.n	800d62c <_dtoa_r+0x254>
 800d67c:	3101      	adds	r1, #1
 800d67e:	0052      	lsls	r2, r2, #1
 800d680:	e7d8      	b.n	800d634 <_dtoa_r+0x25c>
 800d682:	bf00      	nop
 800d684:	f3af 8000 	nop.w
 800d688:	636f4361 	.word	0x636f4361
 800d68c:	3fd287a7 	.word	0x3fd287a7
 800d690:	8b60c8b3 	.word	0x8b60c8b3
 800d694:	3fc68a28 	.word	0x3fc68a28
 800d698:	509f79fb 	.word	0x509f79fb
 800d69c:	3fd34413 	.word	0x3fd34413
 800d6a0:	080113dc 	.word	0x080113dc
 800d6a4:	080113f3 	.word	0x080113f3
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	08011739 	.word	0x08011739
 800d6b0:	3ff80000 	.word	0x3ff80000
 800d6b4:	080114f0 	.word	0x080114f0
 800d6b8:	0801144b 	.word	0x0801144b
 800d6bc:	080113d8 	.word	0x080113d8
 800d6c0:	08011738 	.word	0x08011738
 800d6c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d6c8:	6018      	str	r0, [r3, #0]
 800d6ca:	9b07      	ldr	r3, [sp, #28]
 800d6cc:	2b0e      	cmp	r3, #14
 800d6ce:	f200 80a4 	bhi.w	800d81a <_dtoa_r+0x442>
 800d6d2:	2c00      	cmp	r4, #0
 800d6d4:	f000 80a1 	beq.w	800d81a <_dtoa_r+0x442>
 800d6d8:	2f00      	cmp	r7, #0
 800d6da:	dd33      	ble.n	800d744 <_dtoa_r+0x36c>
 800d6dc:	4bad      	ldr	r3, [pc, #692]	@ (800d994 <_dtoa_r+0x5bc>)
 800d6de:	f007 020f 	and.w	r2, r7, #15
 800d6e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6e6:	ed93 7b00 	vldr	d7, [r3]
 800d6ea:	05f8      	lsls	r0, r7, #23
 800d6ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d6f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d6f4:	d516      	bpl.n	800d724 <_dtoa_r+0x34c>
 800d6f6:	4ba8      	ldr	r3, [pc, #672]	@ (800d998 <_dtoa_r+0x5c0>)
 800d6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d700:	f7f3 f8a4 	bl	800084c <__aeabi_ddiv>
 800d704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d708:	f004 040f 	and.w	r4, r4, #15
 800d70c:	2603      	movs	r6, #3
 800d70e:	4da2      	ldr	r5, [pc, #648]	@ (800d998 <_dtoa_r+0x5c0>)
 800d710:	b954      	cbnz	r4, 800d728 <_dtoa_r+0x350>
 800d712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71a:	f7f3 f897 	bl	800084c <__aeabi_ddiv>
 800d71e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d722:	e028      	b.n	800d776 <_dtoa_r+0x39e>
 800d724:	2602      	movs	r6, #2
 800d726:	e7f2      	b.n	800d70e <_dtoa_r+0x336>
 800d728:	07e1      	lsls	r1, r4, #31
 800d72a:	d508      	bpl.n	800d73e <_dtoa_r+0x366>
 800d72c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d730:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d734:	f7f2 ff60 	bl	80005f8 <__aeabi_dmul>
 800d738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d73c:	3601      	adds	r6, #1
 800d73e:	1064      	asrs	r4, r4, #1
 800d740:	3508      	adds	r5, #8
 800d742:	e7e5      	b.n	800d710 <_dtoa_r+0x338>
 800d744:	f000 80d2 	beq.w	800d8ec <_dtoa_r+0x514>
 800d748:	427c      	negs	r4, r7
 800d74a:	4b92      	ldr	r3, [pc, #584]	@ (800d994 <_dtoa_r+0x5bc>)
 800d74c:	4d92      	ldr	r5, [pc, #584]	@ (800d998 <_dtoa_r+0x5c0>)
 800d74e:	f004 020f 	and.w	r2, r4, #15
 800d752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d75e:	f7f2 ff4b 	bl	80005f8 <__aeabi_dmul>
 800d762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d766:	1124      	asrs	r4, r4, #4
 800d768:	2300      	movs	r3, #0
 800d76a:	2602      	movs	r6, #2
 800d76c:	2c00      	cmp	r4, #0
 800d76e:	f040 80b2 	bne.w	800d8d6 <_dtoa_r+0x4fe>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1d3      	bne.n	800d71e <_dtoa_r+0x346>
 800d776:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d778:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 80b7 	beq.w	800d8f0 <_dtoa_r+0x518>
 800d782:	4b86      	ldr	r3, [pc, #536]	@ (800d99c <_dtoa_r+0x5c4>)
 800d784:	2200      	movs	r2, #0
 800d786:	4620      	mov	r0, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	f7f3 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800d78e:	2800      	cmp	r0, #0
 800d790:	f000 80ae 	beq.w	800d8f0 <_dtoa_r+0x518>
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 80aa 	beq.w	800d8f0 <_dtoa_r+0x518>
 800d79c:	9b00      	ldr	r3, [sp, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	dd37      	ble.n	800d812 <_dtoa_r+0x43a>
 800d7a2:	1e7b      	subs	r3, r7, #1
 800d7a4:	9304      	str	r3, [sp, #16]
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	4b7d      	ldr	r3, [pc, #500]	@ (800d9a0 <_dtoa_r+0x5c8>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	f7f2 ff23 	bl	80005f8 <__aeabi_dmul>
 800d7b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b6:	9c00      	ldr	r4, [sp, #0]
 800d7b8:	3601      	adds	r6, #1
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7f2 feb2 	bl	8000524 <__aeabi_i2d>
 800d7c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7c4:	f7f2 ff18 	bl	80005f8 <__aeabi_dmul>
 800d7c8:	4b76      	ldr	r3, [pc, #472]	@ (800d9a4 <_dtoa_r+0x5cc>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f7f2 fd5e 	bl	800028c <__adddf3>
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d7d6:	2c00      	cmp	r4, #0
 800d7d8:	f040 808d 	bne.w	800d8f6 <_dtoa_r+0x51e>
 800d7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e0:	4b71      	ldr	r3, [pc, #452]	@ (800d9a8 <_dtoa_r+0x5d0>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f7f2 fd50 	bl	8000288 <__aeabi_dsub>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7f0:	462a      	mov	r2, r5
 800d7f2:	4633      	mov	r3, r6
 800d7f4:	f7f3 f990 	bl	8000b18 <__aeabi_dcmpgt>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f040 828b 	bne.w	800dd14 <_dtoa_r+0x93c>
 800d7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d802:	462a      	mov	r2, r5
 800d804:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d808:	f7f3 f968 	bl	8000adc <__aeabi_dcmplt>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	f040 8128 	bne.w	800da62 <_dtoa_r+0x68a>
 800d812:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d816:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d81a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f2c0 815a 	blt.w	800dad6 <_dtoa_r+0x6fe>
 800d822:	2f0e      	cmp	r7, #14
 800d824:	f300 8157 	bgt.w	800dad6 <_dtoa_r+0x6fe>
 800d828:	4b5a      	ldr	r3, [pc, #360]	@ (800d994 <_dtoa_r+0x5bc>)
 800d82a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d82e:	ed93 7b00 	vldr	d7, [r3]
 800d832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d834:	2b00      	cmp	r3, #0
 800d836:	ed8d 7b00 	vstr	d7, [sp]
 800d83a:	da03      	bge.n	800d844 <_dtoa_r+0x46c>
 800d83c:	9b07      	ldr	r3, [sp, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f340 8101 	ble.w	800da46 <_dtoa_r+0x66e>
 800d844:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d848:	4656      	mov	r6, sl
 800d84a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d84e:	4620      	mov	r0, r4
 800d850:	4629      	mov	r1, r5
 800d852:	f7f2 fffb 	bl	800084c <__aeabi_ddiv>
 800d856:	f7f3 f97f 	bl	8000b58 <__aeabi_d2iz>
 800d85a:	4680      	mov	r8, r0
 800d85c:	f7f2 fe62 	bl	8000524 <__aeabi_i2d>
 800d860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d864:	f7f2 fec8 	bl	80005f8 <__aeabi_dmul>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4620      	mov	r0, r4
 800d86e:	4629      	mov	r1, r5
 800d870:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d874:	f7f2 fd08 	bl	8000288 <__aeabi_dsub>
 800d878:	f806 4b01 	strb.w	r4, [r6], #1
 800d87c:	9d07      	ldr	r5, [sp, #28]
 800d87e:	eba6 040a 	sub.w	r4, r6, sl
 800d882:	42a5      	cmp	r5, r4
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	f040 8117 	bne.w	800daba <_dtoa_r+0x6e2>
 800d88c:	f7f2 fcfe 	bl	800028c <__adddf3>
 800d890:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d894:	4604      	mov	r4, r0
 800d896:	460d      	mov	r5, r1
 800d898:	f7f3 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	f040 80f9 	bne.w	800da94 <_dtoa_r+0x6bc>
 800d8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f3 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ae:	b118      	cbz	r0, 800d8b8 <_dtoa_r+0x4e0>
 800d8b0:	f018 0f01 	tst.w	r8, #1
 800d8b4:	f040 80ee 	bne.w	800da94 <_dtoa_r+0x6bc>
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	4658      	mov	r0, fp
 800d8bc:	f000 fc90 	bl	800e1e0 <_Bfree>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	7033      	strb	r3, [r6, #0]
 800d8c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d8c6:	3701      	adds	r7, #1
 800d8c8:	601f      	str	r7, [r3, #0]
 800d8ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 831d 	beq.w	800df0c <_dtoa_r+0xb34>
 800d8d2:	601e      	str	r6, [r3, #0]
 800d8d4:	e31a      	b.n	800df0c <_dtoa_r+0xb34>
 800d8d6:	07e2      	lsls	r2, r4, #31
 800d8d8:	d505      	bpl.n	800d8e6 <_dtoa_r+0x50e>
 800d8da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8de:	f7f2 fe8b 	bl	80005f8 <__aeabi_dmul>
 800d8e2:	3601      	adds	r6, #1
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	1064      	asrs	r4, r4, #1
 800d8e8:	3508      	adds	r5, #8
 800d8ea:	e73f      	b.n	800d76c <_dtoa_r+0x394>
 800d8ec:	2602      	movs	r6, #2
 800d8ee:	e742      	b.n	800d776 <_dtoa_r+0x39e>
 800d8f0:	9c07      	ldr	r4, [sp, #28]
 800d8f2:	9704      	str	r7, [sp, #16]
 800d8f4:	e761      	b.n	800d7ba <_dtoa_r+0x3e2>
 800d8f6:	4b27      	ldr	r3, [pc, #156]	@ (800d994 <_dtoa_r+0x5bc>)
 800d8f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d902:	4454      	add	r4, sl
 800d904:	2900      	cmp	r1, #0
 800d906:	d053      	beq.n	800d9b0 <_dtoa_r+0x5d8>
 800d908:	4928      	ldr	r1, [pc, #160]	@ (800d9ac <_dtoa_r+0x5d4>)
 800d90a:	2000      	movs	r0, #0
 800d90c:	f7f2 ff9e 	bl	800084c <__aeabi_ddiv>
 800d910:	4633      	mov	r3, r6
 800d912:	462a      	mov	r2, r5
 800d914:	f7f2 fcb8 	bl	8000288 <__aeabi_dsub>
 800d918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d91c:	4656      	mov	r6, sl
 800d91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d922:	f7f3 f919 	bl	8000b58 <__aeabi_d2iz>
 800d926:	4605      	mov	r5, r0
 800d928:	f7f2 fdfc 	bl	8000524 <__aeabi_i2d>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d934:	f7f2 fca8 	bl	8000288 <__aeabi_dsub>
 800d938:	3530      	adds	r5, #48	@ 0x30
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d942:	f806 5b01 	strb.w	r5, [r6], #1
 800d946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d94a:	f7f3 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d171      	bne.n	800da36 <_dtoa_r+0x65e>
 800d952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d956:	4911      	ldr	r1, [pc, #68]	@ (800d99c <_dtoa_r+0x5c4>)
 800d958:	2000      	movs	r0, #0
 800d95a:	f7f2 fc95 	bl	8000288 <__aeabi_dsub>
 800d95e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d962:	f7f3 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800d966:	2800      	cmp	r0, #0
 800d968:	f040 8095 	bne.w	800da96 <_dtoa_r+0x6be>
 800d96c:	42a6      	cmp	r6, r4
 800d96e:	f43f af50 	beq.w	800d812 <_dtoa_r+0x43a>
 800d972:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d976:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a0 <_dtoa_r+0x5c8>)
 800d978:	2200      	movs	r2, #0
 800d97a:	f7f2 fe3d 	bl	80005f8 <__aeabi_dmul>
 800d97e:	4b08      	ldr	r3, [pc, #32]	@ (800d9a0 <_dtoa_r+0x5c8>)
 800d980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d984:	2200      	movs	r2, #0
 800d986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98a:	f7f2 fe35 	bl	80005f8 <__aeabi_dmul>
 800d98e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d992:	e7c4      	b.n	800d91e <_dtoa_r+0x546>
 800d994:	080114f0 	.word	0x080114f0
 800d998:	080114c8 	.word	0x080114c8
 800d99c:	3ff00000 	.word	0x3ff00000
 800d9a0:	40240000 	.word	0x40240000
 800d9a4:	401c0000 	.word	0x401c0000
 800d9a8:	40140000 	.word	0x40140000
 800d9ac:	3fe00000 	.word	0x3fe00000
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f7f2 fe20 	bl	80005f8 <__aeabi_dmul>
 800d9b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800d9be:	4656      	mov	r6, sl
 800d9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c4:	f7f3 f8c8 	bl	8000b58 <__aeabi_d2iz>
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	f7f2 fdab 	bl	8000524 <__aeabi_i2d>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d6:	f7f2 fc57 	bl	8000288 <__aeabi_dsub>
 800d9da:	3530      	adds	r5, #48	@ 0x30
 800d9dc:	f806 5b01 	strb.w	r5, [r6], #1
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	42a6      	cmp	r6, r4
 800d9e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ea:	f04f 0200 	mov.w	r2, #0
 800d9ee:	d124      	bne.n	800da3a <_dtoa_r+0x662>
 800d9f0:	4bac      	ldr	r3, [pc, #688]	@ (800dca4 <_dtoa_r+0x8cc>)
 800d9f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9f6:	f7f2 fc49 	bl	800028c <__adddf3>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da02:	f7f3 f889 	bl	8000b18 <__aeabi_dcmpgt>
 800da06:	2800      	cmp	r0, #0
 800da08:	d145      	bne.n	800da96 <_dtoa_r+0x6be>
 800da0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da0e:	49a5      	ldr	r1, [pc, #660]	@ (800dca4 <_dtoa_r+0x8cc>)
 800da10:	2000      	movs	r0, #0
 800da12:	f7f2 fc39 	bl	8000288 <__aeabi_dsub>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1e:	f7f3 f85d 	bl	8000adc <__aeabi_dcmplt>
 800da22:	2800      	cmp	r0, #0
 800da24:	f43f aef5 	beq.w	800d812 <_dtoa_r+0x43a>
 800da28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da2a:	1e73      	subs	r3, r6, #1
 800da2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800da2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da32:	2b30      	cmp	r3, #48	@ 0x30
 800da34:	d0f8      	beq.n	800da28 <_dtoa_r+0x650>
 800da36:	9f04      	ldr	r7, [sp, #16]
 800da38:	e73e      	b.n	800d8b8 <_dtoa_r+0x4e0>
 800da3a:	4b9b      	ldr	r3, [pc, #620]	@ (800dca8 <_dtoa_r+0x8d0>)
 800da3c:	f7f2 fddc 	bl	80005f8 <__aeabi_dmul>
 800da40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da44:	e7bc      	b.n	800d9c0 <_dtoa_r+0x5e8>
 800da46:	d10c      	bne.n	800da62 <_dtoa_r+0x68a>
 800da48:	4b98      	ldr	r3, [pc, #608]	@ (800dcac <_dtoa_r+0x8d4>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da50:	f7f2 fdd2 	bl	80005f8 <__aeabi_dmul>
 800da54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da58:	f7f3 f854 	bl	8000b04 <__aeabi_dcmpge>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f000 8157 	beq.w	800dd10 <_dtoa_r+0x938>
 800da62:	2400      	movs	r4, #0
 800da64:	4625      	mov	r5, r4
 800da66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da68:	43db      	mvns	r3, r3
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	4656      	mov	r6, sl
 800da6e:	2700      	movs	r7, #0
 800da70:	4621      	mov	r1, r4
 800da72:	4658      	mov	r0, fp
 800da74:	f000 fbb4 	bl	800e1e0 <_Bfree>
 800da78:	2d00      	cmp	r5, #0
 800da7a:	d0dc      	beq.n	800da36 <_dtoa_r+0x65e>
 800da7c:	b12f      	cbz	r7, 800da8a <_dtoa_r+0x6b2>
 800da7e:	42af      	cmp	r7, r5
 800da80:	d003      	beq.n	800da8a <_dtoa_r+0x6b2>
 800da82:	4639      	mov	r1, r7
 800da84:	4658      	mov	r0, fp
 800da86:	f000 fbab 	bl	800e1e0 <_Bfree>
 800da8a:	4629      	mov	r1, r5
 800da8c:	4658      	mov	r0, fp
 800da8e:	f000 fba7 	bl	800e1e0 <_Bfree>
 800da92:	e7d0      	b.n	800da36 <_dtoa_r+0x65e>
 800da94:	9704      	str	r7, [sp, #16]
 800da96:	4633      	mov	r3, r6
 800da98:	461e      	mov	r6, r3
 800da9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da9e:	2a39      	cmp	r2, #57	@ 0x39
 800daa0:	d107      	bne.n	800dab2 <_dtoa_r+0x6da>
 800daa2:	459a      	cmp	sl, r3
 800daa4:	d1f8      	bne.n	800da98 <_dtoa_r+0x6c0>
 800daa6:	9a04      	ldr	r2, [sp, #16]
 800daa8:	3201      	adds	r2, #1
 800daaa:	9204      	str	r2, [sp, #16]
 800daac:	2230      	movs	r2, #48	@ 0x30
 800daae:	f88a 2000 	strb.w	r2, [sl]
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	3201      	adds	r2, #1
 800dab6:	701a      	strb	r2, [r3, #0]
 800dab8:	e7bd      	b.n	800da36 <_dtoa_r+0x65e>
 800daba:	4b7b      	ldr	r3, [pc, #492]	@ (800dca8 <_dtoa_r+0x8d0>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	f7f2 fd9b 	bl	80005f8 <__aeabi_dmul>
 800dac2:	2200      	movs	r2, #0
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	460d      	mov	r5, r1
 800daca:	f7f2 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800dace:	2800      	cmp	r0, #0
 800dad0:	f43f aebb 	beq.w	800d84a <_dtoa_r+0x472>
 800dad4:	e6f0      	b.n	800d8b8 <_dtoa_r+0x4e0>
 800dad6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dad8:	2a00      	cmp	r2, #0
 800dada:	f000 80db 	beq.w	800dc94 <_dtoa_r+0x8bc>
 800dade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dae0:	2a01      	cmp	r2, #1
 800dae2:	f300 80bf 	bgt.w	800dc64 <_dtoa_r+0x88c>
 800dae6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dae8:	2a00      	cmp	r2, #0
 800daea:	f000 80b7 	beq.w	800dc5c <_dtoa_r+0x884>
 800daee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800daf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800daf4:	4646      	mov	r6, r8
 800daf6:	9a08      	ldr	r2, [sp, #32]
 800daf8:	2101      	movs	r1, #1
 800dafa:	441a      	add	r2, r3
 800dafc:	4658      	mov	r0, fp
 800dafe:	4498      	add	r8, r3
 800db00:	9208      	str	r2, [sp, #32]
 800db02:	f000 fc6b 	bl	800e3dc <__i2b>
 800db06:	4605      	mov	r5, r0
 800db08:	b15e      	cbz	r6, 800db22 <_dtoa_r+0x74a>
 800db0a:	9b08      	ldr	r3, [sp, #32]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	dd08      	ble.n	800db22 <_dtoa_r+0x74a>
 800db10:	42b3      	cmp	r3, r6
 800db12:	9a08      	ldr	r2, [sp, #32]
 800db14:	bfa8      	it	ge
 800db16:	4633      	movge	r3, r6
 800db18:	eba8 0803 	sub.w	r8, r8, r3
 800db1c:	1af6      	subs	r6, r6, r3
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	9308      	str	r3, [sp, #32]
 800db22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db24:	b1f3      	cbz	r3, 800db64 <_dtoa_r+0x78c>
 800db26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 80b7 	beq.w	800dc9c <_dtoa_r+0x8c4>
 800db2e:	b18c      	cbz	r4, 800db54 <_dtoa_r+0x77c>
 800db30:	4629      	mov	r1, r5
 800db32:	4622      	mov	r2, r4
 800db34:	4658      	mov	r0, fp
 800db36:	f000 fd11 	bl	800e55c <__pow5mult>
 800db3a:	464a      	mov	r2, r9
 800db3c:	4601      	mov	r1, r0
 800db3e:	4605      	mov	r5, r0
 800db40:	4658      	mov	r0, fp
 800db42:	f000 fc61 	bl	800e408 <__multiply>
 800db46:	4649      	mov	r1, r9
 800db48:	9004      	str	r0, [sp, #16]
 800db4a:	4658      	mov	r0, fp
 800db4c:	f000 fb48 	bl	800e1e0 <_Bfree>
 800db50:	9b04      	ldr	r3, [sp, #16]
 800db52:	4699      	mov	r9, r3
 800db54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db56:	1b1a      	subs	r2, r3, r4
 800db58:	d004      	beq.n	800db64 <_dtoa_r+0x78c>
 800db5a:	4649      	mov	r1, r9
 800db5c:	4658      	mov	r0, fp
 800db5e:	f000 fcfd 	bl	800e55c <__pow5mult>
 800db62:	4681      	mov	r9, r0
 800db64:	2101      	movs	r1, #1
 800db66:	4658      	mov	r0, fp
 800db68:	f000 fc38 	bl	800e3dc <__i2b>
 800db6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db6e:	4604      	mov	r4, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 81cf 	beq.w	800df14 <_dtoa_r+0xb3c>
 800db76:	461a      	mov	r2, r3
 800db78:	4601      	mov	r1, r0
 800db7a:	4658      	mov	r0, fp
 800db7c:	f000 fcee 	bl	800e55c <__pow5mult>
 800db80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db82:	2b01      	cmp	r3, #1
 800db84:	4604      	mov	r4, r0
 800db86:	f300 8095 	bgt.w	800dcb4 <_dtoa_r+0x8dc>
 800db8a:	9b02      	ldr	r3, [sp, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 8087 	bne.w	800dca0 <_dtoa_r+0x8c8>
 800db92:	9b03      	ldr	r3, [sp, #12]
 800db94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f040 8089 	bne.w	800dcb0 <_dtoa_r+0x8d8>
 800db9e:	9b03      	ldr	r3, [sp, #12]
 800dba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dba4:	0d1b      	lsrs	r3, r3, #20
 800dba6:	051b      	lsls	r3, r3, #20
 800dba8:	b12b      	cbz	r3, 800dbb6 <_dtoa_r+0x7de>
 800dbaa:	9b08      	ldr	r3, [sp, #32]
 800dbac:	3301      	adds	r3, #1
 800dbae:	9308      	str	r3, [sp, #32]
 800dbb0:	f108 0801 	add.w	r8, r8, #1
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 81b0 	beq.w	800df20 <_dtoa_r+0xb48>
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbc6:	6918      	ldr	r0, [r3, #16]
 800dbc8:	f000 fbbc 	bl	800e344 <__hi0bits>
 800dbcc:	f1c0 0020 	rsb	r0, r0, #32
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	4418      	add	r0, r3
 800dbd4:	f010 001f 	ands.w	r0, r0, #31
 800dbd8:	d077      	beq.n	800dcca <_dtoa_r+0x8f2>
 800dbda:	f1c0 0320 	rsb	r3, r0, #32
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	dd6b      	ble.n	800dcba <_dtoa_r+0x8e2>
 800dbe2:	9b08      	ldr	r3, [sp, #32]
 800dbe4:	f1c0 001c 	rsb	r0, r0, #28
 800dbe8:	4403      	add	r3, r0
 800dbea:	4480      	add	r8, r0
 800dbec:	4406      	add	r6, r0
 800dbee:	9308      	str	r3, [sp, #32]
 800dbf0:	f1b8 0f00 	cmp.w	r8, #0
 800dbf4:	dd05      	ble.n	800dc02 <_dtoa_r+0x82a>
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	4642      	mov	r2, r8
 800dbfa:	4658      	mov	r0, fp
 800dbfc:	f000 fd08 	bl	800e610 <__lshift>
 800dc00:	4681      	mov	r9, r0
 800dc02:	9b08      	ldr	r3, [sp, #32]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dd05      	ble.n	800dc14 <_dtoa_r+0x83c>
 800dc08:	4621      	mov	r1, r4
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	4658      	mov	r0, fp
 800dc0e:	f000 fcff 	bl	800e610 <__lshift>
 800dc12:	4604      	mov	r4, r0
 800dc14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d059      	beq.n	800dcce <_dtoa_r+0x8f6>
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4648      	mov	r0, r9
 800dc1e:	f000 fd63 	bl	800e6e8 <__mcmp>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	da53      	bge.n	800dcce <_dtoa_r+0x8f6>
 800dc26:	1e7b      	subs	r3, r7, #1
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	220a      	movs	r2, #10
 800dc30:	4658      	mov	r0, fp
 800dc32:	f000 faf7 	bl	800e224 <__multadd>
 800dc36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc38:	4681      	mov	r9, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f000 8172 	beq.w	800df24 <_dtoa_r+0xb4c>
 800dc40:	2300      	movs	r3, #0
 800dc42:	4629      	mov	r1, r5
 800dc44:	220a      	movs	r2, #10
 800dc46:	4658      	mov	r0, fp
 800dc48:	f000 faec 	bl	800e224 <__multadd>
 800dc4c:	9b00      	ldr	r3, [sp, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	4605      	mov	r5, r0
 800dc52:	dc67      	bgt.n	800dd24 <_dtoa_r+0x94c>
 800dc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	dc41      	bgt.n	800dcde <_dtoa_r+0x906>
 800dc5a:	e063      	b.n	800dd24 <_dtoa_r+0x94c>
 800dc5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc62:	e746      	b.n	800daf2 <_dtoa_r+0x71a>
 800dc64:	9b07      	ldr	r3, [sp, #28]
 800dc66:	1e5c      	subs	r4, r3, #1
 800dc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	bfbf      	itttt	lt
 800dc6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dc74:	1ae3      	sublt	r3, r4, r3
 800dc76:	bfb4      	ite	lt
 800dc78:	18d2      	addlt	r2, r2, r3
 800dc7a:	1b1c      	subge	r4, r3, r4
 800dc7c:	9b07      	ldr	r3, [sp, #28]
 800dc7e:	bfbc      	itt	lt
 800dc80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc82:	2400      	movlt	r4, #0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	bfb5      	itete	lt
 800dc88:	eba8 0603 	sublt.w	r6, r8, r3
 800dc8c:	9b07      	ldrge	r3, [sp, #28]
 800dc8e:	2300      	movlt	r3, #0
 800dc90:	4646      	movge	r6, r8
 800dc92:	e730      	b.n	800daf6 <_dtoa_r+0x71e>
 800dc94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dc98:	4646      	mov	r6, r8
 800dc9a:	e735      	b.n	800db08 <_dtoa_r+0x730>
 800dc9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc9e:	e75c      	b.n	800db5a <_dtoa_r+0x782>
 800dca0:	2300      	movs	r3, #0
 800dca2:	e788      	b.n	800dbb6 <_dtoa_r+0x7de>
 800dca4:	3fe00000 	.word	0x3fe00000
 800dca8:	40240000 	.word	0x40240000
 800dcac:	40140000 	.word	0x40140000
 800dcb0:	9b02      	ldr	r3, [sp, #8]
 800dcb2:	e780      	b.n	800dbb6 <_dtoa_r+0x7de>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcb8:	e782      	b.n	800dbc0 <_dtoa_r+0x7e8>
 800dcba:	d099      	beq.n	800dbf0 <_dtoa_r+0x818>
 800dcbc:	9a08      	ldr	r2, [sp, #32]
 800dcbe:	331c      	adds	r3, #28
 800dcc0:	441a      	add	r2, r3
 800dcc2:	4498      	add	r8, r3
 800dcc4:	441e      	add	r6, r3
 800dcc6:	9208      	str	r2, [sp, #32]
 800dcc8:	e792      	b.n	800dbf0 <_dtoa_r+0x818>
 800dcca:	4603      	mov	r3, r0
 800dccc:	e7f6      	b.n	800dcbc <_dtoa_r+0x8e4>
 800dcce:	9b07      	ldr	r3, [sp, #28]
 800dcd0:	9704      	str	r7, [sp, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dc20      	bgt.n	800dd18 <_dtoa_r+0x940>
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	dd1e      	ble.n	800dd1c <_dtoa_r+0x944>
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f47f aec0 	bne.w	800da66 <_dtoa_r+0x68e>
 800dce6:	4621      	mov	r1, r4
 800dce8:	2205      	movs	r2, #5
 800dcea:	4658      	mov	r0, fp
 800dcec:	f000 fa9a 	bl	800e224 <__multadd>
 800dcf0:	4601      	mov	r1, r0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4648      	mov	r0, r9
 800dcf6:	f000 fcf7 	bl	800e6e8 <__mcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	f77f aeb3 	ble.w	800da66 <_dtoa_r+0x68e>
 800dd00:	4656      	mov	r6, sl
 800dd02:	2331      	movs	r3, #49	@ 0x31
 800dd04:	f806 3b01 	strb.w	r3, [r6], #1
 800dd08:	9b04      	ldr	r3, [sp, #16]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	e6ae      	b.n	800da6e <_dtoa_r+0x696>
 800dd10:	9c07      	ldr	r4, [sp, #28]
 800dd12:	9704      	str	r7, [sp, #16]
 800dd14:	4625      	mov	r5, r4
 800dd16:	e7f3      	b.n	800dd00 <_dtoa_r+0x928>
 800dd18:	9b07      	ldr	r3, [sp, #28]
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 8104 	beq.w	800df2c <_dtoa_r+0xb54>
 800dd24:	2e00      	cmp	r6, #0
 800dd26:	dd05      	ble.n	800dd34 <_dtoa_r+0x95c>
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	4658      	mov	r0, fp
 800dd2e:	f000 fc6f 	bl	800e610 <__lshift>
 800dd32:	4605      	mov	r5, r0
 800dd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d05a      	beq.n	800ddf0 <_dtoa_r+0xa18>
 800dd3a:	6869      	ldr	r1, [r5, #4]
 800dd3c:	4658      	mov	r0, fp
 800dd3e:	f000 fa0f 	bl	800e160 <_Balloc>
 800dd42:	4606      	mov	r6, r0
 800dd44:	b928      	cbnz	r0, 800dd52 <_dtoa_r+0x97a>
 800dd46:	4b84      	ldr	r3, [pc, #528]	@ (800df58 <_dtoa_r+0xb80>)
 800dd48:	4602      	mov	r2, r0
 800dd4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd4e:	f7ff bb5a 	b.w	800d406 <_dtoa_r+0x2e>
 800dd52:	692a      	ldr	r2, [r5, #16]
 800dd54:	3202      	adds	r2, #2
 800dd56:	0092      	lsls	r2, r2, #2
 800dd58:	f105 010c 	add.w	r1, r5, #12
 800dd5c:	300c      	adds	r0, #12
 800dd5e:	f002 fb03 	bl	8010368 <memcpy>
 800dd62:	2201      	movs	r2, #1
 800dd64:	4631      	mov	r1, r6
 800dd66:	4658      	mov	r0, fp
 800dd68:	f000 fc52 	bl	800e610 <__lshift>
 800dd6c:	f10a 0301 	add.w	r3, sl, #1
 800dd70:	9307      	str	r3, [sp, #28]
 800dd72:	9b00      	ldr	r3, [sp, #0]
 800dd74:	4453      	add	r3, sl
 800dd76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd78:	9b02      	ldr	r3, [sp, #8]
 800dd7a:	f003 0301 	and.w	r3, r3, #1
 800dd7e:	462f      	mov	r7, r5
 800dd80:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd82:	4605      	mov	r5, r0
 800dd84:	9b07      	ldr	r3, [sp, #28]
 800dd86:	4621      	mov	r1, r4
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	4648      	mov	r0, r9
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	f7ff fa9b 	bl	800d2c8 <quorem>
 800dd92:	4639      	mov	r1, r7
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd9a:	4648      	mov	r0, r9
 800dd9c:	f000 fca4 	bl	800e6e8 <__mcmp>
 800dda0:	462a      	mov	r2, r5
 800dda2:	9008      	str	r0, [sp, #32]
 800dda4:	4621      	mov	r1, r4
 800dda6:	4658      	mov	r0, fp
 800dda8:	f000 fcba 	bl	800e720 <__mdiff>
 800ddac:	68c2      	ldr	r2, [r0, #12]
 800ddae:	4606      	mov	r6, r0
 800ddb0:	bb02      	cbnz	r2, 800ddf4 <_dtoa_r+0xa1c>
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	4648      	mov	r0, r9
 800ddb6:	f000 fc97 	bl	800e6e8 <__mcmp>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddc2:	f000 fa0d 	bl	800e1e0 <_Bfree>
 800ddc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddca:	9e07      	ldr	r6, [sp, #28]
 800ddcc:	ea43 0102 	orr.w	r1, r3, r2
 800ddd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd2:	4319      	orrs	r1, r3
 800ddd4:	d110      	bne.n	800ddf8 <_dtoa_r+0xa20>
 800ddd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddda:	d029      	beq.n	800de30 <_dtoa_r+0xa58>
 800dddc:	9b08      	ldr	r3, [sp, #32]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dd02      	ble.n	800dde8 <_dtoa_r+0xa10>
 800dde2:	9b02      	ldr	r3, [sp, #8]
 800dde4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dde8:	9b00      	ldr	r3, [sp, #0]
 800ddea:	f883 8000 	strb.w	r8, [r3]
 800ddee:	e63f      	b.n	800da70 <_dtoa_r+0x698>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	e7bb      	b.n	800dd6c <_dtoa_r+0x994>
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	e7e1      	b.n	800ddbc <_dtoa_r+0x9e4>
 800ddf8:	9b08      	ldr	r3, [sp, #32]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	db04      	blt.n	800de08 <_dtoa_r+0xa30>
 800ddfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de00:	430b      	orrs	r3, r1
 800de02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de04:	430b      	orrs	r3, r1
 800de06:	d120      	bne.n	800de4a <_dtoa_r+0xa72>
 800de08:	2a00      	cmp	r2, #0
 800de0a:	dded      	ble.n	800dde8 <_dtoa_r+0xa10>
 800de0c:	4649      	mov	r1, r9
 800de0e:	2201      	movs	r2, #1
 800de10:	4658      	mov	r0, fp
 800de12:	f000 fbfd 	bl	800e610 <__lshift>
 800de16:	4621      	mov	r1, r4
 800de18:	4681      	mov	r9, r0
 800de1a:	f000 fc65 	bl	800e6e8 <__mcmp>
 800de1e:	2800      	cmp	r0, #0
 800de20:	dc03      	bgt.n	800de2a <_dtoa_r+0xa52>
 800de22:	d1e1      	bne.n	800dde8 <_dtoa_r+0xa10>
 800de24:	f018 0f01 	tst.w	r8, #1
 800de28:	d0de      	beq.n	800dde8 <_dtoa_r+0xa10>
 800de2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de2e:	d1d8      	bne.n	800dde2 <_dtoa_r+0xa0a>
 800de30:	9a00      	ldr	r2, [sp, #0]
 800de32:	2339      	movs	r3, #57	@ 0x39
 800de34:	7013      	strb	r3, [r2, #0]
 800de36:	4633      	mov	r3, r6
 800de38:	461e      	mov	r6, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de40:	2a39      	cmp	r2, #57	@ 0x39
 800de42:	d052      	beq.n	800deea <_dtoa_r+0xb12>
 800de44:	3201      	adds	r2, #1
 800de46:	701a      	strb	r2, [r3, #0]
 800de48:	e612      	b.n	800da70 <_dtoa_r+0x698>
 800de4a:	2a00      	cmp	r2, #0
 800de4c:	dd07      	ble.n	800de5e <_dtoa_r+0xa86>
 800de4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de52:	d0ed      	beq.n	800de30 <_dtoa_r+0xa58>
 800de54:	9a00      	ldr	r2, [sp, #0]
 800de56:	f108 0301 	add.w	r3, r8, #1
 800de5a:	7013      	strb	r3, [r2, #0]
 800de5c:	e608      	b.n	800da70 <_dtoa_r+0x698>
 800de5e:	9b07      	ldr	r3, [sp, #28]
 800de60:	9a07      	ldr	r2, [sp, #28]
 800de62:	f803 8c01 	strb.w	r8, [r3, #-1]
 800de66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de68:	4293      	cmp	r3, r2
 800de6a:	d028      	beq.n	800debe <_dtoa_r+0xae6>
 800de6c:	4649      	mov	r1, r9
 800de6e:	2300      	movs	r3, #0
 800de70:	220a      	movs	r2, #10
 800de72:	4658      	mov	r0, fp
 800de74:	f000 f9d6 	bl	800e224 <__multadd>
 800de78:	42af      	cmp	r7, r5
 800de7a:	4681      	mov	r9, r0
 800de7c:	f04f 0300 	mov.w	r3, #0
 800de80:	f04f 020a 	mov.w	r2, #10
 800de84:	4639      	mov	r1, r7
 800de86:	4658      	mov	r0, fp
 800de88:	d107      	bne.n	800de9a <_dtoa_r+0xac2>
 800de8a:	f000 f9cb 	bl	800e224 <__multadd>
 800de8e:	4607      	mov	r7, r0
 800de90:	4605      	mov	r5, r0
 800de92:	9b07      	ldr	r3, [sp, #28]
 800de94:	3301      	adds	r3, #1
 800de96:	9307      	str	r3, [sp, #28]
 800de98:	e774      	b.n	800dd84 <_dtoa_r+0x9ac>
 800de9a:	f000 f9c3 	bl	800e224 <__multadd>
 800de9e:	4629      	mov	r1, r5
 800dea0:	4607      	mov	r7, r0
 800dea2:	2300      	movs	r3, #0
 800dea4:	220a      	movs	r2, #10
 800dea6:	4658      	mov	r0, fp
 800dea8:	f000 f9bc 	bl	800e224 <__multadd>
 800deac:	4605      	mov	r5, r0
 800deae:	e7f0      	b.n	800de92 <_dtoa_r+0xaba>
 800deb0:	9b00      	ldr	r3, [sp, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	bfcc      	ite	gt
 800deb6:	461e      	movgt	r6, r3
 800deb8:	2601      	movle	r6, #1
 800deba:	4456      	add	r6, sl
 800debc:	2700      	movs	r7, #0
 800debe:	4649      	mov	r1, r9
 800dec0:	2201      	movs	r2, #1
 800dec2:	4658      	mov	r0, fp
 800dec4:	f000 fba4 	bl	800e610 <__lshift>
 800dec8:	4621      	mov	r1, r4
 800deca:	4681      	mov	r9, r0
 800decc:	f000 fc0c 	bl	800e6e8 <__mcmp>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	dcb0      	bgt.n	800de36 <_dtoa_r+0xa5e>
 800ded4:	d102      	bne.n	800dedc <_dtoa_r+0xb04>
 800ded6:	f018 0f01 	tst.w	r8, #1
 800deda:	d1ac      	bne.n	800de36 <_dtoa_r+0xa5e>
 800dedc:	4633      	mov	r3, r6
 800dede:	461e      	mov	r6, r3
 800dee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dee4:	2a30      	cmp	r2, #48	@ 0x30
 800dee6:	d0fa      	beq.n	800dede <_dtoa_r+0xb06>
 800dee8:	e5c2      	b.n	800da70 <_dtoa_r+0x698>
 800deea:	459a      	cmp	sl, r3
 800deec:	d1a4      	bne.n	800de38 <_dtoa_r+0xa60>
 800deee:	9b04      	ldr	r3, [sp, #16]
 800def0:	3301      	adds	r3, #1
 800def2:	9304      	str	r3, [sp, #16]
 800def4:	2331      	movs	r3, #49	@ 0x31
 800def6:	f88a 3000 	strb.w	r3, [sl]
 800defa:	e5b9      	b.n	800da70 <_dtoa_r+0x698>
 800defc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800defe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800df5c <_dtoa_r+0xb84>
 800df02:	b11b      	cbz	r3, 800df0c <_dtoa_r+0xb34>
 800df04:	f10a 0308 	add.w	r3, sl, #8
 800df08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df0a:	6013      	str	r3, [r2, #0]
 800df0c:	4650      	mov	r0, sl
 800df0e:	b019      	add	sp, #100	@ 0x64
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df16:	2b01      	cmp	r3, #1
 800df18:	f77f ae37 	ble.w	800db8a <_dtoa_r+0x7b2>
 800df1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800df20:	2001      	movs	r0, #1
 800df22:	e655      	b.n	800dbd0 <_dtoa_r+0x7f8>
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f77f aed6 	ble.w	800dcd8 <_dtoa_r+0x900>
 800df2c:	4656      	mov	r6, sl
 800df2e:	4621      	mov	r1, r4
 800df30:	4648      	mov	r0, r9
 800df32:	f7ff f9c9 	bl	800d2c8 <quorem>
 800df36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df3a:	f806 8b01 	strb.w	r8, [r6], #1
 800df3e:	9b00      	ldr	r3, [sp, #0]
 800df40:	eba6 020a 	sub.w	r2, r6, sl
 800df44:	4293      	cmp	r3, r2
 800df46:	ddb3      	ble.n	800deb0 <_dtoa_r+0xad8>
 800df48:	4649      	mov	r1, r9
 800df4a:	2300      	movs	r3, #0
 800df4c:	220a      	movs	r2, #10
 800df4e:	4658      	mov	r0, fp
 800df50:	f000 f968 	bl	800e224 <__multadd>
 800df54:	4681      	mov	r9, r0
 800df56:	e7ea      	b.n	800df2e <_dtoa_r+0xb56>
 800df58:	0801144b 	.word	0x0801144b
 800df5c:	080113cf 	.word	0x080113cf

0800df60 <_free_r>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4605      	mov	r5, r0
 800df64:	2900      	cmp	r1, #0
 800df66:	d041      	beq.n	800dfec <_free_r+0x8c>
 800df68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df6c:	1f0c      	subs	r4, r1, #4
 800df6e:	2b00      	cmp	r3, #0
 800df70:	bfb8      	it	lt
 800df72:	18e4      	addlt	r4, r4, r3
 800df74:	f000 f8e8 	bl	800e148 <__malloc_lock>
 800df78:	4a1d      	ldr	r2, [pc, #116]	@ (800dff0 <_free_r+0x90>)
 800df7a:	6813      	ldr	r3, [r2, #0]
 800df7c:	b933      	cbnz	r3, 800df8c <_free_r+0x2c>
 800df7e:	6063      	str	r3, [r4, #4]
 800df80:	6014      	str	r4, [r2, #0]
 800df82:	4628      	mov	r0, r5
 800df84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df88:	f000 b8e4 	b.w	800e154 <__malloc_unlock>
 800df8c:	42a3      	cmp	r3, r4
 800df8e:	d908      	bls.n	800dfa2 <_free_r+0x42>
 800df90:	6820      	ldr	r0, [r4, #0]
 800df92:	1821      	adds	r1, r4, r0
 800df94:	428b      	cmp	r3, r1
 800df96:	bf01      	itttt	eq
 800df98:	6819      	ldreq	r1, [r3, #0]
 800df9a:	685b      	ldreq	r3, [r3, #4]
 800df9c:	1809      	addeq	r1, r1, r0
 800df9e:	6021      	streq	r1, [r4, #0]
 800dfa0:	e7ed      	b.n	800df7e <_free_r+0x1e>
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	b10b      	cbz	r3, 800dfac <_free_r+0x4c>
 800dfa8:	42a3      	cmp	r3, r4
 800dfaa:	d9fa      	bls.n	800dfa2 <_free_r+0x42>
 800dfac:	6811      	ldr	r1, [r2, #0]
 800dfae:	1850      	adds	r0, r2, r1
 800dfb0:	42a0      	cmp	r0, r4
 800dfb2:	d10b      	bne.n	800dfcc <_free_r+0x6c>
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	4401      	add	r1, r0
 800dfb8:	1850      	adds	r0, r2, r1
 800dfba:	4283      	cmp	r3, r0
 800dfbc:	6011      	str	r1, [r2, #0]
 800dfbe:	d1e0      	bne.n	800df82 <_free_r+0x22>
 800dfc0:	6818      	ldr	r0, [r3, #0]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	6053      	str	r3, [r2, #4]
 800dfc6:	4408      	add	r0, r1
 800dfc8:	6010      	str	r0, [r2, #0]
 800dfca:	e7da      	b.n	800df82 <_free_r+0x22>
 800dfcc:	d902      	bls.n	800dfd4 <_free_r+0x74>
 800dfce:	230c      	movs	r3, #12
 800dfd0:	602b      	str	r3, [r5, #0]
 800dfd2:	e7d6      	b.n	800df82 <_free_r+0x22>
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	1821      	adds	r1, r4, r0
 800dfd8:	428b      	cmp	r3, r1
 800dfda:	bf04      	itt	eq
 800dfdc:	6819      	ldreq	r1, [r3, #0]
 800dfde:	685b      	ldreq	r3, [r3, #4]
 800dfe0:	6063      	str	r3, [r4, #4]
 800dfe2:	bf04      	itt	eq
 800dfe4:	1809      	addeq	r1, r1, r0
 800dfe6:	6021      	streq	r1, [r4, #0]
 800dfe8:	6054      	str	r4, [r2, #4]
 800dfea:	e7ca      	b.n	800df82 <_free_r+0x22>
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	bf00      	nop
 800dff0:	200023b0 	.word	0x200023b0

0800dff4 <malloc>:
 800dff4:	4b02      	ldr	r3, [pc, #8]	@ (800e000 <malloc+0xc>)
 800dff6:	4601      	mov	r1, r0
 800dff8:	6818      	ldr	r0, [r3, #0]
 800dffa:	f000 b825 	b.w	800e048 <_malloc_r>
 800dffe:	bf00      	nop
 800e000:	200001b4 	.word	0x200001b4

0800e004 <sbrk_aligned>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	4e0f      	ldr	r6, [pc, #60]	@ (800e044 <sbrk_aligned+0x40>)
 800e008:	460c      	mov	r4, r1
 800e00a:	6831      	ldr	r1, [r6, #0]
 800e00c:	4605      	mov	r5, r0
 800e00e:	b911      	cbnz	r1, 800e016 <sbrk_aligned+0x12>
 800e010:	f002 f99a 	bl	8010348 <_sbrk_r>
 800e014:	6030      	str	r0, [r6, #0]
 800e016:	4621      	mov	r1, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f002 f995 	bl	8010348 <_sbrk_r>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d103      	bne.n	800e02a <sbrk_aligned+0x26>
 800e022:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e026:	4620      	mov	r0, r4
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	1cc4      	adds	r4, r0, #3
 800e02c:	f024 0403 	bic.w	r4, r4, #3
 800e030:	42a0      	cmp	r0, r4
 800e032:	d0f8      	beq.n	800e026 <sbrk_aligned+0x22>
 800e034:	1a21      	subs	r1, r4, r0
 800e036:	4628      	mov	r0, r5
 800e038:	f002 f986 	bl	8010348 <_sbrk_r>
 800e03c:	3001      	adds	r0, #1
 800e03e:	d1f2      	bne.n	800e026 <sbrk_aligned+0x22>
 800e040:	e7ef      	b.n	800e022 <sbrk_aligned+0x1e>
 800e042:	bf00      	nop
 800e044:	200023ac 	.word	0x200023ac

0800e048 <_malloc_r>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	1ccd      	adds	r5, r1, #3
 800e04e:	f025 0503 	bic.w	r5, r5, #3
 800e052:	3508      	adds	r5, #8
 800e054:	2d0c      	cmp	r5, #12
 800e056:	bf38      	it	cc
 800e058:	250c      	movcc	r5, #12
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	4606      	mov	r6, r0
 800e05e:	db01      	blt.n	800e064 <_malloc_r+0x1c>
 800e060:	42a9      	cmp	r1, r5
 800e062:	d904      	bls.n	800e06e <_malloc_r+0x26>
 800e064:	230c      	movs	r3, #12
 800e066:	6033      	str	r3, [r6, #0]
 800e068:	2000      	movs	r0, #0
 800e06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e144 <_malloc_r+0xfc>
 800e072:	f000 f869 	bl	800e148 <__malloc_lock>
 800e076:	f8d8 3000 	ldr.w	r3, [r8]
 800e07a:	461c      	mov	r4, r3
 800e07c:	bb44      	cbnz	r4, 800e0d0 <_malloc_r+0x88>
 800e07e:	4629      	mov	r1, r5
 800e080:	4630      	mov	r0, r6
 800e082:	f7ff ffbf 	bl	800e004 <sbrk_aligned>
 800e086:	1c43      	adds	r3, r0, #1
 800e088:	4604      	mov	r4, r0
 800e08a:	d158      	bne.n	800e13e <_malloc_r+0xf6>
 800e08c:	f8d8 4000 	ldr.w	r4, [r8]
 800e090:	4627      	mov	r7, r4
 800e092:	2f00      	cmp	r7, #0
 800e094:	d143      	bne.n	800e11e <_malloc_r+0xd6>
 800e096:	2c00      	cmp	r4, #0
 800e098:	d04b      	beq.n	800e132 <_malloc_r+0xea>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	4639      	mov	r1, r7
 800e09e:	4630      	mov	r0, r6
 800e0a0:	eb04 0903 	add.w	r9, r4, r3
 800e0a4:	f002 f950 	bl	8010348 <_sbrk_r>
 800e0a8:	4581      	cmp	r9, r0
 800e0aa:	d142      	bne.n	800e132 <_malloc_r+0xea>
 800e0ac:	6821      	ldr	r1, [r4, #0]
 800e0ae:	1a6d      	subs	r5, r5, r1
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7ff ffa6 	bl	800e004 <sbrk_aligned>
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d03a      	beq.n	800e132 <_malloc_r+0xea>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	442b      	add	r3, r5
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	bb62      	cbnz	r2, 800e124 <_malloc_r+0xdc>
 800e0ca:	f8c8 7000 	str.w	r7, [r8]
 800e0ce:	e00f      	b.n	800e0f0 <_malloc_r+0xa8>
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	1b52      	subs	r2, r2, r5
 800e0d4:	d420      	bmi.n	800e118 <_malloc_r+0xd0>
 800e0d6:	2a0b      	cmp	r2, #11
 800e0d8:	d917      	bls.n	800e10a <_malloc_r+0xc2>
 800e0da:	1961      	adds	r1, r4, r5
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	6025      	str	r5, [r4, #0]
 800e0e0:	bf18      	it	ne
 800e0e2:	6059      	strne	r1, [r3, #4]
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	bf08      	it	eq
 800e0e8:	f8c8 1000 	streq.w	r1, [r8]
 800e0ec:	5162      	str	r2, [r4, r5]
 800e0ee:	604b      	str	r3, [r1, #4]
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	f000 f82f 	bl	800e154 <__malloc_unlock>
 800e0f6:	f104 000b 	add.w	r0, r4, #11
 800e0fa:	1d23      	adds	r3, r4, #4
 800e0fc:	f020 0007 	bic.w	r0, r0, #7
 800e100:	1ac2      	subs	r2, r0, r3
 800e102:	bf1c      	itt	ne
 800e104:	1a1b      	subne	r3, r3, r0
 800e106:	50a3      	strne	r3, [r4, r2]
 800e108:	e7af      	b.n	800e06a <_malloc_r+0x22>
 800e10a:	6862      	ldr	r2, [r4, #4]
 800e10c:	42a3      	cmp	r3, r4
 800e10e:	bf0c      	ite	eq
 800e110:	f8c8 2000 	streq.w	r2, [r8]
 800e114:	605a      	strne	r2, [r3, #4]
 800e116:	e7eb      	b.n	800e0f0 <_malloc_r+0xa8>
 800e118:	4623      	mov	r3, r4
 800e11a:	6864      	ldr	r4, [r4, #4]
 800e11c:	e7ae      	b.n	800e07c <_malloc_r+0x34>
 800e11e:	463c      	mov	r4, r7
 800e120:	687f      	ldr	r7, [r7, #4]
 800e122:	e7b6      	b.n	800e092 <_malloc_r+0x4a>
 800e124:	461a      	mov	r2, r3
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	42a3      	cmp	r3, r4
 800e12a:	d1fb      	bne.n	800e124 <_malloc_r+0xdc>
 800e12c:	2300      	movs	r3, #0
 800e12e:	6053      	str	r3, [r2, #4]
 800e130:	e7de      	b.n	800e0f0 <_malloc_r+0xa8>
 800e132:	230c      	movs	r3, #12
 800e134:	6033      	str	r3, [r6, #0]
 800e136:	4630      	mov	r0, r6
 800e138:	f000 f80c 	bl	800e154 <__malloc_unlock>
 800e13c:	e794      	b.n	800e068 <_malloc_r+0x20>
 800e13e:	6005      	str	r5, [r0, #0]
 800e140:	e7d6      	b.n	800e0f0 <_malloc_r+0xa8>
 800e142:	bf00      	nop
 800e144:	200023b0 	.word	0x200023b0

0800e148 <__malloc_lock>:
 800e148:	4801      	ldr	r0, [pc, #4]	@ (800e150 <__malloc_lock+0x8>)
 800e14a:	f7ff b8b4 	b.w	800d2b6 <__retarget_lock_acquire_recursive>
 800e14e:	bf00      	nop
 800e150:	200023a8 	.word	0x200023a8

0800e154 <__malloc_unlock>:
 800e154:	4801      	ldr	r0, [pc, #4]	@ (800e15c <__malloc_unlock+0x8>)
 800e156:	f7ff b8af 	b.w	800d2b8 <__retarget_lock_release_recursive>
 800e15a:	bf00      	nop
 800e15c:	200023a8 	.word	0x200023a8

0800e160 <_Balloc>:
 800e160:	b570      	push	{r4, r5, r6, lr}
 800e162:	69c6      	ldr	r6, [r0, #28]
 800e164:	4604      	mov	r4, r0
 800e166:	460d      	mov	r5, r1
 800e168:	b976      	cbnz	r6, 800e188 <_Balloc+0x28>
 800e16a:	2010      	movs	r0, #16
 800e16c:	f7ff ff42 	bl	800dff4 <malloc>
 800e170:	4602      	mov	r2, r0
 800e172:	61e0      	str	r0, [r4, #28]
 800e174:	b920      	cbnz	r0, 800e180 <_Balloc+0x20>
 800e176:	4b18      	ldr	r3, [pc, #96]	@ (800e1d8 <_Balloc+0x78>)
 800e178:	4818      	ldr	r0, [pc, #96]	@ (800e1dc <_Balloc+0x7c>)
 800e17a:	216b      	movs	r1, #107	@ 0x6b
 800e17c:	f002 f90c 	bl	8010398 <__assert_func>
 800e180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e184:	6006      	str	r6, [r0, #0]
 800e186:	60c6      	str	r6, [r0, #12]
 800e188:	69e6      	ldr	r6, [r4, #28]
 800e18a:	68f3      	ldr	r3, [r6, #12]
 800e18c:	b183      	cbz	r3, 800e1b0 <_Balloc+0x50>
 800e18e:	69e3      	ldr	r3, [r4, #28]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e196:	b9b8      	cbnz	r0, 800e1c8 <_Balloc+0x68>
 800e198:	2101      	movs	r1, #1
 800e19a:	fa01 f605 	lsl.w	r6, r1, r5
 800e19e:	1d72      	adds	r2, r6, #5
 800e1a0:	0092      	lsls	r2, r2, #2
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f002 f916 	bl	80103d4 <_calloc_r>
 800e1a8:	b160      	cbz	r0, 800e1c4 <_Balloc+0x64>
 800e1aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1ae:	e00e      	b.n	800e1ce <_Balloc+0x6e>
 800e1b0:	2221      	movs	r2, #33	@ 0x21
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f002 f90d 	bl	80103d4 <_calloc_r>
 800e1ba:	69e3      	ldr	r3, [r4, #28]
 800e1bc:	60f0      	str	r0, [r6, #12]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1e4      	bne.n	800e18e <_Balloc+0x2e>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	bd70      	pop	{r4, r5, r6, pc}
 800e1c8:	6802      	ldr	r2, [r0, #0]
 800e1ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1d4:	e7f7      	b.n	800e1c6 <_Balloc+0x66>
 800e1d6:	bf00      	nop
 800e1d8:	080113dc 	.word	0x080113dc
 800e1dc:	0801145c 	.word	0x0801145c

0800e1e0 <_Bfree>:
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	69c6      	ldr	r6, [r0, #28]
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	b976      	cbnz	r6, 800e208 <_Bfree+0x28>
 800e1ea:	2010      	movs	r0, #16
 800e1ec:	f7ff ff02 	bl	800dff4 <malloc>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	61e8      	str	r0, [r5, #28]
 800e1f4:	b920      	cbnz	r0, 800e200 <_Bfree+0x20>
 800e1f6:	4b09      	ldr	r3, [pc, #36]	@ (800e21c <_Bfree+0x3c>)
 800e1f8:	4809      	ldr	r0, [pc, #36]	@ (800e220 <_Bfree+0x40>)
 800e1fa:	218f      	movs	r1, #143	@ 0x8f
 800e1fc:	f002 f8cc 	bl	8010398 <__assert_func>
 800e200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e204:	6006      	str	r6, [r0, #0]
 800e206:	60c6      	str	r6, [r0, #12]
 800e208:	b13c      	cbz	r4, 800e21a <_Bfree+0x3a>
 800e20a:	69eb      	ldr	r3, [r5, #28]
 800e20c:	6862      	ldr	r2, [r4, #4]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e214:	6021      	str	r1, [r4, #0]
 800e216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	080113dc 	.word	0x080113dc
 800e220:	0801145c 	.word	0x0801145c

0800e224 <__multadd>:
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	690d      	ldr	r5, [r1, #16]
 800e22a:	4607      	mov	r7, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	461e      	mov	r6, r3
 800e230:	f101 0c14 	add.w	ip, r1, #20
 800e234:	2000      	movs	r0, #0
 800e236:	f8dc 3000 	ldr.w	r3, [ip]
 800e23a:	b299      	uxth	r1, r3
 800e23c:	fb02 6101 	mla	r1, r2, r1, r6
 800e240:	0c1e      	lsrs	r6, r3, #16
 800e242:	0c0b      	lsrs	r3, r1, #16
 800e244:	fb02 3306 	mla	r3, r2, r6, r3
 800e248:	b289      	uxth	r1, r1
 800e24a:	3001      	adds	r0, #1
 800e24c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e250:	4285      	cmp	r5, r0
 800e252:	f84c 1b04 	str.w	r1, [ip], #4
 800e256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e25a:	dcec      	bgt.n	800e236 <__multadd+0x12>
 800e25c:	b30e      	cbz	r6, 800e2a2 <__multadd+0x7e>
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	42ab      	cmp	r3, r5
 800e262:	dc19      	bgt.n	800e298 <__multadd+0x74>
 800e264:	6861      	ldr	r1, [r4, #4]
 800e266:	4638      	mov	r0, r7
 800e268:	3101      	adds	r1, #1
 800e26a:	f7ff ff79 	bl	800e160 <_Balloc>
 800e26e:	4680      	mov	r8, r0
 800e270:	b928      	cbnz	r0, 800e27e <__multadd+0x5a>
 800e272:	4602      	mov	r2, r0
 800e274:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a8 <__multadd+0x84>)
 800e276:	480d      	ldr	r0, [pc, #52]	@ (800e2ac <__multadd+0x88>)
 800e278:	21ba      	movs	r1, #186	@ 0xba
 800e27a:	f002 f88d 	bl	8010398 <__assert_func>
 800e27e:	6922      	ldr	r2, [r4, #16]
 800e280:	3202      	adds	r2, #2
 800e282:	f104 010c 	add.w	r1, r4, #12
 800e286:	0092      	lsls	r2, r2, #2
 800e288:	300c      	adds	r0, #12
 800e28a:	f002 f86d 	bl	8010368 <memcpy>
 800e28e:	4621      	mov	r1, r4
 800e290:	4638      	mov	r0, r7
 800e292:	f7ff ffa5 	bl	800e1e0 <_Bfree>
 800e296:	4644      	mov	r4, r8
 800e298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e29c:	3501      	adds	r5, #1
 800e29e:	615e      	str	r6, [r3, #20]
 800e2a0:	6125      	str	r5, [r4, #16]
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a8:	0801144b 	.word	0x0801144b
 800e2ac:	0801145c 	.word	0x0801145c

0800e2b0 <__s2b>:
 800e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	4615      	mov	r5, r2
 800e2b8:	461f      	mov	r7, r3
 800e2ba:	2209      	movs	r2, #9
 800e2bc:	3308      	adds	r3, #8
 800e2be:	4606      	mov	r6, r0
 800e2c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	db09      	blt.n	800e2e0 <__s2b+0x30>
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f7ff ff47 	bl	800e160 <_Balloc>
 800e2d2:	b940      	cbnz	r0, 800e2e6 <__s2b+0x36>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	4b19      	ldr	r3, [pc, #100]	@ (800e33c <__s2b+0x8c>)
 800e2d8:	4819      	ldr	r0, [pc, #100]	@ (800e340 <__s2b+0x90>)
 800e2da:	21d3      	movs	r1, #211	@ 0xd3
 800e2dc:	f002 f85c 	bl	8010398 <__assert_func>
 800e2e0:	0052      	lsls	r2, r2, #1
 800e2e2:	3101      	adds	r1, #1
 800e2e4:	e7f0      	b.n	800e2c8 <__s2b+0x18>
 800e2e6:	9b08      	ldr	r3, [sp, #32]
 800e2e8:	6143      	str	r3, [r0, #20]
 800e2ea:	2d09      	cmp	r5, #9
 800e2ec:	f04f 0301 	mov.w	r3, #1
 800e2f0:	6103      	str	r3, [r0, #16]
 800e2f2:	dd16      	ble.n	800e322 <__s2b+0x72>
 800e2f4:	f104 0909 	add.w	r9, r4, #9
 800e2f8:	46c8      	mov	r8, r9
 800e2fa:	442c      	add	r4, r5
 800e2fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e300:	4601      	mov	r1, r0
 800e302:	3b30      	subs	r3, #48	@ 0x30
 800e304:	220a      	movs	r2, #10
 800e306:	4630      	mov	r0, r6
 800e308:	f7ff ff8c 	bl	800e224 <__multadd>
 800e30c:	45a0      	cmp	r8, r4
 800e30e:	d1f5      	bne.n	800e2fc <__s2b+0x4c>
 800e310:	f1a5 0408 	sub.w	r4, r5, #8
 800e314:	444c      	add	r4, r9
 800e316:	1b2d      	subs	r5, r5, r4
 800e318:	1963      	adds	r3, r4, r5
 800e31a:	42bb      	cmp	r3, r7
 800e31c:	db04      	blt.n	800e328 <__s2b+0x78>
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	340a      	adds	r4, #10
 800e324:	2509      	movs	r5, #9
 800e326:	e7f6      	b.n	800e316 <__s2b+0x66>
 800e328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e32c:	4601      	mov	r1, r0
 800e32e:	3b30      	subs	r3, #48	@ 0x30
 800e330:	220a      	movs	r2, #10
 800e332:	4630      	mov	r0, r6
 800e334:	f7ff ff76 	bl	800e224 <__multadd>
 800e338:	e7ee      	b.n	800e318 <__s2b+0x68>
 800e33a:	bf00      	nop
 800e33c:	0801144b 	.word	0x0801144b
 800e340:	0801145c 	.word	0x0801145c

0800e344 <__hi0bits>:
 800e344:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e348:	4603      	mov	r3, r0
 800e34a:	bf36      	itet	cc
 800e34c:	0403      	lslcc	r3, r0, #16
 800e34e:	2000      	movcs	r0, #0
 800e350:	2010      	movcc	r0, #16
 800e352:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e356:	bf3c      	itt	cc
 800e358:	021b      	lslcc	r3, r3, #8
 800e35a:	3008      	addcc	r0, #8
 800e35c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e360:	bf3c      	itt	cc
 800e362:	011b      	lslcc	r3, r3, #4
 800e364:	3004      	addcc	r0, #4
 800e366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e36a:	bf3c      	itt	cc
 800e36c:	009b      	lslcc	r3, r3, #2
 800e36e:	3002      	addcc	r0, #2
 800e370:	2b00      	cmp	r3, #0
 800e372:	db05      	blt.n	800e380 <__hi0bits+0x3c>
 800e374:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e378:	f100 0001 	add.w	r0, r0, #1
 800e37c:	bf08      	it	eq
 800e37e:	2020      	moveq	r0, #32
 800e380:	4770      	bx	lr

0800e382 <__lo0bits>:
 800e382:	6803      	ldr	r3, [r0, #0]
 800e384:	4602      	mov	r2, r0
 800e386:	f013 0007 	ands.w	r0, r3, #7
 800e38a:	d00b      	beq.n	800e3a4 <__lo0bits+0x22>
 800e38c:	07d9      	lsls	r1, r3, #31
 800e38e:	d421      	bmi.n	800e3d4 <__lo0bits+0x52>
 800e390:	0798      	lsls	r0, r3, #30
 800e392:	bf49      	itett	mi
 800e394:	085b      	lsrmi	r3, r3, #1
 800e396:	089b      	lsrpl	r3, r3, #2
 800e398:	2001      	movmi	r0, #1
 800e39a:	6013      	strmi	r3, [r2, #0]
 800e39c:	bf5c      	itt	pl
 800e39e:	6013      	strpl	r3, [r2, #0]
 800e3a0:	2002      	movpl	r0, #2
 800e3a2:	4770      	bx	lr
 800e3a4:	b299      	uxth	r1, r3
 800e3a6:	b909      	cbnz	r1, 800e3ac <__lo0bits+0x2a>
 800e3a8:	0c1b      	lsrs	r3, r3, #16
 800e3aa:	2010      	movs	r0, #16
 800e3ac:	b2d9      	uxtb	r1, r3
 800e3ae:	b909      	cbnz	r1, 800e3b4 <__lo0bits+0x32>
 800e3b0:	3008      	adds	r0, #8
 800e3b2:	0a1b      	lsrs	r3, r3, #8
 800e3b4:	0719      	lsls	r1, r3, #28
 800e3b6:	bf04      	itt	eq
 800e3b8:	091b      	lsreq	r3, r3, #4
 800e3ba:	3004      	addeq	r0, #4
 800e3bc:	0799      	lsls	r1, r3, #30
 800e3be:	bf04      	itt	eq
 800e3c0:	089b      	lsreq	r3, r3, #2
 800e3c2:	3002      	addeq	r0, #2
 800e3c4:	07d9      	lsls	r1, r3, #31
 800e3c6:	d403      	bmi.n	800e3d0 <__lo0bits+0x4e>
 800e3c8:	085b      	lsrs	r3, r3, #1
 800e3ca:	f100 0001 	add.w	r0, r0, #1
 800e3ce:	d003      	beq.n	800e3d8 <__lo0bits+0x56>
 800e3d0:	6013      	str	r3, [r2, #0]
 800e3d2:	4770      	bx	lr
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	4770      	bx	lr
 800e3d8:	2020      	movs	r0, #32
 800e3da:	4770      	bx	lr

0800e3dc <__i2b>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	460c      	mov	r4, r1
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	f7ff febd 	bl	800e160 <_Balloc>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	b928      	cbnz	r0, 800e3f6 <__i2b+0x1a>
 800e3ea:	4b05      	ldr	r3, [pc, #20]	@ (800e400 <__i2b+0x24>)
 800e3ec:	4805      	ldr	r0, [pc, #20]	@ (800e404 <__i2b+0x28>)
 800e3ee:	f240 1145 	movw	r1, #325	@ 0x145
 800e3f2:	f001 ffd1 	bl	8010398 <__assert_func>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	6144      	str	r4, [r0, #20]
 800e3fa:	6103      	str	r3, [r0, #16]
 800e3fc:	bd10      	pop	{r4, pc}
 800e3fe:	bf00      	nop
 800e400:	0801144b 	.word	0x0801144b
 800e404:	0801145c 	.word	0x0801145c

0800e408 <__multiply>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	4614      	mov	r4, r2
 800e40e:	690a      	ldr	r2, [r1, #16]
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	429a      	cmp	r2, r3
 800e414:	bfa8      	it	ge
 800e416:	4623      	movge	r3, r4
 800e418:	460f      	mov	r7, r1
 800e41a:	bfa4      	itt	ge
 800e41c:	460c      	movge	r4, r1
 800e41e:	461f      	movge	r7, r3
 800e420:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e424:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	6861      	ldr	r1, [r4, #4]
 800e42c:	eb0a 0609 	add.w	r6, sl, r9
 800e430:	42b3      	cmp	r3, r6
 800e432:	b085      	sub	sp, #20
 800e434:	bfb8      	it	lt
 800e436:	3101      	addlt	r1, #1
 800e438:	f7ff fe92 	bl	800e160 <_Balloc>
 800e43c:	b930      	cbnz	r0, 800e44c <__multiply+0x44>
 800e43e:	4602      	mov	r2, r0
 800e440:	4b44      	ldr	r3, [pc, #272]	@ (800e554 <__multiply+0x14c>)
 800e442:	4845      	ldr	r0, [pc, #276]	@ (800e558 <__multiply+0x150>)
 800e444:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e448:	f001 ffa6 	bl	8010398 <__assert_func>
 800e44c:	f100 0514 	add.w	r5, r0, #20
 800e450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e454:	462b      	mov	r3, r5
 800e456:	2200      	movs	r2, #0
 800e458:	4543      	cmp	r3, r8
 800e45a:	d321      	bcc.n	800e4a0 <__multiply+0x98>
 800e45c:	f107 0114 	add.w	r1, r7, #20
 800e460:	f104 0214 	add.w	r2, r4, #20
 800e464:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e468:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	1b13      	subs	r3, r2, r4
 800e470:	3b15      	subs	r3, #21
 800e472:	f023 0303 	bic.w	r3, r3, #3
 800e476:	3304      	adds	r3, #4
 800e478:	f104 0715 	add.w	r7, r4, #21
 800e47c:	42ba      	cmp	r2, r7
 800e47e:	bf38      	it	cc
 800e480:	2304      	movcc	r3, #4
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	9b02      	ldr	r3, [sp, #8]
 800e486:	9103      	str	r1, [sp, #12]
 800e488:	428b      	cmp	r3, r1
 800e48a:	d80c      	bhi.n	800e4a6 <__multiply+0x9e>
 800e48c:	2e00      	cmp	r6, #0
 800e48e:	dd03      	ble.n	800e498 <__multiply+0x90>
 800e490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e494:	2b00      	cmp	r3, #0
 800e496:	d05b      	beq.n	800e550 <__multiply+0x148>
 800e498:	6106      	str	r6, [r0, #16]
 800e49a:	b005      	add	sp, #20
 800e49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a0:	f843 2b04 	str.w	r2, [r3], #4
 800e4a4:	e7d8      	b.n	800e458 <__multiply+0x50>
 800e4a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4aa:	f1ba 0f00 	cmp.w	sl, #0
 800e4ae:	d024      	beq.n	800e4fa <__multiply+0xf2>
 800e4b0:	f104 0e14 	add.w	lr, r4, #20
 800e4b4:	46a9      	mov	r9, r5
 800e4b6:	f04f 0c00 	mov.w	ip, #0
 800e4ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4be:	f8d9 3000 	ldr.w	r3, [r9]
 800e4c2:	fa1f fb87 	uxth.w	fp, r7
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e4cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4d0:	f8d9 7000 	ldr.w	r7, [r9]
 800e4d4:	4463      	add	r3, ip
 800e4d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4da:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4e8:	4572      	cmp	r2, lr
 800e4ea:	f849 3b04 	str.w	r3, [r9], #4
 800e4ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4f2:	d8e2      	bhi.n	800e4ba <__multiply+0xb2>
 800e4f4:	9b01      	ldr	r3, [sp, #4]
 800e4f6:	f845 c003 	str.w	ip, [r5, r3]
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e500:	3104      	adds	r1, #4
 800e502:	f1b9 0f00 	cmp.w	r9, #0
 800e506:	d021      	beq.n	800e54c <__multiply+0x144>
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	f104 0c14 	add.w	ip, r4, #20
 800e50e:	46ae      	mov	lr, r5
 800e510:	f04f 0a00 	mov.w	sl, #0
 800e514:	f8bc b000 	ldrh.w	fp, [ip]
 800e518:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e51c:	fb09 770b 	mla	r7, r9, fp, r7
 800e520:	4457      	add	r7, sl
 800e522:	b29b      	uxth	r3, r3
 800e524:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e528:	f84e 3b04 	str.w	r3, [lr], #4
 800e52c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e530:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e534:	f8be 3000 	ldrh.w	r3, [lr]
 800e538:	fb09 330a 	mla	r3, r9, sl, r3
 800e53c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e540:	4562      	cmp	r2, ip
 800e542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e546:	d8e5      	bhi.n	800e514 <__multiply+0x10c>
 800e548:	9f01      	ldr	r7, [sp, #4]
 800e54a:	51eb      	str	r3, [r5, r7]
 800e54c:	3504      	adds	r5, #4
 800e54e:	e799      	b.n	800e484 <__multiply+0x7c>
 800e550:	3e01      	subs	r6, #1
 800e552:	e79b      	b.n	800e48c <__multiply+0x84>
 800e554:	0801144b 	.word	0x0801144b
 800e558:	0801145c 	.word	0x0801145c

0800e55c <__pow5mult>:
 800e55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e560:	4615      	mov	r5, r2
 800e562:	f012 0203 	ands.w	r2, r2, #3
 800e566:	4607      	mov	r7, r0
 800e568:	460e      	mov	r6, r1
 800e56a:	d007      	beq.n	800e57c <__pow5mult+0x20>
 800e56c:	4c25      	ldr	r4, [pc, #148]	@ (800e604 <__pow5mult+0xa8>)
 800e56e:	3a01      	subs	r2, #1
 800e570:	2300      	movs	r3, #0
 800e572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e576:	f7ff fe55 	bl	800e224 <__multadd>
 800e57a:	4606      	mov	r6, r0
 800e57c:	10ad      	asrs	r5, r5, #2
 800e57e:	d03d      	beq.n	800e5fc <__pow5mult+0xa0>
 800e580:	69fc      	ldr	r4, [r7, #28]
 800e582:	b97c      	cbnz	r4, 800e5a4 <__pow5mult+0x48>
 800e584:	2010      	movs	r0, #16
 800e586:	f7ff fd35 	bl	800dff4 <malloc>
 800e58a:	4602      	mov	r2, r0
 800e58c:	61f8      	str	r0, [r7, #28]
 800e58e:	b928      	cbnz	r0, 800e59c <__pow5mult+0x40>
 800e590:	4b1d      	ldr	r3, [pc, #116]	@ (800e608 <__pow5mult+0xac>)
 800e592:	481e      	ldr	r0, [pc, #120]	@ (800e60c <__pow5mult+0xb0>)
 800e594:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e598:	f001 fefe 	bl	8010398 <__assert_func>
 800e59c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5a0:	6004      	str	r4, [r0, #0]
 800e5a2:	60c4      	str	r4, [r0, #12]
 800e5a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5ac:	b94c      	cbnz	r4, 800e5c2 <__pow5mult+0x66>
 800e5ae:	f240 2171 	movw	r1, #625	@ 0x271
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	f7ff ff12 	bl	800e3dc <__i2b>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5be:	4604      	mov	r4, r0
 800e5c0:	6003      	str	r3, [r0, #0]
 800e5c2:	f04f 0900 	mov.w	r9, #0
 800e5c6:	07eb      	lsls	r3, r5, #31
 800e5c8:	d50a      	bpl.n	800e5e0 <__pow5mult+0x84>
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	f7ff ff1a 	bl	800e408 <__multiply>
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4680      	mov	r8, r0
 800e5d8:	4638      	mov	r0, r7
 800e5da:	f7ff fe01 	bl	800e1e0 <_Bfree>
 800e5de:	4646      	mov	r6, r8
 800e5e0:	106d      	asrs	r5, r5, #1
 800e5e2:	d00b      	beq.n	800e5fc <__pow5mult+0xa0>
 800e5e4:	6820      	ldr	r0, [r4, #0]
 800e5e6:	b938      	cbnz	r0, 800e5f8 <__pow5mult+0x9c>
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff ff0b 	bl	800e408 <__multiply>
 800e5f2:	6020      	str	r0, [r4, #0]
 800e5f4:	f8c0 9000 	str.w	r9, [r0]
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	e7e4      	b.n	800e5c6 <__pow5mult+0x6a>
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e602:	bf00      	nop
 800e604:	080114b8 	.word	0x080114b8
 800e608:	080113dc 	.word	0x080113dc
 800e60c:	0801145c 	.word	0x0801145c

0800e610 <__lshift>:
 800e610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e614:	460c      	mov	r4, r1
 800e616:	6849      	ldr	r1, [r1, #4]
 800e618:	6923      	ldr	r3, [r4, #16]
 800e61a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e61e:	68a3      	ldr	r3, [r4, #8]
 800e620:	4607      	mov	r7, r0
 800e622:	4691      	mov	r9, r2
 800e624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e628:	f108 0601 	add.w	r6, r8, #1
 800e62c:	42b3      	cmp	r3, r6
 800e62e:	db0b      	blt.n	800e648 <__lshift+0x38>
 800e630:	4638      	mov	r0, r7
 800e632:	f7ff fd95 	bl	800e160 <_Balloc>
 800e636:	4605      	mov	r5, r0
 800e638:	b948      	cbnz	r0, 800e64e <__lshift+0x3e>
 800e63a:	4602      	mov	r2, r0
 800e63c:	4b28      	ldr	r3, [pc, #160]	@ (800e6e0 <__lshift+0xd0>)
 800e63e:	4829      	ldr	r0, [pc, #164]	@ (800e6e4 <__lshift+0xd4>)
 800e640:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e644:	f001 fea8 	bl	8010398 <__assert_func>
 800e648:	3101      	adds	r1, #1
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	e7ee      	b.n	800e62c <__lshift+0x1c>
 800e64e:	2300      	movs	r3, #0
 800e650:	f100 0114 	add.w	r1, r0, #20
 800e654:	f100 0210 	add.w	r2, r0, #16
 800e658:	4618      	mov	r0, r3
 800e65a:	4553      	cmp	r3, sl
 800e65c:	db33      	blt.n	800e6c6 <__lshift+0xb6>
 800e65e:	6920      	ldr	r0, [r4, #16]
 800e660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e664:	f104 0314 	add.w	r3, r4, #20
 800e668:	f019 091f 	ands.w	r9, r9, #31
 800e66c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e674:	d02b      	beq.n	800e6ce <__lshift+0xbe>
 800e676:	f1c9 0e20 	rsb	lr, r9, #32
 800e67a:	468a      	mov	sl, r1
 800e67c:	2200      	movs	r2, #0
 800e67e:	6818      	ldr	r0, [r3, #0]
 800e680:	fa00 f009 	lsl.w	r0, r0, r9
 800e684:	4310      	orrs	r0, r2
 800e686:	f84a 0b04 	str.w	r0, [sl], #4
 800e68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e68e:	459c      	cmp	ip, r3
 800e690:	fa22 f20e 	lsr.w	r2, r2, lr
 800e694:	d8f3      	bhi.n	800e67e <__lshift+0x6e>
 800e696:	ebac 0304 	sub.w	r3, ip, r4
 800e69a:	3b15      	subs	r3, #21
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	f104 0015 	add.w	r0, r4, #21
 800e6a6:	4584      	cmp	ip, r0
 800e6a8:	bf38      	it	cc
 800e6aa:	2304      	movcc	r3, #4
 800e6ac:	50ca      	str	r2, [r1, r3]
 800e6ae:	b10a      	cbz	r2, 800e6b4 <__lshift+0xa4>
 800e6b0:	f108 0602 	add.w	r6, r8, #2
 800e6b4:	3e01      	subs	r6, #1
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	612e      	str	r6, [r5, #16]
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	f7ff fd90 	bl	800e1e0 <_Bfree>
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	e7c5      	b.n	800e65a <__lshift+0x4a>
 800e6ce:	3904      	subs	r1, #4
 800e6d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6d8:	459c      	cmp	ip, r3
 800e6da:	d8f9      	bhi.n	800e6d0 <__lshift+0xc0>
 800e6dc:	e7ea      	b.n	800e6b4 <__lshift+0xa4>
 800e6de:	bf00      	nop
 800e6e0:	0801144b 	.word	0x0801144b
 800e6e4:	0801145c 	.word	0x0801145c

0800e6e8 <__mcmp>:
 800e6e8:	690a      	ldr	r2, [r1, #16]
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	6900      	ldr	r0, [r0, #16]
 800e6ee:	1a80      	subs	r0, r0, r2
 800e6f0:	b530      	push	{r4, r5, lr}
 800e6f2:	d10e      	bne.n	800e712 <__mcmp+0x2a>
 800e6f4:	3314      	adds	r3, #20
 800e6f6:	3114      	adds	r1, #20
 800e6f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e6fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e708:	4295      	cmp	r5, r2
 800e70a:	d003      	beq.n	800e714 <__mcmp+0x2c>
 800e70c:	d205      	bcs.n	800e71a <__mcmp+0x32>
 800e70e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e712:	bd30      	pop	{r4, r5, pc}
 800e714:	42a3      	cmp	r3, r4
 800e716:	d3f3      	bcc.n	800e700 <__mcmp+0x18>
 800e718:	e7fb      	b.n	800e712 <__mcmp+0x2a>
 800e71a:	2001      	movs	r0, #1
 800e71c:	e7f9      	b.n	800e712 <__mcmp+0x2a>
	...

0800e720 <__mdiff>:
 800e720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	4689      	mov	r9, r1
 800e726:	4606      	mov	r6, r0
 800e728:	4611      	mov	r1, r2
 800e72a:	4648      	mov	r0, r9
 800e72c:	4614      	mov	r4, r2
 800e72e:	f7ff ffdb 	bl	800e6e8 <__mcmp>
 800e732:	1e05      	subs	r5, r0, #0
 800e734:	d112      	bne.n	800e75c <__mdiff+0x3c>
 800e736:	4629      	mov	r1, r5
 800e738:	4630      	mov	r0, r6
 800e73a:	f7ff fd11 	bl	800e160 <_Balloc>
 800e73e:	4602      	mov	r2, r0
 800e740:	b928      	cbnz	r0, 800e74e <__mdiff+0x2e>
 800e742:	4b3f      	ldr	r3, [pc, #252]	@ (800e840 <__mdiff+0x120>)
 800e744:	f240 2137 	movw	r1, #567	@ 0x237
 800e748:	483e      	ldr	r0, [pc, #248]	@ (800e844 <__mdiff+0x124>)
 800e74a:	f001 fe25 	bl	8010398 <__assert_func>
 800e74e:	2301      	movs	r3, #1
 800e750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e754:	4610      	mov	r0, r2
 800e756:	b003      	add	sp, #12
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	bfbc      	itt	lt
 800e75e:	464b      	movlt	r3, r9
 800e760:	46a1      	movlt	r9, r4
 800e762:	4630      	mov	r0, r6
 800e764:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e768:	bfba      	itte	lt
 800e76a:	461c      	movlt	r4, r3
 800e76c:	2501      	movlt	r5, #1
 800e76e:	2500      	movge	r5, #0
 800e770:	f7ff fcf6 	bl	800e160 <_Balloc>
 800e774:	4602      	mov	r2, r0
 800e776:	b918      	cbnz	r0, 800e780 <__mdiff+0x60>
 800e778:	4b31      	ldr	r3, [pc, #196]	@ (800e840 <__mdiff+0x120>)
 800e77a:	f240 2145 	movw	r1, #581	@ 0x245
 800e77e:	e7e3      	b.n	800e748 <__mdiff+0x28>
 800e780:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e784:	6926      	ldr	r6, [r4, #16]
 800e786:	60c5      	str	r5, [r0, #12]
 800e788:	f109 0310 	add.w	r3, r9, #16
 800e78c:	f109 0514 	add.w	r5, r9, #20
 800e790:	f104 0e14 	add.w	lr, r4, #20
 800e794:	f100 0b14 	add.w	fp, r0, #20
 800e798:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e79c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	46d9      	mov	r9, fp
 800e7a4:	f04f 0c00 	mov.w	ip, #0
 800e7a8:	9b01      	ldr	r3, [sp, #4]
 800e7aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e7ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	fa1f f38a 	uxth.w	r3, sl
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	b283      	uxth	r3, r0
 800e7bc:	1acb      	subs	r3, r1, r3
 800e7be:	0c00      	lsrs	r0, r0, #16
 800e7c0:	4463      	add	r3, ip
 800e7c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e7c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7d0:	4576      	cmp	r6, lr
 800e7d2:	f849 3b04 	str.w	r3, [r9], #4
 800e7d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7da:	d8e5      	bhi.n	800e7a8 <__mdiff+0x88>
 800e7dc:	1b33      	subs	r3, r6, r4
 800e7de:	3b15      	subs	r3, #21
 800e7e0:	f023 0303 	bic.w	r3, r3, #3
 800e7e4:	3415      	adds	r4, #21
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	42a6      	cmp	r6, r4
 800e7ea:	bf38      	it	cc
 800e7ec:	2304      	movcc	r3, #4
 800e7ee:	441d      	add	r5, r3
 800e7f0:	445b      	add	r3, fp
 800e7f2:	461e      	mov	r6, r3
 800e7f4:	462c      	mov	r4, r5
 800e7f6:	4544      	cmp	r4, r8
 800e7f8:	d30e      	bcc.n	800e818 <__mdiff+0xf8>
 800e7fa:	f108 0103 	add.w	r1, r8, #3
 800e7fe:	1b49      	subs	r1, r1, r5
 800e800:	f021 0103 	bic.w	r1, r1, #3
 800e804:	3d03      	subs	r5, #3
 800e806:	45a8      	cmp	r8, r5
 800e808:	bf38      	it	cc
 800e80a:	2100      	movcc	r1, #0
 800e80c:	440b      	add	r3, r1
 800e80e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e812:	b191      	cbz	r1, 800e83a <__mdiff+0x11a>
 800e814:	6117      	str	r7, [r2, #16]
 800e816:	e79d      	b.n	800e754 <__mdiff+0x34>
 800e818:	f854 1b04 	ldr.w	r1, [r4], #4
 800e81c:	46e6      	mov	lr, ip
 800e81e:	0c08      	lsrs	r0, r1, #16
 800e820:	fa1c fc81 	uxtah	ip, ip, r1
 800e824:	4471      	add	r1, lr
 800e826:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e82a:	b289      	uxth	r1, r1
 800e82c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e830:	f846 1b04 	str.w	r1, [r6], #4
 800e834:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e838:	e7dd      	b.n	800e7f6 <__mdiff+0xd6>
 800e83a:	3f01      	subs	r7, #1
 800e83c:	e7e7      	b.n	800e80e <__mdiff+0xee>
 800e83e:	bf00      	nop
 800e840:	0801144b 	.word	0x0801144b
 800e844:	0801145c 	.word	0x0801145c

0800e848 <__ulp>:
 800e848:	b082      	sub	sp, #8
 800e84a:	ed8d 0b00 	vstr	d0, [sp]
 800e84e:	9a01      	ldr	r2, [sp, #4]
 800e850:	4b0f      	ldr	r3, [pc, #60]	@ (800e890 <__ulp+0x48>)
 800e852:	4013      	ands	r3, r2
 800e854:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e858:	2b00      	cmp	r3, #0
 800e85a:	dc08      	bgt.n	800e86e <__ulp+0x26>
 800e85c:	425b      	negs	r3, r3
 800e85e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e862:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e866:	da04      	bge.n	800e872 <__ulp+0x2a>
 800e868:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e86c:	4113      	asrs	r3, r2
 800e86e:	2200      	movs	r2, #0
 800e870:	e008      	b.n	800e884 <__ulp+0x3c>
 800e872:	f1a2 0314 	sub.w	r3, r2, #20
 800e876:	2b1e      	cmp	r3, #30
 800e878:	bfda      	itte	le
 800e87a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e87e:	40da      	lsrle	r2, r3
 800e880:	2201      	movgt	r2, #1
 800e882:	2300      	movs	r3, #0
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	ec41 0b10 	vmov	d0, r0, r1
 800e88c:	b002      	add	sp, #8
 800e88e:	4770      	bx	lr
 800e890:	7ff00000 	.word	0x7ff00000

0800e894 <__b2d>:
 800e894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e898:	6906      	ldr	r6, [r0, #16]
 800e89a:	f100 0814 	add.w	r8, r0, #20
 800e89e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e8a2:	1f37      	subs	r7, r6, #4
 800e8a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	f7ff fd4b 	bl	800e344 <__hi0bits>
 800e8ae:	f1c0 0320 	rsb	r3, r0, #32
 800e8b2:	280a      	cmp	r0, #10
 800e8b4:	600b      	str	r3, [r1, #0]
 800e8b6:	491b      	ldr	r1, [pc, #108]	@ (800e924 <__b2d+0x90>)
 800e8b8:	dc15      	bgt.n	800e8e6 <__b2d+0x52>
 800e8ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800e8be:	fa22 f30c 	lsr.w	r3, r2, ip
 800e8c2:	45b8      	cmp	r8, r7
 800e8c4:	ea43 0501 	orr.w	r5, r3, r1
 800e8c8:	bf34      	ite	cc
 800e8ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8ce:	2300      	movcs	r3, #0
 800e8d0:	3015      	adds	r0, #21
 800e8d2:	fa02 f000 	lsl.w	r0, r2, r0
 800e8d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e8da:	4303      	orrs	r3, r0
 800e8dc:	461c      	mov	r4, r3
 800e8de:	ec45 4b10 	vmov	d0, r4, r5
 800e8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e6:	45b8      	cmp	r8, r7
 800e8e8:	bf3a      	itte	cc
 800e8ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800e8f2:	2300      	movcs	r3, #0
 800e8f4:	380b      	subs	r0, #11
 800e8f6:	d012      	beq.n	800e91e <__b2d+0x8a>
 800e8f8:	f1c0 0120 	rsb	r1, r0, #32
 800e8fc:	fa23 f401 	lsr.w	r4, r3, r1
 800e900:	4082      	lsls	r2, r0
 800e902:	4322      	orrs	r2, r4
 800e904:	4547      	cmp	r7, r8
 800e906:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e90a:	bf8c      	ite	hi
 800e90c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e910:	2200      	movls	r2, #0
 800e912:	4083      	lsls	r3, r0
 800e914:	40ca      	lsrs	r2, r1
 800e916:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e91a:	4313      	orrs	r3, r2
 800e91c:	e7de      	b.n	800e8dc <__b2d+0x48>
 800e91e:	ea42 0501 	orr.w	r5, r2, r1
 800e922:	e7db      	b.n	800e8dc <__b2d+0x48>
 800e924:	3ff00000 	.word	0x3ff00000

0800e928 <__d2b>:
 800e928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	460f      	mov	r7, r1
 800e92e:	2101      	movs	r1, #1
 800e930:	ec59 8b10 	vmov	r8, r9, d0
 800e934:	4616      	mov	r6, r2
 800e936:	f7ff fc13 	bl	800e160 <_Balloc>
 800e93a:	4604      	mov	r4, r0
 800e93c:	b930      	cbnz	r0, 800e94c <__d2b+0x24>
 800e93e:	4602      	mov	r2, r0
 800e940:	4b23      	ldr	r3, [pc, #140]	@ (800e9d0 <__d2b+0xa8>)
 800e942:	4824      	ldr	r0, [pc, #144]	@ (800e9d4 <__d2b+0xac>)
 800e944:	f240 310f 	movw	r1, #783	@ 0x30f
 800e948:	f001 fd26 	bl	8010398 <__assert_func>
 800e94c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e954:	b10d      	cbz	r5, 800e95a <__d2b+0x32>
 800e956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	f1b8 0300 	subs.w	r3, r8, #0
 800e960:	d023      	beq.n	800e9aa <__d2b+0x82>
 800e962:	4668      	mov	r0, sp
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	f7ff fd0c 	bl	800e382 <__lo0bits>
 800e96a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e96e:	b1d0      	cbz	r0, 800e9a6 <__d2b+0x7e>
 800e970:	f1c0 0320 	rsb	r3, r0, #32
 800e974:	fa02 f303 	lsl.w	r3, r2, r3
 800e978:	430b      	orrs	r3, r1
 800e97a:	40c2      	lsrs	r2, r0
 800e97c:	6163      	str	r3, [r4, #20]
 800e97e:	9201      	str	r2, [sp, #4]
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	61a3      	str	r3, [r4, #24]
 800e984:	2b00      	cmp	r3, #0
 800e986:	bf0c      	ite	eq
 800e988:	2201      	moveq	r2, #1
 800e98a:	2202      	movne	r2, #2
 800e98c:	6122      	str	r2, [r4, #16]
 800e98e:	b1a5      	cbz	r5, 800e9ba <__d2b+0x92>
 800e990:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e994:	4405      	add	r5, r0
 800e996:	603d      	str	r5, [r7, #0]
 800e998:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e99c:	6030      	str	r0, [r6, #0]
 800e99e:	4620      	mov	r0, r4
 800e9a0:	b003      	add	sp, #12
 800e9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9a6:	6161      	str	r1, [r4, #20]
 800e9a8:	e7ea      	b.n	800e980 <__d2b+0x58>
 800e9aa:	a801      	add	r0, sp, #4
 800e9ac:	f7ff fce9 	bl	800e382 <__lo0bits>
 800e9b0:	9b01      	ldr	r3, [sp, #4]
 800e9b2:	6163      	str	r3, [r4, #20]
 800e9b4:	3020      	adds	r0, #32
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	e7e8      	b.n	800e98c <__d2b+0x64>
 800e9ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e9c2:	6038      	str	r0, [r7, #0]
 800e9c4:	6918      	ldr	r0, [r3, #16]
 800e9c6:	f7ff fcbd 	bl	800e344 <__hi0bits>
 800e9ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9ce:	e7e5      	b.n	800e99c <__d2b+0x74>
 800e9d0:	0801144b 	.word	0x0801144b
 800e9d4:	0801145c 	.word	0x0801145c

0800e9d8 <__ratio>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	b085      	sub	sp, #20
 800e9de:	e9cd 1000 	strd	r1, r0, [sp]
 800e9e2:	a902      	add	r1, sp, #8
 800e9e4:	f7ff ff56 	bl	800e894 <__b2d>
 800e9e8:	9800      	ldr	r0, [sp, #0]
 800e9ea:	a903      	add	r1, sp, #12
 800e9ec:	ec55 4b10 	vmov	r4, r5, d0
 800e9f0:	f7ff ff50 	bl	800e894 <__b2d>
 800e9f4:	9b01      	ldr	r3, [sp, #4]
 800e9f6:	6919      	ldr	r1, [r3, #16]
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	1ac9      	subs	r1, r1, r3
 800e9fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	ec5b ab10 	vmov	sl, fp, d0
 800ea08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfce      	itee	gt
 800ea10:	462a      	movgt	r2, r5
 800ea12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea16:	465a      	movle	r2, fp
 800ea18:	462f      	mov	r7, r5
 800ea1a:	46d9      	mov	r9, fp
 800ea1c:	bfcc      	ite	gt
 800ea1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ea26:	464b      	mov	r3, r9
 800ea28:	4652      	mov	r2, sl
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	4639      	mov	r1, r7
 800ea2e:	f7f1 ff0d 	bl	800084c <__aeabi_ddiv>
 800ea32:	ec41 0b10 	vmov	d0, r0, r1
 800ea36:	b005      	add	sp, #20
 800ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea3c <__copybits>:
 800ea3c:	3901      	subs	r1, #1
 800ea3e:	b570      	push	{r4, r5, r6, lr}
 800ea40:	1149      	asrs	r1, r1, #5
 800ea42:	6914      	ldr	r4, [r2, #16]
 800ea44:	3101      	adds	r1, #1
 800ea46:	f102 0314 	add.w	r3, r2, #20
 800ea4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea52:	1f05      	subs	r5, r0, #4
 800ea54:	42a3      	cmp	r3, r4
 800ea56:	d30c      	bcc.n	800ea72 <__copybits+0x36>
 800ea58:	1aa3      	subs	r3, r4, r2
 800ea5a:	3b11      	subs	r3, #17
 800ea5c:	f023 0303 	bic.w	r3, r3, #3
 800ea60:	3211      	adds	r2, #17
 800ea62:	42a2      	cmp	r2, r4
 800ea64:	bf88      	it	hi
 800ea66:	2300      	movhi	r3, #0
 800ea68:	4418      	add	r0, r3
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	4288      	cmp	r0, r1
 800ea6e:	d305      	bcc.n	800ea7c <__copybits+0x40>
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea76:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea7a:	e7eb      	b.n	800ea54 <__copybits+0x18>
 800ea7c:	f840 3b04 	str.w	r3, [r0], #4
 800ea80:	e7f4      	b.n	800ea6c <__copybits+0x30>

0800ea82 <__any_on>:
 800ea82:	f100 0214 	add.w	r2, r0, #20
 800ea86:	6900      	ldr	r0, [r0, #16]
 800ea88:	114b      	asrs	r3, r1, #5
 800ea8a:	4298      	cmp	r0, r3
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	db11      	blt.n	800eab4 <__any_on+0x32>
 800ea90:	dd0a      	ble.n	800eaa8 <__any_on+0x26>
 800ea92:	f011 011f 	ands.w	r1, r1, #31
 800ea96:	d007      	beq.n	800eaa8 <__any_on+0x26>
 800ea98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea9c:	fa24 f001 	lsr.w	r0, r4, r1
 800eaa0:	fa00 f101 	lsl.w	r1, r0, r1
 800eaa4:	428c      	cmp	r4, r1
 800eaa6:	d10b      	bne.n	800eac0 <__any_on+0x3e>
 800eaa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d803      	bhi.n	800eab8 <__any_on+0x36>
 800eab0:	2000      	movs	r0, #0
 800eab2:	bd10      	pop	{r4, pc}
 800eab4:	4603      	mov	r3, r0
 800eab6:	e7f7      	b.n	800eaa8 <__any_on+0x26>
 800eab8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eabc:	2900      	cmp	r1, #0
 800eabe:	d0f5      	beq.n	800eaac <__any_on+0x2a>
 800eac0:	2001      	movs	r0, #1
 800eac2:	e7f6      	b.n	800eab2 <__any_on+0x30>

0800eac4 <sulp>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	ec45 4b10 	vmov	d0, r4, r5
 800eace:	4616      	mov	r6, r2
 800ead0:	f7ff feba 	bl	800e848 <__ulp>
 800ead4:	ec51 0b10 	vmov	r0, r1, d0
 800ead8:	b17e      	cbz	r6, 800eafa <sulp+0x36>
 800eada:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eade:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dd09      	ble.n	800eafa <sulp+0x36>
 800eae6:	051b      	lsls	r3, r3, #20
 800eae8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eaec:	2400      	movs	r4, #0
 800eaee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	462b      	mov	r3, r5
 800eaf6:	f7f1 fd7f 	bl	80005f8 <__aeabi_dmul>
 800eafa:	ec41 0b10 	vmov	d0, r0, r1
 800eafe:	bd70      	pop	{r4, r5, r6, pc}

0800eb00 <_strtod_l>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	b09f      	sub	sp, #124	@ 0x7c
 800eb06:	460c      	mov	r4, r1
 800eb08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800eb0e:	9005      	str	r0, [sp, #20]
 800eb10:	f04f 0a00 	mov.w	sl, #0
 800eb14:	f04f 0b00 	mov.w	fp, #0
 800eb18:	460a      	mov	r2, r1
 800eb1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb1c:	7811      	ldrb	r1, [r2, #0]
 800eb1e:	292b      	cmp	r1, #43	@ 0x2b
 800eb20:	d04a      	beq.n	800ebb8 <_strtod_l+0xb8>
 800eb22:	d838      	bhi.n	800eb96 <_strtod_l+0x96>
 800eb24:	290d      	cmp	r1, #13
 800eb26:	d832      	bhi.n	800eb8e <_strtod_l+0x8e>
 800eb28:	2908      	cmp	r1, #8
 800eb2a:	d832      	bhi.n	800eb92 <_strtod_l+0x92>
 800eb2c:	2900      	cmp	r1, #0
 800eb2e:	d03b      	beq.n	800eba8 <_strtod_l+0xa8>
 800eb30:	2200      	movs	r2, #0
 800eb32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800eb36:	782a      	ldrb	r2, [r5, #0]
 800eb38:	2a30      	cmp	r2, #48	@ 0x30
 800eb3a:	f040 80b3 	bne.w	800eca4 <_strtod_l+0x1a4>
 800eb3e:	786a      	ldrb	r2, [r5, #1]
 800eb40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb44:	2a58      	cmp	r2, #88	@ 0x58
 800eb46:	d16e      	bne.n	800ec26 <_strtod_l+0x126>
 800eb48:	9302      	str	r3, [sp, #8]
 800eb4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	4a8e      	ldr	r2, [pc, #568]	@ (800ed8c <_strtod_l+0x28c>)
 800eb54:	9805      	ldr	r0, [sp, #20]
 800eb56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eb58:	a919      	add	r1, sp, #100	@ 0x64
 800eb5a:	f001 fcb7 	bl	80104cc <__gethex>
 800eb5e:	f010 060f 	ands.w	r6, r0, #15
 800eb62:	4604      	mov	r4, r0
 800eb64:	d005      	beq.n	800eb72 <_strtod_l+0x72>
 800eb66:	2e06      	cmp	r6, #6
 800eb68:	d128      	bne.n	800ebbc <_strtod_l+0xbc>
 800eb6a:	3501      	adds	r5, #1
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800eb70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f040 858e 	bne.w	800f696 <_strtod_l+0xb96>
 800eb7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb7c:	b1cb      	cbz	r3, 800ebb2 <_strtod_l+0xb2>
 800eb7e:	4652      	mov	r2, sl
 800eb80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eb84:	ec43 2b10 	vmov	d0, r2, r3
 800eb88:	b01f      	add	sp, #124	@ 0x7c
 800eb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8e:	2920      	cmp	r1, #32
 800eb90:	d1ce      	bne.n	800eb30 <_strtod_l+0x30>
 800eb92:	3201      	adds	r2, #1
 800eb94:	e7c1      	b.n	800eb1a <_strtod_l+0x1a>
 800eb96:	292d      	cmp	r1, #45	@ 0x2d
 800eb98:	d1ca      	bne.n	800eb30 <_strtod_l+0x30>
 800eb9a:	2101      	movs	r1, #1
 800eb9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb9e:	1c51      	adds	r1, r2, #1
 800eba0:	9119      	str	r1, [sp, #100]	@ 0x64
 800eba2:	7852      	ldrb	r2, [r2, #1]
 800eba4:	2a00      	cmp	r2, #0
 800eba6:	d1c5      	bne.n	800eb34 <_strtod_l+0x34>
 800eba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ebaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 8570 	bne.w	800f692 <_strtod_l+0xb92>
 800ebb2:	4652      	mov	r2, sl
 800ebb4:	465b      	mov	r3, fp
 800ebb6:	e7e5      	b.n	800eb84 <_strtod_l+0x84>
 800ebb8:	2100      	movs	r1, #0
 800ebba:	e7ef      	b.n	800eb9c <_strtod_l+0x9c>
 800ebbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ebbe:	b13a      	cbz	r2, 800ebd0 <_strtod_l+0xd0>
 800ebc0:	2135      	movs	r1, #53	@ 0x35
 800ebc2:	a81c      	add	r0, sp, #112	@ 0x70
 800ebc4:	f7ff ff3a 	bl	800ea3c <__copybits>
 800ebc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebca:	9805      	ldr	r0, [sp, #20]
 800ebcc:	f7ff fb08 	bl	800e1e0 <_Bfree>
 800ebd0:	3e01      	subs	r6, #1
 800ebd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ebd4:	2e04      	cmp	r6, #4
 800ebd6:	d806      	bhi.n	800ebe6 <_strtod_l+0xe6>
 800ebd8:	e8df f006 	tbb	[pc, r6]
 800ebdc:	201d0314 	.word	0x201d0314
 800ebe0:	14          	.byte	0x14
 800ebe1:	00          	.byte	0x00
 800ebe2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ebe6:	05e1      	lsls	r1, r4, #23
 800ebe8:	bf48      	it	mi
 800ebea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ebee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebf2:	0d1b      	lsrs	r3, r3, #20
 800ebf4:	051b      	lsls	r3, r3, #20
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1bb      	bne.n	800eb72 <_strtod_l+0x72>
 800ebfa:	f7fe fb31 	bl	800d260 <__errno>
 800ebfe:	2322      	movs	r3, #34	@ 0x22
 800ec00:	6003      	str	r3, [r0, #0]
 800ec02:	e7b6      	b.n	800eb72 <_strtod_l+0x72>
 800ec04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ec08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ec0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ec10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec14:	e7e7      	b.n	800ebe6 <_strtod_l+0xe6>
 800ec16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ed94 <_strtod_l+0x294>
 800ec1a:	e7e4      	b.n	800ebe6 <_strtod_l+0xe6>
 800ec1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ec20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ec24:	e7df      	b.n	800ebe6 <_strtod_l+0xe6>
 800ec26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec28:	1c5a      	adds	r2, r3, #1
 800ec2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec2c:	785b      	ldrb	r3, [r3, #1]
 800ec2e:	2b30      	cmp	r3, #48	@ 0x30
 800ec30:	d0f9      	beq.n	800ec26 <_strtod_l+0x126>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d09d      	beq.n	800eb72 <_strtod_l+0x72>
 800ec36:	2301      	movs	r3, #1
 800ec38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec3e:	2300      	movs	r3, #0
 800ec40:	9308      	str	r3, [sp, #32]
 800ec42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec44:	461f      	mov	r7, r3
 800ec46:	220a      	movs	r2, #10
 800ec48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ec4a:	7805      	ldrb	r5, [r0, #0]
 800ec4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ec50:	b2d9      	uxtb	r1, r3
 800ec52:	2909      	cmp	r1, #9
 800ec54:	d928      	bls.n	800eca8 <_strtod_l+0x1a8>
 800ec56:	494e      	ldr	r1, [pc, #312]	@ (800ed90 <_strtod_l+0x290>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f001 fb62 	bl	8010322 <strncmp>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d032      	beq.n	800ecc8 <_strtod_l+0x1c8>
 800ec62:	2000      	movs	r0, #0
 800ec64:	462a      	mov	r2, r5
 800ec66:	4681      	mov	r9, r0
 800ec68:	463d      	mov	r5, r7
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2a65      	cmp	r2, #101	@ 0x65
 800ec6e:	d001      	beq.n	800ec74 <_strtod_l+0x174>
 800ec70:	2a45      	cmp	r2, #69	@ 0x45
 800ec72:	d114      	bne.n	800ec9e <_strtod_l+0x19e>
 800ec74:	b91d      	cbnz	r5, 800ec7e <_strtod_l+0x17e>
 800ec76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec78:	4302      	orrs	r2, r0
 800ec7a:	d095      	beq.n	800eba8 <_strtod_l+0xa8>
 800ec7c:	2500      	movs	r5, #0
 800ec7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ec80:	1c62      	adds	r2, r4, #1
 800ec82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec84:	7862      	ldrb	r2, [r4, #1]
 800ec86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec88:	d077      	beq.n	800ed7a <_strtod_l+0x27a>
 800ec8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec8c:	d07b      	beq.n	800ed86 <_strtod_l+0x286>
 800ec8e:	f04f 0c00 	mov.w	ip, #0
 800ec92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ec96:	2909      	cmp	r1, #9
 800ec98:	f240 8082 	bls.w	800eda0 <_strtod_l+0x2a0>
 800ec9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec9e:	f04f 0800 	mov.w	r8, #0
 800eca2:	e0a2      	b.n	800edea <_strtod_l+0x2ea>
 800eca4:	2300      	movs	r3, #0
 800eca6:	e7c7      	b.n	800ec38 <_strtod_l+0x138>
 800eca8:	2f08      	cmp	r7, #8
 800ecaa:	bfd5      	itete	le
 800ecac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ecae:	9908      	ldrgt	r1, [sp, #32]
 800ecb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800ecb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ecb8:	f100 0001 	add.w	r0, r0, #1
 800ecbc:	bfd4      	ite	le
 800ecbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ecc0:	9308      	strgt	r3, [sp, #32]
 800ecc2:	3701      	adds	r7, #1
 800ecc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800ecc6:	e7bf      	b.n	800ec48 <_strtod_l+0x148>
 800ecc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecce:	785a      	ldrb	r2, [r3, #1]
 800ecd0:	b37f      	cbz	r7, 800ed32 <_strtod_l+0x232>
 800ecd2:	4681      	mov	r9, r0
 800ecd4:	463d      	mov	r5, r7
 800ecd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	d912      	bls.n	800ed04 <_strtod_l+0x204>
 800ecde:	2301      	movs	r3, #1
 800ece0:	e7c4      	b.n	800ec6c <_strtod_l+0x16c>
 800ece2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ece8:	785a      	ldrb	r2, [r3, #1]
 800ecea:	3001      	adds	r0, #1
 800ecec:	2a30      	cmp	r2, #48	@ 0x30
 800ecee:	d0f8      	beq.n	800ece2 <_strtod_l+0x1e2>
 800ecf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	f200 84d3 	bhi.w	800f6a0 <_strtod_l+0xba0>
 800ecfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecfe:	4681      	mov	r9, r0
 800ed00:	2000      	movs	r0, #0
 800ed02:	4605      	mov	r5, r0
 800ed04:	3a30      	subs	r2, #48	@ 0x30
 800ed06:	f100 0301 	add.w	r3, r0, #1
 800ed0a:	d02a      	beq.n	800ed62 <_strtod_l+0x262>
 800ed0c:	4499      	add	r9, r3
 800ed0e:	eb00 0c05 	add.w	ip, r0, r5
 800ed12:	462b      	mov	r3, r5
 800ed14:	210a      	movs	r1, #10
 800ed16:	4563      	cmp	r3, ip
 800ed18:	d10d      	bne.n	800ed36 <_strtod_l+0x236>
 800ed1a:	1c69      	adds	r1, r5, #1
 800ed1c:	4401      	add	r1, r0
 800ed1e:	4428      	add	r0, r5
 800ed20:	2808      	cmp	r0, #8
 800ed22:	dc16      	bgt.n	800ed52 <_strtod_l+0x252>
 800ed24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed26:	230a      	movs	r3, #10
 800ed28:	fb03 2300 	mla	r3, r3, r0, r2
 800ed2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e018      	b.n	800ed64 <_strtod_l+0x264>
 800ed32:	4638      	mov	r0, r7
 800ed34:	e7da      	b.n	800ecec <_strtod_l+0x1ec>
 800ed36:	2b08      	cmp	r3, #8
 800ed38:	f103 0301 	add.w	r3, r3, #1
 800ed3c:	dc03      	bgt.n	800ed46 <_strtod_l+0x246>
 800ed3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ed40:	434e      	muls	r6, r1
 800ed42:	960a      	str	r6, [sp, #40]	@ 0x28
 800ed44:	e7e7      	b.n	800ed16 <_strtod_l+0x216>
 800ed46:	2b10      	cmp	r3, #16
 800ed48:	bfde      	ittt	le
 800ed4a:	9e08      	ldrle	r6, [sp, #32]
 800ed4c:	434e      	mulle	r6, r1
 800ed4e:	9608      	strle	r6, [sp, #32]
 800ed50:	e7e1      	b.n	800ed16 <_strtod_l+0x216>
 800ed52:	280f      	cmp	r0, #15
 800ed54:	dceb      	bgt.n	800ed2e <_strtod_l+0x22e>
 800ed56:	9808      	ldr	r0, [sp, #32]
 800ed58:	230a      	movs	r3, #10
 800ed5a:	fb03 2300 	mla	r3, r3, r0, r2
 800ed5e:	9308      	str	r3, [sp, #32]
 800ed60:	e7e5      	b.n	800ed2e <_strtod_l+0x22e>
 800ed62:	4629      	mov	r1, r5
 800ed64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed66:	1c50      	adds	r0, r2, #1
 800ed68:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed6a:	7852      	ldrb	r2, [r2, #1]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	460d      	mov	r5, r1
 800ed70:	e7b1      	b.n	800ecd6 <_strtod_l+0x1d6>
 800ed72:	f04f 0900 	mov.w	r9, #0
 800ed76:	2301      	movs	r3, #1
 800ed78:	e77d      	b.n	800ec76 <_strtod_l+0x176>
 800ed7a:	f04f 0c00 	mov.w	ip, #0
 800ed7e:	1ca2      	adds	r2, r4, #2
 800ed80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed82:	78a2      	ldrb	r2, [r4, #2]
 800ed84:	e785      	b.n	800ec92 <_strtod_l+0x192>
 800ed86:	f04f 0c01 	mov.w	ip, #1
 800ed8a:	e7f8      	b.n	800ed7e <_strtod_l+0x27e>
 800ed8c:	080115d0 	.word	0x080115d0
 800ed90:	080115b8 	.word	0x080115b8
 800ed94:	7ff00000 	.word	0x7ff00000
 800ed98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed9a:	1c51      	adds	r1, r2, #1
 800ed9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed9e:	7852      	ldrb	r2, [r2, #1]
 800eda0:	2a30      	cmp	r2, #48	@ 0x30
 800eda2:	d0f9      	beq.n	800ed98 <_strtod_l+0x298>
 800eda4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eda8:	2908      	cmp	r1, #8
 800edaa:	f63f af78 	bhi.w	800ec9e <_strtod_l+0x19e>
 800edae:	3a30      	subs	r2, #48	@ 0x30
 800edb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800edb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800edb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800edb6:	f04f 080a 	mov.w	r8, #10
 800edba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800edbc:	1c56      	adds	r6, r2, #1
 800edbe:	9619      	str	r6, [sp, #100]	@ 0x64
 800edc0:	7852      	ldrb	r2, [r2, #1]
 800edc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800edc6:	f1be 0f09 	cmp.w	lr, #9
 800edca:	d939      	bls.n	800ee40 <_strtod_l+0x340>
 800edcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800edce:	1a76      	subs	r6, r6, r1
 800edd0:	2e08      	cmp	r6, #8
 800edd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800edd6:	dc03      	bgt.n	800ede0 <_strtod_l+0x2e0>
 800edd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edda:	4588      	cmp	r8, r1
 800eddc:	bfa8      	it	ge
 800edde:	4688      	movge	r8, r1
 800ede0:	f1bc 0f00 	cmp.w	ip, #0
 800ede4:	d001      	beq.n	800edea <_strtod_l+0x2ea>
 800ede6:	f1c8 0800 	rsb	r8, r8, #0
 800edea:	2d00      	cmp	r5, #0
 800edec:	d14e      	bne.n	800ee8c <_strtod_l+0x38c>
 800edee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800edf0:	4308      	orrs	r0, r1
 800edf2:	f47f aebe 	bne.w	800eb72 <_strtod_l+0x72>
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f47f aed6 	bne.w	800eba8 <_strtod_l+0xa8>
 800edfc:	2a69      	cmp	r2, #105	@ 0x69
 800edfe:	d028      	beq.n	800ee52 <_strtod_l+0x352>
 800ee00:	dc25      	bgt.n	800ee4e <_strtod_l+0x34e>
 800ee02:	2a49      	cmp	r2, #73	@ 0x49
 800ee04:	d025      	beq.n	800ee52 <_strtod_l+0x352>
 800ee06:	2a4e      	cmp	r2, #78	@ 0x4e
 800ee08:	f47f aece 	bne.w	800eba8 <_strtod_l+0xa8>
 800ee0c:	499b      	ldr	r1, [pc, #620]	@ (800f07c <_strtod_l+0x57c>)
 800ee0e:	a819      	add	r0, sp, #100	@ 0x64
 800ee10:	f001 fd7e 	bl	8010910 <__match>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	f43f aec7 	beq.w	800eba8 <_strtod_l+0xa8>
 800ee1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b28      	cmp	r3, #40	@ 0x28
 800ee20:	d12e      	bne.n	800ee80 <_strtod_l+0x380>
 800ee22:	4997      	ldr	r1, [pc, #604]	@ (800f080 <_strtod_l+0x580>)
 800ee24:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee26:	a819      	add	r0, sp, #100	@ 0x64
 800ee28:	f001 fd86 	bl	8010938 <__hexnan>
 800ee2c:	2805      	cmp	r0, #5
 800ee2e:	d127      	bne.n	800ee80 <_strtod_l+0x380>
 800ee30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ee36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ee3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ee3e:	e698      	b.n	800eb72 <_strtod_l+0x72>
 800ee40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee42:	fb08 2101 	mla	r1, r8, r1, r2
 800ee46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ee4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee4c:	e7b5      	b.n	800edba <_strtod_l+0x2ba>
 800ee4e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ee50:	e7da      	b.n	800ee08 <_strtod_l+0x308>
 800ee52:	498c      	ldr	r1, [pc, #560]	@ (800f084 <_strtod_l+0x584>)
 800ee54:	a819      	add	r0, sp, #100	@ 0x64
 800ee56:	f001 fd5b 	bl	8010910 <__match>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f43f aea4 	beq.w	800eba8 <_strtod_l+0xa8>
 800ee60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee62:	4989      	ldr	r1, [pc, #548]	@ (800f088 <_strtod_l+0x588>)
 800ee64:	3b01      	subs	r3, #1
 800ee66:	a819      	add	r0, sp, #100	@ 0x64
 800ee68:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee6a:	f001 fd51 	bl	8010910 <__match>
 800ee6e:	b910      	cbnz	r0, 800ee76 <_strtod_l+0x376>
 800ee70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee72:	3301      	adds	r3, #1
 800ee74:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f098 <_strtod_l+0x598>
 800ee7a:	f04f 0a00 	mov.w	sl, #0
 800ee7e:	e678      	b.n	800eb72 <_strtod_l+0x72>
 800ee80:	4882      	ldr	r0, [pc, #520]	@ (800f08c <_strtod_l+0x58c>)
 800ee82:	f001 fa81 	bl	8010388 <nan>
 800ee86:	ec5b ab10 	vmov	sl, fp, d0
 800ee8a:	e672      	b.n	800eb72 <_strtod_l+0x72>
 800ee8c:	eba8 0309 	sub.w	r3, r8, r9
 800ee90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ee92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee94:	2f00      	cmp	r7, #0
 800ee96:	bf08      	it	eq
 800ee98:	462f      	moveq	r7, r5
 800ee9a:	2d10      	cmp	r5, #16
 800ee9c:	462c      	mov	r4, r5
 800ee9e:	bfa8      	it	ge
 800eea0:	2410      	movge	r4, #16
 800eea2:	f7f1 fb2f 	bl	8000504 <__aeabi_ui2d>
 800eea6:	2d09      	cmp	r5, #9
 800eea8:	4682      	mov	sl, r0
 800eeaa:	468b      	mov	fp, r1
 800eeac:	dc13      	bgt.n	800eed6 <_strtod_l+0x3d6>
 800eeae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f43f ae5e 	beq.w	800eb72 <_strtod_l+0x72>
 800eeb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeb8:	dd78      	ble.n	800efac <_strtod_l+0x4ac>
 800eeba:	2b16      	cmp	r3, #22
 800eebc:	dc5f      	bgt.n	800ef7e <_strtod_l+0x47e>
 800eebe:	4974      	ldr	r1, [pc, #464]	@ (800f090 <_strtod_l+0x590>)
 800eec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eec8:	4652      	mov	r2, sl
 800eeca:	465b      	mov	r3, fp
 800eecc:	f7f1 fb94 	bl	80005f8 <__aeabi_dmul>
 800eed0:	4682      	mov	sl, r0
 800eed2:	468b      	mov	fp, r1
 800eed4:	e64d      	b.n	800eb72 <_strtod_l+0x72>
 800eed6:	4b6e      	ldr	r3, [pc, #440]	@ (800f090 <_strtod_l+0x590>)
 800eed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eedc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eee0:	f7f1 fb8a 	bl	80005f8 <__aeabi_dmul>
 800eee4:	4682      	mov	sl, r0
 800eee6:	9808      	ldr	r0, [sp, #32]
 800eee8:	468b      	mov	fp, r1
 800eeea:	f7f1 fb0b 	bl	8000504 <__aeabi_ui2d>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	4650      	mov	r0, sl
 800eef4:	4659      	mov	r1, fp
 800eef6:	f7f1 f9c9 	bl	800028c <__adddf3>
 800eefa:	2d0f      	cmp	r5, #15
 800eefc:	4682      	mov	sl, r0
 800eefe:	468b      	mov	fp, r1
 800ef00:	ddd5      	ble.n	800eeae <_strtod_l+0x3ae>
 800ef02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef04:	1b2c      	subs	r4, r5, r4
 800ef06:	441c      	add	r4, r3
 800ef08:	2c00      	cmp	r4, #0
 800ef0a:	f340 8096 	ble.w	800f03a <_strtod_l+0x53a>
 800ef0e:	f014 030f 	ands.w	r3, r4, #15
 800ef12:	d00a      	beq.n	800ef2a <_strtod_l+0x42a>
 800ef14:	495e      	ldr	r1, [pc, #376]	@ (800f090 <_strtod_l+0x590>)
 800ef16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef1a:	4652      	mov	r2, sl
 800ef1c:	465b      	mov	r3, fp
 800ef1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef22:	f7f1 fb69 	bl	80005f8 <__aeabi_dmul>
 800ef26:	4682      	mov	sl, r0
 800ef28:	468b      	mov	fp, r1
 800ef2a:	f034 040f 	bics.w	r4, r4, #15
 800ef2e:	d073      	beq.n	800f018 <_strtod_l+0x518>
 800ef30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ef34:	dd48      	ble.n	800efc8 <_strtod_l+0x4c8>
 800ef36:	2400      	movs	r4, #0
 800ef38:	46a0      	mov	r8, r4
 800ef3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ef3c:	46a1      	mov	r9, r4
 800ef3e:	9a05      	ldr	r2, [sp, #20]
 800ef40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f098 <_strtod_l+0x598>
 800ef44:	2322      	movs	r3, #34	@ 0x22
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	f04f 0a00 	mov.w	sl, #0
 800ef4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f43f ae0f 	beq.w	800eb72 <_strtod_l+0x72>
 800ef54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef56:	9805      	ldr	r0, [sp, #20]
 800ef58:	f7ff f942 	bl	800e1e0 <_Bfree>
 800ef5c:	9805      	ldr	r0, [sp, #20]
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7ff f93e 	bl	800e1e0 <_Bfree>
 800ef64:	9805      	ldr	r0, [sp, #20]
 800ef66:	4641      	mov	r1, r8
 800ef68:	f7ff f93a 	bl	800e1e0 <_Bfree>
 800ef6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef6e:	9805      	ldr	r0, [sp, #20]
 800ef70:	f7ff f936 	bl	800e1e0 <_Bfree>
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	4621      	mov	r1, r4
 800ef78:	f7ff f932 	bl	800e1e0 <_Bfree>
 800ef7c:	e5f9      	b.n	800eb72 <_strtod_l+0x72>
 800ef7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ef84:	4293      	cmp	r3, r2
 800ef86:	dbbc      	blt.n	800ef02 <_strtod_l+0x402>
 800ef88:	4c41      	ldr	r4, [pc, #260]	@ (800f090 <_strtod_l+0x590>)
 800ef8a:	f1c5 050f 	rsb	r5, r5, #15
 800ef8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef92:	4652      	mov	r2, sl
 800ef94:	465b      	mov	r3, fp
 800ef96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef9a:	f7f1 fb2d 	bl	80005f8 <__aeabi_dmul>
 800ef9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa0:	1b5d      	subs	r5, r3, r5
 800efa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800efa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800efaa:	e78f      	b.n	800eecc <_strtod_l+0x3cc>
 800efac:	3316      	adds	r3, #22
 800efae:	dba8      	blt.n	800ef02 <_strtod_l+0x402>
 800efb0:	4b37      	ldr	r3, [pc, #220]	@ (800f090 <_strtod_l+0x590>)
 800efb2:	eba9 0808 	sub.w	r8, r9, r8
 800efb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800efba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800efbe:	4650      	mov	r0, sl
 800efc0:	4659      	mov	r1, fp
 800efc2:	f7f1 fc43 	bl	800084c <__aeabi_ddiv>
 800efc6:	e783      	b.n	800eed0 <_strtod_l+0x3d0>
 800efc8:	4b32      	ldr	r3, [pc, #200]	@ (800f094 <_strtod_l+0x594>)
 800efca:	9308      	str	r3, [sp, #32]
 800efcc:	2300      	movs	r3, #0
 800efce:	1124      	asrs	r4, r4, #4
 800efd0:	4650      	mov	r0, sl
 800efd2:	4659      	mov	r1, fp
 800efd4:	461e      	mov	r6, r3
 800efd6:	2c01      	cmp	r4, #1
 800efd8:	dc21      	bgt.n	800f01e <_strtod_l+0x51e>
 800efda:	b10b      	cbz	r3, 800efe0 <_strtod_l+0x4e0>
 800efdc:	4682      	mov	sl, r0
 800efde:	468b      	mov	fp, r1
 800efe0:	492c      	ldr	r1, [pc, #176]	@ (800f094 <_strtod_l+0x594>)
 800efe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800efe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800efea:	4652      	mov	r2, sl
 800efec:	465b      	mov	r3, fp
 800efee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eff2:	f7f1 fb01 	bl	80005f8 <__aeabi_dmul>
 800eff6:	4b28      	ldr	r3, [pc, #160]	@ (800f098 <_strtod_l+0x598>)
 800eff8:	460a      	mov	r2, r1
 800effa:	400b      	ands	r3, r1
 800effc:	4927      	ldr	r1, [pc, #156]	@ (800f09c <_strtod_l+0x59c>)
 800effe:	428b      	cmp	r3, r1
 800f000:	4682      	mov	sl, r0
 800f002:	d898      	bhi.n	800ef36 <_strtod_l+0x436>
 800f004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f008:	428b      	cmp	r3, r1
 800f00a:	bf86      	itte	hi
 800f00c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f0a0 <_strtod_l+0x5a0>
 800f010:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f018:	2300      	movs	r3, #0
 800f01a:	9308      	str	r3, [sp, #32]
 800f01c:	e07a      	b.n	800f114 <_strtod_l+0x614>
 800f01e:	07e2      	lsls	r2, r4, #31
 800f020:	d505      	bpl.n	800f02e <_strtod_l+0x52e>
 800f022:	9b08      	ldr	r3, [sp, #32]
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f7f1 fae6 	bl	80005f8 <__aeabi_dmul>
 800f02c:	2301      	movs	r3, #1
 800f02e:	9a08      	ldr	r2, [sp, #32]
 800f030:	3208      	adds	r2, #8
 800f032:	3601      	adds	r6, #1
 800f034:	1064      	asrs	r4, r4, #1
 800f036:	9208      	str	r2, [sp, #32]
 800f038:	e7cd      	b.n	800efd6 <_strtod_l+0x4d6>
 800f03a:	d0ed      	beq.n	800f018 <_strtod_l+0x518>
 800f03c:	4264      	negs	r4, r4
 800f03e:	f014 020f 	ands.w	r2, r4, #15
 800f042:	d00a      	beq.n	800f05a <_strtod_l+0x55a>
 800f044:	4b12      	ldr	r3, [pc, #72]	@ (800f090 <_strtod_l+0x590>)
 800f046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f04a:	4650      	mov	r0, sl
 800f04c:	4659      	mov	r1, fp
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	f7f1 fbfb 	bl	800084c <__aeabi_ddiv>
 800f056:	4682      	mov	sl, r0
 800f058:	468b      	mov	fp, r1
 800f05a:	1124      	asrs	r4, r4, #4
 800f05c:	d0dc      	beq.n	800f018 <_strtod_l+0x518>
 800f05e:	2c1f      	cmp	r4, #31
 800f060:	dd20      	ble.n	800f0a4 <_strtod_l+0x5a4>
 800f062:	2400      	movs	r4, #0
 800f064:	46a0      	mov	r8, r4
 800f066:	940a      	str	r4, [sp, #40]	@ 0x28
 800f068:	46a1      	mov	r9, r4
 800f06a:	9a05      	ldr	r2, [sp, #20]
 800f06c:	2322      	movs	r3, #34	@ 0x22
 800f06e:	f04f 0a00 	mov.w	sl, #0
 800f072:	f04f 0b00 	mov.w	fp, #0
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	e768      	b.n	800ef4c <_strtod_l+0x44c>
 800f07a:	bf00      	nop
 800f07c:	080113a5 	.word	0x080113a5
 800f080:	080115bc 	.word	0x080115bc
 800f084:	0801139d 	.word	0x0801139d
 800f088:	080113d2 	.word	0x080113d2
 800f08c:	08011780 	.word	0x08011780
 800f090:	080114f0 	.word	0x080114f0
 800f094:	080114c8 	.word	0x080114c8
 800f098:	7ff00000 	.word	0x7ff00000
 800f09c:	7ca00000 	.word	0x7ca00000
 800f0a0:	7fefffff 	.word	0x7fefffff
 800f0a4:	f014 0310 	ands.w	r3, r4, #16
 800f0a8:	bf18      	it	ne
 800f0aa:	236a      	movne	r3, #106	@ 0x6a
 800f0ac:	4ea9      	ldr	r6, [pc, #676]	@ (800f354 <_strtod_l+0x854>)
 800f0ae:	9308      	str	r3, [sp, #32]
 800f0b0:	4650      	mov	r0, sl
 800f0b2:	4659      	mov	r1, fp
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	07e2      	lsls	r2, r4, #31
 800f0b8:	d504      	bpl.n	800f0c4 <_strtod_l+0x5c4>
 800f0ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	1064      	asrs	r4, r4, #1
 800f0c6:	f106 0608 	add.w	r6, r6, #8
 800f0ca:	d1f4      	bne.n	800f0b6 <_strtod_l+0x5b6>
 800f0cc:	b10b      	cbz	r3, 800f0d2 <_strtod_l+0x5d2>
 800f0ce:	4682      	mov	sl, r0
 800f0d0:	468b      	mov	fp, r1
 800f0d2:	9b08      	ldr	r3, [sp, #32]
 800f0d4:	b1b3      	cbz	r3, 800f104 <_strtod_l+0x604>
 800f0d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f0da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	4659      	mov	r1, fp
 800f0e2:	dd0f      	ble.n	800f104 <_strtod_l+0x604>
 800f0e4:	2b1f      	cmp	r3, #31
 800f0e6:	dd55      	ble.n	800f194 <_strtod_l+0x694>
 800f0e8:	2b34      	cmp	r3, #52	@ 0x34
 800f0ea:	bfde      	ittt	le
 800f0ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f0f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f0f4:	4093      	lslle	r3, r2
 800f0f6:	f04f 0a00 	mov.w	sl, #0
 800f0fa:	bfcc      	ite	gt
 800f0fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f100:	ea03 0b01 	andle.w	fp, r3, r1
 800f104:	2200      	movs	r2, #0
 800f106:	2300      	movs	r3, #0
 800f108:	4650      	mov	r0, sl
 800f10a:	4659      	mov	r1, fp
 800f10c:	f7f1 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f110:	2800      	cmp	r0, #0
 800f112:	d1a6      	bne.n	800f062 <_strtod_l+0x562>
 800f114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f11a:	9805      	ldr	r0, [sp, #20]
 800f11c:	462b      	mov	r3, r5
 800f11e:	463a      	mov	r2, r7
 800f120:	f7ff f8c6 	bl	800e2b0 <__s2b>
 800f124:	900a      	str	r0, [sp, #40]	@ 0x28
 800f126:	2800      	cmp	r0, #0
 800f128:	f43f af05 	beq.w	800ef36 <_strtod_l+0x436>
 800f12c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f12e:	2a00      	cmp	r2, #0
 800f130:	eba9 0308 	sub.w	r3, r9, r8
 800f134:	bfa8      	it	ge
 800f136:	2300      	movge	r3, #0
 800f138:	9312      	str	r3, [sp, #72]	@ 0x48
 800f13a:	2400      	movs	r4, #0
 800f13c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f140:	9316      	str	r3, [sp, #88]	@ 0x58
 800f142:	46a0      	mov	r8, r4
 800f144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f146:	9805      	ldr	r0, [sp, #20]
 800f148:	6859      	ldr	r1, [r3, #4]
 800f14a:	f7ff f809 	bl	800e160 <_Balloc>
 800f14e:	4681      	mov	r9, r0
 800f150:	2800      	cmp	r0, #0
 800f152:	f43f aef4 	beq.w	800ef3e <_strtod_l+0x43e>
 800f156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f158:	691a      	ldr	r2, [r3, #16]
 800f15a:	3202      	adds	r2, #2
 800f15c:	f103 010c 	add.w	r1, r3, #12
 800f160:	0092      	lsls	r2, r2, #2
 800f162:	300c      	adds	r0, #12
 800f164:	f001 f900 	bl	8010368 <memcpy>
 800f168:	ec4b ab10 	vmov	d0, sl, fp
 800f16c:	9805      	ldr	r0, [sp, #20]
 800f16e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f170:	a91b      	add	r1, sp, #108	@ 0x6c
 800f172:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f176:	f7ff fbd7 	bl	800e928 <__d2b>
 800f17a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f43f aede 	beq.w	800ef3e <_strtod_l+0x43e>
 800f182:	9805      	ldr	r0, [sp, #20]
 800f184:	2101      	movs	r1, #1
 800f186:	f7ff f929 	bl	800e3dc <__i2b>
 800f18a:	4680      	mov	r8, r0
 800f18c:	b948      	cbnz	r0, 800f1a2 <_strtod_l+0x6a2>
 800f18e:	f04f 0800 	mov.w	r8, #0
 800f192:	e6d4      	b.n	800ef3e <_strtod_l+0x43e>
 800f194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f198:	fa02 f303 	lsl.w	r3, r2, r3
 800f19c:	ea03 0a0a 	and.w	sl, r3, sl
 800f1a0:	e7b0      	b.n	800f104 <_strtod_l+0x604>
 800f1a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f1a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f1a6:	2d00      	cmp	r5, #0
 800f1a8:	bfab      	itete	ge
 800f1aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f1ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f1ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f1b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f1b2:	bfac      	ite	ge
 800f1b4:	18ef      	addge	r7, r5, r3
 800f1b6:	1b5e      	sublt	r6, r3, r5
 800f1b8:	9b08      	ldr	r3, [sp, #32]
 800f1ba:	1aed      	subs	r5, r5, r3
 800f1bc:	4415      	add	r5, r2
 800f1be:	4b66      	ldr	r3, [pc, #408]	@ (800f358 <_strtod_l+0x858>)
 800f1c0:	3d01      	subs	r5, #1
 800f1c2:	429d      	cmp	r5, r3
 800f1c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f1c8:	da50      	bge.n	800f26c <_strtod_l+0x76c>
 800f1ca:	1b5b      	subs	r3, r3, r5
 800f1cc:	2b1f      	cmp	r3, #31
 800f1ce:	eba2 0203 	sub.w	r2, r2, r3
 800f1d2:	f04f 0101 	mov.w	r1, #1
 800f1d6:	dc3d      	bgt.n	800f254 <_strtod_l+0x754>
 800f1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f1dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1de:	2300      	movs	r3, #0
 800f1e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1e2:	18bd      	adds	r5, r7, r2
 800f1e4:	9b08      	ldr	r3, [sp, #32]
 800f1e6:	42af      	cmp	r7, r5
 800f1e8:	4416      	add	r6, r2
 800f1ea:	441e      	add	r6, r3
 800f1ec:	463b      	mov	r3, r7
 800f1ee:	bfa8      	it	ge
 800f1f0:	462b      	movge	r3, r5
 800f1f2:	42b3      	cmp	r3, r6
 800f1f4:	bfa8      	it	ge
 800f1f6:	4633      	movge	r3, r6
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	bfc2      	ittt	gt
 800f1fc:	1aed      	subgt	r5, r5, r3
 800f1fe:	1af6      	subgt	r6, r6, r3
 800f200:	1aff      	subgt	r7, r7, r3
 800f202:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f204:	2b00      	cmp	r3, #0
 800f206:	dd16      	ble.n	800f236 <_strtod_l+0x736>
 800f208:	4641      	mov	r1, r8
 800f20a:	9805      	ldr	r0, [sp, #20]
 800f20c:	461a      	mov	r2, r3
 800f20e:	f7ff f9a5 	bl	800e55c <__pow5mult>
 800f212:	4680      	mov	r8, r0
 800f214:	2800      	cmp	r0, #0
 800f216:	d0ba      	beq.n	800f18e <_strtod_l+0x68e>
 800f218:	4601      	mov	r1, r0
 800f21a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f21c:	9805      	ldr	r0, [sp, #20]
 800f21e:	f7ff f8f3 	bl	800e408 <__multiply>
 800f222:	900e      	str	r0, [sp, #56]	@ 0x38
 800f224:	2800      	cmp	r0, #0
 800f226:	f43f ae8a 	beq.w	800ef3e <_strtod_l+0x43e>
 800f22a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f22c:	9805      	ldr	r0, [sp, #20]
 800f22e:	f7fe ffd7 	bl	800e1e0 <_Bfree>
 800f232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f234:	931a      	str	r3, [sp, #104]	@ 0x68
 800f236:	2d00      	cmp	r5, #0
 800f238:	dc1d      	bgt.n	800f276 <_strtod_l+0x776>
 800f23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd23      	ble.n	800f288 <_strtod_l+0x788>
 800f240:	4649      	mov	r1, r9
 800f242:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f244:	9805      	ldr	r0, [sp, #20]
 800f246:	f7ff f989 	bl	800e55c <__pow5mult>
 800f24a:	4681      	mov	r9, r0
 800f24c:	b9e0      	cbnz	r0, 800f288 <_strtod_l+0x788>
 800f24e:	f04f 0900 	mov.w	r9, #0
 800f252:	e674      	b.n	800ef3e <_strtod_l+0x43e>
 800f254:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f258:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f25c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f260:	35e2      	adds	r5, #226	@ 0xe2
 800f262:	fa01 f305 	lsl.w	r3, r1, r5
 800f266:	9310      	str	r3, [sp, #64]	@ 0x40
 800f268:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f26a:	e7ba      	b.n	800f1e2 <_strtod_l+0x6e2>
 800f26c:	2300      	movs	r3, #0
 800f26e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f270:	2301      	movs	r3, #1
 800f272:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f274:	e7b5      	b.n	800f1e2 <_strtod_l+0x6e2>
 800f276:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f278:	9805      	ldr	r0, [sp, #20]
 800f27a:	462a      	mov	r2, r5
 800f27c:	f7ff f9c8 	bl	800e610 <__lshift>
 800f280:	901a      	str	r0, [sp, #104]	@ 0x68
 800f282:	2800      	cmp	r0, #0
 800f284:	d1d9      	bne.n	800f23a <_strtod_l+0x73a>
 800f286:	e65a      	b.n	800ef3e <_strtod_l+0x43e>
 800f288:	2e00      	cmp	r6, #0
 800f28a:	dd07      	ble.n	800f29c <_strtod_l+0x79c>
 800f28c:	4649      	mov	r1, r9
 800f28e:	9805      	ldr	r0, [sp, #20]
 800f290:	4632      	mov	r2, r6
 800f292:	f7ff f9bd 	bl	800e610 <__lshift>
 800f296:	4681      	mov	r9, r0
 800f298:	2800      	cmp	r0, #0
 800f29a:	d0d8      	beq.n	800f24e <_strtod_l+0x74e>
 800f29c:	2f00      	cmp	r7, #0
 800f29e:	dd08      	ble.n	800f2b2 <_strtod_l+0x7b2>
 800f2a0:	4641      	mov	r1, r8
 800f2a2:	9805      	ldr	r0, [sp, #20]
 800f2a4:	463a      	mov	r2, r7
 800f2a6:	f7ff f9b3 	bl	800e610 <__lshift>
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f43f ae46 	beq.w	800ef3e <_strtod_l+0x43e>
 800f2b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2b4:	9805      	ldr	r0, [sp, #20]
 800f2b6:	464a      	mov	r2, r9
 800f2b8:	f7ff fa32 	bl	800e720 <__mdiff>
 800f2bc:	4604      	mov	r4, r0
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f43f ae3d 	beq.w	800ef3e <_strtod_l+0x43e>
 800f2c4:	68c3      	ldr	r3, [r0, #12]
 800f2c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60c3      	str	r3, [r0, #12]
 800f2cc:	4641      	mov	r1, r8
 800f2ce:	f7ff fa0b 	bl	800e6e8 <__mcmp>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	da46      	bge.n	800f364 <_strtod_l+0x864>
 800f2d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2d8:	ea53 030a 	orrs.w	r3, r3, sl
 800f2dc:	d16c      	bne.n	800f3b8 <_strtod_l+0x8b8>
 800f2de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d168      	bne.n	800f3b8 <_strtod_l+0x8b8>
 800f2e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2ea:	0d1b      	lsrs	r3, r3, #20
 800f2ec:	051b      	lsls	r3, r3, #20
 800f2ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2f2:	d961      	bls.n	800f3b8 <_strtod_l+0x8b8>
 800f2f4:	6963      	ldr	r3, [r4, #20]
 800f2f6:	b913      	cbnz	r3, 800f2fe <_strtod_l+0x7fe>
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	dd5c      	ble.n	800f3b8 <_strtod_l+0x8b8>
 800f2fe:	4621      	mov	r1, r4
 800f300:	2201      	movs	r2, #1
 800f302:	9805      	ldr	r0, [sp, #20]
 800f304:	f7ff f984 	bl	800e610 <__lshift>
 800f308:	4641      	mov	r1, r8
 800f30a:	4604      	mov	r4, r0
 800f30c:	f7ff f9ec 	bl	800e6e8 <__mcmp>
 800f310:	2800      	cmp	r0, #0
 800f312:	dd51      	ble.n	800f3b8 <_strtod_l+0x8b8>
 800f314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f318:	9a08      	ldr	r2, [sp, #32]
 800f31a:	0d1b      	lsrs	r3, r3, #20
 800f31c:	051b      	lsls	r3, r3, #20
 800f31e:	2a00      	cmp	r2, #0
 800f320:	d06b      	beq.n	800f3fa <_strtod_l+0x8fa>
 800f322:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f326:	d868      	bhi.n	800f3fa <_strtod_l+0x8fa>
 800f328:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f32c:	f67f ae9d 	bls.w	800f06a <_strtod_l+0x56a>
 800f330:	4b0a      	ldr	r3, [pc, #40]	@ (800f35c <_strtod_l+0x85c>)
 800f332:	4650      	mov	r0, sl
 800f334:	4659      	mov	r1, fp
 800f336:	2200      	movs	r2, #0
 800f338:	f7f1 f95e 	bl	80005f8 <__aeabi_dmul>
 800f33c:	4b08      	ldr	r3, [pc, #32]	@ (800f360 <_strtod_l+0x860>)
 800f33e:	400b      	ands	r3, r1
 800f340:	4682      	mov	sl, r0
 800f342:	468b      	mov	fp, r1
 800f344:	2b00      	cmp	r3, #0
 800f346:	f47f ae05 	bne.w	800ef54 <_strtod_l+0x454>
 800f34a:	9a05      	ldr	r2, [sp, #20]
 800f34c:	2322      	movs	r3, #34	@ 0x22
 800f34e:	6013      	str	r3, [r2, #0]
 800f350:	e600      	b.n	800ef54 <_strtod_l+0x454>
 800f352:	bf00      	nop
 800f354:	080115e8 	.word	0x080115e8
 800f358:	fffffc02 	.word	0xfffffc02
 800f35c:	39500000 	.word	0x39500000
 800f360:	7ff00000 	.word	0x7ff00000
 800f364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f368:	d165      	bne.n	800f436 <_strtod_l+0x936>
 800f36a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f36c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f370:	b35a      	cbz	r2, 800f3ca <_strtod_l+0x8ca>
 800f372:	4a9f      	ldr	r2, [pc, #636]	@ (800f5f0 <_strtod_l+0xaf0>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d12b      	bne.n	800f3d0 <_strtod_l+0x8d0>
 800f378:	9b08      	ldr	r3, [sp, #32]
 800f37a:	4651      	mov	r1, sl
 800f37c:	b303      	cbz	r3, 800f3c0 <_strtod_l+0x8c0>
 800f37e:	4b9d      	ldr	r3, [pc, #628]	@ (800f5f4 <_strtod_l+0xaf4>)
 800f380:	465a      	mov	r2, fp
 800f382:	4013      	ands	r3, r2
 800f384:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f38c:	d81b      	bhi.n	800f3c6 <_strtod_l+0x8c6>
 800f38e:	0d1b      	lsrs	r3, r3, #20
 800f390:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f394:	fa02 f303 	lsl.w	r3, r2, r3
 800f398:	4299      	cmp	r1, r3
 800f39a:	d119      	bne.n	800f3d0 <_strtod_l+0x8d0>
 800f39c:	4b96      	ldr	r3, [pc, #600]	@ (800f5f8 <_strtod_l+0xaf8>)
 800f39e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d102      	bne.n	800f3aa <_strtod_l+0x8aa>
 800f3a4:	3101      	adds	r1, #1
 800f3a6:	f43f adca 	beq.w	800ef3e <_strtod_l+0x43e>
 800f3aa:	4b92      	ldr	r3, [pc, #584]	@ (800f5f4 <_strtod_l+0xaf4>)
 800f3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3ae:	401a      	ands	r2, r3
 800f3b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f3b4:	f04f 0a00 	mov.w	sl, #0
 800f3b8:	9b08      	ldr	r3, [sp, #32]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1b8      	bne.n	800f330 <_strtod_l+0x830>
 800f3be:	e5c9      	b.n	800ef54 <_strtod_l+0x454>
 800f3c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3c4:	e7e8      	b.n	800f398 <_strtod_l+0x898>
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	e7e6      	b.n	800f398 <_strtod_l+0x898>
 800f3ca:	ea53 030a 	orrs.w	r3, r3, sl
 800f3ce:	d0a1      	beq.n	800f314 <_strtod_l+0x814>
 800f3d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3d2:	b1db      	cbz	r3, 800f40c <_strtod_l+0x90c>
 800f3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3d6:	4213      	tst	r3, r2
 800f3d8:	d0ee      	beq.n	800f3b8 <_strtod_l+0x8b8>
 800f3da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3dc:	9a08      	ldr	r2, [sp, #32]
 800f3de:	4650      	mov	r0, sl
 800f3e0:	4659      	mov	r1, fp
 800f3e2:	b1bb      	cbz	r3, 800f414 <_strtod_l+0x914>
 800f3e4:	f7ff fb6e 	bl	800eac4 <sulp>
 800f3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3ec:	ec53 2b10 	vmov	r2, r3, d0
 800f3f0:	f7f0 ff4c 	bl	800028c <__adddf3>
 800f3f4:	4682      	mov	sl, r0
 800f3f6:	468b      	mov	fp, r1
 800f3f8:	e7de      	b.n	800f3b8 <_strtod_l+0x8b8>
 800f3fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f402:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f406:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f40a:	e7d5      	b.n	800f3b8 <_strtod_l+0x8b8>
 800f40c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f40e:	ea13 0f0a 	tst.w	r3, sl
 800f412:	e7e1      	b.n	800f3d8 <_strtod_l+0x8d8>
 800f414:	f7ff fb56 	bl	800eac4 <sulp>
 800f418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f41c:	ec53 2b10 	vmov	r2, r3, d0
 800f420:	f7f0 ff32 	bl	8000288 <__aeabi_dsub>
 800f424:	2200      	movs	r2, #0
 800f426:	2300      	movs	r3, #0
 800f428:	4682      	mov	sl, r0
 800f42a:	468b      	mov	fp, r1
 800f42c:	f7f1 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f430:	2800      	cmp	r0, #0
 800f432:	d0c1      	beq.n	800f3b8 <_strtod_l+0x8b8>
 800f434:	e619      	b.n	800f06a <_strtod_l+0x56a>
 800f436:	4641      	mov	r1, r8
 800f438:	4620      	mov	r0, r4
 800f43a:	f7ff facd 	bl	800e9d8 <__ratio>
 800f43e:	ec57 6b10 	vmov	r6, r7, d0
 800f442:	2200      	movs	r2, #0
 800f444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f448:	4630      	mov	r0, r6
 800f44a:	4639      	mov	r1, r7
 800f44c:	f7f1 fb50 	bl	8000af0 <__aeabi_dcmple>
 800f450:	2800      	cmp	r0, #0
 800f452:	d06f      	beq.n	800f534 <_strtod_l+0xa34>
 800f454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f456:	2b00      	cmp	r3, #0
 800f458:	d17a      	bne.n	800f550 <_strtod_l+0xa50>
 800f45a:	f1ba 0f00 	cmp.w	sl, #0
 800f45e:	d158      	bne.n	800f512 <_strtod_l+0xa12>
 800f460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f466:	2b00      	cmp	r3, #0
 800f468:	d15a      	bne.n	800f520 <_strtod_l+0xa20>
 800f46a:	4b64      	ldr	r3, [pc, #400]	@ (800f5fc <_strtod_l+0xafc>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	4630      	mov	r0, r6
 800f470:	4639      	mov	r1, r7
 800f472:	f7f1 fb33 	bl	8000adc <__aeabi_dcmplt>
 800f476:	2800      	cmp	r0, #0
 800f478:	d159      	bne.n	800f52e <_strtod_l+0xa2e>
 800f47a:	4630      	mov	r0, r6
 800f47c:	4639      	mov	r1, r7
 800f47e:	4b60      	ldr	r3, [pc, #384]	@ (800f600 <_strtod_l+0xb00>)
 800f480:	2200      	movs	r2, #0
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	4606      	mov	r6, r0
 800f488:	460f      	mov	r7, r1
 800f48a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f48e:	9606      	str	r6, [sp, #24]
 800f490:	9307      	str	r3, [sp, #28]
 800f492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f496:	4d57      	ldr	r5, [pc, #348]	@ (800f5f4 <_strtod_l+0xaf4>)
 800f498:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f49e:	401d      	ands	r5, r3
 800f4a0:	4b58      	ldr	r3, [pc, #352]	@ (800f604 <_strtod_l+0xb04>)
 800f4a2:	429d      	cmp	r5, r3
 800f4a4:	f040 80b2 	bne.w	800f60c <_strtod_l+0xb0c>
 800f4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f4ae:	ec4b ab10 	vmov	d0, sl, fp
 800f4b2:	f7ff f9c9 	bl	800e848 <__ulp>
 800f4b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4ba:	ec51 0b10 	vmov	r0, r1, d0
 800f4be:	f7f1 f89b 	bl	80005f8 <__aeabi_dmul>
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	f7f0 fee1 	bl	800028c <__adddf3>
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	4949      	ldr	r1, [pc, #292]	@ (800f5f4 <_strtod_l+0xaf4>)
 800f4ce:	4a4e      	ldr	r2, [pc, #312]	@ (800f608 <_strtod_l+0xb08>)
 800f4d0:	4019      	ands	r1, r3
 800f4d2:	4291      	cmp	r1, r2
 800f4d4:	4682      	mov	sl, r0
 800f4d6:	d942      	bls.n	800f55e <_strtod_l+0xa5e>
 800f4d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4da:	4b47      	ldr	r3, [pc, #284]	@ (800f5f8 <_strtod_l+0xaf8>)
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d103      	bne.n	800f4e8 <_strtod_l+0x9e8>
 800f4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	f43f ad2b 	beq.w	800ef3e <_strtod_l+0x43e>
 800f4e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f5f8 <_strtod_l+0xaf8>
 800f4ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f4f2:	9805      	ldr	r0, [sp, #20]
 800f4f4:	f7fe fe74 	bl	800e1e0 <_Bfree>
 800f4f8:	9805      	ldr	r0, [sp, #20]
 800f4fa:	4649      	mov	r1, r9
 800f4fc:	f7fe fe70 	bl	800e1e0 <_Bfree>
 800f500:	9805      	ldr	r0, [sp, #20]
 800f502:	4641      	mov	r1, r8
 800f504:	f7fe fe6c 	bl	800e1e0 <_Bfree>
 800f508:	9805      	ldr	r0, [sp, #20]
 800f50a:	4621      	mov	r1, r4
 800f50c:	f7fe fe68 	bl	800e1e0 <_Bfree>
 800f510:	e618      	b.n	800f144 <_strtod_l+0x644>
 800f512:	f1ba 0f01 	cmp.w	sl, #1
 800f516:	d103      	bne.n	800f520 <_strtod_l+0xa20>
 800f518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f43f ada5 	beq.w	800f06a <_strtod_l+0x56a>
 800f520:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f5d0 <_strtod_l+0xad0>
 800f524:	4f35      	ldr	r7, [pc, #212]	@ (800f5fc <_strtod_l+0xafc>)
 800f526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f52a:	2600      	movs	r6, #0
 800f52c:	e7b1      	b.n	800f492 <_strtod_l+0x992>
 800f52e:	4f34      	ldr	r7, [pc, #208]	@ (800f600 <_strtod_l+0xb00>)
 800f530:	2600      	movs	r6, #0
 800f532:	e7aa      	b.n	800f48a <_strtod_l+0x98a>
 800f534:	4b32      	ldr	r3, [pc, #200]	@ (800f600 <_strtod_l+0xb00>)
 800f536:	4630      	mov	r0, r6
 800f538:	4639      	mov	r1, r7
 800f53a:	2200      	movs	r2, #0
 800f53c:	f7f1 f85c 	bl	80005f8 <__aeabi_dmul>
 800f540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f542:	4606      	mov	r6, r0
 800f544:	460f      	mov	r7, r1
 800f546:	2b00      	cmp	r3, #0
 800f548:	d09f      	beq.n	800f48a <_strtod_l+0x98a>
 800f54a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f54e:	e7a0      	b.n	800f492 <_strtod_l+0x992>
 800f550:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f5d8 <_strtod_l+0xad8>
 800f554:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f558:	ec57 6b17 	vmov	r6, r7, d7
 800f55c:	e799      	b.n	800f492 <_strtod_l+0x992>
 800f55e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f562:	9b08      	ldr	r3, [sp, #32]
 800f564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1c1      	bne.n	800f4f0 <_strtod_l+0x9f0>
 800f56c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f570:	0d1b      	lsrs	r3, r3, #20
 800f572:	051b      	lsls	r3, r3, #20
 800f574:	429d      	cmp	r5, r3
 800f576:	d1bb      	bne.n	800f4f0 <_strtod_l+0x9f0>
 800f578:	4630      	mov	r0, r6
 800f57a:	4639      	mov	r1, r7
 800f57c:	f7f1 fb9c 	bl	8000cb8 <__aeabi_d2lz>
 800f580:	f7f1 f80c 	bl	800059c <__aeabi_l2d>
 800f584:	4602      	mov	r2, r0
 800f586:	460b      	mov	r3, r1
 800f588:	4630      	mov	r0, r6
 800f58a:	4639      	mov	r1, r7
 800f58c:	f7f0 fe7c 	bl	8000288 <__aeabi_dsub>
 800f590:	460b      	mov	r3, r1
 800f592:	4602      	mov	r2, r0
 800f594:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f598:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f59e:	ea46 060a 	orr.w	r6, r6, sl
 800f5a2:	431e      	orrs	r6, r3
 800f5a4:	d06f      	beq.n	800f686 <_strtod_l+0xb86>
 800f5a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f5e0 <_strtod_l+0xae0>)
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	f7f1 fa96 	bl	8000adc <__aeabi_dcmplt>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	f47f accf 	bne.w	800ef54 <_strtod_l+0x454>
 800f5b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f5e8 <_strtod_l+0xae8>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5c0:	f7f1 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d093      	beq.n	800f4f0 <_strtod_l+0x9f0>
 800f5c8:	e4c4      	b.n	800ef54 <_strtod_l+0x454>
 800f5ca:	bf00      	nop
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	00000000 	.word	0x00000000
 800f5d4:	bff00000 	.word	0xbff00000
 800f5d8:	00000000 	.word	0x00000000
 800f5dc:	3ff00000 	.word	0x3ff00000
 800f5e0:	94a03595 	.word	0x94a03595
 800f5e4:	3fdfffff 	.word	0x3fdfffff
 800f5e8:	35afe535 	.word	0x35afe535
 800f5ec:	3fe00000 	.word	0x3fe00000
 800f5f0:	000fffff 	.word	0x000fffff
 800f5f4:	7ff00000 	.word	0x7ff00000
 800f5f8:	7fefffff 	.word	0x7fefffff
 800f5fc:	3ff00000 	.word	0x3ff00000
 800f600:	3fe00000 	.word	0x3fe00000
 800f604:	7fe00000 	.word	0x7fe00000
 800f608:	7c9fffff 	.word	0x7c9fffff
 800f60c:	9b08      	ldr	r3, [sp, #32]
 800f60e:	b323      	cbz	r3, 800f65a <_strtod_l+0xb5a>
 800f610:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f614:	d821      	bhi.n	800f65a <_strtod_l+0xb5a>
 800f616:	a328      	add	r3, pc, #160	@ (adr r3, 800f6b8 <_strtod_l+0xbb8>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f1 fa66 	bl	8000af0 <__aeabi_dcmple>
 800f624:	b1a0      	cbz	r0, 800f650 <_strtod_l+0xb50>
 800f626:	4639      	mov	r1, r7
 800f628:	4630      	mov	r0, r6
 800f62a:	f7f1 fabd 	bl	8000ba8 <__aeabi_d2uiz>
 800f62e:	2801      	cmp	r0, #1
 800f630:	bf38      	it	cc
 800f632:	2001      	movcc	r0, #1
 800f634:	f7f0 ff66 	bl	8000504 <__aeabi_ui2d>
 800f638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f63a:	4606      	mov	r6, r0
 800f63c:	460f      	mov	r7, r1
 800f63e:	b9fb      	cbnz	r3, 800f680 <_strtod_l+0xb80>
 800f640:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f644:	9014      	str	r0, [sp, #80]	@ 0x50
 800f646:	9315      	str	r3, [sp, #84]	@ 0x54
 800f648:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f64c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f652:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f656:	1b5b      	subs	r3, r3, r5
 800f658:	9311      	str	r3, [sp, #68]	@ 0x44
 800f65a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f65e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f662:	f7ff f8f1 	bl	800e848 <__ulp>
 800f666:	4650      	mov	r0, sl
 800f668:	ec53 2b10 	vmov	r2, r3, d0
 800f66c:	4659      	mov	r1, fp
 800f66e:	f7f0 ffc3 	bl	80005f8 <__aeabi_dmul>
 800f672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f676:	f7f0 fe09 	bl	800028c <__adddf3>
 800f67a:	4682      	mov	sl, r0
 800f67c:	468b      	mov	fp, r1
 800f67e:	e770      	b.n	800f562 <_strtod_l+0xa62>
 800f680:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f684:	e7e0      	b.n	800f648 <_strtod_l+0xb48>
 800f686:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6c0 <_strtod_l+0xbc0>)
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f7f1 fa26 	bl	8000adc <__aeabi_dcmplt>
 800f690:	e798      	b.n	800f5c4 <_strtod_l+0xac4>
 800f692:	2300      	movs	r3, #0
 800f694:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f696:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	f7ff ba6d 	b.w	800eb7a <_strtod_l+0x7a>
 800f6a0:	2a65      	cmp	r2, #101	@ 0x65
 800f6a2:	f43f ab66 	beq.w	800ed72 <_strtod_l+0x272>
 800f6a6:	2a45      	cmp	r2, #69	@ 0x45
 800f6a8:	f43f ab63 	beq.w	800ed72 <_strtod_l+0x272>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	f7ff bb9e 	b.w	800edee <_strtod_l+0x2ee>
 800f6b2:	bf00      	nop
 800f6b4:	f3af 8000 	nop.w
 800f6b8:	ffc00000 	.word	0xffc00000
 800f6bc:	41dfffff 	.word	0x41dfffff
 800f6c0:	94a03595 	.word	0x94a03595
 800f6c4:	3fcfffff 	.word	0x3fcfffff

0800f6c8 <_strtod_r>:
 800f6c8:	4b01      	ldr	r3, [pc, #4]	@ (800f6d0 <_strtod_r+0x8>)
 800f6ca:	f7ff ba19 	b.w	800eb00 <_strtod_l>
 800f6ce:	bf00      	nop
 800f6d0:	20000204 	.word	0x20000204

0800f6d4 <_strtol_l.constprop.0>:
 800f6d4:	2b24      	cmp	r3, #36	@ 0x24
 800f6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6da:	4686      	mov	lr, r0
 800f6dc:	4690      	mov	r8, r2
 800f6de:	d801      	bhi.n	800f6e4 <_strtol_l.constprop.0+0x10>
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d106      	bne.n	800f6f2 <_strtol_l.constprop.0+0x1e>
 800f6e4:	f7fd fdbc 	bl	800d260 <__errno>
 800f6e8:	2316      	movs	r3, #22
 800f6ea:	6003      	str	r3, [r0, #0]
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6f2:	4834      	ldr	r0, [pc, #208]	@ (800f7c4 <_strtol_l.constprop.0+0xf0>)
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	462a      	mov	r2, r5
 800f6f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6fc:	5d06      	ldrb	r6, [r0, r4]
 800f6fe:	f016 0608 	ands.w	r6, r6, #8
 800f702:	d1f8      	bne.n	800f6f6 <_strtol_l.constprop.0+0x22>
 800f704:	2c2d      	cmp	r4, #45	@ 0x2d
 800f706:	d12d      	bne.n	800f764 <_strtol_l.constprop.0+0x90>
 800f708:	782c      	ldrb	r4, [r5, #0]
 800f70a:	2601      	movs	r6, #1
 800f70c:	1c95      	adds	r5, r2, #2
 800f70e:	f033 0210 	bics.w	r2, r3, #16
 800f712:	d109      	bne.n	800f728 <_strtol_l.constprop.0+0x54>
 800f714:	2c30      	cmp	r4, #48	@ 0x30
 800f716:	d12a      	bne.n	800f76e <_strtol_l.constprop.0+0x9a>
 800f718:	782a      	ldrb	r2, [r5, #0]
 800f71a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f71e:	2a58      	cmp	r2, #88	@ 0x58
 800f720:	d125      	bne.n	800f76e <_strtol_l.constprop.0+0x9a>
 800f722:	786c      	ldrb	r4, [r5, #1]
 800f724:	2310      	movs	r3, #16
 800f726:	3502      	adds	r5, #2
 800f728:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f72c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f730:	2200      	movs	r2, #0
 800f732:	fbbc f9f3 	udiv	r9, ip, r3
 800f736:	4610      	mov	r0, r2
 800f738:	fb03 ca19 	mls	sl, r3, r9, ip
 800f73c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f740:	2f09      	cmp	r7, #9
 800f742:	d81b      	bhi.n	800f77c <_strtol_l.constprop.0+0xa8>
 800f744:	463c      	mov	r4, r7
 800f746:	42a3      	cmp	r3, r4
 800f748:	dd27      	ble.n	800f79a <_strtol_l.constprop.0+0xc6>
 800f74a:	1c57      	adds	r7, r2, #1
 800f74c:	d007      	beq.n	800f75e <_strtol_l.constprop.0+0x8a>
 800f74e:	4581      	cmp	r9, r0
 800f750:	d320      	bcc.n	800f794 <_strtol_l.constprop.0+0xc0>
 800f752:	d101      	bne.n	800f758 <_strtol_l.constprop.0+0x84>
 800f754:	45a2      	cmp	sl, r4
 800f756:	db1d      	blt.n	800f794 <_strtol_l.constprop.0+0xc0>
 800f758:	fb00 4003 	mla	r0, r0, r3, r4
 800f75c:	2201      	movs	r2, #1
 800f75e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f762:	e7eb      	b.n	800f73c <_strtol_l.constprop.0+0x68>
 800f764:	2c2b      	cmp	r4, #43	@ 0x2b
 800f766:	bf04      	itt	eq
 800f768:	782c      	ldrbeq	r4, [r5, #0]
 800f76a:	1c95      	addeq	r5, r2, #2
 800f76c:	e7cf      	b.n	800f70e <_strtol_l.constprop.0+0x3a>
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1da      	bne.n	800f728 <_strtol_l.constprop.0+0x54>
 800f772:	2c30      	cmp	r4, #48	@ 0x30
 800f774:	bf0c      	ite	eq
 800f776:	2308      	moveq	r3, #8
 800f778:	230a      	movne	r3, #10
 800f77a:	e7d5      	b.n	800f728 <_strtol_l.constprop.0+0x54>
 800f77c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f780:	2f19      	cmp	r7, #25
 800f782:	d801      	bhi.n	800f788 <_strtol_l.constprop.0+0xb4>
 800f784:	3c37      	subs	r4, #55	@ 0x37
 800f786:	e7de      	b.n	800f746 <_strtol_l.constprop.0+0x72>
 800f788:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f78c:	2f19      	cmp	r7, #25
 800f78e:	d804      	bhi.n	800f79a <_strtol_l.constprop.0+0xc6>
 800f790:	3c57      	subs	r4, #87	@ 0x57
 800f792:	e7d8      	b.n	800f746 <_strtol_l.constprop.0+0x72>
 800f794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f798:	e7e1      	b.n	800f75e <_strtol_l.constprop.0+0x8a>
 800f79a:	1c53      	adds	r3, r2, #1
 800f79c:	d108      	bne.n	800f7b0 <_strtol_l.constprop.0+0xdc>
 800f79e:	2322      	movs	r3, #34	@ 0x22
 800f7a0:	f8ce 3000 	str.w	r3, [lr]
 800f7a4:	4660      	mov	r0, ip
 800f7a6:	f1b8 0f00 	cmp.w	r8, #0
 800f7aa:	d0a0      	beq.n	800f6ee <_strtol_l.constprop.0+0x1a>
 800f7ac:	1e69      	subs	r1, r5, #1
 800f7ae:	e006      	b.n	800f7be <_strtol_l.constprop.0+0xea>
 800f7b0:	b106      	cbz	r6, 800f7b4 <_strtol_l.constprop.0+0xe0>
 800f7b2:	4240      	negs	r0, r0
 800f7b4:	f1b8 0f00 	cmp.w	r8, #0
 800f7b8:	d099      	beq.n	800f6ee <_strtol_l.constprop.0+0x1a>
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	d1f6      	bne.n	800f7ac <_strtol_l.constprop.0+0xd8>
 800f7be:	f8c8 1000 	str.w	r1, [r8]
 800f7c2:	e794      	b.n	800f6ee <_strtol_l.constprop.0+0x1a>
 800f7c4:	08011611 	.word	0x08011611

0800f7c8 <_strtol_r>:
 800f7c8:	f7ff bf84 	b.w	800f6d4 <_strtol_l.constprop.0>

0800f7cc <__ssputs_r>:
 800f7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d0:	688e      	ldr	r6, [r1, #8]
 800f7d2:	461f      	mov	r7, r3
 800f7d4:	42be      	cmp	r6, r7
 800f7d6:	680b      	ldr	r3, [r1, #0]
 800f7d8:	4682      	mov	sl, r0
 800f7da:	460c      	mov	r4, r1
 800f7dc:	4690      	mov	r8, r2
 800f7de:	d82d      	bhi.n	800f83c <__ssputs_r+0x70>
 800f7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f7e8:	d026      	beq.n	800f838 <__ssputs_r+0x6c>
 800f7ea:	6965      	ldr	r5, [r4, #20]
 800f7ec:	6909      	ldr	r1, [r1, #16]
 800f7ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7f2:	eba3 0901 	sub.w	r9, r3, r1
 800f7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7fa:	1c7b      	adds	r3, r7, #1
 800f7fc:	444b      	add	r3, r9
 800f7fe:	106d      	asrs	r5, r5, #1
 800f800:	429d      	cmp	r5, r3
 800f802:	bf38      	it	cc
 800f804:	461d      	movcc	r5, r3
 800f806:	0553      	lsls	r3, r2, #21
 800f808:	d527      	bpl.n	800f85a <__ssputs_r+0x8e>
 800f80a:	4629      	mov	r1, r5
 800f80c:	f7fe fc1c 	bl	800e048 <_malloc_r>
 800f810:	4606      	mov	r6, r0
 800f812:	b360      	cbz	r0, 800f86e <__ssputs_r+0xa2>
 800f814:	6921      	ldr	r1, [r4, #16]
 800f816:	464a      	mov	r2, r9
 800f818:	f000 fda6 	bl	8010368 <memcpy>
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f826:	81a3      	strh	r3, [r4, #12]
 800f828:	6126      	str	r6, [r4, #16]
 800f82a:	6165      	str	r5, [r4, #20]
 800f82c:	444e      	add	r6, r9
 800f82e:	eba5 0509 	sub.w	r5, r5, r9
 800f832:	6026      	str	r6, [r4, #0]
 800f834:	60a5      	str	r5, [r4, #8]
 800f836:	463e      	mov	r6, r7
 800f838:	42be      	cmp	r6, r7
 800f83a:	d900      	bls.n	800f83e <__ssputs_r+0x72>
 800f83c:	463e      	mov	r6, r7
 800f83e:	6820      	ldr	r0, [r4, #0]
 800f840:	4632      	mov	r2, r6
 800f842:	4641      	mov	r1, r8
 800f844:	f000 fd53 	bl	80102ee <memmove>
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	1b9b      	subs	r3, r3, r6
 800f84c:	60a3      	str	r3, [r4, #8]
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	4433      	add	r3, r6
 800f852:	6023      	str	r3, [r4, #0]
 800f854:	2000      	movs	r0, #0
 800f856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f85a:	462a      	mov	r2, r5
 800f85c:	f001 f919 	bl	8010a92 <_realloc_r>
 800f860:	4606      	mov	r6, r0
 800f862:	2800      	cmp	r0, #0
 800f864:	d1e0      	bne.n	800f828 <__ssputs_r+0x5c>
 800f866:	6921      	ldr	r1, [r4, #16]
 800f868:	4650      	mov	r0, sl
 800f86a:	f7fe fb79 	bl	800df60 <_free_r>
 800f86e:	230c      	movs	r3, #12
 800f870:	f8ca 3000 	str.w	r3, [sl]
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f87a:	81a3      	strh	r3, [r4, #12]
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f880:	e7e9      	b.n	800f856 <__ssputs_r+0x8a>
	...

0800f884 <_svfiprintf_r>:
 800f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f888:	4698      	mov	r8, r3
 800f88a:	898b      	ldrh	r3, [r1, #12]
 800f88c:	061b      	lsls	r3, r3, #24
 800f88e:	b09d      	sub	sp, #116	@ 0x74
 800f890:	4607      	mov	r7, r0
 800f892:	460d      	mov	r5, r1
 800f894:	4614      	mov	r4, r2
 800f896:	d510      	bpl.n	800f8ba <_svfiprintf_r+0x36>
 800f898:	690b      	ldr	r3, [r1, #16]
 800f89a:	b973      	cbnz	r3, 800f8ba <_svfiprintf_r+0x36>
 800f89c:	2140      	movs	r1, #64	@ 0x40
 800f89e:	f7fe fbd3 	bl	800e048 <_malloc_r>
 800f8a2:	6028      	str	r0, [r5, #0]
 800f8a4:	6128      	str	r0, [r5, #16]
 800f8a6:	b930      	cbnz	r0, 800f8b6 <_svfiprintf_r+0x32>
 800f8a8:	230c      	movs	r3, #12
 800f8aa:	603b      	str	r3, [r7, #0]
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8b0:	b01d      	add	sp, #116	@ 0x74
 800f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b6:	2340      	movs	r3, #64	@ 0x40
 800f8b8:	616b      	str	r3, [r5, #20]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8be:	2320      	movs	r3, #32
 800f8c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8c8:	2330      	movs	r3, #48	@ 0x30
 800f8ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fa68 <_svfiprintf_r+0x1e4>
 800f8ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8d2:	f04f 0901 	mov.w	r9, #1
 800f8d6:	4623      	mov	r3, r4
 800f8d8:	469a      	mov	sl, r3
 800f8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8de:	b10a      	cbz	r2, 800f8e4 <_svfiprintf_r+0x60>
 800f8e0:	2a25      	cmp	r2, #37	@ 0x25
 800f8e2:	d1f9      	bne.n	800f8d8 <_svfiprintf_r+0x54>
 800f8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f8e8:	d00b      	beq.n	800f902 <_svfiprintf_r+0x7e>
 800f8ea:	465b      	mov	r3, fp
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	f7ff ff6b 	bl	800f7cc <__ssputs_r>
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	f000 80a7 	beq.w	800fa4a <_svfiprintf_r+0x1c6>
 800f8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8fe:	445a      	add	r2, fp
 800f900:	9209      	str	r2, [sp, #36]	@ 0x24
 800f902:	f89a 3000 	ldrb.w	r3, [sl]
 800f906:	2b00      	cmp	r3, #0
 800f908:	f000 809f 	beq.w	800fa4a <_svfiprintf_r+0x1c6>
 800f90c:	2300      	movs	r3, #0
 800f90e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f916:	f10a 0a01 	add.w	sl, sl, #1
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	9307      	str	r3, [sp, #28]
 800f91e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f922:	931a      	str	r3, [sp, #104]	@ 0x68
 800f924:	4654      	mov	r4, sl
 800f926:	2205      	movs	r2, #5
 800f928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f92c:	484e      	ldr	r0, [pc, #312]	@ (800fa68 <_svfiprintf_r+0x1e4>)
 800f92e:	f7f0 fc4f 	bl	80001d0 <memchr>
 800f932:	9a04      	ldr	r2, [sp, #16]
 800f934:	b9d8      	cbnz	r0, 800f96e <_svfiprintf_r+0xea>
 800f936:	06d0      	lsls	r0, r2, #27
 800f938:	bf44      	itt	mi
 800f93a:	2320      	movmi	r3, #32
 800f93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f940:	0711      	lsls	r1, r2, #28
 800f942:	bf44      	itt	mi
 800f944:	232b      	movmi	r3, #43	@ 0x2b
 800f946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f94a:	f89a 3000 	ldrb.w	r3, [sl]
 800f94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f950:	d015      	beq.n	800f97e <_svfiprintf_r+0xfa>
 800f952:	9a07      	ldr	r2, [sp, #28]
 800f954:	4654      	mov	r4, sl
 800f956:	2000      	movs	r0, #0
 800f958:	f04f 0c0a 	mov.w	ip, #10
 800f95c:	4621      	mov	r1, r4
 800f95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f962:	3b30      	subs	r3, #48	@ 0x30
 800f964:	2b09      	cmp	r3, #9
 800f966:	d94b      	bls.n	800fa00 <_svfiprintf_r+0x17c>
 800f968:	b1b0      	cbz	r0, 800f998 <_svfiprintf_r+0x114>
 800f96a:	9207      	str	r2, [sp, #28]
 800f96c:	e014      	b.n	800f998 <_svfiprintf_r+0x114>
 800f96e:	eba0 0308 	sub.w	r3, r0, r8
 800f972:	fa09 f303 	lsl.w	r3, r9, r3
 800f976:	4313      	orrs	r3, r2
 800f978:	9304      	str	r3, [sp, #16]
 800f97a:	46a2      	mov	sl, r4
 800f97c:	e7d2      	b.n	800f924 <_svfiprintf_r+0xa0>
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	1d19      	adds	r1, r3, #4
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	9103      	str	r1, [sp, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	bfbb      	ittet	lt
 800f98a:	425b      	neglt	r3, r3
 800f98c:	f042 0202 	orrlt.w	r2, r2, #2
 800f990:	9307      	strge	r3, [sp, #28]
 800f992:	9307      	strlt	r3, [sp, #28]
 800f994:	bfb8      	it	lt
 800f996:	9204      	strlt	r2, [sp, #16]
 800f998:	7823      	ldrb	r3, [r4, #0]
 800f99a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f99c:	d10a      	bne.n	800f9b4 <_svfiprintf_r+0x130>
 800f99e:	7863      	ldrb	r3, [r4, #1]
 800f9a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9a2:	d132      	bne.n	800fa0a <_svfiprintf_r+0x186>
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	1d1a      	adds	r2, r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	9203      	str	r2, [sp, #12]
 800f9ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9b0:	3402      	adds	r4, #2
 800f9b2:	9305      	str	r3, [sp, #20]
 800f9b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fa78 <_svfiprintf_r+0x1f4>
 800f9b8:	7821      	ldrb	r1, [r4, #0]
 800f9ba:	2203      	movs	r2, #3
 800f9bc:	4650      	mov	r0, sl
 800f9be:	f7f0 fc07 	bl	80001d0 <memchr>
 800f9c2:	b138      	cbz	r0, 800f9d4 <_svfiprintf_r+0x150>
 800f9c4:	9b04      	ldr	r3, [sp, #16]
 800f9c6:	eba0 000a 	sub.w	r0, r0, sl
 800f9ca:	2240      	movs	r2, #64	@ 0x40
 800f9cc:	4082      	lsls	r2, r0
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	3401      	adds	r4, #1
 800f9d2:	9304      	str	r3, [sp, #16]
 800f9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9d8:	4824      	ldr	r0, [pc, #144]	@ (800fa6c <_svfiprintf_r+0x1e8>)
 800f9da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9de:	2206      	movs	r2, #6
 800f9e0:	f7f0 fbf6 	bl	80001d0 <memchr>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d036      	beq.n	800fa56 <_svfiprintf_r+0x1d2>
 800f9e8:	4b21      	ldr	r3, [pc, #132]	@ (800fa70 <_svfiprintf_r+0x1ec>)
 800f9ea:	bb1b      	cbnz	r3, 800fa34 <_svfiprintf_r+0x1b0>
 800f9ec:	9b03      	ldr	r3, [sp, #12]
 800f9ee:	3307      	adds	r3, #7
 800f9f0:	f023 0307 	bic.w	r3, r3, #7
 800f9f4:	3308      	adds	r3, #8
 800f9f6:	9303      	str	r3, [sp, #12]
 800f9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9fa:	4433      	add	r3, r6
 800f9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9fe:	e76a      	b.n	800f8d6 <_svfiprintf_r+0x52>
 800fa00:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa04:	460c      	mov	r4, r1
 800fa06:	2001      	movs	r0, #1
 800fa08:	e7a8      	b.n	800f95c <_svfiprintf_r+0xd8>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	3401      	adds	r4, #1
 800fa0e:	9305      	str	r3, [sp, #20]
 800fa10:	4619      	mov	r1, r3
 800fa12:	f04f 0c0a 	mov.w	ip, #10
 800fa16:	4620      	mov	r0, r4
 800fa18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa1c:	3a30      	subs	r2, #48	@ 0x30
 800fa1e:	2a09      	cmp	r2, #9
 800fa20:	d903      	bls.n	800fa2a <_svfiprintf_r+0x1a6>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d0c6      	beq.n	800f9b4 <_svfiprintf_r+0x130>
 800fa26:	9105      	str	r1, [sp, #20]
 800fa28:	e7c4      	b.n	800f9b4 <_svfiprintf_r+0x130>
 800fa2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa2e:	4604      	mov	r4, r0
 800fa30:	2301      	movs	r3, #1
 800fa32:	e7f0      	b.n	800fa16 <_svfiprintf_r+0x192>
 800fa34:	ab03      	add	r3, sp, #12
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	462a      	mov	r2, r5
 800fa3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa74 <_svfiprintf_r+0x1f0>)
 800fa3c:	a904      	add	r1, sp, #16
 800fa3e:	4638      	mov	r0, r7
 800fa40:	f7fc fc54 	bl	800c2ec <_printf_float>
 800fa44:	1c42      	adds	r2, r0, #1
 800fa46:	4606      	mov	r6, r0
 800fa48:	d1d6      	bne.n	800f9f8 <_svfiprintf_r+0x174>
 800fa4a:	89ab      	ldrh	r3, [r5, #12]
 800fa4c:	065b      	lsls	r3, r3, #25
 800fa4e:	f53f af2d 	bmi.w	800f8ac <_svfiprintf_r+0x28>
 800fa52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa54:	e72c      	b.n	800f8b0 <_svfiprintf_r+0x2c>
 800fa56:	ab03      	add	r3, sp, #12
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	462a      	mov	r2, r5
 800fa5c:	4b05      	ldr	r3, [pc, #20]	@ (800fa74 <_svfiprintf_r+0x1f0>)
 800fa5e:	a904      	add	r1, sp, #16
 800fa60:	4638      	mov	r0, r7
 800fa62:	f7fc fedb 	bl	800c81c <_printf_i>
 800fa66:	e7ed      	b.n	800fa44 <_svfiprintf_r+0x1c0>
 800fa68:	08011711 	.word	0x08011711
 800fa6c:	0801171b 	.word	0x0801171b
 800fa70:	0800c2ed 	.word	0x0800c2ed
 800fa74:	0800f7cd 	.word	0x0800f7cd
 800fa78:	08011717 	.word	0x08011717

0800fa7c <_sungetc_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	1c4b      	adds	r3, r1, #1
 800fa80:	4614      	mov	r4, r2
 800fa82:	d103      	bne.n	800fa8c <_sungetc_r+0x10>
 800fa84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800fa88:	4628      	mov	r0, r5
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	8993      	ldrh	r3, [r2, #12]
 800fa8e:	f023 0320 	bic.w	r3, r3, #32
 800fa92:	8193      	strh	r3, [r2, #12]
 800fa94:	6853      	ldr	r3, [r2, #4]
 800fa96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fa98:	b2cd      	uxtb	r5, r1
 800fa9a:	b18a      	cbz	r2, 800fac0 <_sungetc_r+0x44>
 800fa9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	dd08      	ble.n	800fab4 <_sungetc_r+0x38>
 800faa2:	6823      	ldr	r3, [r4, #0]
 800faa4:	1e5a      	subs	r2, r3, #1
 800faa6:	6022      	str	r2, [r4, #0]
 800faa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800faac:	6863      	ldr	r3, [r4, #4]
 800faae:	3301      	adds	r3, #1
 800fab0:	6063      	str	r3, [r4, #4]
 800fab2:	e7e9      	b.n	800fa88 <_sungetc_r+0xc>
 800fab4:	4621      	mov	r1, r4
 800fab6:	f000 fbe0 	bl	801027a <__submore>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d0f1      	beq.n	800faa2 <_sungetc_r+0x26>
 800fabe:	e7e1      	b.n	800fa84 <_sungetc_r+0x8>
 800fac0:	6921      	ldr	r1, [r4, #16]
 800fac2:	6822      	ldr	r2, [r4, #0]
 800fac4:	b141      	cbz	r1, 800fad8 <_sungetc_r+0x5c>
 800fac6:	4291      	cmp	r1, r2
 800fac8:	d206      	bcs.n	800fad8 <_sungetc_r+0x5c>
 800faca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800face:	42a9      	cmp	r1, r5
 800fad0:	d102      	bne.n	800fad8 <_sungetc_r+0x5c>
 800fad2:	3a01      	subs	r2, #1
 800fad4:	6022      	str	r2, [r4, #0]
 800fad6:	e7ea      	b.n	800faae <_sungetc_r+0x32>
 800fad8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800fadc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fae0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fae2:	2303      	movs	r3, #3
 800fae4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fae6:	4623      	mov	r3, r4
 800fae8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	2301      	movs	r3, #1
 800faf0:	e7de      	b.n	800fab0 <_sungetc_r+0x34>

0800faf2 <__ssrefill_r>:
 800faf2:	b510      	push	{r4, lr}
 800faf4:	460c      	mov	r4, r1
 800faf6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800faf8:	b169      	cbz	r1, 800fb16 <__ssrefill_r+0x24>
 800fafa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fafe:	4299      	cmp	r1, r3
 800fb00:	d001      	beq.n	800fb06 <__ssrefill_r+0x14>
 800fb02:	f7fe fa2d 	bl	800df60 <_free_r>
 800fb06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb08:	6063      	str	r3, [r4, #4]
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	6360      	str	r0, [r4, #52]	@ 0x34
 800fb0e:	b113      	cbz	r3, 800fb16 <__ssrefill_r+0x24>
 800fb10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	bd10      	pop	{r4, pc}
 800fb16:	6923      	ldr	r3, [r4, #16]
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	6063      	str	r3, [r4, #4]
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f043 0320 	orr.w	r3, r3, #32
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb2a:	e7f3      	b.n	800fb14 <__ssrefill_r+0x22>

0800fb2c <__ssvfiscanf_r>:
 800fb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb30:	460c      	mov	r4, r1
 800fb32:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fb36:	2100      	movs	r1, #0
 800fb38:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800fb3c:	49a5      	ldr	r1, [pc, #660]	@ (800fdd4 <__ssvfiscanf_r+0x2a8>)
 800fb3e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800fb40:	f10d 0804 	add.w	r8, sp, #4
 800fb44:	49a4      	ldr	r1, [pc, #656]	@ (800fdd8 <__ssvfiscanf_r+0x2ac>)
 800fb46:	4fa5      	ldr	r7, [pc, #660]	@ (800fddc <__ssvfiscanf_r+0x2b0>)
 800fb48:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800fb50:	9300      	str	r3, [sp, #0]
 800fb52:	7813      	ldrb	r3, [r2, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8158 	beq.w	800fe0a <__ssvfiscanf_r+0x2de>
 800fb5a:	5cf9      	ldrb	r1, [r7, r3]
 800fb5c:	f011 0108 	ands.w	r1, r1, #8
 800fb60:	f102 0501 	add.w	r5, r2, #1
 800fb64:	d019      	beq.n	800fb9a <__ssvfiscanf_r+0x6e>
 800fb66:	6863      	ldr	r3, [r4, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dd0f      	ble.n	800fb8c <__ssvfiscanf_r+0x60>
 800fb6c:	6823      	ldr	r3, [r4, #0]
 800fb6e:	781a      	ldrb	r2, [r3, #0]
 800fb70:	5cba      	ldrb	r2, [r7, r2]
 800fb72:	0712      	lsls	r2, r2, #28
 800fb74:	d401      	bmi.n	800fb7a <__ssvfiscanf_r+0x4e>
 800fb76:	462a      	mov	r2, r5
 800fb78:	e7eb      	b.n	800fb52 <__ssvfiscanf_r+0x26>
 800fb7a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fb7c:	3201      	adds	r2, #1
 800fb7e:	9245      	str	r2, [sp, #276]	@ 0x114
 800fb80:	6862      	ldr	r2, [r4, #4]
 800fb82:	3301      	adds	r3, #1
 800fb84:	3a01      	subs	r2, #1
 800fb86:	6062      	str	r2, [r4, #4]
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	e7ec      	b.n	800fb66 <__ssvfiscanf_r+0x3a>
 800fb8c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fb8e:	4621      	mov	r1, r4
 800fb90:	4630      	mov	r0, r6
 800fb92:	4798      	blx	r3
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0e9      	beq.n	800fb6c <__ssvfiscanf_r+0x40>
 800fb98:	e7ed      	b.n	800fb76 <__ssvfiscanf_r+0x4a>
 800fb9a:	2b25      	cmp	r3, #37	@ 0x25
 800fb9c:	d012      	beq.n	800fbc4 <__ssvfiscanf_r+0x98>
 800fb9e:	4699      	mov	r9, r3
 800fba0:	6863      	ldr	r3, [r4, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f340 8093 	ble.w	800fcce <__ssvfiscanf_r+0x1a2>
 800fba8:	6822      	ldr	r2, [r4, #0]
 800fbaa:	7813      	ldrb	r3, [r2, #0]
 800fbac:	454b      	cmp	r3, r9
 800fbae:	f040 812c 	bne.w	800fe0a <__ssvfiscanf_r+0x2de>
 800fbb2:	6863      	ldr	r3, [r4, #4]
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	6063      	str	r3, [r4, #4]
 800fbb8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800fbba:	3201      	adds	r2, #1
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	6022      	str	r2, [r4, #0]
 800fbc0:	9345      	str	r3, [sp, #276]	@ 0x114
 800fbc2:	e7d8      	b.n	800fb76 <__ssvfiscanf_r+0x4a>
 800fbc4:	9141      	str	r1, [sp, #260]	@ 0x104
 800fbc6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fbc8:	7853      	ldrb	r3, [r2, #1]
 800fbca:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbcc:	bf02      	ittt	eq
 800fbce:	2310      	moveq	r3, #16
 800fbd0:	1c95      	addeq	r5, r2, #2
 800fbd2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800fbd4:	220a      	movs	r2, #10
 800fbd6:	46a9      	mov	r9, r5
 800fbd8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800fbdc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800fbe0:	2b09      	cmp	r3, #9
 800fbe2:	d91e      	bls.n	800fc22 <__ssvfiscanf_r+0xf6>
 800fbe4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800fde0 <__ssvfiscanf_r+0x2b4>
 800fbe8:	2203      	movs	r2, #3
 800fbea:	4650      	mov	r0, sl
 800fbec:	f7f0 faf0 	bl	80001d0 <memchr>
 800fbf0:	b138      	cbz	r0, 800fc02 <__ssvfiscanf_r+0xd6>
 800fbf2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fbf4:	eba0 000a 	sub.w	r0, r0, sl
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4083      	lsls	r3, r0
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	9341      	str	r3, [sp, #260]	@ 0x104
 800fc00:	464d      	mov	r5, r9
 800fc02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc06:	2b78      	cmp	r3, #120	@ 0x78
 800fc08:	d806      	bhi.n	800fc18 <__ssvfiscanf_r+0xec>
 800fc0a:	2b57      	cmp	r3, #87	@ 0x57
 800fc0c:	d810      	bhi.n	800fc30 <__ssvfiscanf_r+0x104>
 800fc0e:	2b25      	cmp	r3, #37	@ 0x25
 800fc10:	d0c5      	beq.n	800fb9e <__ssvfiscanf_r+0x72>
 800fc12:	d857      	bhi.n	800fcc4 <__ssvfiscanf_r+0x198>
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d065      	beq.n	800fce4 <__ssvfiscanf_r+0x1b8>
 800fc18:	2303      	movs	r3, #3
 800fc1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fc1c:	230a      	movs	r3, #10
 800fc1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800fc20:	e078      	b.n	800fd14 <__ssvfiscanf_r+0x1e8>
 800fc22:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fc24:	fb02 1103 	mla	r1, r2, r3, r1
 800fc28:	3930      	subs	r1, #48	@ 0x30
 800fc2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fc2c:	464d      	mov	r5, r9
 800fc2e:	e7d2      	b.n	800fbd6 <__ssvfiscanf_r+0xaa>
 800fc30:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800fc34:	2a20      	cmp	r2, #32
 800fc36:	d8ef      	bhi.n	800fc18 <__ssvfiscanf_r+0xec>
 800fc38:	a101      	add	r1, pc, #4	@ (adr r1, 800fc40 <__ssvfiscanf_r+0x114>)
 800fc3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fc3e:	bf00      	nop
 800fc40:	0800fcf3 	.word	0x0800fcf3
 800fc44:	0800fc19 	.word	0x0800fc19
 800fc48:	0800fc19 	.word	0x0800fc19
 800fc4c:	0800fd4d 	.word	0x0800fd4d
 800fc50:	0800fc19 	.word	0x0800fc19
 800fc54:	0800fc19 	.word	0x0800fc19
 800fc58:	0800fc19 	.word	0x0800fc19
 800fc5c:	0800fc19 	.word	0x0800fc19
 800fc60:	0800fc19 	.word	0x0800fc19
 800fc64:	0800fc19 	.word	0x0800fc19
 800fc68:	0800fc19 	.word	0x0800fc19
 800fc6c:	0800fd63 	.word	0x0800fd63
 800fc70:	0800fd49 	.word	0x0800fd49
 800fc74:	0800fccb 	.word	0x0800fccb
 800fc78:	0800fccb 	.word	0x0800fccb
 800fc7c:	0800fccb 	.word	0x0800fccb
 800fc80:	0800fc19 	.word	0x0800fc19
 800fc84:	0800fd05 	.word	0x0800fd05
 800fc88:	0800fc19 	.word	0x0800fc19
 800fc8c:	0800fc19 	.word	0x0800fc19
 800fc90:	0800fc19 	.word	0x0800fc19
 800fc94:	0800fc19 	.word	0x0800fc19
 800fc98:	0800fd73 	.word	0x0800fd73
 800fc9c:	0800fd0d 	.word	0x0800fd0d
 800fca0:	0800fceb 	.word	0x0800fceb
 800fca4:	0800fc19 	.word	0x0800fc19
 800fca8:	0800fc19 	.word	0x0800fc19
 800fcac:	0800fd6f 	.word	0x0800fd6f
 800fcb0:	0800fc19 	.word	0x0800fc19
 800fcb4:	0800fd49 	.word	0x0800fd49
 800fcb8:	0800fc19 	.word	0x0800fc19
 800fcbc:	0800fc19 	.word	0x0800fc19
 800fcc0:	0800fcf3 	.word	0x0800fcf3
 800fcc4:	3b45      	subs	r3, #69	@ 0x45
 800fcc6:	2b02      	cmp	r3, #2
 800fcc8:	d8a6      	bhi.n	800fc18 <__ssvfiscanf_r+0xec>
 800fcca:	2305      	movs	r3, #5
 800fccc:	e021      	b.n	800fd12 <__ssvfiscanf_r+0x1e6>
 800fcce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	4798      	blx	r3
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f af66 	beq.w	800fba8 <__ssvfiscanf_r+0x7c>
 800fcdc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fcde:	2800      	cmp	r0, #0
 800fce0:	f040 808b 	bne.w	800fdfa <__ssvfiscanf_r+0x2ce>
 800fce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fce8:	e08b      	b.n	800fe02 <__ssvfiscanf_r+0x2d6>
 800fcea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fcec:	f042 0220 	orr.w	r2, r2, #32
 800fcf0:	9241      	str	r2, [sp, #260]	@ 0x104
 800fcf2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fcf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fcf8:	9241      	str	r2, [sp, #260]	@ 0x104
 800fcfa:	2210      	movs	r2, #16
 800fcfc:	2b6e      	cmp	r3, #110	@ 0x6e
 800fcfe:	9242      	str	r2, [sp, #264]	@ 0x108
 800fd00:	d902      	bls.n	800fd08 <__ssvfiscanf_r+0x1dc>
 800fd02:	e005      	b.n	800fd10 <__ssvfiscanf_r+0x1e4>
 800fd04:	2300      	movs	r3, #0
 800fd06:	9342      	str	r3, [sp, #264]	@ 0x108
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e002      	b.n	800fd12 <__ssvfiscanf_r+0x1e6>
 800fd0c:	2308      	movs	r3, #8
 800fd0e:	9342      	str	r3, [sp, #264]	@ 0x108
 800fd10:	2304      	movs	r3, #4
 800fd12:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fd14:	6863      	ldr	r3, [r4, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	dd39      	ble.n	800fd8e <__ssvfiscanf_r+0x262>
 800fd1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fd1c:	0659      	lsls	r1, r3, #25
 800fd1e:	d404      	bmi.n	800fd2a <__ssvfiscanf_r+0x1fe>
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	781a      	ldrb	r2, [r3, #0]
 800fd24:	5cba      	ldrb	r2, [r7, r2]
 800fd26:	0712      	lsls	r2, r2, #28
 800fd28:	d438      	bmi.n	800fd9c <__ssvfiscanf_r+0x270>
 800fd2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	dc47      	bgt.n	800fdc0 <__ssvfiscanf_r+0x294>
 800fd30:	466b      	mov	r3, sp
 800fd32:	4622      	mov	r2, r4
 800fd34:	a941      	add	r1, sp, #260	@ 0x104
 800fd36:	4630      	mov	r0, r6
 800fd38:	f000 f86c 	bl	800fe14 <_scanf_chars>
 800fd3c:	2801      	cmp	r0, #1
 800fd3e:	d064      	beq.n	800fe0a <__ssvfiscanf_r+0x2de>
 800fd40:	2802      	cmp	r0, #2
 800fd42:	f47f af18 	bne.w	800fb76 <__ssvfiscanf_r+0x4a>
 800fd46:	e7c9      	b.n	800fcdc <__ssvfiscanf_r+0x1b0>
 800fd48:	220a      	movs	r2, #10
 800fd4a:	e7d7      	b.n	800fcfc <__ssvfiscanf_r+0x1d0>
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	4640      	mov	r0, r8
 800fd50:	f000 fa5a 	bl	8010208 <__sccl>
 800fd54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd5a:	9341      	str	r3, [sp, #260]	@ 0x104
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	2301      	movs	r3, #1
 800fd60:	e7d7      	b.n	800fd12 <__ssvfiscanf_r+0x1e6>
 800fd62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fd64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd68:	9341      	str	r3, [sp, #260]	@ 0x104
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	e7d1      	b.n	800fd12 <__ssvfiscanf_r+0x1e6>
 800fd6e:	2302      	movs	r3, #2
 800fd70:	e7cf      	b.n	800fd12 <__ssvfiscanf_r+0x1e6>
 800fd72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800fd74:	06c3      	lsls	r3, r0, #27
 800fd76:	f53f aefe 	bmi.w	800fb76 <__ssvfiscanf_r+0x4a>
 800fd7a:	9b00      	ldr	r3, [sp, #0]
 800fd7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fd7e:	1d19      	adds	r1, r3, #4
 800fd80:	9100      	str	r1, [sp, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	07c0      	lsls	r0, r0, #31
 800fd86:	bf4c      	ite	mi
 800fd88:	801a      	strhmi	r2, [r3, #0]
 800fd8a:	601a      	strpl	r2, [r3, #0]
 800fd8c:	e6f3      	b.n	800fb76 <__ssvfiscanf_r+0x4a>
 800fd8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fd90:	4621      	mov	r1, r4
 800fd92:	4630      	mov	r0, r6
 800fd94:	4798      	blx	r3
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d0bf      	beq.n	800fd1a <__ssvfiscanf_r+0x1ee>
 800fd9a:	e79f      	b.n	800fcdc <__ssvfiscanf_r+0x1b0>
 800fd9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fd9e:	3201      	adds	r2, #1
 800fda0:	9245      	str	r2, [sp, #276]	@ 0x114
 800fda2:	6862      	ldr	r2, [r4, #4]
 800fda4:	3a01      	subs	r2, #1
 800fda6:	2a00      	cmp	r2, #0
 800fda8:	6062      	str	r2, [r4, #4]
 800fdaa:	dd02      	ble.n	800fdb2 <__ssvfiscanf_r+0x286>
 800fdac:	3301      	adds	r3, #1
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	e7b6      	b.n	800fd20 <__ssvfiscanf_r+0x1f4>
 800fdb2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	4798      	blx	r3
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d0b0      	beq.n	800fd20 <__ssvfiscanf_r+0x1f4>
 800fdbe:	e78d      	b.n	800fcdc <__ssvfiscanf_r+0x1b0>
 800fdc0:	2b04      	cmp	r3, #4
 800fdc2:	dc0f      	bgt.n	800fde4 <__ssvfiscanf_r+0x2b8>
 800fdc4:	466b      	mov	r3, sp
 800fdc6:	4622      	mov	r2, r4
 800fdc8:	a941      	add	r1, sp, #260	@ 0x104
 800fdca:	4630      	mov	r0, r6
 800fdcc:	f000 f87c 	bl	800fec8 <_scanf_i>
 800fdd0:	e7b4      	b.n	800fd3c <__ssvfiscanf_r+0x210>
 800fdd2:	bf00      	nop
 800fdd4:	0800fa7d 	.word	0x0800fa7d
 800fdd8:	0800faf3 	.word	0x0800faf3
 800fddc:	08011611 	.word	0x08011611
 800fde0:	08011717 	.word	0x08011717
 800fde4:	4b0a      	ldr	r3, [pc, #40]	@ (800fe10 <__ssvfiscanf_r+0x2e4>)
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f43f aec5 	beq.w	800fb76 <__ssvfiscanf_r+0x4a>
 800fdec:	466b      	mov	r3, sp
 800fdee:	4622      	mov	r2, r4
 800fdf0:	a941      	add	r1, sp, #260	@ 0x104
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f7fc fe32 	bl	800ca5c <_scanf_float>
 800fdf8:	e7a0      	b.n	800fd3c <__ssvfiscanf_r+0x210>
 800fdfa:	89a3      	ldrh	r3, [r4, #12]
 800fdfc:	065b      	lsls	r3, r3, #25
 800fdfe:	f53f af71 	bmi.w	800fce4 <__ssvfiscanf_r+0x1b8>
 800fe02:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fe06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fe0c:	e7f9      	b.n	800fe02 <__ssvfiscanf_r+0x2d6>
 800fe0e:	bf00      	nop
 800fe10:	0800ca5d 	.word	0x0800ca5d

0800fe14 <_scanf_chars>:
 800fe14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe18:	4615      	mov	r5, r2
 800fe1a:	688a      	ldr	r2, [r1, #8]
 800fe1c:	4680      	mov	r8, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	b932      	cbnz	r2, 800fe30 <_scanf_chars+0x1c>
 800fe22:	698a      	ldr	r2, [r1, #24]
 800fe24:	2a00      	cmp	r2, #0
 800fe26:	bf14      	ite	ne
 800fe28:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800fe2c:	2201      	moveq	r2, #1
 800fe2e:	608a      	str	r2, [r1, #8]
 800fe30:	6822      	ldr	r2, [r4, #0]
 800fe32:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800fec4 <_scanf_chars+0xb0>
 800fe36:	06d1      	lsls	r1, r2, #27
 800fe38:	bf5f      	itttt	pl
 800fe3a:	681a      	ldrpl	r2, [r3, #0]
 800fe3c:	1d11      	addpl	r1, r2, #4
 800fe3e:	6019      	strpl	r1, [r3, #0]
 800fe40:	6816      	ldrpl	r6, [r2, #0]
 800fe42:	2700      	movs	r7, #0
 800fe44:	69a0      	ldr	r0, [r4, #24]
 800fe46:	b188      	cbz	r0, 800fe6c <_scanf_chars+0x58>
 800fe48:	2801      	cmp	r0, #1
 800fe4a:	d107      	bne.n	800fe5c <_scanf_chars+0x48>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	781a      	ldrb	r2, [r3, #0]
 800fe50:	6963      	ldr	r3, [r4, #20]
 800fe52:	5c9b      	ldrb	r3, [r3, r2]
 800fe54:	b953      	cbnz	r3, 800fe6c <_scanf_chars+0x58>
 800fe56:	2f00      	cmp	r7, #0
 800fe58:	d031      	beq.n	800febe <_scanf_chars+0xaa>
 800fe5a:	e022      	b.n	800fea2 <_scanf_chars+0x8e>
 800fe5c:	2802      	cmp	r0, #2
 800fe5e:	d120      	bne.n	800fea2 <_scanf_chars+0x8e>
 800fe60:	682b      	ldr	r3, [r5, #0]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fe68:	071b      	lsls	r3, r3, #28
 800fe6a:	d41a      	bmi.n	800fea2 <_scanf_chars+0x8e>
 800fe6c:	6823      	ldr	r3, [r4, #0]
 800fe6e:	06da      	lsls	r2, r3, #27
 800fe70:	bf5e      	ittt	pl
 800fe72:	682b      	ldrpl	r3, [r5, #0]
 800fe74:	781b      	ldrbpl	r3, [r3, #0]
 800fe76:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fe7a:	682a      	ldr	r2, [r5, #0]
 800fe7c:	686b      	ldr	r3, [r5, #4]
 800fe7e:	3201      	adds	r2, #1
 800fe80:	602a      	str	r2, [r5, #0]
 800fe82:	68a2      	ldr	r2, [r4, #8]
 800fe84:	3b01      	subs	r3, #1
 800fe86:	3a01      	subs	r2, #1
 800fe88:	606b      	str	r3, [r5, #4]
 800fe8a:	3701      	adds	r7, #1
 800fe8c:	60a2      	str	r2, [r4, #8]
 800fe8e:	b142      	cbz	r2, 800fea2 <_scanf_chars+0x8e>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	dcd7      	bgt.n	800fe44 <_scanf_chars+0x30>
 800fe94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fe98:	4629      	mov	r1, r5
 800fe9a:	4640      	mov	r0, r8
 800fe9c:	4798      	blx	r3
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d0d0      	beq.n	800fe44 <_scanf_chars+0x30>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	f013 0310 	ands.w	r3, r3, #16
 800fea8:	d105      	bne.n	800feb6 <_scanf_chars+0xa2>
 800feaa:	68e2      	ldr	r2, [r4, #12]
 800feac:	3201      	adds	r2, #1
 800feae:	60e2      	str	r2, [r4, #12]
 800feb0:	69a2      	ldr	r2, [r4, #24]
 800feb2:	b102      	cbz	r2, 800feb6 <_scanf_chars+0xa2>
 800feb4:	7033      	strb	r3, [r6, #0]
 800feb6:	6923      	ldr	r3, [r4, #16]
 800feb8:	443b      	add	r3, r7
 800feba:	6123      	str	r3, [r4, #16]
 800febc:	2000      	movs	r0, #0
 800febe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec2:	bf00      	nop
 800fec4:	08011611 	.word	0x08011611

0800fec8 <_scanf_i>:
 800fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	4698      	mov	r8, r3
 800fece:	4b74      	ldr	r3, [pc, #464]	@ (80100a0 <_scanf_i+0x1d8>)
 800fed0:	460c      	mov	r4, r1
 800fed2:	4682      	mov	sl, r0
 800fed4:	4616      	mov	r6, r2
 800fed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800feda:	b087      	sub	sp, #28
 800fedc:	ab03      	add	r3, sp, #12
 800fede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fee2:	4b70      	ldr	r3, [pc, #448]	@ (80100a4 <_scanf_i+0x1dc>)
 800fee4:	69a1      	ldr	r1, [r4, #24]
 800fee6:	4a70      	ldr	r2, [pc, #448]	@ (80100a8 <_scanf_i+0x1e0>)
 800fee8:	2903      	cmp	r1, #3
 800feea:	bf08      	it	eq
 800feec:	461a      	moveq	r2, r3
 800feee:	68a3      	ldr	r3, [r4, #8]
 800fef0:	9201      	str	r2, [sp, #4]
 800fef2:	1e5a      	subs	r2, r3, #1
 800fef4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fef8:	bf88      	it	hi
 800fefa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fefe:	4627      	mov	r7, r4
 800ff00:	bf82      	ittt	hi
 800ff02:	eb03 0905 	addhi.w	r9, r3, r5
 800ff06:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ff0a:	60a3      	strhi	r3, [r4, #8]
 800ff0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ff10:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ff14:	bf98      	it	ls
 800ff16:	f04f 0900 	movls.w	r9, #0
 800ff1a:	6023      	str	r3, [r4, #0]
 800ff1c:	463d      	mov	r5, r7
 800ff1e:	f04f 0b00 	mov.w	fp, #0
 800ff22:	6831      	ldr	r1, [r6, #0]
 800ff24:	ab03      	add	r3, sp, #12
 800ff26:	7809      	ldrb	r1, [r1, #0]
 800ff28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ff2c:	2202      	movs	r2, #2
 800ff2e:	f7f0 f94f 	bl	80001d0 <memchr>
 800ff32:	b328      	cbz	r0, 800ff80 <_scanf_i+0xb8>
 800ff34:	f1bb 0f01 	cmp.w	fp, #1
 800ff38:	d159      	bne.n	800ffee <_scanf_i+0x126>
 800ff3a:	6862      	ldr	r2, [r4, #4]
 800ff3c:	b92a      	cbnz	r2, 800ff4a <_scanf_i+0x82>
 800ff3e:	6822      	ldr	r2, [r4, #0]
 800ff40:	2108      	movs	r1, #8
 800ff42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ff46:	6061      	str	r1, [r4, #4]
 800ff48:	6022      	str	r2, [r4, #0]
 800ff4a:	6822      	ldr	r2, [r4, #0]
 800ff4c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ff50:	6022      	str	r2, [r4, #0]
 800ff52:	68a2      	ldr	r2, [r4, #8]
 800ff54:	1e51      	subs	r1, r2, #1
 800ff56:	60a1      	str	r1, [r4, #8]
 800ff58:	b192      	cbz	r2, 800ff80 <_scanf_i+0xb8>
 800ff5a:	6832      	ldr	r2, [r6, #0]
 800ff5c:	1c51      	adds	r1, r2, #1
 800ff5e:	6031      	str	r1, [r6, #0]
 800ff60:	7812      	ldrb	r2, [r2, #0]
 800ff62:	f805 2b01 	strb.w	r2, [r5], #1
 800ff66:	6872      	ldr	r2, [r6, #4]
 800ff68:	3a01      	subs	r2, #1
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	6072      	str	r2, [r6, #4]
 800ff6e:	dc07      	bgt.n	800ff80 <_scanf_i+0xb8>
 800ff70:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ff74:	4631      	mov	r1, r6
 800ff76:	4650      	mov	r0, sl
 800ff78:	4790      	blx	r2
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	f040 8085 	bne.w	801008a <_scanf_i+0x1c2>
 800ff80:	f10b 0b01 	add.w	fp, fp, #1
 800ff84:	f1bb 0f03 	cmp.w	fp, #3
 800ff88:	d1cb      	bne.n	800ff22 <_scanf_i+0x5a>
 800ff8a:	6863      	ldr	r3, [r4, #4]
 800ff8c:	b90b      	cbnz	r3, 800ff92 <_scanf_i+0xca>
 800ff8e:	230a      	movs	r3, #10
 800ff90:	6063      	str	r3, [r4, #4]
 800ff92:	6863      	ldr	r3, [r4, #4]
 800ff94:	4945      	ldr	r1, [pc, #276]	@ (80100ac <_scanf_i+0x1e4>)
 800ff96:	6960      	ldr	r0, [r4, #20]
 800ff98:	1ac9      	subs	r1, r1, r3
 800ff9a:	f000 f935 	bl	8010208 <__sccl>
 800ff9e:	f04f 0b00 	mov.w	fp, #0
 800ffa2:	68a3      	ldr	r3, [r4, #8]
 800ffa4:	6822      	ldr	r2, [r4, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d03d      	beq.n	8010026 <_scanf_i+0x15e>
 800ffaa:	6831      	ldr	r1, [r6, #0]
 800ffac:	6960      	ldr	r0, [r4, #20]
 800ffae:	f891 c000 	ldrb.w	ip, [r1]
 800ffb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d035      	beq.n	8010026 <_scanf_i+0x15e>
 800ffba:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ffbe:	d124      	bne.n	801000a <_scanf_i+0x142>
 800ffc0:	0510      	lsls	r0, r2, #20
 800ffc2:	d522      	bpl.n	801000a <_scanf_i+0x142>
 800ffc4:	f10b 0b01 	add.w	fp, fp, #1
 800ffc8:	f1b9 0f00 	cmp.w	r9, #0
 800ffcc:	d003      	beq.n	800ffd6 <_scanf_i+0x10e>
 800ffce:	3301      	adds	r3, #1
 800ffd0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ffd4:	60a3      	str	r3, [r4, #8]
 800ffd6:	6873      	ldr	r3, [r6, #4]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	6073      	str	r3, [r6, #4]
 800ffde:	dd1b      	ble.n	8010018 <_scanf_i+0x150>
 800ffe0:	6833      	ldr	r3, [r6, #0]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	6033      	str	r3, [r6, #0]
 800ffe6:	68a3      	ldr	r3, [r4, #8]
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	60a3      	str	r3, [r4, #8]
 800ffec:	e7d9      	b.n	800ffa2 <_scanf_i+0xda>
 800ffee:	f1bb 0f02 	cmp.w	fp, #2
 800fff2:	d1ae      	bne.n	800ff52 <_scanf_i+0x8a>
 800fff4:	6822      	ldr	r2, [r4, #0]
 800fff6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800fffa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800fffe:	d1bf      	bne.n	800ff80 <_scanf_i+0xb8>
 8010000:	2110      	movs	r1, #16
 8010002:	6061      	str	r1, [r4, #4]
 8010004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010008:	e7a2      	b.n	800ff50 <_scanf_i+0x88>
 801000a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801000e:	6022      	str	r2, [r4, #0]
 8010010:	780b      	ldrb	r3, [r1, #0]
 8010012:	f805 3b01 	strb.w	r3, [r5], #1
 8010016:	e7de      	b.n	800ffd6 <_scanf_i+0x10e>
 8010018:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801001c:	4631      	mov	r1, r6
 801001e:	4650      	mov	r0, sl
 8010020:	4798      	blx	r3
 8010022:	2800      	cmp	r0, #0
 8010024:	d0df      	beq.n	800ffe6 <_scanf_i+0x11e>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	05d9      	lsls	r1, r3, #23
 801002a:	d50d      	bpl.n	8010048 <_scanf_i+0x180>
 801002c:	42bd      	cmp	r5, r7
 801002e:	d909      	bls.n	8010044 <_scanf_i+0x17c>
 8010030:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010034:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010038:	4632      	mov	r2, r6
 801003a:	4650      	mov	r0, sl
 801003c:	4798      	blx	r3
 801003e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8010042:	464d      	mov	r5, r9
 8010044:	42bd      	cmp	r5, r7
 8010046:	d028      	beq.n	801009a <_scanf_i+0x1d2>
 8010048:	6822      	ldr	r2, [r4, #0]
 801004a:	f012 0210 	ands.w	r2, r2, #16
 801004e:	d113      	bne.n	8010078 <_scanf_i+0x1b0>
 8010050:	702a      	strb	r2, [r5, #0]
 8010052:	6863      	ldr	r3, [r4, #4]
 8010054:	9e01      	ldr	r6, [sp, #4]
 8010056:	4639      	mov	r1, r7
 8010058:	4650      	mov	r0, sl
 801005a:	47b0      	blx	r6
 801005c:	f8d8 3000 	ldr.w	r3, [r8]
 8010060:	6821      	ldr	r1, [r4, #0]
 8010062:	1d1a      	adds	r2, r3, #4
 8010064:	f8c8 2000 	str.w	r2, [r8]
 8010068:	f011 0f20 	tst.w	r1, #32
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	d00f      	beq.n	8010090 <_scanf_i+0x1c8>
 8010070:	6018      	str	r0, [r3, #0]
 8010072:	68e3      	ldr	r3, [r4, #12]
 8010074:	3301      	adds	r3, #1
 8010076:	60e3      	str	r3, [r4, #12]
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	1bed      	subs	r5, r5, r7
 801007c:	445d      	add	r5, fp
 801007e:	442b      	add	r3, r5
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	2000      	movs	r0, #0
 8010084:	b007      	add	sp, #28
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008a:	f04f 0b00 	mov.w	fp, #0
 801008e:	e7ca      	b.n	8010026 <_scanf_i+0x15e>
 8010090:	07ca      	lsls	r2, r1, #31
 8010092:	bf4c      	ite	mi
 8010094:	8018      	strhmi	r0, [r3, #0]
 8010096:	6018      	strpl	r0, [r3, #0]
 8010098:	e7eb      	b.n	8010072 <_scanf_i+0x1aa>
 801009a:	2001      	movs	r0, #1
 801009c:	e7f2      	b.n	8010084 <_scanf_i+0x1bc>
 801009e:	bf00      	nop
 80100a0:	08011344 	.word	0x08011344
 80100a4:	0800f7c9 	.word	0x0800f7c9
 80100a8:	08010bcd 	.word	0x08010bcd
 80100ac:	08011732 	.word	0x08011732

080100b0 <__sflush_r>:
 80100b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b8:	0716      	lsls	r6, r2, #28
 80100ba:	4605      	mov	r5, r0
 80100bc:	460c      	mov	r4, r1
 80100be:	d454      	bmi.n	801016a <__sflush_r+0xba>
 80100c0:	684b      	ldr	r3, [r1, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	dc02      	bgt.n	80100cc <__sflush_r+0x1c>
 80100c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	dd48      	ble.n	801015e <__sflush_r+0xae>
 80100cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100ce:	2e00      	cmp	r6, #0
 80100d0:	d045      	beq.n	801015e <__sflush_r+0xae>
 80100d2:	2300      	movs	r3, #0
 80100d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80100d8:	682f      	ldr	r7, [r5, #0]
 80100da:	6a21      	ldr	r1, [r4, #32]
 80100dc:	602b      	str	r3, [r5, #0]
 80100de:	d030      	beq.n	8010142 <__sflush_r+0x92>
 80100e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	0759      	lsls	r1, r3, #29
 80100e6:	d505      	bpl.n	80100f4 <__sflush_r+0x44>
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	1ad2      	subs	r2, r2, r3
 80100ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100ee:	b10b      	cbz	r3, 80100f4 <__sflush_r+0x44>
 80100f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80100f2:	1ad2      	subs	r2, r2, r3
 80100f4:	2300      	movs	r3, #0
 80100f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100f8:	6a21      	ldr	r1, [r4, #32]
 80100fa:	4628      	mov	r0, r5
 80100fc:	47b0      	blx	r6
 80100fe:	1c43      	adds	r3, r0, #1
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	d106      	bne.n	8010112 <__sflush_r+0x62>
 8010104:	6829      	ldr	r1, [r5, #0]
 8010106:	291d      	cmp	r1, #29
 8010108:	d82b      	bhi.n	8010162 <__sflush_r+0xb2>
 801010a:	4a2a      	ldr	r2, [pc, #168]	@ (80101b4 <__sflush_r+0x104>)
 801010c:	410a      	asrs	r2, r1
 801010e:	07d6      	lsls	r6, r2, #31
 8010110:	d427      	bmi.n	8010162 <__sflush_r+0xb2>
 8010112:	2200      	movs	r2, #0
 8010114:	6062      	str	r2, [r4, #4]
 8010116:	04d9      	lsls	r1, r3, #19
 8010118:	6922      	ldr	r2, [r4, #16]
 801011a:	6022      	str	r2, [r4, #0]
 801011c:	d504      	bpl.n	8010128 <__sflush_r+0x78>
 801011e:	1c42      	adds	r2, r0, #1
 8010120:	d101      	bne.n	8010126 <__sflush_r+0x76>
 8010122:	682b      	ldr	r3, [r5, #0]
 8010124:	b903      	cbnz	r3, 8010128 <__sflush_r+0x78>
 8010126:	6560      	str	r0, [r4, #84]	@ 0x54
 8010128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801012a:	602f      	str	r7, [r5, #0]
 801012c:	b1b9      	cbz	r1, 801015e <__sflush_r+0xae>
 801012e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010132:	4299      	cmp	r1, r3
 8010134:	d002      	beq.n	801013c <__sflush_r+0x8c>
 8010136:	4628      	mov	r0, r5
 8010138:	f7fd ff12 	bl	800df60 <_free_r>
 801013c:	2300      	movs	r3, #0
 801013e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010140:	e00d      	b.n	801015e <__sflush_r+0xae>
 8010142:	2301      	movs	r3, #1
 8010144:	4628      	mov	r0, r5
 8010146:	47b0      	blx	r6
 8010148:	4602      	mov	r2, r0
 801014a:	1c50      	adds	r0, r2, #1
 801014c:	d1c9      	bne.n	80100e2 <__sflush_r+0x32>
 801014e:	682b      	ldr	r3, [r5, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0c6      	beq.n	80100e2 <__sflush_r+0x32>
 8010154:	2b1d      	cmp	r3, #29
 8010156:	d001      	beq.n	801015c <__sflush_r+0xac>
 8010158:	2b16      	cmp	r3, #22
 801015a:	d11e      	bne.n	801019a <__sflush_r+0xea>
 801015c:	602f      	str	r7, [r5, #0]
 801015e:	2000      	movs	r0, #0
 8010160:	e022      	b.n	80101a8 <__sflush_r+0xf8>
 8010162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010166:	b21b      	sxth	r3, r3
 8010168:	e01b      	b.n	80101a2 <__sflush_r+0xf2>
 801016a:	690f      	ldr	r7, [r1, #16]
 801016c:	2f00      	cmp	r7, #0
 801016e:	d0f6      	beq.n	801015e <__sflush_r+0xae>
 8010170:	0793      	lsls	r3, r2, #30
 8010172:	680e      	ldr	r6, [r1, #0]
 8010174:	bf08      	it	eq
 8010176:	694b      	ldreq	r3, [r1, #20]
 8010178:	600f      	str	r7, [r1, #0]
 801017a:	bf18      	it	ne
 801017c:	2300      	movne	r3, #0
 801017e:	eba6 0807 	sub.w	r8, r6, r7
 8010182:	608b      	str	r3, [r1, #8]
 8010184:	f1b8 0f00 	cmp.w	r8, #0
 8010188:	dde9      	ble.n	801015e <__sflush_r+0xae>
 801018a:	6a21      	ldr	r1, [r4, #32]
 801018c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801018e:	4643      	mov	r3, r8
 8010190:	463a      	mov	r2, r7
 8010192:	4628      	mov	r0, r5
 8010194:	47b0      	blx	r6
 8010196:	2800      	cmp	r0, #0
 8010198:	dc08      	bgt.n	80101ac <__sflush_r+0xfc>
 801019a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801019e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101a2:	81a3      	strh	r3, [r4, #12]
 80101a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ac:	4407      	add	r7, r0
 80101ae:	eba8 0800 	sub.w	r8, r8, r0
 80101b2:	e7e7      	b.n	8010184 <__sflush_r+0xd4>
 80101b4:	dfbffffe 	.word	0xdfbffffe

080101b8 <_fflush_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	690b      	ldr	r3, [r1, #16]
 80101bc:	4605      	mov	r5, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	b913      	cbnz	r3, 80101c8 <_fflush_r+0x10>
 80101c2:	2500      	movs	r5, #0
 80101c4:	4628      	mov	r0, r5
 80101c6:	bd38      	pop	{r3, r4, r5, pc}
 80101c8:	b118      	cbz	r0, 80101d2 <_fflush_r+0x1a>
 80101ca:	6a03      	ldr	r3, [r0, #32]
 80101cc:	b90b      	cbnz	r3, 80101d2 <_fflush_r+0x1a>
 80101ce:	f7fc fee5 	bl	800cf9c <__sinit>
 80101d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d0f3      	beq.n	80101c2 <_fflush_r+0xa>
 80101da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80101dc:	07d0      	lsls	r0, r2, #31
 80101de:	d404      	bmi.n	80101ea <_fflush_r+0x32>
 80101e0:	0599      	lsls	r1, r3, #22
 80101e2:	d402      	bmi.n	80101ea <_fflush_r+0x32>
 80101e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101e6:	f7fd f866 	bl	800d2b6 <__retarget_lock_acquire_recursive>
 80101ea:	4628      	mov	r0, r5
 80101ec:	4621      	mov	r1, r4
 80101ee:	f7ff ff5f 	bl	80100b0 <__sflush_r>
 80101f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101f4:	07da      	lsls	r2, r3, #31
 80101f6:	4605      	mov	r5, r0
 80101f8:	d4e4      	bmi.n	80101c4 <_fflush_r+0xc>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	059b      	lsls	r3, r3, #22
 80101fe:	d4e1      	bmi.n	80101c4 <_fflush_r+0xc>
 8010200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010202:	f7fd f859 	bl	800d2b8 <__retarget_lock_release_recursive>
 8010206:	e7dd      	b.n	80101c4 <_fflush_r+0xc>

08010208 <__sccl>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	780b      	ldrb	r3, [r1, #0]
 801020c:	4604      	mov	r4, r0
 801020e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010210:	bf0b      	itete	eq
 8010212:	784b      	ldrbeq	r3, [r1, #1]
 8010214:	1c4a      	addne	r2, r1, #1
 8010216:	1c8a      	addeq	r2, r1, #2
 8010218:	2100      	movne	r1, #0
 801021a:	bf08      	it	eq
 801021c:	2101      	moveq	r1, #1
 801021e:	3801      	subs	r0, #1
 8010220:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010224:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010228:	42a8      	cmp	r0, r5
 801022a:	d1fb      	bne.n	8010224 <__sccl+0x1c>
 801022c:	b90b      	cbnz	r3, 8010232 <__sccl+0x2a>
 801022e:	1e50      	subs	r0, r2, #1
 8010230:	bd70      	pop	{r4, r5, r6, pc}
 8010232:	f081 0101 	eor.w	r1, r1, #1
 8010236:	54e1      	strb	r1, [r4, r3]
 8010238:	4610      	mov	r0, r2
 801023a:	4602      	mov	r2, r0
 801023c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010240:	2d2d      	cmp	r5, #45	@ 0x2d
 8010242:	d005      	beq.n	8010250 <__sccl+0x48>
 8010244:	2d5d      	cmp	r5, #93	@ 0x5d
 8010246:	d016      	beq.n	8010276 <__sccl+0x6e>
 8010248:	2d00      	cmp	r5, #0
 801024a:	d0f1      	beq.n	8010230 <__sccl+0x28>
 801024c:	462b      	mov	r3, r5
 801024e:	e7f2      	b.n	8010236 <__sccl+0x2e>
 8010250:	7846      	ldrb	r6, [r0, #1]
 8010252:	2e5d      	cmp	r6, #93	@ 0x5d
 8010254:	d0fa      	beq.n	801024c <__sccl+0x44>
 8010256:	42b3      	cmp	r3, r6
 8010258:	dcf8      	bgt.n	801024c <__sccl+0x44>
 801025a:	3002      	adds	r0, #2
 801025c:	461a      	mov	r2, r3
 801025e:	3201      	adds	r2, #1
 8010260:	4296      	cmp	r6, r2
 8010262:	54a1      	strb	r1, [r4, r2]
 8010264:	dcfb      	bgt.n	801025e <__sccl+0x56>
 8010266:	1af2      	subs	r2, r6, r3
 8010268:	3a01      	subs	r2, #1
 801026a:	1c5d      	adds	r5, r3, #1
 801026c:	42b3      	cmp	r3, r6
 801026e:	bfa8      	it	ge
 8010270:	2200      	movge	r2, #0
 8010272:	18ab      	adds	r3, r5, r2
 8010274:	e7e1      	b.n	801023a <__sccl+0x32>
 8010276:	4610      	mov	r0, r2
 8010278:	e7da      	b.n	8010230 <__sccl+0x28>

0801027a <__submore>:
 801027a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801027e:	460c      	mov	r4, r1
 8010280:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010286:	4299      	cmp	r1, r3
 8010288:	d11d      	bne.n	80102c6 <__submore+0x4c>
 801028a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801028e:	f7fd fedb 	bl	800e048 <_malloc_r>
 8010292:	b918      	cbnz	r0, 801029c <__submore+0x22>
 8010294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801029c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80102a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80102a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80102a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80102ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80102b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80102b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80102b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80102bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80102c0:	6020      	str	r0, [r4, #0]
 80102c2:	2000      	movs	r0, #0
 80102c4:	e7e8      	b.n	8010298 <__submore+0x1e>
 80102c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80102c8:	0077      	lsls	r7, r6, #1
 80102ca:	463a      	mov	r2, r7
 80102cc:	f000 fbe1 	bl	8010a92 <_realloc_r>
 80102d0:	4605      	mov	r5, r0
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d0de      	beq.n	8010294 <__submore+0x1a>
 80102d6:	eb00 0806 	add.w	r8, r0, r6
 80102da:	4601      	mov	r1, r0
 80102dc:	4632      	mov	r2, r6
 80102de:	4640      	mov	r0, r8
 80102e0:	f000 f842 	bl	8010368 <memcpy>
 80102e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80102e8:	f8c4 8000 	str.w	r8, [r4]
 80102ec:	e7e9      	b.n	80102c2 <__submore+0x48>

080102ee <memmove>:
 80102ee:	4288      	cmp	r0, r1
 80102f0:	b510      	push	{r4, lr}
 80102f2:	eb01 0402 	add.w	r4, r1, r2
 80102f6:	d902      	bls.n	80102fe <memmove+0x10>
 80102f8:	4284      	cmp	r4, r0
 80102fa:	4623      	mov	r3, r4
 80102fc:	d807      	bhi.n	801030e <memmove+0x20>
 80102fe:	1e43      	subs	r3, r0, #1
 8010300:	42a1      	cmp	r1, r4
 8010302:	d008      	beq.n	8010316 <memmove+0x28>
 8010304:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010308:	f803 2f01 	strb.w	r2, [r3, #1]!
 801030c:	e7f8      	b.n	8010300 <memmove+0x12>
 801030e:	4402      	add	r2, r0
 8010310:	4601      	mov	r1, r0
 8010312:	428a      	cmp	r2, r1
 8010314:	d100      	bne.n	8010318 <memmove+0x2a>
 8010316:	bd10      	pop	{r4, pc}
 8010318:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801031c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010320:	e7f7      	b.n	8010312 <memmove+0x24>

08010322 <strncmp>:
 8010322:	b510      	push	{r4, lr}
 8010324:	b16a      	cbz	r2, 8010342 <strncmp+0x20>
 8010326:	3901      	subs	r1, #1
 8010328:	1884      	adds	r4, r0, r2
 801032a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801032e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010332:	429a      	cmp	r2, r3
 8010334:	d103      	bne.n	801033e <strncmp+0x1c>
 8010336:	42a0      	cmp	r0, r4
 8010338:	d001      	beq.n	801033e <strncmp+0x1c>
 801033a:	2a00      	cmp	r2, #0
 801033c:	d1f5      	bne.n	801032a <strncmp+0x8>
 801033e:	1ad0      	subs	r0, r2, r3
 8010340:	bd10      	pop	{r4, pc}
 8010342:	4610      	mov	r0, r2
 8010344:	e7fc      	b.n	8010340 <strncmp+0x1e>
	...

08010348 <_sbrk_r>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	4d06      	ldr	r5, [pc, #24]	@ (8010364 <_sbrk_r+0x1c>)
 801034c:	2300      	movs	r3, #0
 801034e:	4604      	mov	r4, r0
 8010350:	4608      	mov	r0, r1
 8010352:	602b      	str	r3, [r5, #0]
 8010354:	f7f1 fb96 	bl	8001a84 <_sbrk>
 8010358:	1c43      	adds	r3, r0, #1
 801035a:	d102      	bne.n	8010362 <_sbrk_r+0x1a>
 801035c:	682b      	ldr	r3, [r5, #0]
 801035e:	b103      	cbz	r3, 8010362 <_sbrk_r+0x1a>
 8010360:	6023      	str	r3, [r4, #0]
 8010362:	bd38      	pop	{r3, r4, r5, pc}
 8010364:	200023a4 	.word	0x200023a4

08010368 <memcpy>:
 8010368:	440a      	add	r2, r1
 801036a:	4291      	cmp	r1, r2
 801036c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010370:	d100      	bne.n	8010374 <memcpy+0xc>
 8010372:	4770      	bx	lr
 8010374:	b510      	push	{r4, lr}
 8010376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801037a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801037e:	4291      	cmp	r1, r2
 8010380:	d1f9      	bne.n	8010376 <memcpy+0xe>
 8010382:	bd10      	pop	{r4, pc}
 8010384:	0000      	movs	r0, r0
	...

08010388 <nan>:
 8010388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010390 <nan+0x8>
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	00000000 	.word	0x00000000
 8010394:	7ff80000 	.word	0x7ff80000

08010398 <__assert_func>:
 8010398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801039a:	4614      	mov	r4, r2
 801039c:	461a      	mov	r2, r3
 801039e:	4b09      	ldr	r3, [pc, #36]	@ (80103c4 <__assert_func+0x2c>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4605      	mov	r5, r0
 80103a4:	68d8      	ldr	r0, [r3, #12]
 80103a6:	b954      	cbnz	r4, 80103be <__assert_func+0x26>
 80103a8:	4b07      	ldr	r3, [pc, #28]	@ (80103c8 <__assert_func+0x30>)
 80103aa:	461c      	mov	r4, r3
 80103ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103b0:	9100      	str	r1, [sp, #0]
 80103b2:	462b      	mov	r3, r5
 80103b4:	4905      	ldr	r1, [pc, #20]	@ (80103cc <__assert_func+0x34>)
 80103b6:	f000 fc19 	bl	8010bec <fiprintf>
 80103ba:	f000 fc29 	bl	8010c10 <abort>
 80103be:	4b04      	ldr	r3, [pc, #16]	@ (80103d0 <__assert_func+0x38>)
 80103c0:	e7f4      	b.n	80103ac <__assert_func+0x14>
 80103c2:	bf00      	nop
 80103c4:	200001b4 	.word	0x200001b4
 80103c8:	08011780 	.word	0x08011780
 80103cc:	08011752 	.word	0x08011752
 80103d0:	08011745 	.word	0x08011745

080103d4 <_calloc_r>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	fba1 5402 	umull	r5, r4, r1, r2
 80103da:	b93c      	cbnz	r4, 80103ec <_calloc_r+0x18>
 80103dc:	4629      	mov	r1, r5
 80103de:	f7fd fe33 	bl	800e048 <_malloc_r>
 80103e2:	4606      	mov	r6, r0
 80103e4:	b928      	cbnz	r0, 80103f2 <_calloc_r+0x1e>
 80103e6:	2600      	movs	r6, #0
 80103e8:	4630      	mov	r0, r6
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	220c      	movs	r2, #12
 80103ee:	6002      	str	r2, [r0, #0]
 80103f0:	e7f9      	b.n	80103e6 <_calloc_r+0x12>
 80103f2:	462a      	mov	r2, r5
 80103f4:	4621      	mov	r1, r4
 80103f6:	f7fc feca 	bl	800d18e <memset>
 80103fa:	e7f5      	b.n	80103e8 <_calloc_r+0x14>

080103fc <rshift>:
 80103fc:	6903      	ldr	r3, [r0, #16]
 80103fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010406:	ea4f 1261 	mov.w	r2, r1, asr #5
 801040a:	f100 0414 	add.w	r4, r0, #20
 801040e:	dd45      	ble.n	801049c <rshift+0xa0>
 8010410:	f011 011f 	ands.w	r1, r1, #31
 8010414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801041c:	d10c      	bne.n	8010438 <rshift+0x3c>
 801041e:	f100 0710 	add.w	r7, r0, #16
 8010422:	4629      	mov	r1, r5
 8010424:	42b1      	cmp	r1, r6
 8010426:	d334      	bcc.n	8010492 <rshift+0x96>
 8010428:	1a9b      	subs	r3, r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	1eea      	subs	r2, r5, #3
 801042e:	4296      	cmp	r6, r2
 8010430:	bf38      	it	cc
 8010432:	2300      	movcc	r3, #0
 8010434:	4423      	add	r3, r4
 8010436:	e015      	b.n	8010464 <rshift+0x68>
 8010438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801043c:	f1c1 0820 	rsb	r8, r1, #32
 8010440:	40cf      	lsrs	r7, r1
 8010442:	f105 0e04 	add.w	lr, r5, #4
 8010446:	46a1      	mov	r9, r4
 8010448:	4576      	cmp	r6, lr
 801044a:	46f4      	mov	ip, lr
 801044c:	d815      	bhi.n	801047a <rshift+0x7e>
 801044e:	1a9a      	subs	r2, r3, r2
 8010450:	0092      	lsls	r2, r2, #2
 8010452:	3a04      	subs	r2, #4
 8010454:	3501      	adds	r5, #1
 8010456:	42ae      	cmp	r6, r5
 8010458:	bf38      	it	cc
 801045a:	2200      	movcc	r2, #0
 801045c:	18a3      	adds	r3, r4, r2
 801045e:	50a7      	str	r7, [r4, r2]
 8010460:	b107      	cbz	r7, 8010464 <rshift+0x68>
 8010462:	3304      	adds	r3, #4
 8010464:	1b1a      	subs	r2, r3, r4
 8010466:	42a3      	cmp	r3, r4
 8010468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801046c:	bf08      	it	eq
 801046e:	2300      	moveq	r3, #0
 8010470:	6102      	str	r2, [r0, #16]
 8010472:	bf08      	it	eq
 8010474:	6143      	streq	r3, [r0, #20]
 8010476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801047a:	f8dc c000 	ldr.w	ip, [ip]
 801047e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010482:	ea4c 0707 	orr.w	r7, ip, r7
 8010486:	f849 7b04 	str.w	r7, [r9], #4
 801048a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801048e:	40cf      	lsrs	r7, r1
 8010490:	e7da      	b.n	8010448 <rshift+0x4c>
 8010492:	f851 cb04 	ldr.w	ip, [r1], #4
 8010496:	f847 cf04 	str.w	ip, [r7, #4]!
 801049a:	e7c3      	b.n	8010424 <rshift+0x28>
 801049c:	4623      	mov	r3, r4
 801049e:	e7e1      	b.n	8010464 <rshift+0x68>

080104a0 <__hexdig_fun>:
 80104a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80104a4:	2b09      	cmp	r3, #9
 80104a6:	d802      	bhi.n	80104ae <__hexdig_fun+0xe>
 80104a8:	3820      	subs	r0, #32
 80104aa:	b2c0      	uxtb	r0, r0
 80104ac:	4770      	bx	lr
 80104ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80104b2:	2b05      	cmp	r3, #5
 80104b4:	d801      	bhi.n	80104ba <__hexdig_fun+0x1a>
 80104b6:	3847      	subs	r0, #71	@ 0x47
 80104b8:	e7f7      	b.n	80104aa <__hexdig_fun+0xa>
 80104ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80104be:	2b05      	cmp	r3, #5
 80104c0:	d801      	bhi.n	80104c6 <__hexdig_fun+0x26>
 80104c2:	3827      	subs	r0, #39	@ 0x27
 80104c4:	e7f1      	b.n	80104aa <__hexdig_fun+0xa>
 80104c6:	2000      	movs	r0, #0
 80104c8:	4770      	bx	lr
	...

080104cc <__gethex>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	b085      	sub	sp, #20
 80104d2:	468a      	mov	sl, r1
 80104d4:	9302      	str	r3, [sp, #8]
 80104d6:	680b      	ldr	r3, [r1, #0]
 80104d8:	9001      	str	r0, [sp, #4]
 80104da:	4690      	mov	r8, r2
 80104dc:	1c9c      	adds	r4, r3, #2
 80104de:	46a1      	mov	r9, r4
 80104e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80104e4:	2830      	cmp	r0, #48	@ 0x30
 80104e6:	d0fa      	beq.n	80104de <__gethex+0x12>
 80104e8:	eba9 0303 	sub.w	r3, r9, r3
 80104ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80104f0:	f7ff ffd6 	bl	80104a0 <__hexdig_fun>
 80104f4:	4605      	mov	r5, r0
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d168      	bne.n	80105cc <__gethex+0x100>
 80104fa:	49a0      	ldr	r1, [pc, #640]	@ (801077c <__gethex+0x2b0>)
 80104fc:	2201      	movs	r2, #1
 80104fe:	4648      	mov	r0, r9
 8010500:	f7ff ff0f 	bl	8010322 <strncmp>
 8010504:	4607      	mov	r7, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	d167      	bne.n	80105da <__gethex+0x10e>
 801050a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801050e:	4626      	mov	r6, r4
 8010510:	f7ff ffc6 	bl	80104a0 <__hexdig_fun>
 8010514:	2800      	cmp	r0, #0
 8010516:	d062      	beq.n	80105de <__gethex+0x112>
 8010518:	4623      	mov	r3, r4
 801051a:	7818      	ldrb	r0, [r3, #0]
 801051c:	2830      	cmp	r0, #48	@ 0x30
 801051e:	4699      	mov	r9, r3
 8010520:	f103 0301 	add.w	r3, r3, #1
 8010524:	d0f9      	beq.n	801051a <__gethex+0x4e>
 8010526:	f7ff ffbb 	bl	80104a0 <__hexdig_fun>
 801052a:	fab0 f580 	clz	r5, r0
 801052e:	096d      	lsrs	r5, r5, #5
 8010530:	f04f 0b01 	mov.w	fp, #1
 8010534:	464a      	mov	r2, r9
 8010536:	4616      	mov	r6, r2
 8010538:	3201      	adds	r2, #1
 801053a:	7830      	ldrb	r0, [r6, #0]
 801053c:	f7ff ffb0 	bl	80104a0 <__hexdig_fun>
 8010540:	2800      	cmp	r0, #0
 8010542:	d1f8      	bne.n	8010536 <__gethex+0x6a>
 8010544:	498d      	ldr	r1, [pc, #564]	@ (801077c <__gethex+0x2b0>)
 8010546:	2201      	movs	r2, #1
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff feea 	bl	8010322 <strncmp>
 801054e:	2800      	cmp	r0, #0
 8010550:	d13f      	bne.n	80105d2 <__gethex+0x106>
 8010552:	b944      	cbnz	r4, 8010566 <__gethex+0x9a>
 8010554:	1c74      	adds	r4, r6, #1
 8010556:	4622      	mov	r2, r4
 8010558:	4616      	mov	r6, r2
 801055a:	3201      	adds	r2, #1
 801055c:	7830      	ldrb	r0, [r6, #0]
 801055e:	f7ff ff9f 	bl	80104a0 <__hexdig_fun>
 8010562:	2800      	cmp	r0, #0
 8010564:	d1f8      	bne.n	8010558 <__gethex+0x8c>
 8010566:	1ba4      	subs	r4, r4, r6
 8010568:	00a7      	lsls	r7, r4, #2
 801056a:	7833      	ldrb	r3, [r6, #0]
 801056c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010570:	2b50      	cmp	r3, #80	@ 0x50
 8010572:	d13e      	bne.n	80105f2 <__gethex+0x126>
 8010574:	7873      	ldrb	r3, [r6, #1]
 8010576:	2b2b      	cmp	r3, #43	@ 0x2b
 8010578:	d033      	beq.n	80105e2 <__gethex+0x116>
 801057a:	2b2d      	cmp	r3, #45	@ 0x2d
 801057c:	d034      	beq.n	80105e8 <__gethex+0x11c>
 801057e:	1c71      	adds	r1, r6, #1
 8010580:	2400      	movs	r4, #0
 8010582:	7808      	ldrb	r0, [r1, #0]
 8010584:	f7ff ff8c 	bl	80104a0 <__hexdig_fun>
 8010588:	1e43      	subs	r3, r0, #1
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b18      	cmp	r3, #24
 801058e:	d830      	bhi.n	80105f2 <__gethex+0x126>
 8010590:	f1a0 0210 	sub.w	r2, r0, #16
 8010594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010598:	f7ff ff82 	bl	80104a0 <__hexdig_fun>
 801059c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80105a0:	fa5f fc8c 	uxtb.w	ip, ip
 80105a4:	f1bc 0f18 	cmp.w	ip, #24
 80105a8:	f04f 030a 	mov.w	r3, #10
 80105ac:	d91e      	bls.n	80105ec <__gethex+0x120>
 80105ae:	b104      	cbz	r4, 80105b2 <__gethex+0xe6>
 80105b0:	4252      	negs	r2, r2
 80105b2:	4417      	add	r7, r2
 80105b4:	f8ca 1000 	str.w	r1, [sl]
 80105b8:	b1ed      	cbz	r5, 80105f6 <__gethex+0x12a>
 80105ba:	f1bb 0f00 	cmp.w	fp, #0
 80105be:	bf0c      	ite	eq
 80105c0:	2506      	moveq	r5, #6
 80105c2:	2500      	movne	r5, #0
 80105c4:	4628      	mov	r0, r5
 80105c6:	b005      	add	sp, #20
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	2500      	movs	r5, #0
 80105ce:	462c      	mov	r4, r5
 80105d0:	e7b0      	b.n	8010534 <__gethex+0x68>
 80105d2:	2c00      	cmp	r4, #0
 80105d4:	d1c7      	bne.n	8010566 <__gethex+0x9a>
 80105d6:	4627      	mov	r7, r4
 80105d8:	e7c7      	b.n	801056a <__gethex+0x9e>
 80105da:	464e      	mov	r6, r9
 80105dc:	462f      	mov	r7, r5
 80105de:	2501      	movs	r5, #1
 80105e0:	e7c3      	b.n	801056a <__gethex+0x9e>
 80105e2:	2400      	movs	r4, #0
 80105e4:	1cb1      	adds	r1, r6, #2
 80105e6:	e7cc      	b.n	8010582 <__gethex+0xb6>
 80105e8:	2401      	movs	r4, #1
 80105ea:	e7fb      	b.n	80105e4 <__gethex+0x118>
 80105ec:	fb03 0002 	mla	r0, r3, r2, r0
 80105f0:	e7ce      	b.n	8010590 <__gethex+0xc4>
 80105f2:	4631      	mov	r1, r6
 80105f4:	e7de      	b.n	80105b4 <__gethex+0xe8>
 80105f6:	eba6 0309 	sub.w	r3, r6, r9
 80105fa:	3b01      	subs	r3, #1
 80105fc:	4629      	mov	r1, r5
 80105fe:	2b07      	cmp	r3, #7
 8010600:	dc0a      	bgt.n	8010618 <__gethex+0x14c>
 8010602:	9801      	ldr	r0, [sp, #4]
 8010604:	f7fd fdac 	bl	800e160 <_Balloc>
 8010608:	4604      	mov	r4, r0
 801060a:	b940      	cbnz	r0, 801061e <__gethex+0x152>
 801060c:	4b5c      	ldr	r3, [pc, #368]	@ (8010780 <__gethex+0x2b4>)
 801060e:	4602      	mov	r2, r0
 8010610:	21e4      	movs	r1, #228	@ 0xe4
 8010612:	485c      	ldr	r0, [pc, #368]	@ (8010784 <__gethex+0x2b8>)
 8010614:	f7ff fec0 	bl	8010398 <__assert_func>
 8010618:	3101      	adds	r1, #1
 801061a:	105b      	asrs	r3, r3, #1
 801061c:	e7ef      	b.n	80105fe <__gethex+0x132>
 801061e:	f100 0a14 	add.w	sl, r0, #20
 8010622:	2300      	movs	r3, #0
 8010624:	4655      	mov	r5, sl
 8010626:	469b      	mov	fp, r3
 8010628:	45b1      	cmp	r9, r6
 801062a:	d337      	bcc.n	801069c <__gethex+0x1d0>
 801062c:	f845 bb04 	str.w	fp, [r5], #4
 8010630:	eba5 050a 	sub.w	r5, r5, sl
 8010634:	10ad      	asrs	r5, r5, #2
 8010636:	6125      	str	r5, [r4, #16]
 8010638:	4658      	mov	r0, fp
 801063a:	f7fd fe83 	bl	800e344 <__hi0bits>
 801063e:	016d      	lsls	r5, r5, #5
 8010640:	f8d8 6000 	ldr.w	r6, [r8]
 8010644:	1a2d      	subs	r5, r5, r0
 8010646:	42b5      	cmp	r5, r6
 8010648:	dd54      	ble.n	80106f4 <__gethex+0x228>
 801064a:	1bad      	subs	r5, r5, r6
 801064c:	4629      	mov	r1, r5
 801064e:	4620      	mov	r0, r4
 8010650:	f7fe fa17 	bl	800ea82 <__any_on>
 8010654:	4681      	mov	r9, r0
 8010656:	b178      	cbz	r0, 8010678 <__gethex+0x1ac>
 8010658:	1e6b      	subs	r3, r5, #1
 801065a:	1159      	asrs	r1, r3, #5
 801065c:	f003 021f 	and.w	r2, r3, #31
 8010660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010664:	f04f 0901 	mov.w	r9, #1
 8010668:	fa09 f202 	lsl.w	r2, r9, r2
 801066c:	420a      	tst	r2, r1
 801066e:	d003      	beq.n	8010678 <__gethex+0x1ac>
 8010670:	454b      	cmp	r3, r9
 8010672:	dc36      	bgt.n	80106e2 <__gethex+0x216>
 8010674:	f04f 0902 	mov.w	r9, #2
 8010678:	4629      	mov	r1, r5
 801067a:	4620      	mov	r0, r4
 801067c:	f7ff febe 	bl	80103fc <rshift>
 8010680:	442f      	add	r7, r5
 8010682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010686:	42bb      	cmp	r3, r7
 8010688:	da42      	bge.n	8010710 <__gethex+0x244>
 801068a:	9801      	ldr	r0, [sp, #4]
 801068c:	4621      	mov	r1, r4
 801068e:	f7fd fda7 	bl	800e1e0 <_Bfree>
 8010692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010694:	2300      	movs	r3, #0
 8010696:	6013      	str	r3, [r2, #0]
 8010698:	25a3      	movs	r5, #163	@ 0xa3
 801069a:	e793      	b.n	80105c4 <__gethex+0xf8>
 801069c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80106a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80106a2:	d012      	beq.n	80106ca <__gethex+0x1fe>
 80106a4:	2b20      	cmp	r3, #32
 80106a6:	d104      	bne.n	80106b2 <__gethex+0x1e6>
 80106a8:	f845 bb04 	str.w	fp, [r5], #4
 80106ac:	f04f 0b00 	mov.w	fp, #0
 80106b0:	465b      	mov	r3, fp
 80106b2:	7830      	ldrb	r0, [r6, #0]
 80106b4:	9303      	str	r3, [sp, #12]
 80106b6:	f7ff fef3 	bl	80104a0 <__hexdig_fun>
 80106ba:	9b03      	ldr	r3, [sp, #12]
 80106bc:	f000 000f 	and.w	r0, r0, #15
 80106c0:	4098      	lsls	r0, r3
 80106c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80106c6:	3304      	adds	r3, #4
 80106c8:	e7ae      	b.n	8010628 <__gethex+0x15c>
 80106ca:	45b1      	cmp	r9, r6
 80106cc:	d8ea      	bhi.n	80106a4 <__gethex+0x1d8>
 80106ce:	492b      	ldr	r1, [pc, #172]	@ (801077c <__gethex+0x2b0>)
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	2201      	movs	r2, #1
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7ff fe24 	bl	8010322 <strncmp>
 80106da:	9b03      	ldr	r3, [sp, #12]
 80106dc:	2800      	cmp	r0, #0
 80106de:	d1e1      	bne.n	80106a4 <__gethex+0x1d8>
 80106e0:	e7a2      	b.n	8010628 <__gethex+0x15c>
 80106e2:	1ea9      	subs	r1, r5, #2
 80106e4:	4620      	mov	r0, r4
 80106e6:	f7fe f9cc 	bl	800ea82 <__any_on>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d0c2      	beq.n	8010674 <__gethex+0x1a8>
 80106ee:	f04f 0903 	mov.w	r9, #3
 80106f2:	e7c1      	b.n	8010678 <__gethex+0x1ac>
 80106f4:	da09      	bge.n	801070a <__gethex+0x23e>
 80106f6:	1b75      	subs	r5, r6, r5
 80106f8:	4621      	mov	r1, r4
 80106fa:	9801      	ldr	r0, [sp, #4]
 80106fc:	462a      	mov	r2, r5
 80106fe:	f7fd ff87 	bl	800e610 <__lshift>
 8010702:	1b7f      	subs	r7, r7, r5
 8010704:	4604      	mov	r4, r0
 8010706:	f100 0a14 	add.w	sl, r0, #20
 801070a:	f04f 0900 	mov.w	r9, #0
 801070e:	e7b8      	b.n	8010682 <__gethex+0x1b6>
 8010710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010714:	42bd      	cmp	r5, r7
 8010716:	dd6f      	ble.n	80107f8 <__gethex+0x32c>
 8010718:	1bed      	subs	r5, r5, r7
 801071a:	42ae      	cmp	r6, r5
 801071c:	dc34      	bgt.n	8010788 <__gethex+0x2bc>
 801071e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010722:	2b02      	cmp	r3, #2
 8010724:	d022      	beq.n	801076c <__gethex+0x2a0>
 8010726:	2b03      	cmp	r3, #3
 8010728:	d024      	beq.n	8010774 <__gethex+0x2a8>
 801072a:	2b01      	cmp	r3, #1
 801072c:	d115      	bne.n	801075a <__gethex+0x28e>
 801072e:	42ae      	cmp	r6, r5
 8010730:	d113      	bne.n	801075a <__gethex+0x28e>
 8010732:	2e01      	cmp	r6, #1
 8010734:	d10b      	bne.n	801074e <__gethex+0x282>
 8010736:	9a02      	ldr	r2, [sp, #8]
 8010738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801073c:	6013      	str	r3, [r2, #0]
 801073e:	2301      	movs	r3, #1
 8010740:	6123      	str	r3, [r4, #16]
 8010742:	f8ca 3000 	str.w	r3, [sl]
 8010746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010748:	2562      	movs	r5, #98	@ 0x62
 801074a:	601c      	str	r4, [r3, #0]
 801074c:	e73a      	b.n	80105c4 <__gethex+0xf8>
 801074e:	1e71      	subs	r1, r6, #1
 8010750:	4620      	mov	r0, r4
 8010752:	f7fe f996 	bl	800ea82 <__any_on>
 8010756:	2800      	cmp	r0, #0
 8010758:	d1ed      	bne.n	8010736 <__gethex+0x26a>
 801075a:	9801      	ldr	r0, [sp, #4]
 801075c:	4621      	mov	r1, r4
 801075e:	f7fd fd3f 	bl	800e1e0 <_Bfree>
 8010762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010764:	2300      	movs	r3, #0
 8010766:	6013      	str	r3, [r2, #0]
 8010768:	2550      	movs	r5, #80	@ 0x50
 801076a:	e72b      	b.n	80105c4 <__gethex+0xf8>
 801076c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1f3      	bne.n	801075a <__gethex+0x28e>
 8010772:	e7e0      	b.n	8010736 <__gethex+0x26a>
 8010774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1dd      	bne.n	8010736 <__gethex+0x26a>
 801077a:	e7ee      	b.n	801075a <__gethex+0x28e>
 801077c:	080115b8 	.word	0x080115b8
 8010780:	0801144b 	.word	0x0801144b
 8010784:	08011781 	.word	0x08011781
 8010788:	1e6f      	subs	r7, r5, #1
 801078a:	f1b9 0f00 	cmp.w	r9, #0
 801078e:	d130      	bne.n	80107f2 <__gethex+0x326>
 8010790:	b127      	cbz	r7, 801079c <__gethex+0x2d0>
 8010792:	4639      	mov	r1, r7
 8010794:	4620      	mov	r0, r4
 8010796:	f7fe f974 	bl	800ea82 <__any_on>
 801079a:	4681      	mov	r9, r0
 801079c:	117a      	asrs	r2, r7, #5
 801079e:	2301      	movs	r3, #1
 80107a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80107a4:	f007 071f 	and.w	r7, r7, #31
 80107a8:	40bb      	lsls	r3, r7
 80107aa:	4213      	tst	r3, r2
 80107ac:	4629      	mov	r1, r5
 80107ae:	4620      	mov	r0, r4
 80107b0:	bf18      	it	ne
 80107b2:	f049 0902 	orrne.w	r9, r9, #2
 80107b6:	f7ff fe21 	bl	80103fc <rshift>
 80107ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80107be:	1b76      	subs	r6, r6, r5
 80107c0:	2502      	movs	r5, #2
 80107c2:	f1b9 0f00 	cmp.w	r9, #0
 80107c6:	d047      	beq.n	8010858 <__gethex+0x38c>
 80107c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	d015      	beq.n	80107fc <__gethex+0x330>
 80107d0:	2b03      	cmp	r3, #3
 80107d2:	d017      	beq.n	8010804 <__gethex+0x338>
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d109      	bne.n	80107ec <__gethex+0x320>
 80107d8:	f019 0f02 	tst.w	r9, #2
 80107dc:	d006      	beq.n	80107ec <__gethex+0x320>
 80107de:	f8da 3000 	ldr.w	r3, [sl]
 80107e2:	ea49 0903 	orr.w	r9, r9, r3
 80107e6:	f019 0f01 	tst.w	r9, #1
 80107ea:	d10e      	bne.n	801080a <__gethex+0x33e>
 80107ec:	f045 0510 	orr.w	r5, r5, #16
 80107f0:	e032      	b.n	8010858 <__gethex+0x38c>
 80107f2:	f04f 0901 	mov.w	r9, #1
 80107f6:	e7d1      	b.n	801079c <__gethex+0x2d0>
 80107f8:	2501      	movs	r5, #1
 80107fa:	e7e2      	b.n	80107c2 <__gethex+0x2f6>
 80107fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107fe:	f1c3 0301 	rsb	r3, r3, #1
 8010802:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010806:	2b00      	cmp	r3, #0
 8010808:	d0f0      	beq.n	80107ec <__gethex+0x320>
 801080a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801080e:	f104 0314 	add.w	r3, r4, #20
 8010812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801081a:	f04f 0c00 	mov.w	ip, #0
 801081e:	4618      	mov	r0, r3
 8010820:	f853 2b04 	ldr.w	r2, [r3], #4
 8010824:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010828:	d01b      	beq.n	8010862 <__gethex+0x396>
 801082a:	3201      	adds	r2, #1
 801082c:	6002      	str	r2, [r0, #0]
 801082e:	2d02      	cmp	r5, #2
 8010830:	f104 0314 	add.w	r3, r4, #20
 8010834:	d13c      	bne.n	80108b0 <__gethex+0x3e4>
 8010836:	f8d8 2000 	ldr.w	r2, [r8]
 801083a:	3a01      	subs	r2, #1
 801083c:	42b2      	cmp	r2, r6
 801083e:	d109      	bne.n	8010854 <__gethex+0x388>
 8010840:	1171      	asrs	r1, r6, #5
 8010842:	2201      	movs	r2, #1
 8010844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010848:	f006 061f 	and.w	r6, r6, #31
 801084c:	fa02 f606 	lsl.w	r6, r2, r6
 8010850:	421e      	tst	r6, r3
 8010852:	d13a      	bne.n	80108ca <__gethex+0x3fe>
 8010854:	f045 0520 	orr.w	r5, r5, #32
 8010858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801085a:	601c      	str	r4, [r3, #0]
 801085c:	9b02      	ldr	r3, [sp, #8]
 801085e:	601f      	str	r7, [r3, #0]
 8010860:	e6b0      	b.n	80105c4 <__gethex+0xf8>
 8010862:	4299      	cmp	r1, r3
 8010864:	f843 cc04 	str.w	ip, [r3, #-4]
 8010868:	d8d9      	bhi.n	801081e <__gethex+0x352>
 801086a:	68a3      	ldr	r3, [r4, #8]
 801086c:	459b      	cmp	fp, r3
 801086e:	db17      	blt.n	80108a0 <__gethex+0x3d4>
 8010870:	6861      	ldr	r1, [r4, #4]
 8010872:	9801      	ldr	r0, [sp, #4]
 8010874:	3101      	adds	r1, #1
 8010876:	f7fd fc73 	bl	800e160 <_Balloc>
 801087a:	4681      	mov	r9, r0
 801087c:	b918      	cbnz	r0, 8010886 <__gethex+0x3ba>
 801087e:	4b1a      	ldr	r3, [pc, #104]	@ (80108e8 <__gethex+0x41c>)
 8010880:	4602      	mov	r2, r0
 8010882:	2184      	movs	r1, #132	@ 0x84
 8010884:	e6c5      	b.n	8010612 <__gethex+0x146>
 8010886:	6922      	ldr	r2, [r4, #16]
 8010888:	3202      	adds	r2, #2
 801088a:	f104 010c 	add.w	r1, r4, #12
 801088e:	0092      	lsls	r2, r2, #2
 8010890:	300c      	adds	r0, #12
 8010892:	f7ff fd69 	bl	8010368 <memcpy>
 8010896:	4621      	mov	r1, r4
 8010898:	9801      	ldr	r0, [sp, #4]
 801089a:	f7fd fca1 	bl	800e1e0 <_Bfree>
 801089e:	464c      	mov	r4, r9
 80108a0:	6923      	ldr	r3, [r4, #16]
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108a8:	6122      	str	r2, [r4, #16]
 80108aa:	2201      	movs	r2, #1
 80108ac:	615a      	str	r2, [r3, #20]
 80108ae:	e7be      	b.n	801082e <__gethex+0x362>
 80108b0:	6922      	ldr	r2, [r4, #16]
 80108b2:	455a      	cmp	r2, fp
 80108b4:	dd0b      	ble.n	80108ce <__gethex+0x402>
 80108b6:	2101      	movs	r1, #1
 80108b8:	4620      	mov	r0, r4
 80108ba:	f7ff fd9f 	bl	80103fc <rshift>
 80108be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108c2:	3701      	adds	r7, #1
 80108c4:	42bb      	cmp	r3, r7
 80108c6:	f6ff aee0 	blt.w	801068a <__gethex+0x1be>
 80108ca:	2501      	movs	r5, #1
 80108cc:	e7c2      	b.n	8010854 <__gethex+0x388>
 80108ce:	f016 061f 	ands.w	r6, r6, #31
 80108d2:	d0fa      	beq.n	80108ca <__gethex+0x3fe>
 80108d4:	4453      	add	r3, sl
 80108d6:	f1c6 0620 	rsb	r6, r6, #32
 80108da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80108de:	f7fd fd31 	bl	800e344 <__hi0bits>
 80108e2:	42b0      	cmp	r0, r6
 80108e4:	dbe7      	blt.n	80108b6 <__gethex+0x3ea>
 80108e6:	e7f0      	b.n	80108ca <__gethex+0x3fe>
 80108e8:	0801144b 	.word	0x0801144b

080108ec <L_shift>:
 80108ec:	f1c2 0208 	rsb	r2, r2, #8
 80108f0:	0092      	lsls	r2, r2, #2
 80108f2:	b570      	push	{r4, r5, r6, lr}
 80108f4:	f1c2 0620 	rsb	r6, r2, #32
 80108f8:	6843      	ldr	r3, [r0, #4]
 80108fa:	6804      	ldr	r4, [r0, #0]
 80108fc:	fa03 f506 	lsl.w	r5, r3, r6
 8010900:	432c      	orrs	r4, r5
 8010902:	40d3      	lsrs	r3, r2
 8010904:	6004      	str	r4, [r0, #0]
 8010906:	f840 3f04 	str.w	r3, [r0, #4]!
 801090a:	4288      	cmp	r0, r1
 801090c:	d3f4      	bcc.n	80108f8 <L_shift+0xc>
 801090e:	bd70      	pop	{r4, r5, r6, pc}

08010910 <__match>:
 8010910:	b530      	push	{r4, r5, lr}
 8010912:	6803      	ldr	r3, [r0, #0]
 8010914:	3301      	adds	r3, #1
 8010916:	f811 4b01 	ldrb.w	r4, [r1], #1
 801091a:	b914      	cbnz	r4, 8010922 <__match+0x12>
 801091c:	6003      	str	r3, [r0, #0]
 801091e:	2001      	movs	r0, #1
 8010920:	bd30      	pop	{r4, r5, pc}
 8010922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801092a:	2d19      	cmp	r5, #25
 801092c:	bf98      	it	ls
 801092e:	3220      	addls	r2, #32
 8010930:	42a2      	cmp	r2, r4
 8010932:	d0f0      	beq.n	8010916 <__match+0x6>
 8010934:	2000      	movs	r0, #0
 8010936:	e7f3      	b.n	8010920 <__match+0x10>

08010938 <__hexnan>:
 8010938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093c:	680b      	ldr	r3, [r1, #0]
 801093e:	6801      	ldr	r1, [r0, #0]
 8010940:	115e      	asrs	r6, r3, #5
 8010942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010946:	f013 031f 	ands.w	r3, r3, #31
 801094a:	b087      	sub	sp, #28
 801094c:	bf18      	it	ne
 801094e:	3604      	addne	r6, #4
 8010950:	2500      	movs	r5, #0
 8010952:	1f37      	subs	r7, r6, #4
 8010954:	4682      	mov	sl, r0
 8010956:	4690      	mov	r8, r2
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	f846 5c04 	str.w	r5, [r6, #-4]
 801095e:	46b9      	mov	r9, r7
 8010960:	463c      	mov	r4, r7
 8010962:	9502      	str	r5, [sp, #8]
 8010964:	46ab      	mov	fp, r5
 8010966:	784a      	ldrb	r2, [r1, #1]
 8010968:	1c4b      	adds	r3, r1, #1
 801096a:	9303      	str	r3, [sp, #12]
 801096c:	b342      	cbz	r2, 80109c0 <__hexnan+0x88>
 801096e:	4610      	mov	r0, r2
 8010970:	9105      	str	r1, [sp, #20]
 8010972:	9204      	str	r2, [sp, #16]
 8010974:	f7ff fd94 	bl	80104a0 <__hexdig_fun>
 8010978:	2800      	cmp	r0, #0
 801097a:	d151      	bne.n	8010a20 <__hexnan+0xe8>
 801097c:	9a04      	ldr	r2, [sp, #16]
 801097e:	9905      	ldr	r1, [sp, #20]
 8010980:	2a20      	cmp	r2, #32
 8010982:	d818      	bhi.n	80109b6 <__hexnan+0x7e>
 8010984:	9b02      	ldr	r3, [sp, #8]
 8010986:	459b      	cmp	fp, r3
 8010988:	dd13      	ble.n	80109b2 <__hexnan+0x7a>
 801098a:	454c      	cmp	r4, r9
 801098c:	d206      	bcs.n	801099c <__hexnan+0x64>
 801098e:	2d07      	cmp	r5, #7
 8010990:	dc04      	bgt.n	801099c <__hexnan+0x64>
 8010992:	462a      	mov	r2, r5
 8010994:	4649      	mov	r1, r9
 8010996:	4620      	mov	r0, r4
 8010998:	f7ff ffa8 	bl	80108ec <L_shift>
 801099c:	4544      	cmp	r4, r8
 801099e:	d952      	bls.n	8010a46 <__hexnan+0x10e>
 80109a0:	2300      	movs	r3, #0
 80109a2:	f1a4 0904 	sub.w	r9, r4, #4
 80109a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80109aa:	f8cd b008 	str.w	fp, [sp, #8]
 80109ae:	464c      	mov	r4, r9
 80109b0:	461d      	mov	r5, r3
 80109b2:	9903      	ldr	r1, [sp, #12]
 80109b4:	e7d7      	b.n	8010966 <__hexnan+0x2e>
 80109b6:	2a29      	cmp	r2, #41	@ 0x29
 80109b8:	d157      	bne.n	8010a6a <__hexnan+0x132>
 80109ba:	3102      	adds	r1, #2
 80109bc:	f8ca 1000 	str.w	r1, [sl]
 80109c0:	f1bb 0f00 	cmp.w	fp, #0
 80109c4:	d051      	beq.n	8010a6a <__hexnan+0x132>
 80109c6:	454c      	cmp	r4, r9
 80109c8:	d206      	bcs.n	80109d8 <__hexnan+0xa0>
 80109ca:	2d07      	cmp	r5, #7
 80109cc:	dc04      	bgt.n	80109d8 <__hexnan+0xa0>
 80109ce:	462a      	mov	r2, r5
 80109d0:	4649      	mov	r1, r9
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7ff ff8a 	bl	80108ec <L_shift>
 80109d8:	4544      	cmp	r4, r8
 80109da:	d936      	bls.n	8010a4a <__hexnan+0x112>
 80109dc:	f1a8 0204 	sub.w	r2, r8, #4
 80109e0:	4623      	mov	r3, r4
 80109e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80109e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80109ea:	429f      	cmp	r7, r3
 80109ec:	d2f9      	bcs.n	80109e2 <__hexnan+0xaa>
 80109ee:	1b3b      	subs	r3, r7, r4
 80109f0:	f023 0303 	bic.w	r3, r3, #3
 80109f4:	3304      	adds	r3, #4
 80109f6:	3401      	adds	r4, #1
 80109f8:	3e03      	subs	r6, #3
 80109fa:	42b4      	cmp	r4, r6
 80109fc:	bf88      	it	hi
 80109fe:	2304      	movhi	r3, #4
 8010a00:	4443      	add	r3, r8
 8010a02:	2200      	movs	r2, #0
 8010a04:	f843 2b04 	str.w	r2, [r3], #4
 8010a08:	429f      	cmp	r7, r3
 8010a0a:	d2fb      	bcs.n	8010a04 <__hexnan+0xcc>
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	b91b      	cbnz	r3, 8010a18 <__hexnan+0xe0>
 8010a10:	4547      	cmp	r7, r8
 8010a12:	d128      	bne.n	8010a66 <__hexnan+0x12e>
 8010a14:	2301      	movs	r3, #1
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	2005      	movs	r0, #5
 8010a1a:	b007      	add	sp, #28
 8010a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a20:	3501      	adds	r5, #1
 8010a22:	2d08      	cmp	r5, #8
 8010a24:	f10b 0b01 	add.w	fp, fp, #1
 8010a28:	dd06      	ble.n	8010a38 <__hexnan+0x100>
 8010a2a:	4544      	cmp	r4, r8
 8010a2c:	d9c1      	bls.n	80109b2 <__hexnan+0x7a>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a34:	2501      	movs	r5, #1
 8010a36:	3c04      	subs	r4, #4
 8010a38:	6822      	ldr	r2, [r4, #0]
 8010a3a:	f000 000f 	and.w	r0, r0, #15
 8010a3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010a42:	6020      	str	r0, [r4, #0]
 8010a44:	e7b5      	b.n	80109b2 <__hexnan+0x7a>
 8010a46:	2508      	movs	r5, #8
 8010a48:	e7b3      	b.n	80109b2 <__hexnan+0x7a>
 8010a4a:	9b01      	ldr	r3, [sp, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d0dd      	beq.n	8010a0c <__hexnan+0xd4>
 8010a50:	f1c3 0320 	rsb	r3, r3, #32
 8010a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a58:	40da      	lsrs	r2, r3
 8010a5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010a5e:	4013      	ands	r3, r2
 8010a60:	f846 3c04 	str.w	r3, [r6, #-4]
 8010a64:	e7d2      	b.n	8010a0c <__hexnan+0xd4>
 8010a66:	3f04      	subs	r7, #4
 8010a68:	e7d0      	b.n	8010a0c <__hexnan+0xd4>
 8010a6a:	2004      	movs	r0, #4
 8010a6c:	e7d5      	b.n	8010a1a <__hexnan+0xe2>

08010a6e <__ascii_mbtowc>:
 8010a6e:	b082      	sub	sp, #8
 8010a70:	b901      	cbnz	r1, 8010a74 <__ascii_mbtowc+0x6>
 8010a72:	a901      	add	r1, sp, #4
 8010a74:	b142      	cbz	r2, 8010a88 <__ascii_mbtowc+0x1a>
 8010a76:	b14b      	cbz	r3, 8010a8c <__ascii_mbtowc+0x1e>
 8010a78:	7813      	ldrb	r3, [r2, #0]
 8010a7a:	600b      	str	r3, [r1, #0]
 8010a7c:	7812      	ldrb	r2, [r2, #0]
 8010a7e:	1e10      	subs	r0, r2, #0
 8010a80:	bf18      	it	ne
 8010a82:	2001      	movne	r0, #1
 8010a84:	b002      	add	sp, #8
 8010a86:	4770      	bx	lr
 8010a88:	4610      	mov	r0, r2
 8010a8a:	e7fb      	b.n	8010a84 <__ascii_mbtowc+0x16>
 8010a8c:	f06f 0001 	mvn.w	r0, #1
 8010a90:	e7f8      	b.n	8010a84 <__ascii_mbtowc+0x16>

08010a92 <_realloc_r>:
 8010a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a96:	4680      	mov	r8, r0
 8010a98:	4615      	mov	r5, r2
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	b921      	cbnz	r1, 8010aa8 <_realloc_r+0x16>
 8010a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	f7fd bad0 	b.w	800e048 <_malloc_r>
 8010aa8:	b92a      	cbnz	r2, 8010ab6 <_realloc_r+0x24>
 8010aaa:	f7fd fa59 	bl	800df60 <_free_r>
 8010aae:	2400      	movs	r4, #0
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab6:	f000 f8b2 	bl	8010c1e <_malloc_usable_size_r>
 8010aba:	4285      	cmp	r5, r0
 8010abc:	4606      	mov	r6, r0
 8010abe:	d802      	bhi.n	8010ac6 <_realloc_r+0x34>
 8010ac0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010ac4:	d8f4      	bhi.n	8010ab0 <_realloc_r+0x1e>
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	4640      	mov	r0, r8
 8010aca:	f7fd fabd 	bl	800e048 <_malloc_r>
 8010ace:	4607      	mov	r7, r0
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d0ec      	beq.n	8010aae <_realloc_r+0x1c>
 8010ad4:	42b5      	cmp	r5, r6
 8010ad6:	462a      	mov	r2, r5
 8010ad8:	4621      	mov	r1, r4
 8010ada:	bf28      	it	cs
 8010adc:	4632      	movcs	r2, r6
 8010ade:	f7ff fc43 	bl	8010368 <memcpy>
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	f7fd fa3b 	bl	800df60 <_free_r>
 8010aea:	463c      	mov	r4, r7
 8010aec:	e7e0      	b.n	8010ab0 <_realloc_r+0x1e>
	...

08010af0 <_strtoul_l.constprop.0>:
 8010af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010af4:	4e34      	ldr	r6, [pc, #208]	@ (8010bc8 <_strtoul_l.constprop.0+0xd8>)
 8010af6:	4686      	mov	lr, r0
 8010af8:	460d      	mov	r5, r1
 8010afa:	4628      	mov	r0, r5
 8010afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b00:	5d37      	ldrb	r7, [r6, r4]
 8010b02:	f017 0708 	ands.w	r7, r7, #8
 8010b06:	d1f8      	bne.n	8010afa <_strtoul_l.constprop.0+0xa>
 8010b08:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b0a:	d12f      	bne.n	8010b6c <_strtoul_l.constprop.0+0x7c>
 8010b0c:	782c      	ldrb	r4, [r5, #0]
 8010b0e:	2701      	movs	r7, #1
 8010b10:	1c85      	adds	r5, r0, #2
 8010b12:	f033 0010 	bics.w	r0, r3, #16
 8010b16:	d109      	bne.n	8010b2c <_strtoul_l.constprop.0+0x3c>
 8010b18:	2c30      	cmp	r4, #48	@ 0x30
 8010b1a:	d12c      	bne.n	8010b76 <_strtoul_l.constprop.0+0x86>
 8010b1c:	7828      	ldrb	r0, [r5, #0]
 8010b1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010b22:	2858      	cmp	r0, #88	@ 0x58
 8010b24:	d127      	bne.n	8010b76 <_strtoul_l.constprop.0+0x86>
 8010b26:	786c      	ldrb	r4, [r5, #1]
 8010b28:	2310      	movs	r3, #16
 8010b2a:	3502      	adds	r5, #2
 8010b2c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010b30:	2600      	movs	r6, #0
 8010b32:	fbb8 f8f3 	udiv	r8, r8, r3
 8010b36:	fb03 f908 	mul.w	r9, r3, r8
 8010b3a:	ea6f 0909 	mvn.w	r9, r9
 8010b3e:	4630      	mov	r0, r6
 8010b40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010b44:	f1bc 0f09 	cmp.w	ip, #9
 8010b48:	d81c      	bhi.n	8010b84 <_strtoul_l.constprop.0+0x94>
 8010b4a:	4664      	mov	r4, ip
 8010b4c:	42a3      	cmp	r3, r4
 8010b4e:	dd2a      	ble.n	8010ba6 <_strtoul_l.constprop.0+0xb6>
 8010b50:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010b54:	d007      	beq.n	8010b66 <_strtoul_l.constprop.0+0x76>
 8010b56:	4580      	cmp	r8, r0
 8010b58:	d322      	bcc.n	8010ba0 <_strtoul_l.constprop.0+0xb0>
 8010b5a:	d101      	bne.n	8010b60 <_strtoul_l.constprop.0+0x70>
 8010b5c:	45a1      	cmp	r9, r4
 8010b5e:	db1f      	blt.n	8010ba0 <_strtoul_l.constprop.0+0xb0>
 8010b60:	fb00 4003 	mla	r0, r0, r3, r4
 8010b64:	2601      	movs	r6, #1
 8010b66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b6a:	e7e9      	b.n	8010b40 <_strtoul_l.constprop.0+0x50>
 8010b6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b6e:	bf04      	itt	eq
 8010b70:	782c      	ldrbeq	r4, [r5, #0]
 8010b72:	1c85      	addeq	r5, r0, #2
 8010b74:	e7cd      	b.n	8010b12 <_strtoul_l.constprop.0+0x22>
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1d8      	bne.n	8010b2c <_strtoul_l.constprop.0+0x3c>
 8010b7a:	2c30      	cmp	r4, #48	@ 0x30
 8010b7c:	bf0c      	ite	eq
 8010b7e:	2308      	moveq	r3, #8
 8010b80:	230a      	movne	r3, #10
 8010b82:	e7d3      	b.n	8010b2c <_strtoul_l.constprop.0+0x3c>
 8010b84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010b88:	f1bc 0f19 	cmp.w	ip, #25
 8010b8c:	d801      	bhi.n	8010b92 <_strtoul_l.constprop.0+0xa2>
 8010b8e:	3c37      	subs	r4, #55	@ 0x37
 8010b90:	e7dc      	b.n	8010b4c <_strtoul_l.constprop.0+0x5c>
 8010b92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010b96:	f1bc 0f19 	cmp.w	ip, #25
 8010b9a:	d804      	bhi.n	8010ba6 <_strtoul_l.constprop.0+0xb6>
 8010b9c:	3c57      	subs	r4, #87	@ 0x57
 8010b9e:	e7d5      	b.n	8010b4c <_strtoul_l.constprop.0+0x5c>
 8010ba0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010ba4:	e7df      	b.n	8010b66 <_strtoul_l.constprop.0+0x76>
 8010ba6:	1c73      	adds	r3, r6, #1
 8010ba8:	d106      	bne.n	8010bb8 <_strtoul_l.constprop.0+0xc8>
 8010baa:	2322      	movs	r3, #34	@ 0x22
 8010bac:	f8ce 3000 	str.w	r3, [lr]
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	b932      	cbnz	r2, 8010bc2 <_strtoul_l.constprop.0+0xd2>
 8010bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bb8:	b107      	cbz	r7, 8010bbc <_strtoul_l.constprop.0+0xcc>
 8010bba:	4240      	negs	r0, r0
 8010bbc:	2a00      	cmp	r2, #0
 8010bbe:	d0f9      	beq.n	8010bb4 <_strtoul_l.constprop.0+0xc4>
 8010bc0:	b106      	cbz	r6, 8010bc4 <_strtoul_l.constprop.0+0xd4>
 8010bc2:	1e69      	subs	r1, r5, #1
 8010bc4:	6011      	str	r1, [r2, #0]
 8010bc6:	e7f5      	b.n	8010bb4 <_strtoul_l.constprop.0+0xc4>
 8010bc8:	08011611 	.word	0x08011611

08010bcc <_strtoul_r>:
 8010bcc:	f7ff bf90 	b.w	8010af0 <_strtoul_l.constprop.0>

08010bd0 <__ascii_wctomb>:
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	4608      	mov	r0, r1
 8010bd4:	b141      	cbz	r1, 8010be8 <__ascii_wctomb+0x18>
 8010bd6:	2aff      	cmp	r2, #255	@ 0xff
 8010bd8:	d904      	bls.n	8010be4 <__ascii_wctomb+0x14>
 8010bda:	228a      	movs	r2, #138	@ 0x8a
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010be2:	4770      	bx	lr
 8010be4:	700a      	strb	r2, [r1, #0]
 8010be6:	2001      	movs	r0, #1
 8010be8:	4770      	bx	lr
	...

08010bec <fiprintf>:
 8010bec:	b40e      	push	{r1, r2, r3}
 8010bee:	b503      	push	{r0, r1, lr}
 8010bf0:	4601      	mov	r1, r0
 8010bf2:	ab03      	add	r3, sp, #12
 8010bf4:	4805      	ldr	r0, [pc, #20]	@ (8010c0c <fiprintf+0x20>)
 8010bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bfa:	6800      	ldr	r0, [r0, #0]
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	f000 f83f 	bl	8010c80 <_vfiprintf_r>
 8010c02:	b002      	add	sp, #8
 8010c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c08:	b003      	add	sp, #12
 8010c0a:	4770      	bx	lr
 8010c0c:	200001b4 	.word	0x200001b4

08010c10 <abort>:
 8010c10:	b508      	push	{r3, lr}
 8010c12:	2006      	movs	r0, #6
 8010c14:	f000 fa08 	bl	8011028 <raise>
 8010c18:	2001      	movs	r0, #1
 8010c1a:	f7f0 febb 	bl	8001994 <_exit>

08010c1e <_malloc_usable_size_r>:
 8010c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c22:	1f18      	subs	r0, r3, #4
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	bfbc      	itt	lt
 8010c28:	580b      	ldrlt	r3, [r1, r0]
 8010c2a:	18c0      	addlt	r0, r0, r3
 8010c2c:	4770      	bx	lr

08010c2e <__sfputc_r>:
 8010c2e:	6893      	ldr	r3, [r2, #8]
 8010c30:	3b01      	subs	r3, #1
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	b410      	push	{r4}
 8010c36:	6093      	str	r3, [r2, #8]
 8010c38:	da08      	bge.n	8010c4c <__sfputc_r+0x1e>
 8010c3a:	6994      	ldr	r4, [r2, #24]
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	db01      	blt.n	8010c44 <__sfputc_r+0x16>
 8010c40:	290a      	cmp	r1, #10
 8010c42:	d103      	bne.n	8010c4c <__sfputc_r+0x1e>
 8010c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c48:	f000 b932 	b.w	8010eb0 <__swbuf_r>
 8010c4c:	6813      	ldr	r3, [r2, #0]
 8010c4e:	1c58      	adds	r0, r3, #1
 8010c50:	6010      	str	r0, [r2, #0]
 8010c52:	7019      	strb	r1, [r3, #0]
 8010c54:	4608      	mov	r0, r1
 8010c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <__sfputs_r>:
 8010c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5e:	4606      	mov	r6, r0
 8010c60:	460f      	mov	r7, r1
 8010c62:	4614      	mov	r4, r2
 8010c64:	18d5      	adds	r5, r2, r3
 8010c66:	42ac      	cmp	r4, r5
 8010c68:	d101      	bne.n	8010c6e <__sfputs_r+0x12>
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	e007      	b.n	8010c7e <__sfputs_r+0x22>
 8010c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c72:	463a      	mov	r2, r7
 8010c74:	4630      	mov	r0, r6
 8010c76:	f7ff ffda 	bl	8010c2e <__sfputc_r>
 8010c7a:	1c43      	adds	r3, r0, #1
 8010c7c:	d1f3      	bne.n	8010c66 <__sfputs_r+0xa>
 8010c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c80 <_vfiprintf_r>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	460d      	mov	r5, r1
 8010c86:	b09d      	sub	sp, #116	@ 0x74
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	b118      	cbz	r0, 8010c98 <_vfiprintf_r+0x18>
 8010c90:	6a03      	ldr	r3, [r0, #32]
 8010c92:	b90b      	cbnz	r3, 8010c98 <_vfiprintf_r+0x18>
 8010c94:	f7fc f982 	bl	800cf9c <__sinit>
 8010c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c9a:	07d9      	lsls	r1, r3, #31
 8010c9c:	d405      	bmi.n	8010caa <_vfiprintf_r+0x2a>
 8010c9e:	89ab      	ldrh	r3, [r5, #12]
 8010ca0:	059a      	lsls	r2, r3, #22
 8010ca2:	d402      	bmi.n	8010caa <_vfiprintf_r+0x2a>
 8010ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ca6:	f7fc fb06 	bl	800d2b6 <__retarget_lock_acquire_recursive>
 8010caa:	89ab      	ldrh	r3, [r5, #12]
 8010cac:	071b      	lsls	r3, r3, #28
 8010cae:	d501      	bpl.n	8010cb4 <_vfiprintf_r+0x34>
 8010cb0:	692b      	ldr	r3, [r5, #16]
 8010cb2:	b99b      	cbnz	r3, 8010cdc <_vfiprintf_r+0x5c>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f000 f938 	bl	8010f2c <__swsetup_r>
 8010cbc:	b170      	cbz	r0, 8010cdc <_vfiprintf_r+0x5c>
 8010cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cc0:	07dc      	lsls	r4, r3, #31
 8010cc2:	d504      	bpl.n	8010cce <_vfiprintf_r+0x4e>
 8010cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010cc8:	b01d      	add	sp, #116	@ 0x74
 8010cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cce:	89ab      	ldrh	r3, [r5, #12]
 8010cd0:	0598      	lsls	r0, r3, #22
 8010cd2:	d4f7      	bmi.n	8010cc4 <_vfiprintf_r+0x44>
 8010cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cd6:	f7fc faef 	bl	800d2b8 <__retarget_lock_release_recursive>
 8010cda:	e7f3      	b.n	8010cc4 <_vfiprintf_r+0x44>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ce0:	2320      	movs	r3, #32
 8010ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cea:	2330      	movs	r3, #48	@ 0x30
 8010cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e9c <_vfiprintf_r+0x21c>
 8010cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cf4:	f04f 0901 	mov.w	r9, #1
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	469a      	mov	sl, r3
 8010cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d00:	b10a      	cbz	r2, 8010d06 <_vfiprintf_r+0x86>
 8010d02:	2a25      	cmp	r2, #37	@ 0x25
 8010d04:	d1f9      	bne.n	8010cfa <_vfiprintf_r+0x7a>
 8010d06:	ebba 0b04 	subs.w	fp, sl, r4
 8010d0a:	d00b      	beq.n	8010d24 <_vfiprintf_r+0xa4>
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	4622      	mov	r2, r4
 8010d10:	4629      	mov	r1, r5
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ff ffa2 	bl	8010c5c <__sfputs_r>
 8010d18:	3001      	adds	r0, #1
 8010d1a:	f000 80a7 	beq.w	8010e6c <_vfiprintf_r+0x1ec>
 8010d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d20:	445a      	add	r2, fp
 8010d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d24:	f89a 3000 	ldrb.w	r3, [sl]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 809f 	beq.w	8010e6c <_vfiprintf_r+0x1ec>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d38:	f10a 0a01 	add.w	sl, sl, #1
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	9307      	str	r3, [sp, #28]
 8010d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d46:	4654      	mov	r4, sl
 8010d48:	2205      	movs	r2, #5
 8010d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d4e:	4853      	ldr	r0, [pc, #332]	@ (8010e9c <_vfiprintf_r+0x21c>)
 8010d50:	f7ef fa3e 	bl	80001d0 <memchr>
 8010d54:	9a04      	ldr	r2, [sp, #16]
 8010d56:	b9d8      	cbnz	r0, 8010d90 <_vfiprintf_r+0x110>
 8010d58:	06d1      	lsls	r1, r2, #27
 8010d5a:	bf44      	itt	mi
 8010d5c:	2320      	movmi	r3, #32
 8010d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d62:	0713      	lsls	r3, r2, #28
 8010d64:	bf44      	itt	mi
 8010d66:	232b      	movmi	r3, #43	@ 0x2b
 8010d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d72:	d015      	beq.n	8010da0 <_vfiprintf_r+0x120>
 8010d74:	9a07      	ldr	r2, [sp, #28]
 8010d76:	4654      	mov	r4, sl
 8010d78:	2000      	movs	r0, #0
 8010d7a:	f04f 0c0a 	mov.w	ip, #10
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d84:	3b30      	subs	r3, #48	@ 0x30
 8010d86:	2b09      	cmp	r3, #9
 8010d88:	d94b      	bls.n	8010e22 <_vfiprintf_r+0x1a2>
 8010d8a:	b1b0      	cbz	r0, 8010dba <_vfiprintf_r+0x13a>
 8010d8c:	9207      	str	r2, [sp, #28]
 8010d8e:	e014      	b.n	8010dba <_vfiprintf_r+0x13a>
 8010d90:	eba0 0308 	sub.w	r3, r0, r8
 8010d94:	fa09 f303 	lsl.w	r3, r9, r3
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	9304      	str	r3, [sp, #16]
 8010d9c:	46a2      	mov	sl, r4
 8010d9e:	e7d2      	b.n	8010d46 <_vfiprintf_r+0xc6>
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	1d19      	adds	r1, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	9103      	str	r1, [sp, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	bfbb      	ittet	lt
 8010dac:	425b      	neglt	r3, r3
 8010dae:	f042 0202 	orrlt.w	r2, r2, #2
 8010db2:	9307      	strge	r3, [sp, #28]
 8010db4:	9307      	strlt	r3, [sp, #28]
 8010db6:	bfb8      	it	lt
 8010db8:	9204      	strlt	r2, [sp, #16]
 8010dba:	7823      	ldrb	r3, [r4, #0]
 8010dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010dbe:	d10a      	bne.n	8010dd6 <_vfiprintf_r+0x156>
 8010dc0:	7863      	ldrb	r3, [r4, #1]
 8010dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dc4:	d132      	bne.n	8010e2c <_vfiprintf_r+0x1ac>
 8010dc6:	9b03      	ldr	r3, [sp, #12]
 8010dc8:	1d1a      	adds	r2, r3, #4
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	9203      	str	r2, [sp, #12]
 8010dce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010dd2:	3402      	adds	r4, #2
 8010dd4:	9305      	str	r3, [sp, #20]
 8010dd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010eac <_vfiprintf_r+0x22c>
 8010dda:	7821      	ldrb	r1, [r4, #0]
 8010ddc:	2203      	movs	r2, #3
 8010dde:	4650      	mov	r0, sl
 8010de0:	f7ef f9f6 	bl	80001d0 <memchr>
 8010de4:	b138      	cbz	r0, 8010df6 <_vfiprintf_r+0x176>
 8010de6:	9b04      	ldr	r3, [sp, #16]
 8010de8:	eba0 000a 	sub.w	r0, r0, sl
 8010dec:	2240      	movs	r2, #64	@ 0x40
 8010dee:	4082      	lsls	r2, r0
 8010df0:	4313      	orrs	r3, r2
 8010df2:	3401      	adds	r4, #1
 8010df4:	9304      	str	r3, [sp, #16]
 8010df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfa:	4829      	ldr	r0, [pc, #164]	@ (8010ea0 <_vfiprintf_r+0x220>)
 8010dfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e00:	2206      	movs	r2, #6
 8010e02:	f7ef f9e5 	bl	80001d0 <memchr>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d03f      	beq.n	8010e8a <_vfiprintf_r+0x20a>
 8010e0a:	4b26      	ldr	r3, [pc, #152]	@ (8010ea4 <_vfiprintf_r+0x224>)
 8010e0c:	bb1b      	cbnz	r3, 8010e56 <_vfiprintf_r+0x1d6>
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	3307      	adds	r3, #7
 8010e12:	f023 0307 	bic.w	r3, r3, #7
 8010e16:	3308      	adds	r3, #8
 8010e18:	9303      	str	r3, [sp, #12]
 8010e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e1c:	443b      	add	r3, r7
 8010e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e20:	e76a      	b.n	8010cf8 <_vfiprintf_r+0x78>
 8010e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e26:	460c      	mov	r4, r1
 8010e28:	2001      	movs	r0, #1
 8010e2a:	e7a8      	b.n	8010d7e <_vfiprintf_r+0xfe>
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	3401      	adds	r4, #1
 8010e30:	9305      	str	r3, [sp, #20]
 8010e32:	4619      	mov	r1, r3
 8010e34:	f04f 0c0a 	mov.w	ip, #10
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e3e:	3a30      	subs	r2, #48	@ 0x30
 8010e40:	2a09      	cmp	r2, #9
 8010e42:	d903      	bls.n	8010e4c <_vfiprintf_r+0x1cc>
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d0c6      	beq.n	8010dd6 <_vfiprintf_r+0x156>
 8010e48:	9105      	str	r1, [sp, #20]
 8010e4a:	e7c4      	b.n	8010dd6 <_vfiprintf_r+0x156>
 8010e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e50:	4604      	mov	r4, r0
 8010e52:	2301      	movs	r3, #1
 8010e54:	e7f0      	b.n	8010e38 <_vfiprintf_r+0x1b8>
 8010e56:	ab03      	add	r3, sp, #12
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	4b12      	ldr	r3, [pc, #72]	@ (8010ea8 <_vfiprintf_r+0x228>)
 8010e5e:	a904      	add	r1, sp, #16
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7fb fa43 	bl	800c2ec <_printf_float>
 8010e66:	4607      	mov	r7, r0
 8010e68:	1c78      	adds	r0, r7, #1
 8010e6a:	d1d6      	bne.n	8010e1a <_vfiprintf_r+0x19a>
 8010e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e6e:	07d9      	lsls	r1, r3, #31
 8010e70:	d405      	bmi.n	8010e7e <_vfiprintf_r+0x1fe>
 8010e72:	89ab      	ldrh	r3, [r5, #12]
 8010e74:	059a      	lsls	r2, r3, #22
 8010e76:	d402      	bmi.n	8010e7e <_vfiprintf_r+0x1fe>
 8010e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e7a:	f7fc fa1d 	bl	800d2b8 <__retarget_lock_release_recursive>
 8010e7e:	89ab      	ldrh	r3, [r5, #12]
 8010e80:	065b      	lsls	r3, r3, #25
 8010e82:	f53f af1f 	bmi.w	8010cc4 <_vfiprintf_r+0x44>
 8010e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e88:	e71e      	b.n	8010cc8 <_vfiprintf_r+0x48>
 8010e8a:	ab03      	add	r3, sp, #12
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	462a      	mov	r2, r5
 8010e90:	4b05      	ldr	r3, [pc, #20]	@ (8010ea8 <_vfiprintf_r+0x228>)
 8010e92:	a904      	add	r1, sp, #16
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7fb fcc1 	bl	800c81c <_printf_i>
 8010e9a:	e7e4      	b.n	8010e66 <_vfiprintf_r+0x1e6>
 8010e9c:	08011711 	.word	0x08011711
 8010ea0:	0801171b 	.word	0x0801171b
 8010ea4:	0800c2ed 	.word	0x0800c2ed
 8010ea8:	08010c5d 	.word	0x08010c5d
 8010eac:	08011717 	.word	0x08011717

08010eb0 <__swbuf_r>:
 8010eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb2:	460e      	mov	r6, r1
 8010eb4:	4614      	mov	r4, r2
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	b118      	cbz	r0, 8010ec2 <__swbuf_r+0x12>
 8010eba:	6a03      	ldr	r3, [r0, #32]
 8010ebc:	b90b      	cbnz	r3, 8010ec2 <__swbuf_r+0x12>
 8010ebe:	f7fc f86d 	bl	800cf9c <__sinit>
 8010ec2:	69a3      	ldr	r3, [r4, #24]
 8010ec4:	60a3      	str	r3, [r4, #8]
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	071a      	lsls	r2, r3, #28
 8010eca:	d501      	bpl.n	8010ed0 <__swbuf_r+0x20>
 8010ecc:	6923      	ldr	r3, [r4, #16]
 8010ece:	b943      	cbnz	r3, 8010ee2 <__swbuf_r+0x32>
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f000 f82a 	bl	8010f2c <__swsetup_r>
 8010ed8:	b118      	cbz	r0, 8010ee2 <__swbuf_r+0x32>
 8010eda:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ede:	4638      	mov	r0, r7
 8010ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee2:	6823      	ldr	r3, [r4, #0]
 8010ee4:	6922      	ldr	r2, [r4, #16]
 8010ee6:	1a98      	subs	r0, r3, r2
 8010ee8:	6963      	ldr	r3, [r4, #20]
 8010eea:	b2f6      	uxtb	r6, r6
 8010eec:	4283      	cmp	r3, r0
 8010eee:	4637      	mov	r7, r6
 8010ef0:	dc05      	bgt.n	8010efe <__swbuf_r+0x4e>
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f7ff f95f 	bl	80101b8 <_fflush_r>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d1ed      	bne.n	8010eda <__swbuf_r+0x2a>
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	3b01      	subs	r3, #1
 8010f02:	60a3      	str	r3, [r4, #8]
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	1c5a      	adds	r2, r3, #1
 8010f08:	6022      	str	r2, [r4, #0]
 8010f0a:	701e      	strb	r6, [r3, #0]
 8010f0c:	6962      	ldr	r2, [r4, #20]
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d004      	beq.n	8010f1e <__swbuf_r+0x6e>
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	07db      	lsls	r3, r3, #31
 8010f18:	d5e1      	bpl.n	8010ede <__swbuf_r+0x2e>
 8010f1a:	2e0a      	cmp	r6, #10
 8010f1c:	d1df      	bne.n	8010ede <__swbuf_r+0x2e>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	4628      	mov	r0, r5
 8010f22:	f7ff f949 	bl	80101b8 <_fflush_r>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d0d9      	beq.n	8010ede <__swbuf_r+0x2e>
 8010f2a:	e7d6      	b.n	8010eda <__swbuf_r+0x2a>

08010f2c <__swsetup_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4b29      	ldr	r3, [pc, #164]	@ (8010fd4 <__swsetup_r+0xa8>)
 8010f30:	4605      	mov	r5, r0
 8010f32:	6818      	ldr	r0, [r3, #0]
 8010f34:	460c      	mov	r4, r1
 8010f36:	b118      	cbz	r0, 8010f40 <__swsetup_r+0x14>
 8010f38:	6a03      	ldr	r3, [r0, #32]
 8010f3a:	b90b      	cbnz	r3, 8010f40 <__swsetup_r+0x14>
 8010f3c:	f7fc f82e 	bl	800cf9c <__sinit>
 8010f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f44:	0719      	lsls	r1, r3, #28
 8010f46:	d422      	bmi.n	8010f8e <__swsetup_r+0x62>
 8010f48:	06da      	lsls	r2, r3, #27
 8010f4a:	d407      	bmi.n	8010f5c <__swsetup_r+0x30>
 8010f4c:	2209      	movs	r2, #9
 8010f4e:	602a      	str	r2, [r5, #0]
 8010f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f54:	81a3      	strh	r3, [r4, #12]
 8010f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f5a:	e033      	b.n	8010fc4 <__swsetup_r+0x98>
 8010f5c:	0758      	lsls	r0, r3, #29
 8010f5e:	d512      	bpl.n	8010f86 <__swsetup_r+0x5a>
 8010f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f62:	b141      	cbz	r1, 8010f76 <__swsetup_r+0x4a>
 8010f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f68:	4299      	cmp	r1, r3
 8010f6a:	d002      	beq.n	8010f72 <__swsetup_r+0x46>
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	f7fc fff7 	bl	800df60 <_free_r>
 8010f72:	2300      	movs	r3, #0
 8010f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f76:	89a3      	ldrh	r3, [r4, #12]
 8010f78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f7c:	81a3      	strh	r3, [r4, #12]
 8010f7e:	2300      	movs	r3, #0
 8010f80:	6063      	str	r3, [r4, #4]
 8010f82:	6923      	ldr	r3, [r4, #16]
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	89a3      	ldrh	r3, [r4, #12]
 8010f88:	f043 0308 	orr.w	r3, r3, #8
 8010f8c:	81a3      	strh	r3, [r4, #12]
 8010f8e:	6923      	ldr	r3, [r4, #16]
 8010f90:	b94b      	cbnz	r3, 8010fa6 <__swsetup_r+0x7a>
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f9c:	d003      	beq.n	8010fa6 <__swsetup_r+0x7a>
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f000 f883 	bl	80110ac <__smakebuf_r>
 8010fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010faa:	f013 0201 	ands.w	r2, r3, #1
 8010fae:	d00a      	beq.n	8010fc6 <__swsetup_r+0x9a>
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	60a2      	str	r2, [r4, #8]
 8010fb4:	6962      	ldr	r2, [r4, #20]
 8010fb6:	4252      	negs	r2, r2
 8010fb8:	61a2      	str	r2, [r4, #24]
 8010fba:	6922      	ldr	r2, [r4, #16]
 8010fbc:	b942      	cbnz	r2, 8010fd0 <__swsetup_r+0xa4>
 8010fbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fc2:	d1c5      	bne.n	8010f50 <__swsetup_r+0x24>
 8010fc4:	bd38      	pop	{r3, r4, r5, pc}
 8010fc6:	0799      	lsls	r1, r3, #30
 8010fc8:	bf58      	it	pl
 8010fca:	6962      	ldrpl	r2, [r4, #20]
 8010fcc:	60a2      	str	r2, [r4, #8]
 8010fce:	e7f4      	b.n	8010fba <__swsetup_r+0x8e>
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	e7f7      	b.n	8010fc4 <__swsetup_r+0x98>
 8010fd4:	200001b4 	.word	0x200001b4

08010fd8 <_raise_r>:
 8010fd8:	291f      	cmp	r1, #31
 8010fda:	b538      	push	{r3, r4, r5, lr}
 8010fdc:	4605      	mov	r5, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	d904      	bls.n	8010fec <_raise_r+0x14>
 8010fe2:	2316      	movs	r3, #22
 8010fe4:	6003      	str	r3, [r0, #0]
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fee:	b112      	cbz	r2, 8010ff6 <_raise_r+0x1e>
 8010ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ff4:	b94b      	cbnz	r3, 801100a <_raise_r+0x32>
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f000 f830 	bl	801105c <_getpid_r>
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	4601      	mov	r1, r0
 8011000:	4628      	mov	r0, r5
 8011002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011006:	f000 b817 	b.w	8011038 <_kill_r>
 801100a:	2b01      	cmp	r3, #1
 801100c:	d00a      	beq.n	8011024 <_raise_r+0x4c>
 801100e:	1c59      	adds	r1, r3, #1
 8011010:	d103      	bne.n	801101a <_raise_r+0x42>
 8011012:	2316      	movs	r3, #22
 8011014:	6003      	str	r3, [r0, #0]
 8011016:	2001      	movs	r0, #1
 8011018:	e7e7      	b.n	8010fea <_raise_r+0x12>
 801101a:	2100      	movs	r1, #0
 801101c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011020:	4620      	mov	r0, r4
 8011022:	4798      	blx	r3
 8011024:	2000      	movs	r0, #0
 8011026:	e7e0      	b.n	8010fea <_raise_r+0x12>

08011028 <raise>:
 8011028:	4b02      	ldr	r3, [pc, #8]	@ (8011034 <raise+0xc>)
 801102a:	4601      	mov	r1, r0
 801102c:	6818      	ldr	r0, [r3, #0]
 801102e:	f7ff bfd3 	b.w	8010fd8 <_raise_r>
 8011032:	bf00      	nop
 8011034:	200001b4 	.word	0x200001b4

08011038 <_kill_r>:
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	4d07      	ldr	r5, [pc, #28]	@ (8011058 <_kill_r+0x20>)
 801103c:	2300      	movs	r3, #0
 801103e:	4604      	mov	r4, r0
 8011040:	4608      	mov	r0, r1
 8011042:	4611      	mov	r1, r2
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	f7f0 fc95 	bl	8001974 <_kill>
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	d102      	bne.n	8011054 <_kill_r+0x1c>
 801104e:	682b      	ldr	r3, [r5, #0]
 8011050:	b103      	cbz	r3, 8011054 <_kill_r+0x1c>
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	bd38      	pop	{r3, r4, r5, pc}
 8011056:	bf00      	nop
 8011058:	200023a4 	.word	0x200023a4

0801105c <_getpid_r>:
 801105c:	f7f0 bc82 	b.w	8001964 <_getpid>

08011060 <__swhatbuf_r>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	460c      	mov	r4, r1
 8011064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011068:	2900      	cmp	r1, #0
 801106a:	b096      	sub	sp, #88	@ 0x58
 801106c:	4615      	mov	r5, r2
 801106e:	461e      	mov	r6, r3
 8011070:	da0d      	bge.n	801108e <__swhatbuf_r+0x2e>
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011078:	f04f 0100 	mov.w	r1, #0
 801107c:	bf14      	ite	ne
 801107e:	2340      	movne	r3, #64	@ 0x40
 8011080:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011084:	2000      	movs	r0, #0
 8011086:	6031      	str	r1, [r6, #0]
 8011088:	602b      	str	r3, [r5, #0]
 801108a:	b016      	add	sp, #88	@ 0x58
 801108c:	bd70      	pop	{r4, r5, r6, pc}
 801108e:	466a      	mov	r2, sp
 8011090:	f000 f848 	bl	8011124 <_fstat_r>
 8011094:	2800      	cmp	r0, #0
 8011096:	dbec      	blt.n	8011072 <__swhatbuf_r+0x12>
 8011098:	9901      	ldr	r1, [sp, #4]
 801109a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801109e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80110a2:	4259      	negs	r1, r3
 80110a4:	4159      	adcs	r1, r3
 80110a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110aa:	e7eb      	b.n	8011084 <__swhatbuf_r+0x24>

080110ac <__smakebuf_r>:
 80110ac:	898b      	ldrh	r3, [r1, #12]
 80110ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110b0:	079d      	lsls	r5, r3, #30
 80110b2:	4606      	mov	r6, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	d507      	bpl.n	80110c8 <__smakebuf_r+0x1c>
 80110b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	6123      	str	r3, [r4, #16]
 80110c0:	2301      	movs	r3, #1
 80110c2:	6163      	str	r3, [r4, #20]
 80110c4:	b003      	add	sp, #12
 80110c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c8:	ab01      	add	r3, sp, #4
 80110ca:	466a      	mov	r2, sp
 80110cc:	f7ff ffc8 	bl	8011060 <__swhatbuf_r>
 80110d0:	9f00      	ldr	r7, [sp, #0]
 80110d2:	4605      	mov	r5, r0
 80110d4:	4639      	mov	r1, r7
 80110d6:	4630      	mov	r0, r6
 80110d8:	f7fc ffb6 	bl	800e048 <_malloc_r>
 80110dc:	b948      	cbnz	r0, 80110f2 <__smakebuf_r+0x46>
 80110de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e2:	059a      	lsls	r2, r3, #22
 80110e4:	d4ee      	bmi.n	80110c4 <__smakebuf_r+0x18>
 80110e6:	f023 0303 	bic.w	r3, r3, #3
 80110ea:	f043 0302 	orr.w	r3, r3, #2
 80110ee:	81a3      	strh	r3, [r4, #12]
 80110f0:	e7e2      	b.n	80110b8 <__smakebuf_r+0xc>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	6020      	str	r0, [r4, #0]
 80110f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110fa:	81a3      	strh	r3, [r4, #12]
 80110fc:	9b01      	ldr	r3, [sp, #4]
 80110fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011102:	b15b      	cbz	r3, 801111c <__smakebuf_r+0x70>
 8011104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011108:	4630      	mov	r0, r6
 801110a:	f000 f81d 	bl	8011148 <_isatty_r>
 801110e:	b128      	cbz	r0, 801111c <__smakebuf_r+0x70>
 8011110:	89a3      	ldrh	r3, [r4, #12]
 8011112:	f023 0303 	bic.w	r3, r3, #3
 8011116:	f043 0301 	orr.w	r3, r3, #1
 801111a:	81a3      	strh	r3, [r4, #12]
 801111c:	89a3      	ldrh	r3, [r4, #12]
 801111e:	431d      	orrs	r5, r3
 8011120:	81a5      	strh	r5, [r4, #12]
 8011122:	e7cf      	b.n	80110c4 <__smakebuf_r+0x18>

08011124 <_fstat_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d07      	ldr	r5, [pc, #28]	@ (8011144 <_fstat_r+0x20>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	4611      	mov	r1, r2
 8011130:	602b      	str	r3, [r5, #0]
 8011132:	f7f0 fc7f 	bl	8001a34 <_fstat>
 8011136:	1c43      	adds	r3, r0, #1
 8011138:	d102      	bne.n	8011140 <_fstat_r+0x1c>
 801113a:	682b      	ldr	r3, [r5, #0]
 801113c:	b103      	cbz	r3, 8011140 <_fstat_r+0x1c>
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	bd38      	pop	{r3, r4, r5, pc}
 8011142:	bf00      	nop
 8011144:	200023a4 	.word	0x200023a4

08011148 <_isatty_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4d06      	ldr	r5, [pc, #24]	@ (8011164 <_isatty_r+0x1c>)
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	4608      	mov	r0, r1
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	f7f0 fc7e 	bl	8001a54 <_isatty>
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	d102      	bne.n	8011162 <_isatty_r+0x1a>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	b103      	cbz	r3, 8011162 <_isatty_r+0x1a>
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	200023a4 	.word	0x200023a4

08011168 <fmaxf>:
 8011168:	b508      	push	{r3, lr}
 801116a:	ed2d 8b02 	vpush	{d8}
 801116e:	eeb0 8a40 	vmov.f32	s16, s0
 8011172:	eef0 8a60 	vmov.f32	s17, s1
 8011176:	f000 f831 	bl	80111dc <__fpclassifyf>
 801117a:	b930      	cbnz	r0, 801118a <fmaxf+0x22>
 801117c:	eeb0 8a68 	vmov.f32	s16, s17
 8011180:	eeb0 0a48 	vmov.f32	s0, s16
 8011184:	ecbd 8b02 	vpop	{d8}
 8011188:	bd08      	pop	{r3, pc}
 801118a:	eeb0 0a68 	vmov.f32	s0, s17
 801118e:	f000 f825 	bl	80111dc <__fpclassifyf>
 8011192:	2800      	cmp	r0, #0
 8011194:	d0f4      	beq.n	8011180 <fmaxf+0x18>
 8011196:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	dded      	ble.n	801117c <fmaxf+0x14>
 80111a0:	e7ee      	b.n	8011180 <fmaxf+0x18>

080111a2 <fminf>:
 80111a2:	b508      	push	{r3, lr}
 80111a4:	ed2d 8b02 	vpush	{d8}
 80111a8:	eeb0 8a40 	vmov.f32	s16, s0
 80111ac:	eef0 8a60 	vmov.f32	s17, s1
 80111b0:	f000 f814 	bl	80111dc <__fpclassifyf>
 80111b4:	b930      	cbnz	r0, 80111c4 <fminf+0x22>
 80111b6:	eeb0 8a68 	vmov.f32	s16, s17
 80111ba:	eeb0 0a48 	vmov.f32	s0, s16
 80111be:	ecbd 8b02 	vpop	{d8}
 80111c2:	bd08      	pop	{r3, pc}
 80111c4:	eeb0 0a68 	vmov.f32	s0, s17
 80111c8:	f000 f808 	bl	80111dc <__fpclassifyf>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d0f4      	beq.n	80111ba <fminf+0x18>
 80111d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	d5ed      	bpl.n	80111b6 <fminf+0x14>
 80111da:	e7ee      	b.n	80111ba <fminf+0x18>

080111dc <__fpclassifyf>:
 80111dc:	ee10 3a10 	vmov	r3, s0
 80111e0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80111e4:	d00d      	beq.n	8011202 <__fpclassifyf+0x26>
 80111e6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80111ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80111ee:	d30a      	bcc.n	8011206 <__fpclassifyf+0x2a>
 80111f0:	4b07      	ldr	r3, [pc, #28]	@ (8011210 <__fpclassifyf+0x34>)
 80111f2:	1e42      	subs	r2, r0, #1
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d908      	bls.n	801120a <__fpclassifyf+0x2e>
 80111f8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80111fc:	4258      	negs	r0, r3
 80111fe:	4158      	adcs	r0, r3
 8011200:	4770      	bx	lr
 8011202:	2002      	movs	r0, #2
 8011204:	4770      	bx	lr
 8011206:	2004      	movs	r0, #4
 8011208:	4770      	bx	lr
 801120a:	2003      	movs	r0, #3
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	007ffffe 	.word	0x007ffffe

08011214 <_init>:
 8011214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011216:	bf00      	nop
 8011218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801121a:	bc08      	pop	{r3}
 801121c:	469e      	mov	lr, r3
 801121e:	4770      	bx	lr

08011220 <_fini>:
 8011220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011222:	bf00      	nop
 8011224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011226:	bc08      	pop	{r3}
 8011228:	469e      	mov	lr, r3
 801122a:	4770      	bx	lr
